["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__29499_SHARP_){\nreturn (max === p1__29499_SHARP_);\n}),coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__29504 = arguments.length;\nswitch (G__29504) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4839__auto__ = [];\nvar len__4818__auto___29647 = arguments.length;\nvar i__4819__auto___29649 = (0);\nwhile(true){\nif((i__4819__auto___29649 < len__4818__auto___29647)){\nargs_arr__4839__auto__.push((arguments[i__4819__auto___29649]));\n\nvar G__29650 = (i__4819__auto___29649 + (1));\ni__4819__auto___29649 = G__29650;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4840__auto__ = (new cljs.core.IndexedSeq(args_arr__4839__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4840__auto__);\n\n}\n});\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.union.cljs$lang$applyTo = (function (seq29501){\nvar G__29502 = cljs.core.first(seq29501);\nvar seq29501__$1 = cljs.core.next(seq29501);\nvar G__29503 = cljs.core.first(seq29501__$1);\nvar seq29501__$2 = cljs.core.next(seq29501__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__29502,G__29503,seq29501__$2);\n}));\n\n(clojure.set.union.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__29514 = arguments.length;\nswitch (G__29514) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4839__auto__ = [];\nvar len__4818__auto___29665 = arguments.length;\nvar i__4819__auto___29666 = (0);\nwhile(true){\nif((i__4819__auto___29666 < len__4818__auto___29665)){\nargs_arr__4839__auto__.push((arguments[i__4819__auto___29666]));\n\nvar G__29669 = (i__4819__auto___29666 + (1));\ni__4819__auto___29666 = G__29669;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4840__auto__ = (new cljs.core.IndexedSeq(args_arr__4839__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4840__auto__);\n\n}\n});\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__29675 = s2;\nvar G__29676 = s1;\ns1 = G__29675;\ns2 = G__29676;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__29505_SHARP_){\nreturn (- cljs.core.count(p1__29505_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.intersection.cljs$lang$applyTo = (function (seq29511){\nvar G__29512 = cljs.core.first(seq29511);\nvar seq29511__$1 = cljs.core.next(seq29511);\nvar G__29513 = cljs.core.first(seq29511__$1);\nvar seq29511__$2 = cljs.core.next(seq29511__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__29512,G__29513,seq29511__$2);\n}));\n\n(clojure.set.intersection.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__29522 = arguments.length;\nswitch (G__29522) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4839__auto__ = [];\nvar len__4818__auto___29691 = arguments.length;\nvar i__4819__auto___29694 = (0);\nwhile(true){\nif((i__4819__auto___29694 < len__4818__auto___29691)){\nargs_arr__4839__auto__.push((arguments[i__4819__auto___29694]));\n\nvar G__29695 = (i__4819__auto___29694 + (1));\ni__4819__auto___29694 = G__29695;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4840__auto__ = (new cljs.core.IndexedSeq(args_arr__4839__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4840__auto__);\n\n}\n});\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n}));\n\n/** @this {Function} */\n(clojure.set.difference.cljs$lang$applyTo = (function (seq29519){\nvar G__29520 = cljs.core.first(seq29519);\nvar seq29519__$1 = cljs.core.next(seq29519);\nvar G__29521 = cljs.core.first(seq29519__$1);\nvar seq29519__$2 = cljs.core.next(seq29519__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__29520,G__29521,seq29519__$2);\n}));\n\n(clojure.set.difference.cljs$lang$maxFixedArity = (2));\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__29523_SHARP_){\nreturn cljs.core.select_keys(p1__29523_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__29524){\nvar vec__29526 = p__29524;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29526,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29526,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__29530_SHARP_){\nreturn clojure.set.rename_keys(p1__29530_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__29531){\nvar vec__29532 = p__29531;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29532,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29532,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__29590 = arguments.length;\nswitch (G__29590) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__29591 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29591,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29591,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__29594 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__29594) : idx.call(null,G__29594));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__29565_SHARP_,p2__29566_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__29565_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__29566_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n}));\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__29595 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29595,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29595,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29595,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__29598 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__29598) : idx.call(null,G__29598));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__29568_SHARP_,p2__29569_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__29568_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__29569_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n}));\n\n(clojure.set.join.cljs$lang$maxFixedArity = 3);\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__29602_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__29602_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__29629_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__29629_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^N","~$goog","^O"],"~:seen",["^F",[]],"~:uses",null,"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^H"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^O","^N"]],"^K","^H","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1648129701707,"^I",["^ ","^N","^N","^O","^O"],"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply","cljs.core/max-key","cljs.core/cons","p1__29499#","cljs.core.remove","var_args","G__29504","clojure.set/union","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq29501","G__29502","cljs.core/first","cljs.core/next","G__29503","self__4805__auto__","s1","s2","cljs.core/count","cljs.core.reduce","cljs.core/conj","sets","bubbled-sets","cljs.core.conj","cljs.core/into","cljs.core/rest","G__29514","clojure.set/intersection","seq29511","G__29512","G__29513","result","item","cljs.core/contains?","cljs.core.disj","p1__29505#","G__29522","clojure.set/difference","seq29519","G__29520","G__29521","cljs.core/disj","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__29523#","cljs.core.map","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__29524","vec__29526","cljs.core.nth","m","old","new","cljs.core.assoc","cljs.core.get","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__29530#","clojure.set/index","x","ik","clojure.set/map-invert","p__29531","vec__29532","v","G__29590","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__29591","clojure.set.intersection","r","idx","ret","found","G__29594","p1__29565#","p2__29566#","cljs.core.merge","km","vec__29595","cljs.core/vals","G__29598","p1__29568#","p2__29569#","clojure.set/subset?","set1","set2","p1__29602#","cljs.core/every?","clojure.set/superset?","p1__29629#"]],"~:used-vars",["^F",["~$cljs.core/rest","~$clojure.set/intersection","~$clojure.set/project","~$clojure.set/index","~$cljs.core/keys","~$clojure.set/bubble-max-key","~$cljs.core/IndexedSeq","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/dissoc","~$cljs.core/max-key","~$cljs.core/set","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/map","~$clojure.set/rename-keys","~$cljs.core/vals","~$cljs.core/get","~$cljs.core/remove","~$clojure.set/difference","~$clojure.set/superset?","~$cljs.core/nth","~$clojure.set/subset?","~$cljs.core/next","~$cljs.core/select-keys","~$cljs.core/disj","~$cljs.core/cons","~$cljs.core/assoc","~$clojure.set/union","~$clojure.set/rename","~$clojure.set/map-invert","~$cljs.core/first","~$clojure.set/join","~$cljs.core/merge","~$cljs.core/every?","~$clojure.set/select","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^Z","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^O","~$goog.dom.HtmlElement"]]],["^Z","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","~$goog.array","~$goog.asserts"]]],["^Z","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2=","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^Z","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2A"]]],["^Z","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>"]]],["^Z","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>"]]],"~:SHADOW-TIMESTAMP",[1647940543000,1647940543000,1633031471000],["^Z","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>","~$goog.reflect"]]],["^Z","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>","~$goog.fs.blob","^2B","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2D","^2E","^2F","^2G"]]],["^Z","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2=","^2>","~$goog.html.SafeUrl","^2F","^2G","^2A"]]],["^Z","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2K","~$goog.html.SafeStyle","^2M","^2C","~$goog.html.uncheckedconversions","^2F","^2A"]]],["^Z","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^Z","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2=","^2>","~$goog.dom.TagName","~$goog.dom.tags","^2K","^2Q","~$goog.html.SafeStyleSheet","^2M","^2C","^2L","^2D","^2E","~$goog.labs.userAgent.browser","^2@","^2F","^2G","^2A"]]],["^Z","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2@"]]],["^Z","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2="]]],["^Z","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^Z","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2=","^2>","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^Z","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",[]]],["^Z","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2=","^2@"]]],["^Z","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","~$goog.dom.safe","^2R","^2F","^2A"]]],["^Z","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2A"]]],["^Z","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2=","^2>","^2O","~$goog.math"]]],["^Z","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>","^2P","^2K","^2Q","^2W","^2M","^2C","^2F","^2A","^2D"]]],["^Z","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O"]]],["^Z","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","~$goog.math.Long","~$goog.math.Integer","^2[","^2@","^2=","~$goog.Uri","~$goog.string.StringBuffer"]]],["^Z","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2F","^2G","^2L","^2>"]]],["^Z","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2F","^2Q","^2G","^2=","^2@","^2>","^2A"]]],["^Z","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2I"]]],["^Z","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^N"]]],["^Z","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>","^2["]]],["^Z","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^28",["^ ","^29",null,"^2:",["^F",[]],"^2;",["^O","^2>","^2G"]]]]],"~:clj-info",["^ ","jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1633011066000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^I",["^ "],"^L",null,"^M",["^ ","^N","^N","^O","^O"],"^P",["^F",[]],"~:shadow/js-access-global",["^F",["Error"]],"^Q",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^T",["~$quote",["^T",[[],["~$s1"],["^43","~$s2"],["^43","^44","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^43"],["^43","^44"]],"^41",["^T",[[],["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"~:arglists-meta",["^T",[null,null,null,null]]]],"^G","^1Y","^6","clojure/set.cljs","^:",12,"^46",["^ ","^47",true,"^48",2,"^49",2,"^4:",[[],["^43"],["^43","^44"]],"^41",["^T",[[],["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^4;",["^T",[null,null,null,null]]],"^4:",[[],["^43"],["^43","^44"]],"~:protocol-impl",null,"^48",2,"^4;",["^T",[null,null,null,null]],"^8",1,"^47",true,"~:methods",[["^ ","^48",0,"^47",false,"~:tag","~$cljs.core/ISet"],["^ ","^48",1,"^47",false],["^ ","^48",2,"^47",false,"^4>",["^F",[null,"~$any"]]],["^ ","^48",2,"^47",true,"^4>",["^F",[null,"^4@"]]]],"^7",19,"^9",19,"^49",2,"~:fn-var",true,"^41",["^T",[[],["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^41",["^T",["^42",["^T",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^G","^1[","^6","clojure/set.cljs","^:",17,"^4:",["^T",[["~$m"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",97,"~:ret-tag",["^F",[null,"^4@"]],"^9",97,"^49",1,"^4A",true,"^41",["^T",["^42",["^T",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^41",["^T",["^42",["^T",[["~$xrel","~$yrel"],["^4E","^4F","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^46",["^ ","^47",false,"^48",3,"^49",3,"^4:",[["^4E","^4F"],["^4E","^4F","^4G"]],"^41",["^T",[["^4E","^4F"],["^4E","^4F","^4G"]]],"^4;",["^T",[null,null]]]],"^G","^21","^6","clojure/set.cljs","^:",11,"^46",["^ ","^47",false,"^48",3,"^49",3,"^4:",[["^4E","^4F"],["^4E","^4F","^4G"]],"^41",["^T",[["^4E","^4F"],["^4E","^4F","^4G"]]],"^4;",["^T",[null,null]]],"^4:",[["^4E","^4F"],["^4E","^4F","^4G"]],"^4<",null,"^48",3,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^4=",[["^ ","^48",2,"^47",false,"^4>",["^F",[null,"^4@","^4?"]]],["^ ","^48",3,"^47",false,"^4>",["^F",[null,"^4@"]]]],"^7",101,"^9",101,"^49",3,"^4A",true,"^41",["^T",[["^4E","^4F"],["^4E","^4F","^4G"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^41",["^T",["^42",["^T",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^G","^24","^6","clojure/set.cljs","^:",13,"^4:",["^T",[["^4I","^4J"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",61,"^4C",["^F",[null,"^4@"]],"^9",61,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["^4I","^4J"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^41",["^T",["^42",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]]]],"^;","Return a set that is the intersection of the input sets","^46",["^ ","^47",true,"^48",2,"^49",2,"^4:",[["^43"],["^43","^44"]],"^41",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^4;",["^T",[null,null,null]]]],"^G","^1;","^6","clojure/set.cljs","^:",19,"^46",["^ ","^47",true,"^48",2,"^49",2,"^4:",[["^43"],["^43","^44"]],"^41",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^4;",["^T",[null,null,null]]],"^4:",[["^43"],["^43","^44"]],"^4<",null,"^48",2,"^4;",["^T",[null,null,null]],"^8",1,"^47",true,"^4=",[["^ ","^48",1,"^47",false],["^ ","^48",2,"^47",false,"^4>",["^F",[null,"^4@"]]],["^ ","^48",2,"^47",true,"^4>",["^F",[null,"^4@"]]]],"^7",31,"^9",31,"^49",2,"^4A",true,"^41",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^41",["^T",["^42",["^T",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^G","^1Q","^6","clojure/set.cljs","^:",16,"^4:",["^T",[["^4M","^4N"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",137,"^4C","~$boolean","^9",137,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["^4M","^4N"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^41",["^T",["^42",["^T",[["^4E","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^G","^1=","^6","clojure/set.cljs","^:",12,"^4:",["^T",[["^4E","^4Q"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",87,"^4C",["^F",[null,"^4@"]],"^9",87,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["^4E","^4Q"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^41",["^T",["^42",["^T",[["~$k","~$coll"]]]]]],"^4S",true,"^G","^1?","^6","clojure/set.cljs","^:",22,"^4:",["^T",[["~$k","^4T"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",13,"^4C","~$clj","^9",13,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["~$k","^4T"]]]]]],"~$subset?",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^41",["^T",["^42",["^T",[["^4M","^4N"]]]]],"^;","Is set1 a subset of set2?"],"^G","^1S","^6","clojure/set.cljs","^:",14,"^4:",["^T",[["^4M","^4N"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",131,"^4C","^4O","^9",131,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["^4M","^4N"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^41",["^T",["^42",["^T",[["^4E","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^G","^1Z","^6","clojure/set.cljs","^:",13,"^4:",["^T",[["^4E","^4X"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",82,"^4C",["^F",["^4U","^4@","^4?","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["^4E","^4X"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^41",["^T",["^42",["^T",[["~$map","^4X"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^G","^1L","^6","clojure/set.cljs","^:",18,"^4:",["^T",[["^50","^4X"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",72,"^4C",["^F",[null,"^4@"]],"^9",72,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["^50","^4X"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^41",["^T",["^42",["^T",[["^4E","^4Q"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^G","^1<","^6","clojure/set.cljs","^:",14,"^4:",["^T",[["^4E","^4Q"]]],"^4<",null,"^4;",["^T",[null,null]],"^8",1,"^47",false,"^7",67,"^4C",["^F",["^4U","^4@","^4?","^4Y","^4Z"]],"^9",67,"^49",2,"^4A",true,"^41",["^T",["^42",["^T",[["^4E","^4Q"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^40",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^41",["^T",["^42",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^46",["^ ","^47",true,"^48",2,"^49",2,"^4:",[["^43"],["^43","^44"]],"^41",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^4;",["^T",[null,null,null]]]],"^G","^1P","^6","clojure/set.cljs","^:",17,"^46",["^ ","^47",true,"^48",2,"^49",2,"^4:",[["^43"],["^43","^44"]],"^41",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^4;",["^T",[null,null,null]]],"^4:",[["^43"],["^43","^44"]],"^4<",null,"^48",2,"^4;",["^T",[null,null,null]],"^8",1,"^47",true,"^4=",[["^ ","^48",1,"^47",false],["^ ","^48",2,"^47",false,"^4>",["^F",[null,"^4@"]]],["^ ","^48",2,"^47",true,"^4>",["^F",[null,"^4@"]]]],"^7",46,"^9",46,"^49",2,"^4A",true,"^41",["^T",[["^43"],["^43","^44"],["^43","^44","~$&","^45"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^R",["^ ","^N","^N"],"^V",["^ "],"^W",["^ "],"^X",["^O","^N"]],"^K","^H","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^27",[["^55","~:static-fns"],true,["^55","~:shadow-tweaks"],null,["^55","~:source-map-inline"],null,["^55","~:elide-asserts"],false,["^55","~:optimize-constants"],null,["^55","^11"],null,["^55","~:external-config"],null,["^55","~:tooling-config"],null,["^55","~:emit-constants"],null,["^55","~:load-tests"],null,["^55","~:form-size-threshold"],null,["^55","~:data-readers"],null,["^55","~:infer-externs"],"~:auto",["^55","^13"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^55","~:fn-invoke-direct"],null,["^55","~:source-map"],"/dev/null"]]]