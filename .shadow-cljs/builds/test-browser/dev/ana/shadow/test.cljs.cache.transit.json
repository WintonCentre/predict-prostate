["^ ","~:output",["^ ","~:js","goog.provide('shadow.test');\n/**\n * like ct/test-vars-block but more generic\n * groups vars by namespace, executes fixtures\n */\nshadow.test.test_vars_grouped_block = (function shadow$test$test_vars_grouped_block(vars){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p__45101){\nvar vec__45112 = p__45101;\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45112,(0),null);\nvar vars__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45112,(1),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"begin-test-ns\",\"begin-test-ns\",-1701237033),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n}),(function (){\nreturn cljs.test.block((function (){var env = cljs.test.get_current_env();\nvar once_fixtures = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167),ns], null));\nvar each_fixtures = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977),ns], null));\nvar G__45125 = cljs.test.execution_strategy(once_fixtures,each_fixtures);\nvar G__45125__$1 = (((G__45125 instanceof cljs.core.Keyword))?G__45125.fqn:null);\nswitch (G__45125__$1) {\ncase \"async\":\nreturn cljs.test.wrap_map_fixtures(once_fixtures,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.test.wrap_map_fixtures,each_fixtures),cljs.test.test_var_block),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"test\",\"test\",577538877),cljs.core.meta),vars__$1)], 0)));\n\nbreak;\ncase \"sync\":\nvar each_fixture_fn = cljs.test.join_fixtures(each_fixtures);\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nvar G__45132 = (function (){\nvar seq__45145 = cljs.core.seq(vars__$1);\nvar chunk__45146 = null;\nvar count__45147 = (0);\nvar i__45148 = (0);\nwhile(true){\nif((i__45148 < count__45147)){\nvar v = chunk__45146.cljs$core$IIndexed$_nth$arity$2(null,i__45148);\nvar temp__5753__auto___45266 = new cljs.core.Keyword(null,\"test\",\"test\",577538877).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nif(cljs.core.truth_(temp__5753__auto___45266)){\nvar t_45267 = temp__5753__auto___45266;\nvar G__45156_45268 = ((function (seq__45145,chunk__45146,count__45147,i__45148,t_45267,temp__5753__auto___45266,v,each_fixture_fn,G__45125,G__45125__$1,env,once_fixtures,each_fixtures,vec__45112,ns,vars__$1){\nreturn (function (){\nreturn cljs.test.run_block(cljs.test.test_var_block_STAR_(v,cljs.test.disable_async(t_45267)));\n});})(seq__45145,chunk__45146,count__45147,i__45148,t_45267,temp__5753__auto___45266,v,each_fixture_fn,G__45125,G__45125__$1,env,once_fixtures,each_fixtures,vec__45112,ns,vars__$1))\n;\n(each_fixture_fn.cljs$core$IFn$_invoke$arity$1 ? each_fixture_fn.cljs$core$IFn$_invoke$arity$1(G__45156_45268) : each_fixture_fn.call(null,G__45156_45268));\n} else {\n}\n\n\nvar G__45270 = seq__45145;\nvar G__45271 = chunk__45146;\nvar G__45272 = count__45147;\nvar G__45273 = (i__45148 + (1));\nseq__45145 = G__45270;\nchunk__45146 = G__45271;\ncount__45147 = G__45272;\ni__45148 = G__45273;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__45145);\nif(temp__5753__auto__){\nvar seq__45145__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__45145__$1)){\nvar c__4638__auto__ = cljs.core.chunk_first(seq__45145__$1);\nvar G__45275 = cljs.core.chunk_rest(seq__45145__$1);\nvar G__45276 = c__4638__auto__;\nvar G__45277 = cljs.core.count(c__4638__auto__);\nvar G__45278 = (0);\nseq__45145 = G__45275;\nchunk__45146 = G__45276;\ncount__45147 = G__45277;\ni__45148 = G__45278;\ncontinue;\n} else {\nvar v = cljs.core.first(seq__45145__$1);\nvar temp__5753__auto___45279__$1 = new cljs.core.Keyword(null,\"test\",\"test\",577538877).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nif(cljs.core.truth_(temp__5753__auto___45279__$1)){\nvar t_45280 = temp__5753__auto___45279__$1;\nvar G__45157_45281 = ((function (seq__45145,chunk__45146,count__45147,i__45148,t_45280,temp__5753__auto___45279__$1,v,seq__45145__$1,temp__5753__auto__,each_fixture_fn,G__45125,G__45125__$1,env,once_fixtures,each_fixtures,vec__45112,ns,vars__$1){\nreturn (function (){\nreturn cljs.test.run_block(cljs.test.test_var_block_STAR_(v,cljs.test.disable_async(t_45280)));\n});})(seq__45145,chunk__45146,count__45147,i__45148,t_45280,temp__5753__auto___45279__$1,v,seq__45145__$1,temp__5753__auto__,each_fixture_fn,G__45125,G__45125__$1,env,once_fixtures,each_fixtures,vec__45112,ns,vars__$1))\n;\n(each_fixture_fn.cljs$core$IFn$_invoke$arity$1 ? each_fixture_fn.cljs$core$IFn$_invoke$arity$1(G__45157_45281) : each_fixture_fn.call(null,G__45157_45281));\n} else {\n}\n\n\nvar G__45282 = cljs.core.next(seq__45145__$1);\nvar G__45283 = null;\nvar G__45284 = (0);\nvar G__45285 = (0);\nseq__45145 = G__45282;\nchunk__45146 = G__45283;\ncount__45147 = G__45284;\ni__45148 = G__45285;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\nvar fexpr__45131 = cljs.test.join_fixtures(once_fixtures);\nreturn (fexpr__45131.cljs$core$IFn$_invoke$arity$1 ? fexpr__45131.cljs$core$IFn$_invoke$arity$1(G__45132) : fexpr__45131.call(null,G__45132));\n})], null);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__45125__$1)].join('')));\n\n}\n})());\n}),(function (){\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-test-ns\",\"end-test-ns\",1620675645),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n})], null);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.group_by((function (p1__45091_SHARP_){\nreturn new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__45091_SHARP_));\n}),vars))], 0));\n});\n/**\n * Like test-ns, but returns a block for further composition and\n *   later execution.  Does not clear the current env.\n */\nshadow.test.test_ns_block = (function shadow$test$test_ns_block(ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nvar map__45162 = shadow.test.env.get_test_ns_info(ns);\nvar map__45162__$1 = cljs.core.__destructure_map(map__45162);\nvar test_ns = map__45162__$1;\nvar vars = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45162__$1,new cljs.core.Keyword(null,\"vars\",\"vars\",-2046957217));\nif(cljs.core.not(test_ns)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"Namespace: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),\" not found, no tests to run.\"].join('')], 0));\n})], null);\n} else {\nreturn shadow.test.test_vars_grouped_block(vars);\n}\n});\nshadow.test.prepare_test_run = (function shadow$test$prepare_test_run(p__45179,vars){\nvar map__45180 = p__45179;\nvar map__45180__$1 = cljs.core.__destructure_map(map__45180);\nvar env = map__45180__$1;\nvar report_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45180__$1,new cljs.core.Keyword(null,\"report-fn\",\"report-fn\",-549046115));\nvar orig_report = cljs.test.report;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\ncljs.test.set_env_BANG_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(\"shadow.test\",\"report-fn\",\"shadow.test/report-fn\",1075704061),orig_report));\n\nif(cljs.core.truth_(report_fn)){\n(cljs.test.report = report_fn);\n} else {\n}\n\nvar seq__45182_45286 = cljs.core.seq(shadow.test.env.get_tests());\nvar chunk__45184_45287 = null;\nvar count__45185_45288 = (0);\nvar i__45186_45289 = (0);\nwhile(true){\nif((i__45186_45289 < count__45185_45288)){\nvar vec__45196_45290 = chunk__45184_45287.cljs$core$IIndexed$_nth$arity$2(null,i__45186_45289);\nvar test_ns_45291 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45196_45290,(0),null);\nvar ns_info_45292 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45196_45290,(1),null);\nvar map__45199_45293 = ns_info_45292;\nvar map__45199_45294__$1 = cljs.core.__destructure_map(map__45199_45293);\nvar fixtures_45295 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45199_45294__$1,new cljs.core.Keyword(null,\"fixtures\",\"fixtures\",1009814994));\nvar temp__5753__auto___45296 = new cljs.core.Keyword(null,\"once\",\"once\",-262568523).cljs$core$IFn$_invoke$arity$1(fixtures_45295);\nif(cljs.core.truth_(temp__5753__auto___45296)){\nvar fix_45297 = temp__5753__auto___45296;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_45291,fix_45297], 0));\n} else {\n}\n\nvar temp__5753__auto___45298 = new cljs.core.Keyword(null,\"each\",\"each\",940016129).cljs$core$IFn$_invoke$arity$1(fixtures_45295);\nif(cljs.core.truth_(temp__5753__auto___45298)){\nvar fix_45299 = temp__5753__auto___45298;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_45291,fix_45299], 0));\n} else {\n}\n\n\nvar G__45300 = seq__45182_45286;\nvar G__45301 = chunk__45184_45287;\nvar G__45302 = count__45185_45288;\nvar G__45303 = (i__45186_45289 + (1));\nseq__45182_45286 = G__45300;\nchunk__45184_45287 = G__45301;\ncount__45185_45288 = G__45302;\ni__45186_45289 = G__45303;\ncontinue;\n} else {\nvar temp__5753__auto___45304 = cljs.core.seq(seq__45182_45286);\nif(temp__5753__auto___45304){\nvar seq__45182_45305__$1 = temp__5753__auto___45304;\nif(cljs.core.chunked_seq_QMARK_(seq__45182_45305__$1)){\nvar c__4638__auto___45306 = cljs.core.chunk_first(seq__45182_45305__$1);\nvar G__45307 = cljs.core.chunk_rest(seq__45182_45305__$1);\nvar G__45308 = c__4638__auto___45306;\nvar G__45309 = cljs.core.count(c__4638__auto___45306);\nvar G__45310 = (0);\nseq__45182_45286 = G__45307;\nchunk__45184_45287 = G__45308;\ncount__45185_45288 = G__45309;\ni__45186_45289 = G__45310;\ncontinue;\n} else {\nvar vec__45200_45311 = cljs.core.first(seq__45182_45305__$1);\nvar test_ns_45312 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45200_45311,(0),null);\nvar ns_info_45313 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45200_45311,(1),null);\nvar map__45203_45315 = ns_info_45313;\nvar map__45203_45316__$1 = cljs.core.__destructure_map(map__45203_45315);\nvar fixtures_45317 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45203_45316__$1,new cljs.core.Keyword(null,\"fixtures\",\"fixtures\",1009814994));\nvar temp__5753__auto___45319__$1 = new cljs.core.Keyword(null,\"once\",\"once\",-262568523).cljs$core$IFn$_invoke$arity$1(fixtures_45317);\nif(cljs.core.truth_(temp__5753__auto___45319__$1)){\nvar fix_45320 = temp__5753__auto___45319__$1;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_45312,fix_45320], 0));\n} else {\n}\n\nvar temp__5753__auto___45322__$1 = new cljs.core.Keyword(null,\"each\",\"each\",940016129).cljs$core$IFn$_invoke$arity$1(fixtures_45317);\nif(cljs.core.truth_(temp__5753__auto___45322__$1)){\nvar fix_45323 = temp__5753__auto___45322__$1;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_45312,fix_45323], 0));\n} else {\n}\n\n\nvar G__45324 = cljs.core.next(seq__45182_45305__$1);\nvar G__45325 = null;\nvar G__45326 = (0);\nvar G__45327 = (0);\nseq__45182_45286 = G__45324;\nchunk__45184_45287 = G__45325;\ncount__45185_45288 = G__45326;\ni__45186_45289 = G__45327;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"begin-run-tests\",\"begin-run-tests\",309363062),new cljs.core.Keyword(null,\"var-count\",\"var-count\",-1513152110),cljs.core.count(vars),new cljs.core.Keyword(null,\"ns-count\",\"ns-count\",-1269070724),cljs.core.count(cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__45174_SHARP_){\nreturn new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__45174_SHARP_));\n}),vars)))], null));\n})], null);\n});\nshadow.test.finish_test_run = (function shadow$test$finish_test_run(block){\nif(cljs.core.vector_QMARK_(block)){\n} else {\nthrow (new Error(\"Assert failed: (vector? block)\"));\n}\n\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(block,(function (){\nvar map__45211 = cljs.test.get_current_env();\nvar map__45211__$1 = cljs.core.__destructure_map(map__45211);\nvar env = map__45211__$1;\nvar report_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45211__$1,new cljs.core.Keyword(\"shadow.test\",\"report-fn\",\"shadow.test/report-fn\",1075704061));\nvar report_counters = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45211__$1,new cljs.core.Keyword(null,\"report-counters\",\"report-counters\",-1702609242));\ncljs.test.report.call(null,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(report_counters,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"summary\",\"summary\",380847952)));\n\ncljs.test.report.call(null,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(report_counters,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-run-tests\",\"end-run-tests\",267300563)));\n\nreturn (cljs.test.report = report_fn);\n}));\n});\n/**\n * tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\n */\nshadow.test.run_test_vars = (function shadow$test$run_test_vars(var_args){\nvar G__45222 = arguments.length;\nswitch (G__45222) {\ncase 1:\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$1 = (function (test_vars){\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),test_vars);\n}));\n\n(shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2 = (function (env,vars){\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.run_test_vars.cljs$lang$maxFixedArity = 2);\n\n/**\n * test all vars for given namespace symbol\n */\nshadow.test.test_ns = (function shadow$test$test_ns(var_args){\nvar G__45232 = arguments.length;\nswitch (G__45232) {\ncase 1:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.test_ns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),ns);\n}));\n\n(shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2 = (function (env,ns){\nvar map__45237 = shadow.test.env.get_test_ns_info(ns);\nvar map__45237__$1 = cljs.core.__destructure_map(map__45237);\nvar vars = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45237__$1,new cljs.core.Keyword(null,\"vars\",\"vars\",-2046957217));\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.test_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * test all vars in specified namespace symbol set\n */\nshadow.test.run_tests = (function shadow$test$run_tests(var_args){\nvar G__45245 = arguments.length;\nswitch (G__45245) {\ncase 0:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0());\n}));\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,shadow.test.env.get_test_namespaces());\n}));\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,namespaces){\nif(cljs.core.set_QMARK_(namespaces)){\n} else {\nthrow (new Error(\"Assert failed: (set? namespaces)\"));\n}\n\nvar vars = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__45240_SHARP_){\nreturn cljs.core.contains_QMARK_(namespaces,new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__45240_SHARP_)));\n}),shadow.test.env.get_test_vars());\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.run_tests.cljs$lang$maxFixedArity = 2);\n\n/**\n * Runs all tests in all namespaces; prints results.\n *   Optional argument is a regular expression; only namespaces with\n *   names matching the regular expression (with re-matches) will be\n *   tested.\n */\nshadow.test.run_all_tests = (function shadow$test$run_all_tests(var_args){\nvar G__45254 = arguments.length;\nswitch (G__45254) {\ncase 0:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),null);\n}));\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(env,null);\n}));\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,re){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__45251_SHARP_){\nvar or__4212__auto__ = (re == null);\nif(or__4212__auto__){\nreturn or__4212__auto__;\n} else {\nreturn cljs.core.re_matches(re,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__45251_SHARP_));\n}\n}),shadow.test.env.get_test_namespaces())));\n}));\n\n(shadow.test.run_all_tests.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","~:file","shadow/test.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.test","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.test","^M","~$ct","^M","~$shadow.test.env","^O","~$env","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^E",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Q","^Q","^M","^M","^N","^M","^O","^O","^P","^O"],"~:form",["~#list",["~$ns","^G","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test",["^X",["^T",["^M","~:as","^N"],["^O","^Z","^P"]]]]],"~:flags",["^ ","^T",["^E",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^M","^O"]],"^J","^G","~:resource-id",["~:shadow.build.classpath/resource","shadow/test.cljs"],"~:compiled-at",1651162488485,"^H",["^ ","^M","^M","^N","^M","^O","^O","^P","^O","^Q","^Q","^R","^R"],"~:resource-name","shadow/test.cljs","~:warnings",[],"~:source","(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(defn test-vars-grouped-block\n  \"like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures\"\n  [vars]\n  (->> vars\n       (group-by #(-> % meta :ns))\n       ;; more predictable test ordering\n       ;; FIXME: should maybe also allow randomizing to detect tests that rely on call order\n       (sort-by first)\n       (mapcat (fn [[ns vars]]\n                 [(fn []\n                    (ct/report {:type :begin-test-ns :ns ns}))\n                  ;; FIXME: this is too complex, should simplify\n                  (fn []\n                    (ct/block\n                      (let [env (ct/get-current-env)\n                            once-fixtures (get-in env [:once-fixtures ns])\n                            each-fixtures (get-in env [:each-fixtures ns])]\n                        (case (ct/execution-strategy once-fixtures each-fixtures)\n                          :async\n                          (->> vars\n                               (filter (comp :test meta))\n                               (mapcat (comp (partial ct/wrap-map-fixtures each-fixtures)\n                                         ct/test-var-block))\n                               (ct/wrap-map-fixtures once-fixtures))\n                          :sync\n                          (let [each-fixture-fn (ct/join-fixtures each-fixtures)]\n                            [(fn []\n                               ((ct/join-fixtures once-fixtures)\n                                (fn []\n                                  (doseq [v vars]\n                                    (when-let [t (:test (meta v))]\n                                      ;; (alter-meta! v update :test disable-async)\n                                      (each-fixture-fn\n                                        (fn []\n                                          ;; (test-var v)\n                                          (ct/run-block\n                                            (ct/test-var-block* v (ct/disable-async t))))))))))])))))\n                  (fn []\n                    (ct/report {:type :end-test-ns :ns ns}))])\n         )))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([ns]\n   {:pre [(symbol? ns)]}\n   (let [{:keys [vars] :as test-ns} (env/get-test-ns-info ns)]\n\n     (if-not test-ns\n       [(fn []\n          (println (str \"Namespace: \" ns \" not found, no tests to run.\")))]\n       (test-vars-grouped-block vars)))))\n\n(defn prepare-test-run [{:keys [report-fn] :as env} vars]\n  (let [orig-report ct/report]\n    [(fn []\n       (ct/set-env! (assoc env ::report-fn orig-report))\n\n       (when report-fn\n         (set! ct/report report-fn))\n\n       ;; setup all known fixtures\n       (doseq [[test-ns ns-info] (env/get-tests)\n               :let [{:keys [fixtures]} ns-info]]\n         (when-let [fix (:once fixtures)]\n           (ct/update-current-env! [:once-fixtures] assoc test-ns fix))\n\n         (when-let [fix (:each fixtures)]\n           (ct/update-current-env! [:each-fixtures] assoc test-ns fix)))\n\n       ;; just in case report-fn wants to know when things starts\n       (ct/report {:type :begin-run-tests\n                   :var-count (count vars)\n                   :ns-count (->> vars\n                                  (map #(-> % meta :ns))\n                                  (set)\n                                  (count))}))]))\n\n(defn finish-test-run [block]\n  {:pre [(vector? block)]}\n  (conj block\n    (fn []\n      (let [{::keys [report-fn] :keys [report-counters] :as env} (ct/get-current-env)]\n        (ct/report (assoc report-counters :type :summary))\n        (ct/report (assoc report-counters :type :end-run-tests))\n        (set! ct/report report-fn)\n        ))))\n\n;; API Fns\n\n(defn run-test-vars\n  \"tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\"\n  ([test-vars]\n   (run-test-vars (ct/empty-env) test-vars))\n  ([env vars]\n   (-> (prepare-test-run env vars)\n       (into (test-vars-grouped-block vars))\n       (finish-test-run)\n       (ct/run-block))))\n\n(defn test-ns\n  \"test all vars for given namespace symbol\"\n  ([ns]\n   (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (let [{:keys [vars]} (env/get-test-ns-info ns)]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-tests\n  \"test all vars in specified namespace symbol set\"\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   {:pre [(set? namespaces)]}\n   (let [vars (->> (env/get-test-vars)\n                   (filter #(contains? namespaces (-> % meta :ns))))]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into #{})))))\n","~:reader-features",["^E",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["shadow.test/test-vars-grouped-block","vars","p1__45091#","cljs.core/group-by","cljs.core/meta","cljs.core.sort_by","cljs.core/first","cljs.core.mapcat","p__45101","vec__45112","cljs.core.nth","ns","cljs.test/report","cljs.test/block","env","cljs.test/get-current-env","once-fixtures","cljs.core.get_in","each-fixtures","G__45125","cljs.core/Keyword","js/Error","cljs.test/execution-strategy","cljs.core.filter","cljs.core.comp","cljs.core.partial","cljs.test/wrap-map-fixtures","cljs.test/test-var-block","each-fixture-fn","cljs.test/join-fixtures","G__45132","fexpr__45131","seq__45145","cljs.core/seq","chunk__45146","count__45147","i__45148","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","v","t","G__45156","G__45157","cljs.test/run-block","cljs.test/test-var-block*","cljs.test/disable-async","shadow.test/test-ns-block","cljs.core/Symbol","map__45162","cljs.core/--destructure-map","cljs.core.get","test-ns","shadow.test.env/get-test-ns-info","cljs.core/not","cljs.core.println","p__45179","map__45180","shadow.test/prepare-test-run","report-fn","orig-report","cljs.test/set-env!","cljs.core.assoc","seq__45182","chunk__45184","count__45185","i__45186","vec__45196","map__45199","vec__45200","map__45203","ns-info","shadow.test.env/get-tests","fixtures","fix","cljs.test.update_current_env_BANG_","cljs.core/assoc","p1__45174#","cljs.core.map","cljs.core/set","shadow.test/finish-test-run","block","cljs.core/vector?","cljs.core.conj","map__45211","report-counters","var_args","G__45222","shadow.test/run-test-vars","test-vars","shadow.test.run_test_vars","cljs.test.empty_env","cljs.core.into","G__45232","shadow.test/test-ns","shadow.test.test_ns","map__45237","G__45245","shadow.test/run-tests","shadow.test.run_tests","shadow.test.env/get-test-namespaces","namespaces","cljs.core/set?","shadow.test.env/get-test-vars","p1__45240#","cljs.core/contains?","G__45254","shadow.test/run-all-tests","shadow.test.run_all_tests","re","p1__45251#","or__4212__auto__","cljs.core/re-matches"]],"~:used-vars",["^E",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$cljs.core/comp","~$cljs.test/wrap-map-fixtures","~$shadow.test.env/get-test-namespaces","~$shadow.test/run-all-tests","~$cljs.core/vector?","~$cljs.core/filter","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.test/test-var-block","~$cljs.core/count","~$cljs.test/set-env!","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/group-by","~$cljs.test/empty-env","~$cljs.core/chunk-rest","~$cljs.core/set","~$shadow.test/run-test-vars","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/map","~$cljs.test/run-block","~$cljs.test/join-fixtures","~$shadow.test/finish-test-run","~$cljs.core/get-in","~$cljs.test/update-current-env!","~$cljs.test/execution-strategy","~$shadow.test.env/get-test-ns-info","~$cljs.core/get","~$cljs.core/-nth","~$shadow.test/test-ns-block","~$cljs.core/set?","~$cljs.core/nth","~$cljs.core/meta","~$cljs.core/println","~$shadow.test.env/get-test-vars","~$cljs.core/next","~$shadow.test/test-ns","~$shadow.test/test-vars-grouped-block","~$cljs.core/not","~$cljs.test/disable-async","~$cljs.core/assoc","~$cljs.test/test-var-block*","~$cljs.core/Symbol","~$shadow.test/run-tests","~$shadow.test.env/get-tests","~$cljs.core/first","~$cljs.core/sort-by","~$js/Error","~$cljs.test/get-current-env","~$shadow.test/prepare-test-run","~$cljs.core/chunked-seq?","~$cljs.test/report","~$cljs.test/block"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^E",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^13","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","~$goog.array","~$goog.asserts"]]],["^13","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2T","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^13","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2X"]]],["^13","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U"]]],["^13","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","cljs/pprint.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^Q","~$clojure.string","~$goog.string","~$goog.string.StringBuffer"]]],["^13","shadow/test.cljs"],["3d6ef2b6e978cc2c657d918e731bb6e374fbfd65","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^Q","^M","^O"]]],["^13","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U"]]],"~:SHADOW-TIMESTAMP",[1647940543000,1647940543000,1633031471000],["^13","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U","~$goog.fs.blob","^2Y","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2[","^30","^31","^32"]]],["^13","shadow/test/env.cljs"],["3d6ef2b6e978cc2c657d918e731bb6e374fbfd65","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^Q"]]],["^13","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2T","^2U","~$goog.html.SafeUrl","^31","^32","^2X"]]],["^13","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^39","~$goog.html.SafeStyle","^3;","^2Z","~$goog.html.uncheckedconversions","^31","^2X"]]],["^13","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2T","^2U","~$goog.dom.TagName","~$goog.dom.tags","^39","^3?","~$goog.html.SafeStyleSheet","^3;","^2Z","^3:","^2[","^30","~$goog.labs.userAgent.browser","^2W","^31","^32","^2X"]]],["^13","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2W"]]],["^13","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2T"]]],["^13","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2T","^2U","^34","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",[]]],["^13","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2T","^2W"]]],["^13","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^Q","^34","^35"]]],["^13","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","~$goog.dom.safe","^3@","^31","^2X"]]],["^13","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2X"]]],["^13","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2T","^2U","^3=","~$goog.math"]]],["^13","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U","^3>","^39","^3?","^3E","^3;","^2Z","^31","^2X","^2["]]],["^13","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R"]]],["^13","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","~$goog.math.Long","~$goog.math.Integer","^34","^2W","^2T","~$goog.Uri","^35"]]],["^13","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^31","^32","^3:","^2U"]]],["^13","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^31","^3?","^32","^2T","^2W","^2U","^2X"]]],["^13","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^37"]]],["^13","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U","^34"]]],["^13","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^2U","^32"]]],["^13","cljs/test.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2O",["^ ","^2P",null,"^2Q",["^E",[]],"^2R",["^R","^Q","^33","^@"]]]]],"~:clj-info",["^ ","jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/api.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/template.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/thheller/shadow-cljs/2.15.12/shadow-cljs-2.15.12-aot.jar!/shadow/test/env.clj",1647940543000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1648121537000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/pprint.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/test.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1633011066000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","^7","shadow/test.cljs","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F","^G","^H",["^ "],"^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^E",["^T"]],"~:shadow/js-access-global",["^E",["Error"]],"^U",null,"~:defs",["^ ","~$test-vars-grouped-block",["^ ","~:protocol-inline",null,"^5",["^ ","^7","shadow/test.cljs","^8",7,"^9",7,"^:",7,"^;",30,"~:arglists",["^X",["~$quote",["^X",[["~$vars"]]]]],"^6","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures"],"^F","^2=","^7","shadow/test.cljs","^;",30,"~:method-params",["^X",[["^4R"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^9",1,"~:variadic?",false,"^8",7,"~:ret-tag","~$any","^:",7,"~:max-fixed-arity",1,"~:fn-var",true,"^4P",["^X",["^4Q",["^X",[["^4R"]]]]],"^6","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures"],"~$test-ns-block",["^ ","^4O",null,"^5",["^ ","^7","shadow/test.cljs","^8",49,"^9",7,"^:",49,"^;",20,"^4P",["^X",["^4Q",["^X",[["^Y"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"^F","^25","^7","shadow/test.cljs","^;",20,"^4S",["^X",[["^Y"]]],"^4T",null,"^4U",["^X",[null,null]],"^9",1,"^4V",false,"^8",49,"^4W",["^E",["~$cljs.core/IVector","^4X"]],"^:",49,"^4Y",1,"^4Z",true,"^4P",["^X",["^4Q",["^X",[["^Y"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"~$prepare-test-run",["^ ","^4O",null,"^5",["^ ","^7","shadow/test.cljs","^8",61,"^9",7,"^:",61,"^;",23,"^4P",["^X",["^4Q",["^X",[[["^ ","~:keys",["~$report-fn"],"^Z","^P"],"^4R"]]]]]],"^F","^2I","^7","shadow/test.cljs","^;",23,"^4S",["^X",[["~$p__45179","^4R"]]],"^4T",null,"^4U",["^X",[null,null]],"^9",1,"^4V",false,"^8",61,"^4W","^50","^:",61,"^4Y",2,"^4Z",true,"^4P",["^X",["^4Q",["^X",[[["^ ","^52",["^53"],"^Z","^P"],"^4R"]]]]]],"~$finish-test-run",["^ ","^4O",null,"^5",["^ ","^7","shadow/test.cljs","^8",86,"^9",7,"^:",86,"^;",22,"^4P",["^X",["^4Q",["^X",[["~$block"]]]]]],"^F","^1Z","^7","shadow/test.cljs","^;",22,"^4S",["^X",[["^56"]]],"^4T",null,"^4U",["^X",[null,null]],"^9",1,"^4V",false,"^8",86,"^4W","~$clj","^:",86,"^4Y",1,"^4Z",true,"^4P",["^X",["^4Q",["^X",[["^56"]]]]]],"~$run-test-vars",["^ ","^4O",null,"^5",["^ ","^7","shadow/test.cljs","^8",98,"^9",7,"^:",98,"^;",20,"^4P",["^X",["^4Q",["^X",[["~$test-vars"],["^P","^4R"]]]]],"^6","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env","~:top-fn",["^ ","^4V",false,"~:fixed-arity",2,"^4Y",2,"^4S",[["^59"],["^P","^4R"]],"^4P",["^X",[["^59"],["^P","^4R"]]],"^4U",["^X",[null,null]]]],"^F","^1S","^7","shadow/test.cljs","^;",20,"^5:",["^ ","^4V",false,"^5;",2,"^4Y",2,"^4S",[["^59"],["^P","^4R"]],"^4P",["^X",[["^59"],["^P","^4R"]]],"^4U",["^X",[null,null]]],"^4S",[["^59"],["^P","^4R"]],"^4T",null,"^5;",2,"^4U",["^X",[null,null]],"^9",1,"^4V",false,"~:methods",[["^ ","^5;",1,"^4V",false,"~:tag","^4X"],["^ ","^5;",2,"^4V",false,"^5=",["^E",["^4X","~$clj-nil"]]]],"^8",98,"^:",98,"^4Y",2,"^4Z",true,"^4P",["^X",[["^59"],["^P","^4R"]]],"^6","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env"],"~$test-ns",["^ ","^4O",null,"^5",["^ ","^7","shadow/test.cljs","^8",108,"^9",7,"^:",108,"^;",14,"^4P",["^X",["^4Q",["^X",[["^Y"],["^P","^Y"]]]]],"^6","test all vars for given namespace symbol","^5:",["^ ","^4V",false,"^5;",2,"^4Y",2,"^4S",[["^Y"],["^P","^Y"]],"^4P",["^X",[["^Y"],["^P","^Y"]]],"^4U",["^X",[null,null]]]],"^F","^2<","^7","shadow/test.cljs","^;",14,"^5:",["^ ","^4V",false,"^5;",2,"^4Y",2,"^4S",[["^Y"],["^P","^Y"]],"^4P",["^X",[["^Y"],["^P","^Y"]]],"^4U",["^X",[null,null]]],"^4S",[["^Y"],["^P","^Y"]],"^4T",null,"^5;",2,"^4U",["^X",[null,null]],"^9",1,"^4V",false,"^5<",[["^ ","^5;",1,"^4V",false,"^5=","^4X"],["^ ","^5;",2,"^4V",false,"^5=",["^E",["^4X","^5>"]]]],"^8",108,"^:",108,"^4Y",2,"^4Z",true,"^4P",["^X",[["^Y"],["^P","^Y"]]],"^6","test all vars for given namespace symbol"],"~$run-tests",["^ ","^4O",null,"^5",["^ ","^7","shadow/test.cljs","^8",119,"^9",7,"^:",119,"^;",16,"^4P",["^X",["^4Q",["^X",[[],["^P"],["^P","~$namespaces"]]]]],"^6","test all vars in specified namespace symbol set","^5:",["^ ","^4V",false,"^5;",2,"^4Y",2,"^4S",[[],["^P"],["^P","^5A"]],"^4P",["^X",[[],["^P"],["^P","^5A"]]],"^4U",["^X",[null,null,null]]]],"^F","^2C","^7","shadow/test.cljs","^;",16,"^5:",["^ ","^4V",false,"^5;",2,"^4Y",2,"^4S",[[],["^P"],["^P","^5A"]],"^4P",["^X",[[],["^P"],["^P","^5A"]]],"^4U",["^X",[null,null,null]]],"^4S",[[],["^P"],["^P","^5A"]],"^4T",null,"^5;",2,"^4U",["^X",[null,null,null]],"^9",1,"^4V",false,"^5<",[["^ ","^5;",0,"^4V",false,"^5=","^4X"],["^ ","^5;",1,"^4V",false,"^5=","^4X"],["^ ","^5;",2,"^4V",false,"^5=",["^E",["^4X","^5>"]]]],"^8",119,"^:",119,"^4Y",2,"^4Z",true,"^4P",["^X",[[],["^P"],["^P","^5A"]]],"^6","test all vars in specified namespace symbol set"],"~$run-all-tests",["^ ","^4O",null,"^5",["^ ","^7","shadow/test.cljs","^8",134,"^9",7,"^:",134,"^;",20,"^4P",["^X",["^4Q",["^X",[[],["^P"],["^P","~$re"]]]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.","^5:",["^ ","^4V",false,"^5;",2,"^4Y",2,"^4S",[[],["^P"],["^P","^5C"]],"^4P",["^X",[[],["^P"],["^P","^5C"]]],"^4U",["^X",[null,null,null]]]],"^F","^1D","^7","shadow/test.cljs","^;",20,"^5:",["^ ","^4V",false,"^5;",2,"^4Y",2,"^4S",[[],["^P"],["^P","^5C"]],"^4P",["^X",[[],["^P"],["^P","^5C"]]],"^4U",["^X",[null,null,null]]],"^4S",[[],["^P"],["^P","^5C"]],"^4T",null,"^5;",2,"^4U",["^X",[null,null,null]],"^9",1,"^4V",false,"^5<",[["^ ","^5;",0,"^4V",false,"^5=","^4X"],["^ ","^5;",1,"^4V",false,"^5=","^4X"],["^ ","^5;",2,"^4V",false,"^5=",["^E",["^4X","^5>"]]]],"^8",134,"^:",134,"^4Y",2,"^4Z",true,"^4P",["^X",[[],["^P"],["^P","^5C"]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested."]],"^V",["^ ","^Q","^Q","^M","^M","^N","^M","^O","^O","^P","^O"],"~:cljs.analyzer/constants",["^ ","^S",["^E",["~:each","~:report-counters","^J","~:each-fixtures","~:type","~:summary","~:var-count","~:fixtures","~:end-run-tests","~:once","~:begin-run-tests","~:begin-test-ns","~:ns-count","~:end-test-ns","~:report-fn","~:shadow.test/report-fn","~:test","~:vars","~:once-fixtures"]],"~:order",["^5H","^J","^5O","^5V","^5G","^5T","^5Q","^5U","^5R","^5S","^5K","^5M","^5E","^5J","^5P","^5N","^5F","^5I","^5L"]],"^[",["^ ","^T",["^E",[]]],"^10",["^ "],"^11",["^R","^Q","^M","^O"]],"^J","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^E",[]],"~:compiler-options",["^2N",[["^5Z","~:static-fns"],true,["^5Z","~:shadow-tweaks"],null,["^5Z","~:source-map-inline"],null,["^5Z","~:elide-asserts"],false,["^5Z","~:optimize-constants"],null,["^5Z","^16"],null,["^5Z","~:external-config"],null,["^5Z","~:tooling-config"],null,["^5Z","~:emit-constants"],null,["^5Z","~:load-tests"],true,["^5Z","~:form-size-threshold"],null,["^5Z","~:data-readers"],null,["^5Z","~:infer-externs"],"~:auto",["^5Z","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5Z","~:fn-invoke-direct"],null,["^5Z","~:source-map"],"/dev/null"]]]