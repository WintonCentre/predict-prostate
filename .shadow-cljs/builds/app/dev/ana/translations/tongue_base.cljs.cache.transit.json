["^ ","~:output",["^ ","~:js","goog.provide('translations.tongue_base');\n/**\n * Return a translation function which wraps tongue 'translate', giving it similar\n *   capabilities as the tempura translator.\n * \n *   The returned function takes a language, a k to translate, plus any args\n * \n *   If k is a string it returns k untranslated.\n * \n *   If k is a keyword, it looks up  k in the translations dictionary for the\n *   given language, possibly with argument interpolation. i.e. Just like the original.\n * \n *   If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n *   be used to document the translation.\n * \n *   If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n *   \n */\ntranslations.tongue_base.wrap_translator = (function translations$tongue_base$wrap_translator(lang,translator){\nreturn (function() { \nvar G__55314__delegate = function (k,args){\nvar k_STAR_ = (((k instanceof cljs.core.Keyword))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null):k);\nif(cljs.core.vector_QMARK_(k_STAR_)){\nvar translation = (function (){var G__54998 = lang;\nvar G__54999 = cljs.core.first(k_STAR_);\nvar G__55001 = args;\nreturn (translator.cljs$core$IFn$_invoke$arity$3 ? translator.cljs$core$IFn$_invoke$arity$3(G__54998,G__54999,G__55001) : translator.call(null,G__54998,G__54999,G__55001));\n})();\nif(clojure.string.starts_with_QMARK_(translation,\"{\")){\nreturn k_STAR_;\n} else {\nreturn translation;\n}\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(k);\n}\n};\nvar G__55314 = function (k,var_args){\nvar args = null;\nif (arguments.length > 1) {\nvar G__55316__i = 0, G__55316__a = new Array(arguments.length -  1);\nwhile (G__55316__i < G__55316__a.length) {G__55316__a[G__55316__i] = arguments[G__55316__i + 1]; ++G__55316__i;}\n  args = new cljs.core.IndexedSeq(G__55316__a,0,null);\n} \nreturn G__55314__delegate.call(this,k,args);};\nG__55314.cljs$lang$maxFixedArity = 1;\nG__55314.cljs$lang$applyTo = (function (arglist__55318){\nvar k = cljs.core.first(arglist__55318);\nvar args = cljs.core.rest(arglist__55318);\nreturn G__55314__delegate(k,args);\n});\nG__55314.cljs$core$IFn$_invoke$arity$variadic = G__55314__delegate;\nreturn G__55314;\n})()\n;\n});\ntranslations.tongue_base.error_handler = (function translations$tongue_base$error_handler(p__55003){\nvar map__55005 = p__55003;\nvar map__55005__$1 = (((((!((map__55005 == null))))?(((((map__55005.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55005.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55005):map__55005);\nvar callback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55005__$1,new cljs.core.Keyword(null,\"callback\",\"callback\",-705136228));\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55005__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\nvar status_text = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55005__$1,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478));\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"error dispatch - status : \",status,\"\\ntext: \",status_text], 0));\n\nvar G__55009 = (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(status),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_text)].join('')));\nreturn (callback.cljs$core$IFn$_invoke$arity$1 ? callback.cljs$core$IFn$_invoke$arity$1(G__55009) : callback.call(null,G__55009));\n});\ntranslations.tongue_base.file_error = (function translations$tongue_base$file_error(p__55013){\nvar map__55015 = p__55013;\nvar map__55015__$1 = (((((!((map__55015 == null))))?(((((map__55015.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55015.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55015):map__55015);\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55015__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\nvar status_text = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55015__$1,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478));\nreturn console.log([\"file error: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_text)].join(''));\n});\n/**\n * Process ops over a dictionary, returning a new dictionary.\n *   If the ops merge in words from a new language, that is merged in to the supported languages set\n */\ntranslations.tongue_base.process_dict_op = (function translations$tongue_base$process_dict_op(var_args){\nvar G__55021 = arguments.length;\nswitch (G__55021) {\ncase 3:\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3 = (function (dict,p__55023,_){\nvar vec__55025 = p__55023;\nvar seq__55026 = cljs.core.seq(vec__55025);\nvar first__55027 = cljs.core.first(seq__55026);\nvar seq__55026__$1 = cljs.core.next(seq__55026);\nvar op = first__55027;\nvar args = seq__55026__$1;\nvar G__55032 = op;\nvar G__55032__$1 = (((G__55032 instanceof cljs.core.Keyword))?G__55032.fqn:null);\nswitch (G__55032__$1) {\ncase \"upsert\":\nvar vec__55036 = args;\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55036,(0),null);\nvar new_words = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55036,(1),null);\nvar current_lang = new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104).cljs$core$IFn$_invoke$arity$1(dict);\nvar new_lang_dict = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update.cljs$core$IFn$_invoke$arity$4(dict,new cljs.core.Keyword(null,\"languages\",\"languages\",1471910331),cljs.core.conj,lang),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673),lang], null),cljs.core.merge,new_words);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_lang_dict,new cljs.core.Keyword(null,\"translator\",\"translator\",-1752203115),translations.tongue_base.wrap_translator(current_lang,tongue.core.build_translate(new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673).cljs$core$IFn$_invoke$arity$1(new_lang_dict))));\n\nbreak;\ncase \"switch\":\nvar vec__55042 = args;\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55042,(0),null);\nif(cljs.core.truth_((function (){var and__4115__auto__ = lang;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.seq(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(dict,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673),lang], null)));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(dict,new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104),lang,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"translator\",\"translator\",-1752203115),translations.tongue_base.wrap_translator(lang,tongue.core.build_translate(new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673).cljs$core$IFn$_invoke$arity$1(dict)))], 0));\n} else {\nreturn dict;\n}\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__55032__$1)].join('')));\n\n}\n}));\n\n(translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$2 = (function (dict,op_args){\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3(dict,op_args,true);\n}));\n\n(translations.tongue_base.process_dict_op.cljs$lang$maxFixedArity = 3);\n\n/**\n * process a sequence of operations into the translation state\n */\ntranslations.tongue_base.process_dict_ops = (function translations$tongue_base$process_dict_ops(t_state,op_args){\nvar new_lang = new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104).cljs$core$IFn$_invoke$arity$1(predict_prostate.state.localStorage.get_settings_BANG_(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104),new cljs.core.Keyword(null,\"en\",\"en\",88457073)], null)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(translations.tongue_base.process_dict_op,t_state,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(op_args,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),new_lang], null)));\n});\n/**\n * process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n *   USED IN PRODUCTION DICTIONARY LOAD.\n */\ntranslations.tongue_base.handle_dictionary = (function translations$tongue_base$handle_dictionary(ref,edn_rsp){\nif(cljs.core.truth_(cljs.core.set_QMARK_)){\n} else {\nthrow (new Error(\"Assert failed: set?\"));\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"languages\",\"languages\",1471910331).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(ref)))){\n} else {\nthrow (new Error(\"Assert failed: (:languages (clojure.core/deref ref))\"));\n}\n\nvar op_args = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(edn_rsp);\nif(((cljs.core.seq(op_args)) && (cljs.core.every_QMARK_((function (p__55060){\nvar vec__55064 = p__55060;\nvar seq__55065 = cljs.core.seq(vec__55064);\nvar first__55066 = cljs.core.first(seq__55065);\nvar seq__55065__$1 = cljs.core.next(seq__55065);\nvar op = first__55066;\nvar first__55066__$1 = cljs.core.first(seq__55065__$1);\nvar seq__55065__$2 = cljs.core.next(seq__55065__$1);\nvar lang = first__55066__$1;\nvar _ = seq__55065__$2;\nvar and__4115__auto__ = (function (){var fexpr__55072 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),null,new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),null], null), null);\nreturn (fexpr__55072.cljs$core$IFn$_invoke$arity$1 ? fexpr__55072.cljs$core$IFn$_invoke$arity$1(op) : fexpr__55072.call(null,op));\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (((lang instanceof cljs.core.Keyword)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),((cljs.core.name(lang)).length))));\n} else {\nreturn and__4115__auto__;\n}\n}),op_args)))){\nreturn cljs.core.reset_BANG_(ref,translations.tongue_base.process_dict_ops(cljs.core.deref(ref),op_args));\n} else {\nreturn null;\n}\n});\n/**\n * read dictionary ops from a url.\n *   USED IN PRODUCTION DICTIONARY LOAD\n */\ntranslations.tongue_base.get_dictionary = (function translations$tongue_base$get_dictionary(url,p__55074){\nvar map__55076 = p__55074;\nvar map__55076__$1 = (((((!((map__55076 == null))))?(((((map__55076.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55076.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55076):map__55076);\nvar handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55076__$1,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612));\nreturn ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic(url,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"error-handler\",\"error-handler\",-484945776),translations.tongue_base.file_error,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),handler,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),new cljs.core.Keyword(null,\"transit\",\"transit\",359458387)], null)], 0));\n});\n/**\n * load the initial dictionary into the rtdb t-state.\n *   local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n *   At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n *   At test time this may be different.\n * \n *   USED IN PRODUCTION DICTIONARY LOAD\n */\ntranslations.tongue_base.load_translations_STAR_ = (function translations$tongue_base$load_translations_STAR_(local_dictionary_url,handler){\nreturn translations.tongue_base.get_dictionary(local_dictionary_url,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [\"Cache-Control\",\"no-store\"], null),new cljs.core.Keyword(null,\"on-error\",\"on-error\",1728533530),translations.tongue_base.file_error,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),handler], null));\n});\ntranslations.tongue_base.validate_op_args = (function translations$tongue_base$validate_op_args(op_args){\nreturn ((cljs.core.seq(op_args)) && (cljs.core.every_QMARK_((function (p__55094){\nvar vec__55098 = p__55094;\nvar seq__55099 = cljs.core.seq(vec__55098);\nvar first__55100 = cljs.core.first(seq__55099);\nvar seq__55099__$1 = cljs.core.next(seq__55099);\nvar op = first__55100;\nvar first__55100__$1 = cljs.core.first(seq__55099__$1);\nvar seq__55099__$2 = cljs.core.next(seq__55099__$1);\nvar lang = first__55100__$1;\nvar args = seq__55099__$2;\nvar pred__55104 = cljs.core._EQ_;\nvar expr__55105 = op;\nif(cljs.core.truth_((pred__55104.cljs$core$IFn$_invoke$arity$2 ? pred__55104.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),expr__55105) : pred__55104.call(null,new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),expr__55105)))){\nreturn ((cljs.core.seq_QMARK_(args)) && (cljs.core.map_QMARK_(cljs.core.first(args))) && ((lang instanceof cljs.core.Keyword)));\n} else {\nif(cljs.core.truth_((pred__55104.cljs$core$IFn$_invoke$arity$2 ? pred__55104.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),expr__55105) : pred__55104.call(null,new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),expr__55105)))){\nreturn (lang instanceof cljs.core.Keyword);\n} else {\nreturn false;\n}\n}\n}),op_args)));\n});\n/**\n * Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n *   Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n *   keywords in the form :ns/key rather than teh string ':ns#key'.\n */\ntranslations.tongue_base.read_json_dict = (function translations$tongue_base$read_json_dict(json){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__55108){\nvar vec__55112 = p__55108;\nvar cmd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55112,(0),null);\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55112,(1),null);\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55112,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cmd),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(lang),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__55115){\nvar vec__55116 = p__55115;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55116,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55116,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\"/\",clojure.string.split.cljs$core$IFn$_invoke$arity$2(k,/#/)))),v], null);\n}),m))], null);\n}),json);\n});\n/**\n * Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n * Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n * \n * Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n * into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n * \n * If a [:switch lang] command is received then the default language will change too.\n * We can use transit here since we are not dependent on coast middleware which only supports json.\n */\ntranslations.tongue_base.load_all_translations = (function translations$tongue_base$load_all_translations(static_chan,ok_chan,err_chan,dictionary_endpoint,ref){\ntranslations.tongue_base.get_dictionary(\"dictionary.txt\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"on-error\",\"on-error\",1728533530),(function (p1__55123_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(err_chan,p1__55123_SHARP_);\n}),new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),(function (p1__55124_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(static_chan,p1__55124_SHARP_);\n})], null));\n\nvar c__29432__auto__ = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\ncljs.core.async.impl.dispatch.run((function (){\nvar f__29433__auto__ = (function (){var switch__29362__auto__ = (function (state_55259){\nvar state_val_55260 = (state_55259[(1)]);\nif((state_val_55260 === (1))){\nvar inst_55134 = cljs.core.PersistentVector.EMPTY_NODE;\nvar inst_55138 = [static_chan,err_chan];\nvar inst_55139 = (new cljs.core.PersistentVector(null,2,(5),inst_55134,inst_55138,null));\nvar state_55259__$1 = state_55259;\nreturn cljs.core.async.ioc_alts_BANG_(state_55259__$1,(2),inst_55139);\n} else {\nif((state_val_55260 === (2))){\nvar inst_55141 = (state_55259[(7)]);\nvar inst_55144 = (state_55259[(8)]);\nvar inst_55141__$1 = (state_55259[(2)]);\nvar inst_55142 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_55141__$1,(0),null);\nvar inst_55144__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_55141__$1,(1),null);\nvar inst_55146 = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(inst_55142);\nvar inst_55150 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(static_chan,inst_55144__$1);\nvar state_55259__$1 = (function (){var statearr_55262 = state_55259;\n(statearr_55262[(9)] = inst_55146);\n\n(statearr_55262[(7)] = inst_55141__$1);\n\n(statearr_55262[(8)] = inst_55144__$1);\n\nreturn statearr_55262;\n})();\nif(inst_55150){\nvar statearr_55263_55397 = state_55259__$1;\n(statearr_55263_55397[(1)] = (3));\n\n} else {\nvar statearr_55265_55398 = state_55259__$1;\n(statearr_55265_55398[(1)] = (4));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55260 === (3))){\nvar inst_55146 = (state_55259[(9)]);\nvar inst_55141 = (state_55259[(7)]);\nvar inst_55144 = (state_55259[(8)]);\nvar inst_55155 = cljs.core.deref(ref);\nvar inst_55156 = translations.tongue_base.process_dict_ops(inst_55155,inst_55146);\nvar inst_55157 = cljs.core.reset_BANG_(ref,inst_55156);\nvar inst_55164 = [new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),new cljs.core.Keyword(null,\"error-handler\",\"error-handler\",-484945776),new cljs.core.Keyword(null,\"format\",\"format\",-1306924766)];\nvar inst_55166 = (function (){var vec__55131 = inst_55141;\nvar seed_dict = inst_55146;\nvar port = inst_55144;\nreturn (function (p1__55125_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(ok_chan,p1__55125_SHARP_);\n});\n})();\nvar inst_55171 = (function (){var vec__55131 = inst_55141;\nvar seed_dict = inst_55146;\nvar port = inst_55144;\nreturn (function (p1__55126_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(err_chan,p1__55126_SHARP_);\n});\n})();\nvar inst_55172 = [inst_55166,inst_55171,new cljs.core.Keyword(null,\"transit\",\"transit\",359458387)];\nvar inst_55173 = cljs.core.PersistentHashMap.fromArrays(inst_55164,inst_55172);\nvar inst_55174 = ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic(dictionary_endpoint,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_55173], 0));\nvar inst_55237 = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\nvar inst_55239 = (function (){var vec__55131 = inst_55141;\nvar seed_dict = inst_55146;\nvar port = inst_55144;\nvar c__29432__auto____$1 = inst_55237;\nreturn (function (){\nvar f__29433__auto__ = (function (){var switch__29362__auto__ = (function (state_55233){\nvar state_val_55235 = (state_55233[(1)]);\nif((state_val_55235 === (1))){\nvar inst_55181 = cljs.core.PersistentVector.EMPTY_NODE;\nvar inst_55183 = [ok_chan,err_chan];\nvar inst_55184 = (new cljs.core.PersistentVector(null,2,(5),inst_55181,inst_55183,null));\nvar state_55233__$1 = state_55233;\nreturn cljs.core.async.ioc_alts_BANG_(state_55233__$1,(2),inst_55184);\n} else {\nif((state_val_55235 === (2))){\nvar inst_55186 = (state_55233[(2)]);\nvar inst_55190 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_55186,(0),null);\nvar inst_55192 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_55186,(1),null);\nvar inst_55194 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ok_chan,inst_55192);\nvar state_55233__$1 = (function (){var statearr_55267 = state_55233;\n(statearr_55267[(7)] = inst_55190);\n\nreturn statearr_55267;\n})();\nif(inst_55194){\nvar statearr_55269_55405 = state_55233__$1;\n(statearr_55269_55405[(1)] = (3));\n\n} else {\nvar statearr_55271_55406 = state_55233__$1;\n(statearr_55271_55406[(1)] = (4));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55235 === (3))){\nvar inst_55190 = (state_55233[(7)]);\nvar inst_55199 = (state_55233[(8)]);\nvar inst_55199__$1 = translations.tongue_base.read_json_dict(inst_55190);\nvar inst_55200 = translations.tongue_base.validate_op_args(inst_55199__$1);\nvar state_55233__$1 = (function (){var statearr_55273 = state_55233;\n(statearr_55273[(8)] = inst_55199__$1);\n\nreturn statearr_55273;\n})();\nif(inst_55200){\nvar statearr_55275_55408 = state_55233__$1;\n(statearr_55275_55408[(1)] = (6));\n\n} else {\nvar statearr_55277_55409 = state_55233__$1;\n(statearr_55277_55409[(1)] = (7));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55235 === (4))){\nvar inst_55190 = (state_55233[(7)]);\nvar inst_55221 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_55190], 0));\nvar inst_55222 = [\"error from\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(dictionary_endpoint),\":\",inst_55221].join('');\nvar inst_55223 = alert(inst_55222);\nvar state_55233__$1 = state_55233;\nvar statearr_55279_55410 = state_55233__$1;\n(statearr_55279_55410[(2)] = inst_55223);\n\n(statearr_55279_55410[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55235 === (5))){\nvar inst_55227 = (state_55233[(2)]);\nvar state_55233__$1 = state_55233;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_55233__$1,inst_55227);\n} else {\nif((state_val_55235 === (6))){\nvar inst_55199 = (state_55233[(8)]);\nvar inst_55204 = cljs.core.deref(ref);\nvar inst_55206 = translations.tongue_base.process_dict_ops(inst_55204,inst_55199);\nvar inst_55207 = cljs.core.reset_BANG_(ref,inst_55206);\nvar state_55233__$1 = state_55233;\nvar statearr_55281_55411 = state_55233__$1;\n(statearr_55281_55411[(2)] = inst_55207);\n\n(statearr_55281_55411[(1)] = (8));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55235 === (7))){\nvar inst_55212 = alert(\"Local dictionary parse failure\");\nvar state_55233__$1 = state_55233;\nvar statearr_55283_55413 = state_55233__$1;\n(statearr_55283_55413[(2)] = inst_55212);\n\n(statearr_55283_55413[(1)] = (8));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55235 === (8))){\nvar inst_55215 = (state_55233[(2)]);\nvar state_55233__$1 = state_55233;\nvar statearr_55285_55414 = state_55233__$1;\n(statearr_55285_55414[(2)] = inst_55215);\n\n(statearr_55285_55414[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n}\n});\nreturn (function() {\nvar translations$tongue_base$load_all_translations_$_state_machine__29363__auto__ = null;\nvar translations$tongue_base$load_all_translations_$_state_machine__29363__auto____0 = (function (){\nvar statearr_55287 = [null,null,null,null,null,null,null,null,null];\n(statearr_55287[(0)] = translations$tongue_base$load_all_translations_$_state_machine__29363__auto__);\n\n(statearr_55287[(1)] = (1));\n\nreturn statearr_55287;\n});\nvar translations$tongue_base$load_all_translations_$_state_machine__29363__auto____1 = (function (state_55233){\nwhile(true){\nvar ret_value__29364__auto__ = (function (){try{while(true){\nvar result__29365__auto__ = switch__29362__auto__(state_55233);\nif(cljs.core.keyword_identical_QMARK_(result__29365__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__29365__auto__;\n}\nbreak;\n}\n}catch (e55289){var ex__29366__auto__ = e55289;\nvar statearr_55291_55415 = state_55233;\n(statearr_55291_55415[(2)] = ex__29366__auto__);\n\n\nif(cljs.core.seq((state_55233[(4)]))){\nvar statearr_55293_55416 = state_55233;\n(statearr_55293_55416[(1)] = cljs.core.first((state_55233[(4)])));\n\n} else {\nthrow ex__29366__auto__;\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__29364__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__55417 = state_55233;\nstate_55233 = G__55417;\ncontinue;\n} else {\nreturn ret_value__29364__auto__;\n}\nbreak;\n}\n});\ntranslations$tongue_base$load_all_translations_$_state_machine__29363__auto__ = function(state_55233){\nswitch(arguments.length){\ncase 0:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29363__auto____0.call(this);\ncase 1:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29363__auto____1.call(this,state_55233);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ntranslations$tongue_base$load_all_translations_$_state_machine__29363__auto__.cljs$core$IFn$_invoke$arity$0 = translations$tongue_base$load_all_translations_$_state_machine__29363__auto____0;\ntranslations$tongue_base$load_all_translations_$_state_machine__29363__auto__.cljs$core$IFn$_invoke$arity$1 = translations$tongue_base$load_all_translations_$_state_machine__29363__auto____1;\nreturn translations$tongue_base$load_all_translations_$_state_machine__29363__auto__;\n})()\n})();\nvar state__29434__auto__ = (function (){var statearr_55295 = f__29433__auto__();\n(statearr_55295[(6)] = c__29432__auto____$1);\n\nreturn statearr_55295;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__29434__auto__);\n});\n})();\nvar inst_55240 = cljs.core.async.impl.dispatch.run(inst_55239);\nvar state_55259__$1 = (function (){var statearr_55297 = state_55259;\n(statearr_55297[(10)] = inst_55174);\n\n(statearr_55297[(11)] = inst_55240);\n\n(statearr_55297[(12)] = inst_55157);\n\nreturn statearr_55297;\n})();\nvar statearr_55299_55418 = state_55259__$1;\n(statearr_55299_55418[(2)] = inst_55237);\n\n(statearr_55299_55418[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55260 === (4))){\nvar inst_55146 = (state_55259[(9)]);\nvar inst_55246 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_55146], 0));\nvar inst_55249 = [\"error from dictionary.txt \",inst_55246].join('');\nvar inst_55251 = alert(inst_55249);\nvar state_55259__$1 = state_55259;\nvar statearr_55301_55422 = state_55259__$1;\n(statearr_55301_55422[(2)] = inst_55251);\n\n(statearr_55301_55422[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_55260 === (5))){\nvar inst_55254 = (state_55259[(2)]);\nvar state_55259__$1 = state_55259;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_55259__$1,inst_55254);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n});\nreturn (function() {\nvar translations$tongue_base$load_all_translations_$_state_machine__29363__auto__ = null;\nvar translations$tongue_base$load_all_translations_$_state_machine__29363__auto____0 = (function (){\nvar statearr_55303 = [null,null,null,null,null,null,null,null,null,null,null,null,null];\n(statearr_55303[(0)] = translations$tongue_base$load_all_translations_$_state_machine__29363__auto__);\n\n(statearr_55303[(1)] = (1));\n\nreturn statearr_55303;\n});\nvar translations$tongue_base$load_all_translations_$_state_machine__29363__auto____1 = (function (state_55259){\nwhile(true){\nvar ret_value__29364__auto__ = (function (){try{while(true){\nvar result__29365__auto__ = switch__29362__auto__(state_55259);\nif(cljs.core.keyword_identical_QMARK_(result__29365__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__29365__auto__;\n}\nbreak;\n}\n}catch (e55305){var ex__29366__auto__ = e55305;\nvar statearr_55307_55425 = state_55259;\n(statearr_55307_55425[(2)] = ex__29366__auto__);\n\n\nif(cljs.core.seq((state_55259[(4)]))){\nvar statearr_55309_55427 = state_55259;\n(statearr_55309_55427[(1)] = cljs.core.first((state_55259[(4)])));\n\n} else {\nthrow ex__29366__auto__;\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__29364__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__55428 = state_55259;\nstate_55259 = G__55428;\ncontinue;\n} else {\nreturn ret_value__29364__auto__;\n}\nbreak;\n}\n});\ntranslations$tongue_base$load_all_translations_$_state_machine__29363__auto__ = function(state_55259){\nswitch(arguments.length){\ncase 0:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29363__auto____0.call(this);\ncase 1:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29363__auto____1.call(this,state_55259);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ntranslations$tongue_base$load_all_translations_$_state_machine__29363__auto__.cljs$core$IFn$_invoke$arity$0 = translations$tongue_base$load_all_translations_$_state_machine__29363__auto____0;\ntranslations$tongue_base$load_all_translations_$_state_machine__29363__auto__.cljs$core$IFn$_invoke$arity$1 = translations$tongue_base$load_all_translations_$_state_machine__29363__auto____1;\nreturn translations$tongue_base$load_all_translations_$_state_machine__29363__auto__;\n})()\n})();\nvar state__29434__auto__ = (function (){var statearr_55311 = f__29433__auto__();\n(statearr_55311[(6)] = c__29432__auto__);\n\nreturn statearr_55311;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__29434__auto__);\n}));\n\nreturn c__29432__auto__;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Common translation support for both production and edit systems","~:file","translations/tongue_base.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",29],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$go","^D"],"~:excludes",["~#set",[]],"~:name","~$translations.tongue-base","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.core","^O","~$tongue","~$tongue.core","^Q","^Q","~$cljs.core","^R","~$goog","^S","^D","^D","~$clojure.string","^T","~$cljs.reader","^U","~$predict-prostate.state.localStorage","^V","~$edn","^U"],"~:seen",["^H",["~:require","~:require-macros"]],"~:uses",["^ ","~$put!","^D","~$alts!","^D","~$GET","^O","~$POST","^O","~$starts-with?","^T","~$split","^T","~$get-settings!","^V"],"^Z",["^ ","^D","^D","^R","^R","^U","^U","^W","^U"],"~:form",["~#list",["~$ns","^J","Common translation support for both production and edit systems",["^18",["^Y",["^D","~:refer",["^10","^11"]],["^Q","~:as","^P"],["^O","^1:",["^12","^13"]],["^U","^1;","^W"],["^T","^1:",["^14","^15"]],["^V","^1:",["^16"]]]],["^18",["^Z",["^D","^1:",["^F"]]]]]],"~:flags",["^ ","^Y",["^H",[]],"^Z",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^D","^Q","^O","^U","^T","^V"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","translations/tongue_base.cljs"],"~:compiled-at",1637779088539,"~:resource-name","translations/tongue_base.cljs","~:warnings",[],"~:source","(ns translations.tongue-base\n  \"Common translation support for both production and edit systems\"\n  (:require [cljs.core.async :refer [put! alts!]]\n            [tongue.core :as tongue]\n            [ajax.core :refer [GET POST]]\n            [cljs.reader :as edn]\n            [clojure.string :refer [starts-with? split]]\n            [predict-prostate.state.localStorage :refer [get-settings!]])\n  (:require-macros [cljs.core.async :refer [go]]))\n\n\n(defn wrap-translator\n  \"Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  \"\n  ([lang translator]\n   (fn [k & args]\n     (let [k* (if (keyword? k) [k] k)]\n       (if (vector? k*)\n         (let [translation (translator lang (first k*) args)]\n             ; use supplied default(s) if the translation is missing\n           (if (starts-with? translation \"{\")             ; indicates a missing entry\n             k*                                           ;(apply str (rest k*))                          ; return the original vector\n             translation))\n         (str k))))))\n\n\n(defn error-handler [{:keys [callback status status-text]}]\n  (println \"error dispatch - status : \" status \"\\ntext: \" status-text)\n  (callback (js/Error. (str status \" \" status-text))))\n\n;\n; Read the set of supported languages from \"languages.edn\" into state\n\n#_(defn handle-languages\n    \"if the languages file contains a set of two character keys, use it as a local list\"\n    ([ref edn-rsp]\n     (let [rsp (edn/read-string edn-rsp)]\n       (when (and (set? rsp) (every? #(and (keyword? %) (count (name %))) rsp))\n         (swap! ref assoc :languages rsp)))))\n\n(defn file-error [{:keys [status status-text]}]\n  (.log js/console (str \"file error: \" status \" \" status-text)))\n\n\n#_(defn get-languages\n    ([]\n     (get-languages \"languages.edn\"\n                    {:error-handler file-error\n                     :handler       handle-languages}))\n    ([m]\n     (get-languages \"languages.edn\" m))\n    ([url {:keys [error-handler handler]}]\n     (GET url {:error-handler file-error\n               :handler       handler\n               :format        :transit})))\n\n\n;\n; dictionary handling\n;\n(defn process-dict-op\n  \"Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set\"\n  ([dict [op & args] _ #_wrap?]\n   ;(print \"op\" op args)\n   (case op\n     :upsert (let [[lang new-words] args\n                   current-lang (:lang dict)\n                   ;_ (print \"dict \" dict)\n                   ;_ (print \"lang \" lang)\n                   ;_ (print \"new words \" new-words)\n                   ;_ (println \"selected lang is\" (:lang dict))\n                   ;_ (println \"adding language\" lang \"to\" (:languages dict))\n                   new-lang-dict (-> dict\n                                     (update :languages conj lang)\n                                     (update-in [:translations lang] merge new-words))]\n               (assoc new-lang-dict\n                      :translator (wrap-translator current-lang (tongue/build-translate (:translations new-lang-dict)))))\n\n     :switch (let [[lang] args]\n               ;(println \"switch lang\" lang)\n               ;(print \"translations\" (get-in dict [:translations lang]) lang)\n               (if (and lang (seq (get-in dict [:translations lang])))\n                 (assoc dict :lang lang\n                        :translator (wrap-translator lang (tongue/build-translate (:translations dict))))\n                 dict))))\n  ([dict op-args]\n   (process-dict-op dict op-args true)))\n\n\n(defn process-dict-ops\n  \"process a sequence of operations into the translation state\"\n  [t-state op-args]\n  (let [new-lang (:lang (get-settings! {:lang :en}))]\n    (reduce process-dict-op t-state (conj op-args [:switch new-lang]))))\n\n\n(defn handle-dictionary\n  \"process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD.\"\n  ([ref edn-rsp]\n   ; ref must contain a :languages set\n   {:pre (set? (:languages @ref))}\n   (let [op-args (edn/read-string edn-rsp)]\n     (when (and (seq op-args)\n                (every? (fn [[op lang & _]]\n                          (and (#{:upsert :switch} op)      ; op is valid\n                               (keyword? lang)\n                               (= 2 (count (name lang)))    ; accept lang codes of 2 characters\n                               ))\n                        op-args))\n       (reset! ref (process-dict-ops @ref op-args))))))\n\n\n(defn get-dictionary\n  \"read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD\"\n  [url {:keys [handler]}]\n  (GET url {:error-handler file-error                      ;on-error\n            :handler       handler\n            :format        :transit                        ;:transit\n            }))\n\n;;\n;; load translation state; Call this to set up the translation system\n;;\n(defn load-translations*\n  \"load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD\"\n  ([local-dictionary-url handler]\n   (get-dictionary\n    local-dictionary-url {:headers {\"Cache-Control\" \"no-store\"}\n                          :on-error file-error\n                          :handler  handler})))\n\n\n\n\n(defn validate-op-args [op-args]\n  (and (seq op-args)\n       (every? (fn [[op lang & args]]\n                 (condp = op\n                   :upsert (and\n                            (seq? args)\n                            (map? (first args))\n                            (keyword? lang))\n                   :switch (keyword? lang)\n                   false))\n               op-args)))\n\n(defn read-json-dict\n  \"Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'.\"\n  [json]\n  (->> json\n       (map\n        (fn [[cmd lang m]]\n          [(keyword cmd)\n           (keyword lang)\n           (into {} (map\n                     (fn [[k v]]\n                       [(->> (split k #\"#\")\n                             (interpose \"/\")\n                             (apply str)\n                             (keyword)) v])\n                     m))]))))\n\n;;\n;; load local translations into state; Do this once at startup\n;;\n(defn load-all-translations\n  \"Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json.\"\n  [static-chan ok-chan err-chan dictionary-endpoint ref]\n  ;{:pre (set? (:languages @ref))}                           ; ref must contain a :languages set\n\n  (get-dictionary\n   \"dictionary.txt\"\n   {:on-error #(put! err-chan %)\n    :handler  #(put! static-chan %)})\n\n  (go\n    (let [[seed-dict port] (alts! [static-chan err-chan])\n          seed-dict (edn/read-string seed-dict)]\n\n      (if (= static-chan port)\n\n        (do\n          (reset! ref (process-dict-ops @ref seed-dict))\n          ;(println \"seed-dict = \" seed-dict)\n          ;(println \"ref:\" @ref)\n          ;(println \"POSTING to \" dictionary-endpoint)\n          (POST dictionary-endpoint {:handler       #(put! ok-chan %)\n                                     :error-handler #(put! err-chan %)\n                                     :format        :transit})\n          (go\n            (let [[response port] (alts! [ok-chan err-chan])]\n              (if (= ok-chan port)\n                (let [op-args (read-json-dict response)]\n                  (if (validate-op-args op-args)\n                    (reset! ref (process-dict-ops @ref op-args))\n                    (js/alert (str \"Local dictionary parse failure\" #_(pr-str response)))))\n                (js/alert (str \"error from\" dictionary-endpoint \":\" (pr-str response)))))))\n        (js/alert (str \"error from dictionary.txt \" (pr-str seed-dict)))))))\n\n\n(comment\n  (process-dict-ops\n   {:lang :en}\n   [[:upsert [:en {:lang :en, :new-words \"new words\"}]]])\n\n  ; we can process a composition of op-args into the dictionary\n  (process-dict-ops\n   {:lang         :en\n    :translations {:en {}}\n    :languages    #{}}\n   [[:upsert :en {:lang :en, :new-words \"new words\"}]\n    [:upsert :es {:lang :en :some-key \"some-value\"}]]))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["translations.tongue-base/wrap-translator","lang","translator","k","args","k*","cljs.core/Keyword","cljs.core/vector?","translation","G__54998","G__54999","G__55001","cljs.core/first","clojure.string/starts-with?","p__55003","map__55005","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","translations.tongue-base/error-handler","callback","status","status-text","cljs.core.println","G__55009","js/Error","p__55013","map__55015","translations.tongue-base/file-error","js/console","var_args","G__55021","translations.tongue-base/process-dict-op","p__55023","vec__55025","seq__55026","cljs.core/seq","first__55027","cljs.core/next","dict","op","_","G__55032","vec__55036","cljs.core.nth","new-words","current-lang","new-lang-dict","cljs.core.update","cljs.core/conj","cljs.core.update_in","cljs.core/merge","cljs.core.assoc","tongue.core/build-translate","vec__55042","and__4115__auto__","cljs.core.get_in","op-args","translations.tongue_base.process_dict_op","translations.tongue-base/process-dict-ops","t-state","new-lang","predict-prostate.state.localStorage/get-settings!","cljs.core.reduce","cljs.core.conj","translations.tongue-base/handle-dictionary","ref","edn-rsp","cljs.core/set?","cljs.core/deref","cljs.reader.read_string","cljs.core/every?","p__55060","vec__55064","seq__55065","first__55066","fexpr__55072","cljs.core._EQ_","cljs.core/name","cljs.core/reset!","p__55074","map__55076","translations.tongue-base/get-dictionary","url","handler","ajax.core.GET","translations.tongue-base/load-translations*","local-dictionary-url","translations.tongue-base/validate-op-args","p__55094","vec__55098","seq__55099","first__55100","pred__55104","expr__55105","cljs.core/=","cljs.core/seq?","cljs.core/map?","translations.tongue-base/read-json-dict","json","cljs.core.map","p__55108","vec__55112","cmd","m","cljs.core.keyword","cljs.core.into","p__55115","vec__55116","v","clojure.string.split","cljs.core.interpose","cljs.core/str","translations.tongue-base/load-all-translations","static-chan","ok-chan","err-chan","dictionary-endpoint","p1__55123#","p1__55124#","cljs.core.async.put_BANG_","c__29432__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__29433__auto__","switch__29362__auto__","state_55259","state_val_55260","inst_55134","cljs.core/PersistentVector","inst_55138","inst_55139","cljs.core.async/ioc-alts!","inst_55141","inst_55144","inst_55142","inst_55146","inst_55150","statearr-55262","statearr-55263","statearr-55265","inst_55155","inst_55156","inst_55157","inst_55164","inst_55166","vec__55131","p1__55125#","inst_55171","p1__55126#","inst_55172","inst_55173","cljs.core/PersistentHashMap","inst_55174","inst_55237","inst_55239","state_55233","state_val_55235","inst_55181","inst_55183","inst_55184","inst_55186","inst_55190","inst_55192","inst_55194","statearr-55267","statearr-55269","statearr-55271","inst_55199","inst_55200","statearr-55273","statearr-55275","statearr-55277","inst_55221","inst_55222","inst_55223","statearr-55279","inst_55227","cljs.core.async.impl.ioc-helpers/return-chan","inst_55204","inst_55206","inst_55207","statearr-55281","inst_55212","statearr-55283","inst_55215","statearr-55285","statearr-55287","state-machine__29363__auto__","ret-value__29364__auto__","result__29365__auto__","cljs.core/keyword-identical?","ex__29366__auto__","e55289","statearr-55291","statearr-55293","state__29434__auto__","statearr-55295","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","inst_55240","statearr-55297","statearr-55299","inst_55246","inst_55249","inst_55251","statearr-55301","inst_55254","statearr-55303","e55305","statearr-55307","statearr-55309","statearr-55311","seed-dict","port","ajax.core.POST","js/alert","cljs.core.pr_str"]],"~:used-vars",["^H",["~$cljs.core/keyword","~$cljs.core/str","~$clojure.string/starts-with?","~$translations.tongue-base/validate-op-args","~$clojure.string/split","~$cljs.core/vector?","~$cljs.core/=","~$translations.tongue-base/error-handler","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core.async/put!","~$js/console","~$ajax.core/GET","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/conj","~$cljs.core/map","~$cljs.core.async.impl.dispatch/run","~$cljs.core/get-in","~$translations.tongue-base/load-all-translations","~$translations.tongue-base/file-error","~$translations.tongue-base/handle-dictionary","~$translations.tongue-base/load-translations*","~$translations.tongue-base/process-dict-ops","~$cljs.core/set?","~$cljs.core/println","~$tongue.core/build-translate","~$translations.tongue-base/read-json-dict","~$cljs.core/assoc","~$cljs.core/interpose","~$translations.tongue-base/process-dict-op","~$cljs.core/first","~$translations.tongue-base/wrap-translator","~$cljs.core/seq?","~$cljs.core/name","~$cljs.core/every?","~$js/Error","~$translations.tongue-base/get-dictionary"]]],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^1@","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/core/async/impl/ioc_helpers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$cljs.core.async.impl.protocols"]]],["^1@","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.labs.userAgent.util","~$goog.string"]]],["^1@","cljs/core/async.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1@","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Promise","~$goog.events.EventTarget"]]],["^1@","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^2U"]]],["^1@","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","~$goog.asserts"]]],["^1@","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1@","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^2T","~$goog.object","~$goog.string.internal"]]],["^1@","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^36"]]],["^1@","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32"]]],["^1@","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2T","~$goog.reflect","^2U"]]],["^1@","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1@","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1@","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1@","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/net/xhrmanager.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.events","~$goog.events.Event","~$goog.events.EventHandler","^31","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.structs.Map"]]],["^1@","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.async.FreeList"]]],["^1@","ajax/interceptors.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","~$ajax.util","~$ajax.url","~$ajax.protocols"]]],["^1@","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^33","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1@","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^34"]]],["^1@","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2U","~$goog.string.StringBuffer"]]],["^1@","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.structs.Heap"]]],["^1@","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Timer","^2[","^32","^3T","^31","~$goog.json.hybrid","~$goog.log","^3K","^3L","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^35","^2U","~$goog.structs","^3O","~$goog.uri.utils","^34"]]],["^1@","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^35"]]],["^1@","ajax/protocols.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","ajax/transit.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$cognitect.transit","~$ajax.interceptors","^3S","^3Q"]]],["^1@","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3Y","^3Z","^3[","^3X","^2[","^2U","^41"]]],["^1@","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1@","ajax/simple.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^3S","^4;","~$ajax.formats","^3Q","^3M"]]],["^1@","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Disposable","^32","^3H","^3I","^3V","^3W","^35"]]],["^1@","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.disposable.IDisposable"]]],["^1@","ajax/url.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^3Q"]]],["^1@","translations/tongue_base.cljs"],["ca3e20155d6603c12110d17d8b49ff72a22f25ef","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^D","^Q","^O","^U","^T","^V"]]],["^1@","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32"]]],["^1@","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^48","~$goog.structs.Collection","^3O"]]],"~:SHADOW-TIMESTAMP",[1635266348000,1635266348000,1634894918000],["^1@","ajax/xml_http_request.cljs"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3S","^2U"]]],["^1@","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^3@"]]],["^1@","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.events.ListenableKey"]]],["^1@","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.html.trustedtypes","^39","^3:","^3;","^3<"]]],["^1@","cljs/core/async/impl/channels.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S","^2Y","^2W"]]],["^1@","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","~$goog.events.Listener","^35"]]],["^1@","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/core/async/impl/dispatch.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2W","^3D"]]],["^1@","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.html.SafeUrl","^3;","^3<","^36"]]],["^1@","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4F","^38","~$goog.html.uncheckedconversions","^3;","^36"]]],["^1@","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","cljs/core/async/impl/protocols.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1@","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^3M","~$goog.structs.PriorityPool"]]],["^1@","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.dom.TagName","~$goog.dom.tags","^4J","^4K","~$goog.html.SafeStyleSheet","^4F","^38","^4D","^39","^3:","^3=","^35","^3;","^3<","^36"]]],["^1@","tongue/macro.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","ajax/easy.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$ajax.simple","~$ajax.transit","~$ajax.json","~$ajax.ring","^3R","^4>"]]],["^1@","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^35"]]],["^1@","ajax/util.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3S"]]],["^1@","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","ajax/xhrio.cljs"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3L","^3K","^3M","~$goog.net.XhrManager","~$goog.Uri","~$goog.json","^3H","^3S"]]],["^1@","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2["]]],["^1@","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^2T","^2U"]]],["^1@","ajax/ring.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^4;","^3S","^4>"]]],["^1@","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^3G","~$com.cognitect.transit.types"]]],["^1@","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^35","^40","~$cljs.tools.reader.edn","^41"]]],["^1@","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4P","~$goog.dom.safe","^4I","^4L","~$goog.math.Coordinate","~$goog.math.Size","^35","^2U","~$goog.string.Unicode","^34"]]],["^1@","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.debug.Error","^53"]]],["^1@","tongue/inst.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","~$tongue.macro"]]],["^1@","cljs/core/async/impl/buffers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S"]]],["^1@","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.debug.LogRecord"]]],["^1@","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^2U","^48","^3O","^49","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","tongue/core.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","~$tongue.inst","~$tongue.number","^59"]]],["^1@","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Thenable","^32","^3P","~$goog.async.run","^3E","^58","~$goog.promise.Resolver"]]],["^1@","cljs/core/async/impl/timers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S","^2V","^2Y"]]],["^1@","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",[]]],["^1@","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^4Y"]]],["^1@","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^35"]]],["^1@","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3Y","^T","~$cljs.tools.reader.impl.inspect"]]],["^1@","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2U","^41"]]],["^1@","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4?","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1@","tongue/number.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^59"]]],["^1@","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","^50","~$goog.math.Long"]]],["^1@","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^35","~$goog.structs.Node"]]],["^1@","ajax/json.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^4:","~$clojure.walk","^4;","^3S"]]],["^1@","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32"]]],["^1@","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^54","^4L","^3;","^36"]]],["^1@","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","~$com.cognitect.transit.eq","^5E"]]],["^1@","ajax/formats.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^4;","^3Q","^3S"]]],["^1@","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^36"]]],["^1@","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z"]]],["^1@","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","~$goog.debug.errorcontext","^34"]]],["^1@","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.math"]]],["^1@","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3Z","^2U","^41"]]],["^1@","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^4H","^5J"]]],["^1@","ajax/core.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^3R","^4U","^4T","^4V","^4>","^3Q","^4;","^4S","~$ajax.easy","^3S","~$ajax.xhrio","~$ajax.xml-http-request"]]],["^1@","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^3T","~$goog.dom","^4P","^54","^4H","^4I","^38","^3=","^3>","^3;"]]],["^1@","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^4I","^4J","^4K","^4R","^4F","^38","^3;","^36"]]],["^1@","predict_prostate/state/localStorage.cljs"],["ab609d64f83ca29ee84d7363ebaa46808ba524f7","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^U"]]],["^1@","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.debug","~$goog.debug.LogBuffer","^5:"]]],["^1@","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4["]]],["^1@","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4?","~$goog.events.EventId"]]],["^1@","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3X","^3Y","^3Z"]]],["^1@","goog/events/eventhandler.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4?","^3H","^35"]]],["^1@","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5E","~$goog.math.Integer","^2U","^35","^2[","^4X","^41"]]],["^1@","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^50","^5H","^3F","^3G"]]],["^1@","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^4D","^3;","^3<"]]],["^1@","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5O","~$goog.debug.LogManager","^5:","~$goog.debug.Logger"]]],["^1@","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^4K","^35","^3;","^3<","^36"]]],["^1@","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5O","^33","^3I","~$goog.events.EventType","^3@","^34"]]],["^1@","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^3@"]]],["^1@","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^34"]]],["^1@","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^2U"]]],["^1@","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^3<"]]],["^1@","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5Q"]]],["^1@","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","^3G","~$com.cognitect.transit.handlers","^50","^4[","^5E"]]],["^1@","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4<"]]],["^1@","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.net.WrapperXmlHttpFactory","^4="]]],["^1@","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$com.cognitect.transit","^50","^5H","^5E"]]]]],"~:clj-info",["^ ","jar:file:/Users/mehdi/.m2/repository/tongue/tongue/0.2.7/tongue-0.2.7.jar!/tongue/macro.cljc",1635148719000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/concurrent.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async/impl/ioc_macros.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/cljs-ajax/cljs-ajax/0.8.3/cljs-ajax-0.8.3.jar!/ajax/macros.clj",1635148728000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/dispatch.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/protocols.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/exec/threadpool.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1634894918000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Common translation support for both production and edit systems","^7","translations/tongue_base.cljs","^8",1,"^9",5,"^:",1,"^;",29],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^D"],"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^Q","^Q","^Q","^R","^R","^S","^S","^D","^D","^T","^T","^U","^U","^V","^V","^W","^U"],"^X",["^H",["^Y","^Z"]],"~:shadow/js-access-global",["^H",["alert","Error"]],"^[",["^ ","^10","^D","^11","^D","^12","^O","^13","^O","^14","^T","^15","^T","^16","^V"],"~:defs",["^ ","~$file-error",["^ ","~:protocol-inline",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",54,"^9",7,"^:",54,"^;",17,"~:arglists",["^18",["~$quote",["^18",[[["^ ","~:keys",["~$status","~$status-text"]]]]]]]],"^I","^2:","^7","translations/tongue_base.cljs","^;",17,"~:method-params",["^18",[["~$p__55013"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^9",1,"~:variadic?",false,"^8",54,"~:ret-tag","~$js","^:",54,"~:max-fixed-arity",1,"~:fn-var",true,"^6W",["^18",["^6X",["^18",[[["^ ","^6Y",["^6Z","^6["]]]]]]]],"~$handle-dictionary",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",111,"^9",7,"^:",111,"^;",24,"^6W",["^18",["^6X",["^18",[["~$ref","~$edn-rsp"]]]]],"^6","process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD."],"^I","^2;","^7","translations/tongue_base.cljs","^;",24,"^70",["^18",[["^7:","^7;"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",111,"^75",["^H",[null,"~$any","~$clj-nil"]],"^:",111,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7:","^7;"]]]]],"^6","process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD."],"~$load-all-translations",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",189,"^9",7,"^:",189,"^;",28,"^6W",["^18",["^6X",["^18",[["~$static-chan","~$ok-chan","~$err-chan","~$dictionary-endpoint","^7:"]]]]],"^6","Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json."],"^I","^29","^7","translations/tongue_base.cljs","^;",28,"^70",["^18",[["^7?","^7@","^7A","^7B","^7:"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",189,"^75","^7<","^:",189,"^77",5,"^78",true,"^6W",["^18",["^6X",["^18",[["^7?","^7@","^7A","^7B","^7:"]]]]],"^6","Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json."],"~$load-translations*",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",140,"^9",7,"^:",140,"^;",25,"^6W",["^18",["^6X",["^18",[["~$local-dictionary-url","~$handler"]]]]],"^6","load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD"],"^I","^2<","^7","translations/tongue_base.cljs","^;",25,"^70",["^18",[["^7D","^7E"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",140,"^75","^7<","^:",140,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7D","^7E"]]]]],"^6","load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD"],"~$process-dict-op",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",74,"^9",7,"^:",74,"^;",22,"^6W",["^18",["^6X",["^18",[["~$dict",["~$op","~$&","~$args"],"~$_"],["^7G","~$op-args"]]]]],"^6","Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set","~:top-fn",["^ ","^74",false,"~:fixed-arity",3,"^77",3,"^70",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]],"^6W",["^18",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]]],"^73",["^18",[null,null]]]],"^I","^2D","^7","translations/tongue_base.cljs","^;",22,"^7K",["^ ","^74",false,"^7L",3,"^77",3,"^70",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]],"^6W",["^18",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]]],"^73",["^18",[null,null]]],"^70",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]],"^72",null,"^7L",3,"^73",["^18",[null,null]],"^9",1,"^74",false,"~:methods",[["^ ","^7L",3,"^74",false],["^ ","^7L",2,"^74",false,"~:tag","^7<"]],"^8",74,"^:",74,"^77",3,"^78",true,"^6W",["^18",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]]],"^6","Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set"],"~$process-dict-ops",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",104,"^9",7,"^:",104,"^;",23,"^6W",["^18",["^6X",["^18",[["~$t-state","^7J"]]]]],"^6","process a sequence of operations into the translation state"],"^I","^2=","^7","translations/tongue_base.cljs","^;",23,"^70",["^18",[["^7P","^7J"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",104,"^75",["^H",[null,"^7<"]],"^:",104,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7P","^7J"]]]]],"^6","process a sequence of operations into the translation state"],"~$read-json-dict",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",168,"^9",7,"^:",168,"^;",21,"^6W",["^18",["^6X",["^18",[["~$json"]]]]],"^6","Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'."],"^I","^2A","^7","translations/tongue_base.cljs","^;",21,"^70",["^18",[["^7R"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",168,"^75","~$cljs.core/LazySeq","^:",168,"^77",1,"^78",true,"^6W",["^18",["^6X",["^18",[["^7R"]]]]],"^6","Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'."],"~$validate-op-args",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",156,"^9",7,"^:",156,"^;",23,"^6W",["^18",["^6X",["^18",[["^7J"]]]]]],"^I","^1O","^7","translations/tongue_base.cljs","^;",23,"^70",["^18",[["^7J"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",156,"^75","~$boolean","^:",156,"^77",1,"^78",true,"^6W",["^18",["^6X",["^18",[["^7J"]]]]]],"~$get-dictionary",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",128,"^9",7,"^:",128,"^;",21,"^6W",["^18",["^6X",["^18",[["~$url",["^ ","^6Y",["^7E"]]]]]]],"^6","read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD"],"^I","^2K","^7","translations/tongue_base.cljs","^;",21,"^70",["^18",[["^7W","~$p__55074"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",128,"^75","^7<","^:",128,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7W",["^ ","^6Y",["^7E"]]]]]]],"^6","read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD"],"~$wrap-translator",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",12,"^9",7,"^:",12,"^;",22,"^6W",["^18",["^6X",["^18",[["~$lang","~$translator"]]]]],"^6","Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  "],"^I","^2F","^7","translations/tongue_base.cljs","^;",22,"^70",["^18",[["^7Z","^7["]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",12,"^75","~$function","^:",12,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7Z","^7["]]]]],"^6","Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  "],"~$error-handler",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",40,"^9",7,"^:",40,"^;",20,"^6W",["^18",["^6X",["^18",[[["^ ","^6Y",["~$callback","^6Z","^6["]]]]]]]],"^I","^1S","^7","translations/tongue_base.cljs","^;",20,"^70",["^18",[["~$p__55003"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",40,"^75","^7<","^:",40,"^77",1,"^78",true,"^6W",["^18",["^6X",["^18",[[["^ ","^6Y",["^82","^6Z","^6["]]]]]]]]],"^Z",["^ ","^D","^D","^R","^R","^U","^U","^W","^U"],"~:cljs.analyzer/constants",["^ ","^X",["^H",["~:format","~:status-text","~:recur","~:headers","~:error-handler","~:lang","~:en","~:transit","~:status","~:translator","~:upsert","~:on-error","~:languages","~:callback","~:handler","~:switch","~:translations"]],"~:order",["^8B","^8=","^86","^8:","^8A","^8E","^8>","^8;","^8D","^8?","^8C","^89","^85","^8<","^88","^8@","^87"]],"^1<",["^ ","^Y",["^H",[]],"^Z",["^H",[]]],"^1=",["^ "],"^1>",["^S","^R","^D","^Q","^O","^U","^T","^V"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2M",[["^8I","~:static-fns"],true,["^8I","~:shadow-tweaks"],null,["^8I","~:source-map-inline"],null,["^8I","~:elide-asserts"],false,["^8I","~:optimize-constants"],null,["^8I","^1C"],null,["^8I","~:external-config"],null,["^8I","~:tooling-config"],null,["^8I","~:emit-constants"],null,["^8I","~:load-tests"],null,["^8I","~:form-size-threshold"],null,["^8I","~:data-readers"],null,["^8I","~:infer-externs"],"~:auto",["^8I","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8I","~:fn-invoke-direct"],null,["^8I","~:source-map"],"/dev/null"]]]