["^ ","~:output",["^ ","~:js","goog.provide('translations.tongue_base');\n/**\n * Return a translation function which wraps tongue 'translate', giving it similar\n *   capabilities as the tempura translator.\n * \n *   The returned function takes a language, a k to translate, plus any args\n * \n *   If k is a string it returns k untranslated.\n * \n *   If k is a keyword, it looks up  k in the translations dictionary for the\n *   given language, possibly with argument interpolation. i.e. Just like the original.\n * \n *   If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n *   be used to document the translation.\n * \n *   If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n *   \n */\ntranslations.tongue_base.wrap_translator = (function translations$tongue_base$wrap_translator(lang,translator){\nreturn (function() { \nvar G__32453__delegate = function (k,args){\nvar k_STAR_ = (((k instanceof cljs.core.Keyword))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null):k);\nif(cljs.core.vector_QMARK_(k_STAR_)){\nvar translation = (function (){var G__32240 = lang;\nvar G__32241 = cljs.core.first(k_STAR_);\nvar G__32242 = args;\nreturn (translator.cljs$core$IFn$_invoke$arity$3 ? translator.cljs$core$IFn$_invoke$arity$3(G__32240,G__32241,G__32242) : translator.call(null,G__32240,G__32241,G__32242));\n})();\nif(clojure.string.starts_with_QMARK_(translation,\"{\")){\nreturn k_STAR_;\n} else {\nreturn translation;\n}\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(k);\n}\n};\nvar G__32453 = function (k,var_args){\nvar args = null;\nif (arguments.length > 1) {\nvar G__32456__i = 0, G__32456__a = new Array(arguments.length -  1);\nwhile (G__32456__i < G__32456__a.length) {G__32456__a[G__32456__i] = arguments[G__32456__i + 1]; ++G__32456__i;}\n  args = new cljs.core.IndexedSeq(G__32456__a,0,null);\n} \nreturn G__32453__delegate.call(this,k,args);};\nG__32453.cljs$lang$maxFixedArity = 1;\nG__32453.cljs$lang$applyTo = (function (arglist__32457){\nvar k = cljs.core.first(arglist__32457);\nvar args = cljs.core.rest(arglist__32457);\nreturn G__32453__delegate(k,args);\n});\nG__32453.cljs$core$IFn$_invoke$arity$variadic = G__32453__delegate;\nreturn G__32453;\n})()\n;\n});\ntranslations.tongue_base.error_handler = (function translations$tongue_base$error_handler(p__32246){\nvar map__32247 = p__32246;\nvar map__32247__$1 = (((((!((map__32247 == null))))?(((((map__32247.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32247.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32247):map__32247);\nvar callback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32247__$1,new cljs.core.Keyword(null,\"callback\",\"callback\",-705136228));\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32247__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\nvar status_text = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32247__$1,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478));\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"error dispatch - status : \",status,\"\\ntext: \",status_text], 0));\n\nvar G__32249 = (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(status),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_text)].join('')));\nreturn (callback.cljs$core$IFn$_invoke$arity$1 ? callback.cljs$core$IFn$_invoke$arity$1(G__32249) : callback.call(null,G__32249));\n});\ntranslations.tongue_base.file_error = (function translations$tongue_base$file_error(p__32251){\nvar map__32252 = p__32251;\nvar map__32252__$1 = (((((!((map__32252 == null))))?(((((map__32252.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32252.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32252):map__32252);\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32252__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\nvar status_text = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32252__$1,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478));\nreturn console.log([\"file error: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_text)].join(''));\n});\n/**\n * Process ops over a dictionary, returning a new dictionary.\n *   If the ops merge in words from a new language, that is merged in to the supported languages set\n */\ntranslations.tongue_base.process_dict_op = (function translations$tongue_base$process_dict_op(var_args){\nvar G__32255 = arguments.length;\nswitch (G__32255) {\ncase 3:\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3 = (function (dict,p__32256,_){\nvar vec__32257 = p__32256;\nvar seq__32258 = cljs.core.seq(vec__32257);\nvar first__32259 = cljs.core.first(seq__32258);\nvar seq__32258__$1 = cljs.core.next(seq__32258);\nvar op = first__32259;\nvar args = seq__32258__$1;\nvar G__32260 = op;\nvar G__32260__$1 = (((G__32260 instanceof cljs.core.Keyword))?G__32260.fqn:null);\nswitch (G__32260__$1) {\ncase \"upsert\":\nvar vec__32261 = args;\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32261,(0),null);\nvar new_words = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32261,(1),null);\nvar current_lang = new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104).cljs$core$IFn$_invoke$arity$1(dict);\nvar new_lang_dict = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update.cljs$core$IFn$_invoke$arity$4(dict,new cljs.core.Keyword(null,\"languages\",\"languages\",1471910331),cljs.core.conj,lang),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673),lang], null),cljs.core.merge,new_words);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_lang_dict,new cljs.core.Keyword(null,\"translator\",\"translator\",-1752203115),translations.tongue_base.wrap_translator(current_lang,tongue.core.build_translate(new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673).cljs$core$IFn$_invoke$arity$1(new_lang_dict))));\n\nbreak;\ncase \"switch\":\nvar vec__32264 = args;\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32264,(0),null);\nif(cljs.core.truth_((function (){var and__4115__auto__ = lang;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.seq(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(dict,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673),lang], null)));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(dict,new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104),lang,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"translator\",\"translator\",-1752203115),translations.tongue_base.wrap_translator(lang,tongue.core.build_translate(new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673).cljs$core$IFn$_invoke$arity$1(dict)))], 0));\n} else {\nreturn dict;\n}\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__32260__$1)].join('')));\n\n}\n}));\n\n(translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$2 = (function (dict,op_args){\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3(dict,op_args,true);\n}));\n\n(translations.tongue_base.process_dict_op.cljs$lang$maxFixedArity = 3);\n\n/**\n * process a sequence of operations into the translation state\n */\ntranslations.tongue_base.process_dict_ops = (function translations$tongue_base$process_dict_ops(t_state,op_args){\nvar new_lang = new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104).cljs$core$IFn$_invoke$arity$1(predict_prostate.state.localStorage.get_settings_BANG_(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104),new cljs.core.Keyword(null,\"en\",\"en\",88457073)], null)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(translations.tongue_base.process_dict_op,t_state,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(op_args,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),new_lang], null)));\n});\n/**\n * process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n *   USED IN PRODUCTION DICTIONARY LOAD.\n */\ntranslations.tongue_base.handle_dictionary = (function translations$tongue_base$handle_dictionary(ref,edn_rsp){\nif(cljs.core.truth_(cljs.core.set_QMARK_)){\n} else {\nthrow (new Error(\"Assert failed: set?\"));\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"languages\",\"languages\",1471910331).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(ref)))){\n} else {\nthrow (new Error(\"Assert failed: (:languages (clojure.core/deref ref))\"));\n}\n\nvar op_args = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(edn_rsp);\nif(((cljs.core.seq(op_args)) && (cljs.core.every_QMARK_((function (p__32274){\nvar vec__32275 = p__32274;\nvar seq__32276 = cljs.core.seq(vec__32275);\nvar first__32277 = cljs.core.first(seq__32276);\nvar seq__32276__$1 = cljs.core.next(seq__32276);\nvar op = first__32277;\nvar first__32277__$1 = cljs.core.first(seq__32276__$1);\nvar seq__32276__$2 = cljs.core.next(seq__32276__$1);\nvar lang = first__32277__$1;\nvar _ = seq__32276__$2;\nvar and__4115__auto__ = (function (){var fexpr__32280 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),null,new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),null], null), null);\nreturn (fexpr__32280.cljs$core$IFn$_invoke$arity$1 ? fexpr__32280.cljs$core$IFn$_invoke$arity$1(op) : fexpr__32280.call(null,op));\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (((lang instanceof cljs.core.Keyword)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),((cljs.core.name(lang)).length))));\n} else {\nreturn and__4115__auto__;\n}\n}),op_args)))){\nreturn cljs.core.reset_BANG_(ref,translations.tongue_base.process_dict_ops(cljs.core.deref(ref),op_args));\n} else {\nreturn null;\n}\n});\n/**\n * read dictionary ops from a url.\n *   USED IN PRODUCTION DICTIONARY LOAD\n */\ntranslations.tongue_base.get_dictionary = (function translations$tongue_base$get_dictionary(url,p__32281){\nvar map__32282 = p__32281;\nvar map__32282__$1 = (((((!((map__32282 == null))))?(((((map__32282.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32282.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32282):map__32282);\nvar handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32282__$1,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612));\nreturn ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic(url,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"error-handler\",\"error-handler\",-484945776),translations.tongue_base.file_error,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),handler,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),new cljs.core.Keyword(null,\"transit\",\"transit\",359458387)], null)], 0));\n});\n/**\n * load the initial dictionary into the rtdb t-state.\n *   local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n *   At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n *   At test time this may be different.\n * \n *   USED IN PRODUCTION DICTIONARY LOAD\n */\ntranslations.tongue_base.load_translations_STAR_ = (function translations$tongue_base$load_translations_STAR_(local_dictionary_url,handler){\nreturn translations.tongue_base.get_dictionary(local_dictionary_url,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [\"Cache-Control\",\"no-store\"], null),new cljs.core.Keyword(null,\"on-error\",\"on-error\",1728533530),translations.tongue_base.file_error,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),handler], null));\n});\ntranslations.tongue_base.validate_op_args = (function translations$tongue_base$validate_op_args(op_args){\nreturn ((cljs.core.seq(op_args)) && (cljs.core.every_QMARK_((function (p__32291){\nvar vec__32292 = p__32291;\nvar seq__32293 = cljs.core.seq(vec__32292);\nvar first__32294 = cljs.core.first(seq__32293);\nvar seq__32293__$1 = cljs.core.next(seq__32293);\nvar op = first__32294;\nvar first__32294__$1 = cljs.core.first(seq__32293__$1);\nvar seq__32293__$2 = cljs.core.next(seq__32293__$1);\nvar lang = first__32294__$1;\nvar args = seq__32293__$2;\nvar pred__32295 = cljs.core._EQ_;\nvar expr__32296 = op;\nif(cljs.core.truth_((pred__32295.cljs$core$IFn$_invoke$arity$2 ? pred__32295.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),expr__32296) : pred__32295.call(null,new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),expr__32296)))){\nreturn ((cljs.core.seq_QMARK_(args)) && (cljs.core.map_QMARK_(cljs.core.first(args))) && ((lang instanceof cljs.core.Keyword)));\n} else {\nif(cljs.core.truth_((pred__32295.cljs$core$IFn$_invoke$arity$2 ? pred__32295.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),expr__32296) : pred__32295.call(null,new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),expr__32296)))){\nreturn (lang instanceof cljs.core.Keyword);\n} else {\nreturn false;\n}\n}\n}),op_args)));\n});\n/**\n * Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n *   Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n *   keywords in the form :ns/key rather than teh string ':ns#key'.\n */\ntranslations.tongue_base.read_json_dict = (function translations$tongue_base$read_json_dict(json){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__32298){\nvar vec__32299 = p__32298;\nvar cmd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32299,(0),null);\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32299,(1),null);\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32299,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cmd),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(lang),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__32302){\nvar vec__32303 = p__32302;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32303,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32303,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\"/\",clojure.string.split.cljs$core$IFn$_invoke$arity$2(k,/#/)))),v], null);\n}),m))], null);\n}),json);\n});\n/**\n * Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n * Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n * \n * Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n * into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n * \n * If a [:switch lang] command is received then the default language will change too.\n * We can use transit here since we are not dependent on coast middleware which only supports json.\n */\ntranslations.tongue_base.load_all_translations = (function translations$tongue_base$load_all_translations(static_chan,ok_chan,err_chan,dictionary_endpoint,ref){\ntranslations.tongue_base.get_dictionary(\"dictionary.txt\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"on-error\",\"on-error\",1728533530),(function (p1__32306_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(err_chan,p1__32306_SHARP_);\n}),new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),(function (p1__32307_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(static_chan,p1__32307_SHARP_);\n})], null));\n\nvar c__29668__auto__ = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\ncljs.core.async.impl.dispatch.run((function (){\nvar f__29669__auto__ = (function (){var switch__29583__auto__ = (function (state_32401){\nvar state_val_32402 = (state_32401[(1)]);\nif((state_val_32402 === (1))){\nvar inst_32321 = cljs.core.PersistentVector.EMPTY_NODE;\nvar inst_32322 = [static_chan,err_chan];\nvar inst_32323 = (new cljs.core.PersistentVector(null,2,(5),inst_32321,inst_32322,null));\nvar state_32401__$1 = state_32401;\nreturn cljs.core.async.ioc_alts_BANG_(state_32401__$1,(2),inst_32323);\n} else {\nif((state_val_32402 === (2))){\nvar inst_32325 = (state_32401[(7)]);\nvar inst_32329 = (state_32401[(8)]);\nvar inst_32325__$1 = (state_32401[(2)]);\nvar inst_32328 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_32325__$1,(0),null);\nvar inst_32329__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_32325__$1,(1),null);\nvar inst_32330 = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(inst_32328);\nvar inst_32331 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(static_chan,inst_32329__$1);\nvar state_32401__$1 = (function (){var statearr_32405 = state_32401;\n(statearr_32405[(7)] = inst_32325__$1);\n\n(statearr_32405[(9)] = inst_32330);\n\n(statearr_32405[(8)] = inst_32329__$1);\n\nreturn statearr_32405;\n})();\nif(inst_32331){\nvar statearr_32408_32478 = state_32401__$1;\n(statearr_32408_32478[(1)] = (3));\n\n} else {\nvar statearr_32409_32479 = state_32401__$1;\n(statearr_32409_32479[(1)] = (4));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32402 === (3))){\nvar inst_32325 = (state_32401[(7)]);\nvar inst_32330 = (state_32401[(9)]);\nvar inst_32329 = (state_32401[(8)]);\nvar inst_32333 = cljs.core.deref(ref);\nvar inst_32334 = translations.tongue_base.process_dict_ops(inst_32333,inst_32330);\nvar inst_32335 = cljs.core.reset_BANG_(ref,inst_32334);\nvar inst_32337 = [new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),new cljs.core.Keyword(null,\"error-handler\",\"error-handler\",-484945776),new cljs.core.Keyword(null,\"format\",\"format\",-1306924766)];\nvar inst_32339 = (function (){var vec__32318 = inst_32325;\nvar seed_dict = inst_32330;\nvar port = inst_32329;\nreturn (function (p1__32308_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(ok_chan,p1__32308_SHARP_);\n});\n})();\nvar inst_32340 = (function (){var vec__32318 = inst_32325;\nvar seed_dict = inst_32330;\nvar port = inst_32329;\nreturn (function (p1__32309_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(err_chan,p1__32309_SHARP_);\n});\n})();\nvar inst_32341 = [inst_32339,inst_32340,new cljs.core.Keyword(null,\"transit\",\"transit\",359458387)];\nvar inst_32342 = cljs.core.PersistentHashMap.fromArrays(inst_32337,inst_32341);\nvar inst_32343 = ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic(dictionary_endpoint,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_32342], 0));\nvar inst_32387 = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\nvar inst_32389 = (function (){var vec__32318 = inst_32325;\nvar seed_dict = inst_32330;\nvar port = inst_32329;\nvar c__29668__auto____$1 = inst_32387;\nreturn (function (){\nvar f__29669__auto__ = (function (){var switch__29583__auto__ = (function (state_32379){\nvar state_val_32382 = (state_32379[(1)]);\nif((state_val_32382 === (1))){\nvar inst_32347 = cljs.core.PersistentVector.EMPTY_NODE;\nvar inst_32348 = [ok_chan,err_chan];\nvar inst_32349 = (new cljs.core.PersistentVector(null,2,(5),inst_32347,inst_32348,null));\nvar state_32379__$1 = state_32379;\nreturn cljs.core.async.ioc_alts_BANG_(state_32379__$1,(2),inst_32349);\n} else {\nif((state_val_32382 === (2))){\nvar inst_32351 = (state_32379[(2)]);\nvar inst_32352 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_32351,(0),null);\nvar inst_32353 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_32351,(1),null);\nvar inst_32354 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ok_chan,inst_32353);\nvar state_32379__$1 = (function (){var statearr_32413 = state_32379;\n(statearr_32413[(7)] = inst_32352);\n\nreturn statearr_32413;\n})();\nif(inst_32354){\nvar statearr_32414_32483 = state_32379__$1;\n(statearr_32414_32483[(1)] = (3));\n\n} else {\nvar statearr_32415_32484 = state_32379__$1;\n(statearr_32415_32484[(1)] = (4));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32382 === (3))){\nvar inst_32357 = (state_32379[(8)]);\nvar inst_32352 = (state_32379[(7)]);\nvar inst_32357__$1 = translations.tongue_base.read_json_dict(inst_32352);\nvar inst_32358 = translations.tongue_base.validate_op_args(inst_32357__$1);\nvar state_32379__$1 = (function (){var statearr_32418 = state_32379;\n(statearr_32418[(8)] = inst_32357__$1);\n\nreturn statearr_32418;\n})();\nif(inst_32358){\nvar statearr_32419_32485 = state_32379__$1;\n(statearr_32419_32485[(1)] = (6));\n\n} else {\nvar statearr_32421_32486 = state_32379__$1;\n(statearr_32421_32486[(1)] = (7));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32382 === (4))){\nvar inst_32352 = (state_32379[(7)]);\nvar inst_32371 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_32352], 0));\nvar inst_32372 = [\"error from\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(dictionary_endpoint),\":\",inst_32371].join('');\nvar inst_32373 = alert(inst_32372);\nvar state_32379__$1 = state_32379;\nvar statearr_32423_32487 = state_32379__$1;\n(statearr_32423_32487[(2)] = inst_32373);\n\n(statearr_32423_32487[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32382 === (5))){\nvar inst_32375 = (state_32379[(2)]);\nvar state_32379__$1 = state_32379;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_32379__$1,inst_32375);\n} else {\nif((state_val_32382 === (6))){\nvar inst_32357 = (state_32379[(8)]);\nvar inst_32360 = cljs.core.deref(ref);\nvar inst_32361 = translations.tongue_base.process_dict_ops(inst_32360,inst_32357);\nvar inst_32362 = cljs.core.reset_BANG_(ref,inst_32361);\nvar state_32379__$1 = state_32379;\nvar statearr_32428_32489 = state_32379__$1;\n(statearr_32428_32489[(2)] = inst_32362);\n\n(statearr_32428_32489[(1)] = (8));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32382 === (7))){\nvar inst_32365 = alert(\"Local dictionary parse failure\");\nvar state_32379__$1 = state_32379;\nvar statearr_32433_32490 = state_32379__$1;\n(statearr_32433_32490[(2)] = inst_32365);\n\n(statearr_32433_32490[(1)] = (8));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32382 === (8))){\nvar inst_32367 = (state_32379[(2)]);\nvar state_32379__$1 = state_32379;\nvar statearr_32434_32491 = state_32379__$1;\n(statearr_32434_32491[(2)] = inst_32367);\n\n(statearr_32434_32491[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n}\n});\nreturn (function() {\nvar translations$tongue_base$load_all_translations_$_state_machine__29584__auto__ = null;\nvar translations$tongue_base$load_all_translations_$_state_machine__29584__auto____0 = (function (){\nvar statearr_32435 = [null,null,null,null,null,null,null,null,null];\n(statearr_32435[(0)] = translations$tongue_base$load_all_translations_$_state_machine__29584__auto__);\n\n(statearr_32435[(1)] = (1));\n\nreturn statearr_32435;\n});\nvar translations$tongue_base$load_all_translations_$_state_machine__29584__auto____1 = (function (state_32379){\nwhile(true){\nvar ret_value__29585__auto__ = (function (){try{while(true){\nvar result__29586__auto__ = switch__29583__auto__(state_32379);\nif(cljs.core.keyword_identical_QMARK_(result__29586__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__29586__auto__;\n}\nbreak;\n}\n}catch (e32437){var ex__29587__auto__ = e32437;\nvar statearr_32438_32492 = state_32379;\n(statearr_32438_32492[(2)] = ex__29587__auto__);\n\n\nif(cljs.core.seq((state_32379[(4)]))){\nvar statearr_32439_32493 = state_32379;\n(statearr_32439_32493[(1)] = cljs.core.first((state_32379[(4)])));\n\n} else {\nthrow ex__29587__auto__;\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__29585__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__32494 = state_32379;\nstate_32379 = G__32494;\ncontinue;\n} else {\nreturn ret_value__29585__auto__;\n}\nbreak;\n}\n});\ntranslations$tongue_base$load_all_translations_$_state_machine__29584__auto__ = function(state_32379){\nswitch(arguments.length){\ncase 0:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29584__auto____0.call(this);\ncase 1:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29584__auto____1.call(this,state_32379);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ntranslations$tongue_base$load_all_translations_$_state_machine__29584__auto__.cljs$core$IFn$_invoke$arity$0 = translations$tongue_base$load_all_translations_$_state_machine__29584__auto____0;\ntranslations$tongue_base$load_all_translations_$_state_machine__29584__auto__.cljs$core$IFn$_invoke$arity$1 = translations$tongue_base$load_all_translations_$_state_machine__29584__auto____1;\nreturn translations$tongue_base$load_all_translations_$_state_machine__29584__auto__;\n})()\n})();\nvar state__29670__auto__ = (function (){var statearr_32441 = f__29669__auto__();\n(statearr_32441[(6)] = c__29668__auto____$1);\n\nreturn statearr_32441;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__29670__auto__);\n});\n})();\nvar inst_32390 = cljs.core.async.impl.dispatch.run(inst_32389);\nvar state_32401__$1 = (function (){var statearr_32442 = state_32401;\n(statearr_32442[(10)] = inst_32335);\n\n(statearr_32442[(11)] = inst_32390);\n\n(statearr_32442[(12)] = inst_32343);\n\nreturn statearr_32442;\n})();\nvar statearr_32443_32495 = state_32401__$1;\n(statearr_32443_32495[(2)] = inst_32387);\n\n(statearr_32443_32495[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32402 === (4))){\nvar inst_32330 = (state_32401[(9)]);\nvar inst_32395 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_32330], 0));\nvar inst_32396 = [\"error from dictionary.txt \",inst_32395].join('');\nvar inst_32397 = alert(inst_32396);\nvar state_32401__$1 = state_32401;\nvar statearr_32445_32496 = state_32401__$1;\n(statearr_32445_32496[(2)] = inst_32397);\n\n(statearr_32445_32496[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_32402 === (5))){\nvar inst_32399 = (state_32401[(2)]);\nvar state_32401__$1 = state_32401;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_32401__$1,inst_32399);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n});\nreturn (function() {\nvar translations$tongue_base$load_all_translations_$_state_machine__29584__auto__ = null;\nvar translations$tongue_base$load_all_translations_$_state_machine__29584__auto____0 = (function (){\nvar statearr_32447 = [null,null,null,null,null,null,null,null,null,null,null,null,null];\n(statearr_32447[(0)] = translations$tongue_base$load_all_translations_$_state_machine__29584__auto__);\n\n(statearr_32447[(1)] = (1));\n\nreturn statearr_32447;\n});\nvar translations$tongue_base$load_all_translations_$_state_machine__29584__auto____1 = (function (state_32401){\nwhile(true){\nvar ret_value__29585__auto__ = (function (){try{while(true){\nvar result__29586__auto__ = switch__29583__auto__(state_32401);\nif(cljs.core.keyword_identical_QMARK_(result__29586__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__29586__auto__;\n}\nbreak;\n}\n}catch (e32448){var ex__29587__auto__ = e32448;\nvar statearr_32449_32498 = state_32401;\n(statearr_32449_32498[(2)] = ex__29587__auto__);\n\n\nif(cljs.core.seq((state_32401[(4)]))){\nvar statearr_32450_32500 = state_32401;\n(statearr_32450_32500[(1)] = cljs.core.first((state_32401[(4)])));\n\n} else {\nthrow ex__29587__auto__;\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__29585__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__32501 = state_32401;\nstate_32401 = G__32501;\ncontinue;\n} else {\nreturn ret_value__29585__auto__;\n}\nbreak;\n}\n});\ntranslations$tongue_base$load_all_translations_$_state_machine__29584__auto__ = function(state_32401){\nswitch(arguments.length){\ncase 0:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29584__auto____0.call(this);\ncase 1:\nreturn translations$tongue_base$load_all_translations_$_state_machine__29584__auto____1.call(this,state_32401);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ntranslations$tongue_base$load_all_translations_$_state_machine__29584__auto__.cljs$core$IFn$_invoke$arity$0 = translations$tongue_base$load_all_translations_$_state_machine__29584__auto____0;\ntranslations$tongue_base$load_all_translations_$_state_machine__29584__auto__.cljs$core$IFn$_invoke$arity$1 = translations$tongue_base$load_all_translations_$_state_machine__29584__auto____1;\nreturn translations$tongue_base$load_all_translations_$_state_machine__29584__auto__;\n})()\n})();\nvar state__29670__auto__ = (function (){var statearr_32452 = f__29669__auto__();\n(statearr_32452[(6)] = c__29668__auto__);\n\nreturn statearr_32452;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__29670__auto__);\n}));\n\nreturn c__29668__auto__;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Common translation support for both production and edit systems","~:file","translations/tongue_base.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",29],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$go","^D"],"~:excludes",["~#set",[]],"~:name","~$translations.tongue-base","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.core","^O","~$tongue","~$tongue.core","^Q","^Q","~$cljs.core","^R","~$goog","^S","^D","^D","~$clojure.string","^T","~$cljs.reader","^U","~$predict-prostate.state.localStorage","^V","~$edn","^U"],"~:seen",["^H",["~:require","~:require-macros"]],"~:uses",["^ ","~$put!","^D","~$alts!","^D","~$GET","^O","~$POST","^O","~$starts-with?","^T","~$split","^T","~$get-settings!","^V"],"^Z",["^ ","^D","^D","^R","^R","^U","^U","^W","^U"],"~:form",["~#list",["~$ns","^J","Common translation support for both production and edit systems",["^18",["^Y",["^D","~:refer",["^10","^11"]],["^Q","~:as","^P"],["^O","^1:",["^12","^13"]],["^U","^1;","^W"],["^T","^1:",["^14","^15"]],["^V","^1:",["^16"]]]],["^18",["^Z",["^D","^1:",["^F"]]]]]],"~:flags",["^ ","^Y",["^H",[]],"^Z",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^D","^Q","^O","^U","^T","^V"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","translations/tongue_base.cljs"],"~:compiled-at",1636559992534,"~:resource-name","translations/tongue_base.cljs","~:warnings",[],"~:source","(ns translations.tongue-base\n  \"Common translation support for both production and edit systems\"\n  (:require [cljs.core.async :refer [put! alts!]]\n            [tongue.core :as tongue]\n            [ajax.core :refer [GET POST]]\n            [cljs.reader :as edn]\n            [clojure.string :refer [starts-with? split]]\n            [predict-prostate.state.localStorage :refer [get-settings!]])\n  (:require-macros [cljs.core.async :refer [go]]))\n\n\n(defn wrap-translator\n  \"Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  \"\n  ([lang translator]\n   (fn [k & args]\n     (let [k* (if (keyword? k) [k] k)]\n       (if (vector? k*)\n         (let [translation (translator lang (first k*) args)]\n             ; use supplied default(s) if the translation is missing\n           (if (starts-with? translation \"{\")             ; indicates a missing entry\n             k*                                           ;(apply str (rest k*))                          ; return the original vector\n             translation))\n         (str k))))))\n\n\n(defn error-handler [{:keys [callback status status-text]}]\n  (println \"error dispatch - status : \" status \"\\ntext: \" status-text)\n  (callback (js/Error. (str status \" \" status-text))))\n\n;\n; Read the set of supported languages from \"languages.edn\" into state\n\n#_(defn handle-languages\n    \"if the languages file contains a set of two character keys, use it as a local list\"\n    ([ref edn-rsp]\n     (let [rsp (edn/read-string edn-rsp)]\n       (when (and (set? rsp) (every? #(and (keyword? %) (count (name %))) rsp))\n         (swap! ref assoc :languages rsp)))))\n\n(defn file-error [{:keys [status status-text]}]\n  (.log js/console (str \"file error: \" status \" \" status-text)))\n\n\n#_(defn get-languages\n    ([]\n     (get-languages \"languages.edn\"\n                    {:error-handler file-error\n                     :handler       handle-languages}))\n    ([m]\n     (get-languages \"languages.edn\" m))\n    ([url {:keys [error-handler handler]}]\n     (GET url {:error-handler file-error\n               :handler       handler\n               :format        :transit})))\n\n\n;\n; dictionary handling\n;\n(defn process-dict-op\n  \"Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set\"\n  ([dict [op & args] _ #_wrap?]\n   ;(print \"op\" op args)\n   (case op\n     :upsert (let [[lang new-words] args\n                   current-lang (:lang dict)\n                   ;_ (print \"dict \" dict)\n                   ;_ (print \"lang \" lang)\n                   ;_ (print \"new words \" new-words)\n                   ;_ (println \"selected lang is\" (:lang dict))\n                   ;_ (println \"adding language\" lang \"to\" (:languages dict))\n                   new-lang-dict (-> dict\n                                     (update :languages conj lang)\n                                     (update-in [:translations lang] merge new-words))]\n               (assoc new-lang-dict\n                      :translator (wrap-translator current-lang (tongue/build-translate (:translations new-lang-dict)))))\n\n     :switch (let [[lang] args]\n               ;(println \"switch lang\" lang)\n               ;(print \"translations\" (get-in dict [:translations lang]) lang)\n               (if (and lang (seq (get-in dict [:translations lang])))\n                 (assoc dict :lang lang\n                        :translator (wrap-translator lang (tongue/build-translate (:translations dict))))\n                 dict))))\n  ([dict op-args]\n   (process-dict-op dict op-args true)))\n\n\n(defn process-dict-ops\n  \"process a sequence of operations into the translation state\"\n  [t-state op-args]\n  (let [new-lang (:lang (get-settings! {:lang :en}))]\n    (reduce process-dict-op t-state (conj op-args [:switch new-lang]))))\n\n\n(defn handle-dictionary\n  \"process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD.\"\n  ([ref edn-rsp]\n   ; ref must contain a :languages set\n   {:pre (set? (:languages @ref))}\n   (let [op-args (edn/read-string edn-rsp)]\n     (when (and (seq op-args)\n                (every? (fn [[op lang & _]]\n                          (and (#{:upsert :switch} op)      ; op is valid\n                               (keyword? lang)\n                               (= 2 (count (name lang)))    ; accept lang codes of 2 characters\n                               ))\n                        op-args))\n       (reset! ref (process-dict-ops @ref op-args))))))\n\n\n(defn get-dictionary\n  \"read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD\"\n  [url {:keys [handler]}]\n  (GET url {:error-handler file-error                      ;on-error\n            :handler       handler\n            :format        :transit                        ;:transit\n            }))\n\n;;\n;; load translation state; Call this to set up the translation system\n;;\n(defn load-translations*\n  \"load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD\"\n  ([local-dictionary-url handler]\n   (get-dictionary\n    local-dictionary-url {:headers {\"Cache-Control\" \"no-store\"}\n                          :on-error file-error\n                          :handler  handler})))\n\n\n\n\n(defn validate-op-args [op-args]\n  (and (seq op-args)\n       (every? (fn [[op lang & args]]\n                 (condp = op\n                   :upsert (and\n                            (seq? args)\n                            (map? (first args))\n                            (keyword? lang))\n                   :switch (keyword? lang)\n                   false))\n               op-args)))\n\n(defn read-json-dict\n  \"Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'.\"\n  [json]\n  (->> json\n       (map\n        (fn [[cmd lang m]]\n          [(keyword cmd)\n           (keyword lang)\n           (into {} (map\n                     (fn [[k v]]\n                       [(->> (split k #\"#\")\n                             (interpose \"/\")\n                             (apply str)\n                             (keyword)) v])\n                     m))]))))\n\n;;\n;; load local translations into state; Do this once at startup\n;;\n(defn load-all-translations\n  \"Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json.\"\n  [static-chan ok-chan err-chan dictionary-endpoint ref]\n  ;{:pre (set? (:languages @ref))}                           ; ref must contain a :languages set\n\n  (get-dictionary\n   \"dictionary.txt\"\n   {:on-error #(put! err-chan %)\n    :handler  #(put! static-chan %)})\n\n  (go\n    (let [[seed-dict port] (alts! [static-chan err-chan])\n          seed-dict (edn/read-string seed-dict)]\n\n      (if (= static-chan port)\n\n        (do\n          (reset! ref (process-dict-ops @ref seed-dict))\n          ;(println \"seed-dict = \" seed-dict)\n          ;(println \"ref:\" @ref)\n          ;(println \"POSTING to \" dictionary-endpoint)\n          (POST dictionary-endpoint {:handler       #(put! ok-chan %)\n                                     :error-handler #(put! err-chan %)\n                                     :format        :transit})\n          (go\n            (let [[response port] (alts! [ok-chan err-chan])]\n              (if (= ok-chan port)\n                (let [op-args (read-json-dict response)]\n                  (if (validate-op-args op-args)\n                    (reset! ref (process-dict-ops @ref op-args))\n                    (js/alert (str \"Local dictionary parse failure\" #_(pr-str response)))))\n                (js/alert (str \"error from\" dictionary-endpoint \":\" (pr-str response)))))))\n        (js/alert (str \"error from dictionary.txt \" (pr-str seed-dict)))))))\n\n\n(comment\n  (process-dict-ops\n   {:lang :en}\n   [[:upsert [:en {:lang :en, :new-words \"new words\"}]]])\n\n  ; we can process a composition of op-args into the dictionary\n  (process-dict-ops\n   {:lang         :en\n    :translations {:en {}}\n    :languages    #{}}\n   [[:upsert :en {:lang :en, :new-words \"new words\"}]\n    [:upsert :es {:lang :en :some-key \"some-value\"}]]))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["translations.tongue-base/wrap-translator","lang","translator","k","args","k*","cljs.core/Keyword","cljs.core/vector?","translation","G__32240","G__32241","G__32242","cljs.core/first","clojure.string/starts-with?","p__32246","map__32247","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","translations.tongue-base/error-handler","callback","status","status-text","cljs.core.println","G__32249","js/Error","p__32251","map__32252","translations.tongue-base/file-error","js/console","var_args","G__32255","translations.tongue-base/process-dict-op","p__32256","vec__32257","seq__32258","cljs.core/seq","first__32259","cljs.core/next","dict","op","_","G__32260","vec__32261","cljs.core.nth","new-words","current-lang","new-lang-dict","cljs.core.update","cljs.core/conj","cljs.core.update_in","cljs.core/merge","cljs.core.assoc","tongue.core/build-translate","vec__32264","and__4115__auto__","cljs.core.get_in","op-args","translations.tongue_base.process_dict_op","translations.tongue-base/process-dict-ops","t-state","new-lang","predict-prostate.state.localStorage/get-settings!","cljs.core.reduce","cljs.core.conj","translations.tongue-base/handle-dictionary","ref","edn-rsp","cljs.core/set?","cljs.core/deref","cljs.reader.read_string","cljs.core/every?","p__32274","vec__32275","seq__32276","first__32277","fexpr__32280","cljs.core._EQ_","cljs.core/name","cljs.core/reset!","p__32281","map__32282","translations.tongue-base/get-dictionary","url","handler","ajax.core.GET","translations.tongue-base/load-translations*","local-dictionary-url","translations.tongue-base/validate-op-args","p__32291","vec__32292","seq__32293","first__32294","pred__32295","expr__32296","cljs.core/=","cljs.core/seq?","cljs.core/map?","translations.tongue-base/read-json-dict","json","cljs.core.map","p__32298","vec__32299","cmd","m","cljs.core.keyword","cljs.core.into","p__32302","vec__32303","v","clojure.string.split","cljs.core.interpose","cljs.core/str","translations.tongue-base/load-all-translations","static-chan","ok-chan","err-chan","dictionary-endpoint","p1__32306#","p1__32307#","cljs.core.async.put_BANG_","c__29668__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__29669__auto__","switch__29583__auto__","state_32401","state_val_32402","inst_32321","cljs.core/PersistentVector","inst_32322","inst_32323","cljs.core.async/ioc-alts!","inst_32325","inst_32329","inst_32328","inst_32330","inst_32331","statearr-32405","statearr-32408","statearr-32409","inst_32333","inst_32334","inst_32335","inst_32337","inst_32339","vec__32318","p1__32308#","inst_32340","p1__32309#","inst_32341","inst_32342","cljs.core/PersistentHashMap","inst_32343","inst_32387","inst_32389","state_32379","state_val_32382","inst_32347","inst_32348","inst_32349","inst_32351","inst_32352","inst_32353","inst_32354","statearr-32413","statearr-32414","statearr-32415","inst_32357","inst_32358","statearr-32418","statearr-32419","statearr-32421","inst_32371","inst_32372","inst_32373","statearr-32423","inst_32375","cljs.core.async.impl.ioc-helpers/return-chan","inst_32360","inst_32361","inst_32362","statearr-32428","inst_32365","statearr-32433","inst_32367","statearr-32434","statearr-32435","state-machine__29584__auto__","ret-value__29585__auto__","result__29586__auto__","cljs.core/keyword-identical?","ex__29587__auto__","e32437","statearr-32438","statearr-32439","state__29670__auto__","statearr-32441","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","inst_32390","statearr-32442","statearr-32443","inst_32395","inst_32396","inst_32397","statearr-32445","inst_32399","statearr-32447","e32448","statearr-32449","statearr-32450","statearr-32452","seed-dict","port","ajax.core.POST","js/alert","cljs.core.pr_str"]],"~:used-vars",["^H",["~$cljs.core/keyword","~$cljs.core/str","~$clojure.string/starts-with?","~$translations.tongue-base/validate-op-args","~$clojure.string/split","~$cljs.core/vector?","~$cljs.core/=","~$translations.tongue-base/error-handler","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core.async/put!","~$js/console","~$ajax.core/GET","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/conj","~$cljs.core/map","~$cljs.core.async.impl.dispatch/run","~$cljs.core/get-in","~$translations.tongue-base/load-all-translations","~$translations.tongue-base/file-error","~$translations.tongue-base/handle-dictionary","~$translations.tongue-base/load-translations*","~$translations.tongue-base/process-dict-ops","~$cljs.core/set?","~$cljs.core/println","~$tongue.core/build-translate","~$translations.tongue-base/read-json-dict","~$cljs.core/assoc","~$cljs.core/interpose","~$translations.tongue-base/process-dict-op","~$cljs.core/first","~$translations.tongue-base/wrap-translator","~$cljs.core/seq?","~$cljs.core/name","~$cljs.core/every?","~$js/Error","~$translations.tongue-base/get-dictionary"]]],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^1@","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/core/async/impl/ioc_helpers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$cljs.core.async.impl.protocols"]]],["^1@","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.labs.userAgent.util","~$goog.string"]]],["^1@","cljs/core/async.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1@","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Promise","~$goog.events.EventTarget"]]],["^1@","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^2U"]]],["^1@","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","~$goog.asserts"]]],["^1@","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1@","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^2T","~$goog.object","~$goog.string.internal"]]],["^1@","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^36"]]],["^1@","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32"]]],["^1@","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2T","~$goog.reflect","^2U"]]],["^1@","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1@","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1@","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1@","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/net/xhrmanager.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.events","~$goog.events.Event","~$goog.events.EventHandler","^31","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.structs.Map"]]],["^1@","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.async.FreeList"]]],["^1@","ajax/interceptors.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","~$ajax.util","~$ajax.url","~$ajax.protocols"]]],["^1@","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^33","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1@","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^34"]]],["^1@","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2U","~$goog.string.StringBuffer"]]],["^1@","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.structs.Heap"]]],["^1@","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Timer","^2[","^32","^3T","^31","~$goog.json.hybrid","~$goog.log","^3K","^3L","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^35","^2U","~$goog.structs","^3O","~$goog.uri.utils","^34"]]],["^1@","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^35"]]],["^1@","ajax/protocols.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","ajax/transit.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$cognitect.transit","~$ajax.interceptors","^3S","^3Q"]]],["^1@","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3Y","^3Z","^3[","^3X","^2[","^2U","^41"]]],["^1@","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1@","ajax/simple.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^3S","^4;","~$ajax.formats","^3Q","^3M"]]],["^1@","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Disposable","^32","^3H","^3I","^3V","^3W","^35"]]],["^1@","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.disposable.IDisposable"]]],["^1@","ajax/url.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^3Q"]]],["^1@","translations/tongue_base.cljs"],["ca3e20155d6603c12110d17d8b49ff72a22f25ef","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^D","^Q","^O","^U","^T","^V"]]],["^1@","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32"]]],["^1@","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^48","~$goog.structs.Collection","^3O"]]],"~:SHADOW-TIMESTAMP",[1635266348000,1635266348000,1634894918000],["^1@","ajax/xml_http_request.cljs"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3S","^2U"]]],["^1@","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^3@"]]],["^1@","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.events.ListenableKey"]]],["^1@","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.html.trustedtypes","^39","^3:","^3;","^3<"]]],["^1@","cljs/core/async/impl/channels.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S","^2Y","^2W"]]],["^1@","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","~$goog.events.Listener","^35"]]],["^1@","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/core/async/impl/dispatch.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2W","^3D"]]],["^1@","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.html.SafeUrl","^3;","^3<","^36"]]],["^1@","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4F","^38","~$goog.html.uncheckedconversions","^3;","^36"]]],["^1@","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","cljs/core/async/impl/protocols.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1@","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^3M","~$goog.structs.PriorityPool"]]],["^1@","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.dom.TagName","~$goog.dom.tags","^4J","^4K","~$goog.html.SafeStyleSheet","^4F","^38","^4D","^39","^3:","^3=","^35","^3;","^3<","^36"]]],["^1@","tongue/macro.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R"]]],["^1@","ajax/easy.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$ajax.simple","~$ajax.transit","~$ajax.json","~$ajax.ring","^3R","^4>"]]],["^1@","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^35"]]],["^1@","ajax/util.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3S"]]],["^1@","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","ajax/xhrio.cljs"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3L","^3K","^3M","~$goog.net.XhrManager","~$goog.Uri","~$goog.json","^3H","^3S"]]],["^1@","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2["]]],["^1@","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^2T","^2U"]]],["^1@","ajax/ring.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^4;","^3S","^4>"]]],["^1@","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^3G","~$com.cognitect.transit.types"]]],["^1@","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^35","^40","~$cljs.tools.reader.edn","^41"]]],["^1@","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4P","~$goog.dom.safe","^4I","^4L","~$goog.math.Coordinate","~$goog.math.Size","^35","^2U","~$goog.string.Unicode","^34"]]],["^1@","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.debug.Error","^53"]]],["^1@","tongue/inst.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","~$tongue.macro"]]],["^1@","cljs/core/async/impl/buffers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S"]]],["^1@","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.debug.LogRecord"]]],["^1@","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^2U","^48","^3O","^49","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","tongue/core.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","~$tongue.inst","~$tongue.number","^59"]]],["^1@","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.Thenable","^32","^3P","~$goog.async.run","^3E","^58","~$goog.promise.Resolver"]]],["^1@","cljs/core/async/impl/timers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2S","^2V","^2Y"]]],["^1@","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",[]]],["^1@","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^4Y"]]],["^1@","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^35"]]],["^1@","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3Y","^T","~$cljs.tools.reader.impl.inspect"]]],["^1@","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^2U","^41"]]],["^1@","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4?","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1@","tongue/number.cljc"],["46bc54fb216e4aa9239282cf693179c888d36a5a","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^59"]]],["^1@","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","^50","~$goog.math.Long"]]],["^1@","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^35","~$goog.structs.Node"]]],["^1@","ajax/json.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^4:","~$clojure.walk","^4;","^3S"]]],["^1@","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32"]]],["^1@","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^54","^4L","^3;","^36"]]],["^1@","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","~$com.cognitect.transit.eq","^5E"]]],["^1@","ajax/formats.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^4;","^3Q","^3S"]]],["^1@","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^36"]]],["^1@","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z"]]],["^1@","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","~$goog.debug.errorcontext","^34"]]],["^1@","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","~$goog.math"]]],["^1@","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3Z","^2U","^41"]]],["^1@","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^4H","^5J"]]],["^1@","ajax/core.cljc"],["99c5a2a1bfb411d90f67298d086bd75e863a4a65","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^T","^3R","^4U","^4T","^4V","^4>","^3Q","^4;","^4S","~$ajax.easy","^3S","~$ajax.xhrio","~$ajax.xml-http-request"]]],["^1@","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^3T","~$goog.dom","^4P","^54","^4H","^4I","^38","^3=","^3>","^3;"]]],["^1@","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^4I","^4J","^4K","^4R","^4F","^38","^3;","^36"]]],["^1@","predict_prostate/state/localStorage.cljs"],["ab609d64f83ca29ee84d7363ebaa46808ba524f7","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^U"]]],["^1@","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","~$goog.debug","~$goog.debug.LogBuffer","^5:"]]],["^1@","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4["]]],["^1@","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4?","~$goog.events.EventId"]]],["^1@","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","^3X","^3Y","^3Z"]]],["^1@","goog/events/eventhandler.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4?","^3H","^35"]]],["^1@","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5E","~$goog.math.Integer","^2U","^35","^2[","^4X","^41"]]],["^1@","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^50","^5H","^3F","^3G"]]],["^1@","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^4D","^3;","^3<"]]],["^1@","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5O","~$goog.debug.LogManager","^5:","~$goog.debug.Logger"]]],["^1@","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^4K","^35","^3;","^3<","^36"]]],["^1@","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5O","^33","^3I","~$goog.events.EventType","^3@","^34"]]],["^1@","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^3@"]]],["^1@","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^34"]]],["^1@","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^2[","^32","^2U"]]],["^1@","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","^3<"]]],["^1@","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^5Q"]]],["^1@","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4Z","^3G","~$com.cognitect.transit.handlers","^50","^4[","^5E"]]],["^1@","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^4<"]]],["^1@","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^32","~$goog.net.WrapperXmlHttpFactory","^4="]]],["^1@","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S"]]],["^1@","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^S","^R","~$com.cognitect.transit","^50","^5H","^5E"]]]]],"~:clj-info",["^ ","jar:file:/Users/mehdi/.m2/repository/tongue/tongue/0.2.7/tongue-0.2.7.jar!/tongue/macro.cljc",1635148719000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/concurrent.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async/impl/ioc_macros.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/cljs-ajax/cljs-ajax/0.8.3/cljs-ajax-0.8.3.jar!/ajax/macros.clj",1635148728000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/dispatch.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1634893165000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/protocols.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/exec/threadpool.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1634894918000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1634894917000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1634894918000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Common translation support for both production and edit systems","^7","translations/tongue_base.cljs","^8",1,"^9",5,"^:",1,"^;",29],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^D"],"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^Q","^Q","^Q","^R","^R","^S","^S","^D","^D","^T","^T","^U","^U","^V","^V","^W","^U"],"^X",["^H",["^Y","^Z"]],"~:shadow/js-access-global",["^H",["alert","Error"]],"^[",["^ ","^10","^D","^11","^D","^12","^O","^13","^O","^14","^T","^15","^T","^16","^V"],"~:defs",["^ ","~$file-error",["^ ","~:protocol-inline",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",54,"^9",7,"^:",54,"^;",17,"~:arglists",["^18",["~$quote",["^18",[[["^ ","~:keys",["~$status","~$status-text"]]]]]]]],"^I","^2:","^7","translations/tongue_base.cljs","^;",17,"~:method-params",["^18",[["~$p__32251"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^9",1,"~:variadic?",false,"^8",54,"~:ret-tag","~$js","^:",54,"~:max-fixed-arity",1,"~:fn-var",true,"^6W",["^18",["^6X",["^18",[[["^ ","^6Y",["^6Z","^6["]]]]]]]],"~$handle-dictionary",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",111,"^9",7,"^:",111,"^;",24,"^6W",["^18",["^6X",["^18",[["~$ref","~$edn-rsp"]]]]],"^6","process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD."],"^I","^2;","^7","translations/tongue_base.cljs","^;",24,"^70",["^18",[["^7:","^7;"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",111,"^75",["^H",[null,"~$any","~$clj-nil"]],"^:",111,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7:","^7;"]]]]],"^6","process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD."],"~$load-all-translations",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",189,"^9",7,"^:",189,"^;",28,"^6W",["^18",["^6X",["^18",[["~$static-chan","~$ok-chan","~$err-chan","~$dictionary-endpoint","^7:"]]]]],"^6","Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json."],"^I","^29","^7","translations/tongue_base.cljs","^;",28,"^70",["^18",[["^7?","^7@","^7A","^7B","^7:"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",189,"^75","^7<","^:",189,"^77",5,"^78",true,"^6W",["^18",["^6X",["^18",[["^7?","^7@","^7A","^7B","^7:"]]]]],"^6","Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json."],"~$load-translations*",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",140,"^9",7,"^:",140,"^;",25,"^6W",["^18",["^6X",["^18",[["~$local-dictionary-url","~$handler"]]]]],"^6","load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD"],"^I","^2<","^7","translations/tongue_base.cljs","^;",25,"^70",["^18",[["^7D","^7E"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",140,"^75","^7<","^:",140,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7D","^7E"]]]]],"^6","load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD"],"~$process-dict-op",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",74,"^9",7,"^:",74,"^;",22,"^6W",["^18",["^6X",["^18",[["~$dict",["~$op","~$&","~$args"],"~$_"],["^7G","~$op-args"]]]]],"^6","Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set","~:top-fn",["^ ","^74",false,"~:fixed-arity",3,"^77",3,"^70",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]],"^6W",["^18",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]]],"^73",["^18",[null,null]]]],"^I","^2D","^7","translations/tongue_base.cljs","^;",22,"^7K",["^ ","^74",false,"^7L",3,"^77",3,"^70",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]],"^6W",["^18",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]]],"^73",["^18",[null,null]]],"^70",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]],"^72",null,"^7L",3,"^73",["^18",[null,null]],"^9",1,"^74",false,"~:methods",[["^ ","^7L",3,"^74",false],["^ ","^7L",2,"^74",false,"~:tag","^7<"]],"^8",74,"^:",74,"^77",3,"^78",true,"^6W",["^18",[["^7G",["^7H","~$&","^7I"],"~$_"],["^7G","^7J"]]],"^6","Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set"],"~$process-dict-ops",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",104,"^9",7,"^:",104,"^;",23,"^6W",["^18",["^6X",["^18",[["~$t-state","^7J"]]]]],"^6","process a sequence of operations into the translation state"],"^I","^2=","^7","translations/tongue_base.cljs","^;",23,"^70",["^18",[["^7P","^7J"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",104,"^75",["^H",[null,"^7<"]],"^:",104,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7P","^7J"]]]]],"^6","process a sequence of operations into the translation state"],"~$read-json-dict",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",168,"^9",7,"^:",168,"^;",21,"^6W",["^18",["^6X",["^18",[["~$json"]]]]],"^6","Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'."],"^I","^2A","^7","translations/tongue_base.cljs","^;",21,"^70",["^18",[["^7R"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",168,"^75","~$cljs.core/LazySeq","^:",168,"^77",1,"^78",true,"^6W",["^18",["^6X",["^18",[["^7R"]]]]],"^6","Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'."],"~$validate-op-args",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",156,"^9",7,"^:",156,"^;",23,"^6W",["^18",["^6X",["^18",[["^7J"]]]]]],"^I","^1O","^7","translations/tongue_base.cljs","^;",23,"^70",["^18",[["^7J"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",156,"^75","~$boolean","^:",156,"^77",1,"^78",true,"^6W",["^18",["^6X",["^18",[["^7J"]]]]]],"~$get-dictionary",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",128,"^9",7,"^:",128,"^;",21,"^6W",["^18",["^6X",["^18",[["~$url",["^ ","^6Y",["^7E"]]]]]]],"^6","read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD"],"^I","^2K","^7","translations/tongue_base.cljs","^;",21,"^70",["^18",[["^7W","~$p__32281"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",128,"^75","^7<","^:",128,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7W",["^ ","^6Y",["^7E"]]]]]]],"^6","read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD"],"~$wrap-translator",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",12,"^9",7,"^:",12,"^;",22,"^6W",["^18",["^6X",["^18",[["~$lang","~$translator"]]]]],"^6","Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  "],"^I","^2F","^7","translations/tongue_base.cljs","^;",22,"^70",["^18",[["^7Z","^7["]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",12,"^75","~$function","^:",12,"^77",2,"^78",true,"^6W",["^18",["^6X",["^18",[["^7Z","^7["]]]]],"^6","Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  "],"~$error-handler",["^ ","^6V",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",40,"^9",7,"^:",40,"^;",20,"^6W",["^18",["^6X",["^18",[[["^ ","^6Y",["~$callback","^6Z","^6["]]]]]]]],"^I","^1S","^7","translations/tongue_base.cljs","^;",20,"^70",["^18",[["~$p__32246"]]],"^72",null,"^73",["^18",[null,null]],"^9",1,"^74",false,"^8",40,"^75","^7<","^:",40,"^77",1,"^78",true,"^6W",["^18",["^6X",["^18",[[["^ ","^6Y",["^82","^6Z","^6["]]]]]]]]],"^Z",["^ ","^D","^D","^R","^R","^U","^U","^W","^U"],"~:cljs.analyzer/constants",["^ ","^X",["^H",["~:format","~:status-text","~:recur","~:headers","~:error-handler","~:lang","~:en","~:transit","~:status","~:translator","~:upsert","~:on-error","~:languages","~:callback","~:handler","~:switch","~:translations"]],"~:order",["^8B","^8=","^86","^8:","^8A","^8E","^8>","^8;","^8D","^8?","^8C","^89","^85","^8<","^88","^8@","^87"]],"^1<",["^ ","^Y",["^H",[]],"^Z",["^H",[]]],"^1=",["^ "],"^1>",["^S","^R","^D","^Q","^O","^U","^T","^V"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2M",[["^8I","~:static-fns"],true,["^8I","~:shadow-tweaks"],null,["^8I","~:source-map-inline"],null,["^8I","~:elide-asserts"],false,["^8I","~:optimize-constants"],null,["^8I","^1C"],null,["^8I","~:external-config"],null,["^8I","~:tooling-config"],null,["^8I","~:emit-constants"],null,["^8I","~:load-tests"],null,["^8I","~:form-size-threshold"],null,["^8I","~:data-readers"],null,["^8I","~:infer-externs"],"~:auto",["^8I","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8I","~:fn-invoke-direct"],null,["^8I","~:source-map"],"/dev/null"]]]