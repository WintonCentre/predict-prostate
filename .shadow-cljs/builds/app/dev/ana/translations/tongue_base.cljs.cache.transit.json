["^ ","~:output",["^ ","~:js","goog.provide('translations.tongue_base');\n/**\n * Return a translation function which wraps tongue 'translate', giving it similar\n *   capabilities as the tempura translator.\n * \n *   The returned function takes a language, a k to translate, plus any args\n * \n *   If k is a string it returns k untranslated.\n * \n *   If k is a keyword, it looks up  k in the translations dictionary for the\n *   given language, possibly with argument interpolation. i.e. Just like the original.\n * \n *   If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n *   be used to document the translation.\n * \n *   If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n *   \n */\ntranslations.tongue_base.wrap_translator = (function translations$tongue_base$wrap_translator(lang,translator){\nreturn (function() { \nvar G__43470__delegate = function (k,args){\nvar k_STAR_ = (((k instanceof cljs.core.Keyword))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null):k);\nif(cljs.core.vector_QMARK_(k_STAR_)){\nvar translation = (function (){var G__43258 = lang;\nvar G__43259 = cljs.core.first(k_STAR_);\nvar G__43260 = args;\nreturn (translator.cljs$core$IFn$_invoke$arity$3 ? translator.cljs$core$IFn$_invoke$arity$3(G__43258,G__43259,G__43260) : translator.call(null,G__43258,G__43259,G__43260));\n})();\nif(clojure.string.starts_with_QMARK_(translation,\"{\")){\nreturn k_STAR_;\n} else {\nreturn translation;\n}\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(k);\n}\n};\nvar G__43470 = function (k,var_args){\nvar args = null;\nif (arguments.length > 1) {\nvar G__43471__i = 0, G__43471__a = new Array(arguments.length -  1);\nwhile (G__43471__i < G__43471__a.length) {G__43471__a[G__43471__i] = arguments[G__43471__i + 1]; ++G__43471__i;}\n  args = new cljs.core.IndexedSeq(G__43471__a,0,null);\n} \nreturn G__43470__delegate.call(this,k,args);};\nG__43470.cljs$lang$maxFixedArity = 1;\nG__43470.cljs$lang$applyTo = (function (arglist__43472){\nvar k = cljs.core.first(arglist__43472);\nvar args = cljs.core.rest(arglist__43472);\nreturn G__43470__delegate(k,args);\n});\nG__43470.cljs$core$IFn$_invoke$arity$variadic = G__43470__delegate;\nreturn G__43470;\n})()\n;\n});\ntranslations.tongue_base.error_handler = (function translations$tongue_base$error_handler(p__43261){\nvar map__43262 = p__43261;\nvar map__43262__$1 = cljs.core.__destructure_map(map__43262);\nvar callback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43262__$1,new cljs.core.Keyword(null,\"callback\",\"callback\",-705136228));\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43262__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\nvar status_text = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43262__$1,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478));\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"error dispatch - status : \",status,\"\\ntext: \",status_text], 0));\n\nvar G__43263 = (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(status),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_text)].join('')));\nreturn (callback.cljs$core$IFn$_invoke$arity$1 ? callback.cljs$core$IFn$_invoke$arity$1(G__43263) : callback.call(null,G__43263));\n});\ntranslations.tongue_base.file_error = (function translations$tongue_base$file_error(p__43265){\nvar map__43266 = p__43265;\nvar map__43266__$1 = cljs.core.__destructure_map(map__43266);\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43266__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\nvar status_text = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43266__$1,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478));\nreturn console.log([\"file error: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_text)].join(''));\n});\n/**\n * Process ops over a dictionary, returning a new dictionary.\n *   If the ops merge in words from a new language, that is merged in to the supported languages set\n */\ntranslations.tongue_base.process_dict_op = (function translations$tongue_base$process_dict_op(var_args){\nvar G__43270 = arguments.length;\nswitch (G__43270) {\ncase 3:\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3 = (function (dict,p__43271,_){\nvar vec__43272 = p__43271;\nvar seq__43273 = cljs.core.seq(vec__43272);\nvar first__43274 = cljs.core.first(seq__43273);\nvar seq__43273__$1 = cljs.core.next(seq__43273);\nvar op = first__43274;\nvar args = seq__43273__$1;\nvar G__43275 = op;\nvar G__43275__$1 = (((G__43275 instanceof cljs.core.Keyword))?G__43275.fqn:null);\nswitch (G__43275__$1) {\ncase \"upsert\":\nvar vec__43276 = args;\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43276,(0),null);\nvar new_words = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43276,(1),null);\nvar current_lang = new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104).cljs$core$IFn$_invoke$arity$1(dict);\nvar new_lang_dict = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update.cljs$core$IFn$_invoke$arity$4(dict,new cljs.core.Keyword(null,\"languages\",\"languages\",1471910331),cljs.core.conj,lang),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673),lang], null),cljs.core.merge,new_words);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_lang_dict,new cljs.core.Keyword(null,\"translator\",\"translator\",-1752203115),translations.tongue_base.wrap_translator(current_lang,tongue.core.build_translate(new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673).cljs$core$IFn$_invoke$arity$1(new_lang_dict))));\n\nbreak;\ncase \"switch\":\nvar vec__43279 = args;\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43279,(0),null);\nif(cljs.core.truth_((function (){var and__4210__auto__ = lang;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.seq(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(dict,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673),lang], null)));\n} else {\nreturn and__4210__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(dict,new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104),lang,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"translator\",\"translator\",-1752203115),translations.tongue_base.wrap_translator(lang,tongue.core.build_translate(new cljs.core.Keyword(null,\"translations\",\"translations\",-1114228673).cljs$core$IFn$_invoke$arity$1(dict)))], 0));\n} else {\nreturn dict;\n}\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__43275__$1)].join('')));\n\n}\n}));\n\n(translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$2 = (function (dict,op_args){\nreturn translations.tongue_base.process_dict_op.cljs$core$IFn$_invoke$arity$3(dict,op_args,true);\n}));\n\n(translations.tongue_base.process_dict_op.cljs$lang$maxFixedArity = 3);\n\n/**\n * process a sequence of operations into the translation state\n */\ntranslations.tongue_base.process_dict_ops = (function translations$tongue_base$process_dict_ops(t_state,op_args){\nvar new_lang = new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104).cljs$core$IFn$_invoke$arity$1(predict_prostate.state.localStorage.get_settings_BANG_(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"lang\",\"lang\",-1819677104),new cljs.core.Keyword(null,\"en\",\"en\",88457073)], null)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(translations.tongue_base.process_dict_op,t_state,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(op_args,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),new_lang], null)));\n});\n/**\n * process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n *   USED IN PRODUCTION DICTIONARY LOAD.\n */\ntranslations.tongue_base.handle_dictionary = (function translations$tongue_base$handle_dictionary(ref,edn_rsp){\nif(cljs.core.truth_(cljs.core.set_QMARK_)){\n} else {\nthrow (new Error(\"Assert failed: set?\"));\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"languages\",\"languages\",1471910331).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(ref)))){\n} else {\nthrow (new Error(\"Assert failed: (:languages (clojure.core/deref ref))\"));\n}\n\nvar op_args = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(edn_rsp);\nif(((cljs.core.seq(op_args)) && (cljs.core.every_QMARK_((function (p__43284){\nvar vec__43285 = p__43284;\nvar seq__43286 = cljs.core.seq(vec__43285);\nvar first__43287 = cljs.core.first(seq__43286);\nvar seq__43286__$1 = cljs.core.next(seq__43286);\nvar op = first__43287;\nvar first__43287__$1 = cljs.core.first(seq__43286__$1);\nvar seq__43286__$2 = cljs.core.next(seq__43286__$1);\nvar lang = first__43287__$1;\nvar _ = seq__43286__$2;\nvar and__4210__auto____$1 = (function (){var fexpr__43288 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),null,new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),null], null), null);\nreturn (fexpr__43288.cljs$core$IFn$_invoke$arity$1 ? fexpr__43288.cljs$core$IFn$_invoke$arity$1(op) : fexpr__43288.call(null,op));\n})();\nif(cljs.core.truth_(and__4210__auto____$1)){\nreturn (((lang instanceof cljs.core.Keyword)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),((cljs.core.name(lang)).length))));\n} else {\nreturn and__4210__auto____$1;\n}\n}),op_args)))){\nreturn cljs.core.reset_BANG_(ref,translations.tongue_base.process_dict_ops(cljs.core.deref(ref),op_args));\n} else {\nreturn null;\n}\n});\n/**\n * read dictionary ops from a url.\n *   USED IN PRODUCTION DICTIONARY LOAD\n */\ntranslations.tongue_base.get_dictionary = (function translations$tongue_base$get_dictionary(url,p__43291){\nvar map__43292 = p__43291;\nvar map__43292__$1 = cljs.core.__destructure_map(map__43292);\nvar handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43292__$1,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612));\nreturn ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic(url,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"error-handler\",\"error-handler\",-484945776),translations.tongue_base.file_error,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),handler,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),new cljs.core.Keyword(null,\"transit\",\"transit\",359458387)], null)], 0));\n});\n/**\n * load the initial dictionary into the rtdb t-state.\n *   local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n *   At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n *   At test time this may be different.\n * \n *   USED IN PRODUCTION DICTIONARY LOAD\n */\ntranslations.tongue_base.load_translations_STAR_ = (function translations$tongue_base$load_translations_STAR_(local_dictionary_url,handler){\nreturn translations.tongue_base.get_dictionary(local_dictionary_url,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [\"Cache-Control\",\"no-store\"], null),new cljs.core.Keyword(null,\"on-error\",\"on-error\",1728533530),translations.tongue_base.file_error,new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),handler], null));\n});\ntranslations.tongue_base.validate_op_args = (function translations$tongue_base$validate_op_args(op_args){\nreturn ((cljs.core.seq(op_args)) && (cljs.core.every_QMARK_((function (p__43294){\nvar vec__43295 = p__43294;\nvar seq__43296 = cljs.core.seq(vec__43295);\nvar first__43297 = cljs.core.first(seq__43296);\nvar seq__43296__$1 = cljs.core.next(seq__43296);\nvar op = first__43297;\nvar first__43297__$1 = cljs.core.first(seq__43296__$1);\nvar seq__43296__$2 = cljs.core.next(seq__43296__$1);\nvar lang = first__43297__$1;\nvar args = seq__43296__$2;\nvar pred__43299 = cljs.core._EQ_;\nvar expr__43300 = op;\nif(cljs.core.truth_((pred__43299.cljs$core$IFn$_invoke$arity$2 ? pred__43299.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),expr__43300) : pred__43299.call(null,new cljs.core.Keyword(null,\"upsert\",\"upsert\",1416724984),expr__43300)))){\nreturn ((cljs.core.seq_QMARK_(args)) && (((cljs.core.map_QMARK_(cljs.core.first(args))) && ((lang instanceof cljs.core.Keyword)))));\n} else {\nif(cljs.core.truth_((pred__43299.cljs$core$IFn$_invoke$arity$2 ? pred__43299.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),expr__43300) : pred__43299.call(null,new cljs.core.Keyword(null,\"switch\",\"switch\",71881310),expr__43300)))){\nreturn (lang instanceof cljs.core.Keyword);\n} else {\nreturn false;\n}\n}\n}),op_args)));\n});\n/**\n * Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n *   Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n *   keywords in the form :ns/key rather than teh string ':ns#key'.\n */\ntranslations.tongue_base.read_json_dict = (function translations$tongue_base$read_json_dict(json){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__43324){\nvar vec__43325 = p__43324;\nvar cmd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43325,(0),null);\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43325,(1),null);\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43325,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cmd),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(lang),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__43328){\nvar vec__43329 = p__43328;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43329,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43329,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\"/\",clojure.string.split.cljs$core$IFn$_invoke$arity$2(k,/#/)))),v], null);\n}),m))], null);\n}),json);\n});\n/**\n * Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n * Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n * \n * Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n * into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n * \n * If a [:switch lang] command is received then the default language will change too.\n * We can use transit here since we are not dependent on coast middleware which only supports json.\n */\ntranslations.tongue_base.load_all_translations = (function translations$tongue_base$load_all_translations(static_chan,ok_chan,err_chan,dictionary_endpoint,ref){\ntranslations.tongue_base.get_dictionary(\"/dictionary.txt\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"on-error\",\"on-error\",1728533530),(function (p1__43332_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(err_chan,p1__43332_SHARP_);\n}),new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),(function (p1__43333_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(static_chan,p1__43333_SHARP_);\n})], null));\n\nvar c__36087__auto__ = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\ncljs.core.async.impl.dispatch.run((function (){\nvar f__36088__auto__ = (function (){var switch__35885__auto__ = (function (state_43408){\nvar state_val_43409 = (state_43408[(1)]);\nif((state_val_43409 === (1))){\nvar inst_43342 = cljs.core.PersistentVector.EMPTY_NODE;\nvar inst_43343 = [static_chan,err_chan];\nvar inst_43344 = (new cljs.core.PersistentVector(null,2,(5),inst_43342,inst_43343,null));\nvar state_43408__$1 = state_43408;\nreturn cljs.core.async.ioc_alts_BANG_(state_43408__$1,(2),inst_43344);\n} else {\nif((state_val_43409 === (2))){\nvar inst_43346 = (state_43408[(7)]);\nvar inst_43348 = (state_43408[(8)]);\nvar inst_43346__$1 = (state_43408[(2)]);\nvar inst_43347 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_43346__$1,(0),null);\nvar inst_43348__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_43346__$1,(1),null);\nvar inst_43349 = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(inst_43347);\nvar inst_43350 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(static_chan,inst_43348__$1);\nvar state_43408__$1 = (function (){var statearr_43411 = state_43408;\n(statearr_43411[(7)] = inst_43346__$1);\n\n(statearr_43411[(9)] = inst_43349);\n\n(statearr_43411[(8)] = inst_43348__$1);\n\nreturn statearr_43411;\n})();\nif(inst_43350){\nvar statearr_43415_43479 = state_43408__$1;\n(statearr_43415_43479[(1)] = (3));\n\n} else {\nvar statearr_43416_43481 = state_43408__$1;\n(statearr_43416_43481[(1)] = (4));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43409 === (3))){\nvar inst_43346 = (state_43408[(7)]);\nvar inst_43349 = (state_43408[(9)]);\nvar inst_43348 = (state_43408[(8)]);\nvar inst_43353 = cljs.core.deref(ref);\nvar inst_43354 = translations.tongue_base.process_dict_ops(inst_43353,inst_43349);\nvar inst_43355 = cljs.core.reset_BANG_(ref,inst_43354);\nvar inst_43359 = [new cljs.core.Keyword(null,\"handler\",\"handler\",-195596612),new cljs.core.Keyword(null,\"error-handler\",\"error-handler\",-484945776),new cljs.core.Keyword(null,\"format\",\"format\",-1306924766)];\nvar inst_43360 = (function (){var vec__43339 = inst_43346;\nvar seed_dict = inst_43349;\nvar port = inst_43348;\nreturn (function (p1__43334_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(ok_chan,p1__43334_SHARP_);\n});\n})();\nvar inst_43361 = (function (){var vec__43339 = inst_43346;\nvar seed_dict = inst_43349;\nvar port = inst_43348;\nreturn (function (p1__43335_SHARP_){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(err_chan,p1__43335_SHARP_);\n});\n})();\nvar inst_43362 = [inst_43360,inst_43361,new cljs.core.Keyword(null,\"transit\",\"transit\",359458387)];\nvar inst_43363 = cljs.core.PersistentHashMap.fromArrays(inst_43359,inst_43362);\nvar inst_43364 = ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic(dictionary_endpoint,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_43363], 0));\nvar inst_43398 = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\nvar inst_43399 = (function (){var vec__43339 = inst_43346;\nvar seed_dict = inst_43349;\nvar port = inst_43348;\nvar c__36087__auto____$1 = inst_43398;\nreturn (function (){\nvar f__36088__auto__ = (function (){var switch__35885__auto__ = (function (state_43396){\nvar state_val_43397 = (state_43396[(1)]);\nif((state_val_43397 === (1))){\nvar inst_43368 = cljs.core.PersistentVector.EMPTY_NODE;\nvar inst_43369 = [ok_chan,err_chan];\nvar inst_43370 = (new cljs.core.PersistentVector(null,2,(5),inst_43368,inst_43369,null));\nvar state_43396__$1 = state_43396;\nreturn cljs.core.async.ioc_alts_BANG_(state_43396__$1,(2),inst_43370);\n} else {\nif((state_val_43397 === (2))){\nvar inst_43372 = (state_43396[(2)]);\nvar inst_43373 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_43372,(0),null);\nvar inst_43374 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_43372,(1),null);\nvar inst_43375 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ok_chan,inst_43374);\nvar state_43396__$1 = (function (){var statearr_43419 = state_43396;\n(statearr_43419[(7)] = inst_43373);\n\nreturn statearr_43419;\n})();\nif(inst_43375){\nvar statearr_43420_43484 = state_43396__$1;\n(statearr_43420_43484[(1)] = (3));\n\n} else {\nvar statearr_43422_43485 = state_43396__$1;\n(statearr_43422_43485[(1)] = (4));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43397 === (3))){\nvar inst_43377 = (state_43396[(8)]);\nvar inst_43373 = (state_43396[(7)]);\nvar inst_43377__$1 = translations.tongue_base.read_json_dict(inst_43373);\nvar inst_43378 = translations.tongue_base.validate_op_args(inst_43377__$1);\nvar state_43396__$1 = (function (){var statearr_43424 = state_43396;\n(statearr_43424[(8)] = inst_43377__$1);\n\nreturn statearr_43424;\n})();\nif(inst_43378){\nvar statearr_43425_43486 = state_43396__$1;\n(statearr_43425_43486[(1)] = (6));\n\n} else {\nvar statearr_43426_43487 = state_43396__$1;\n(statearr_43426_43487[(1)] = (7));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43397 === (4))){\nvar inst_43373 = (state_43396[(7)]);\nvar inst_43390 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_43373], 0));\nvar inst_43391 = [\"error from\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(dictionary_endpoint),\":\",inst_43390].join('');\nvar inst_43392 = alert(inst_43391);\nvar state_43396__$1 = state_43396;\nvar statearr_43427_43488 = state_43396__$1;\n(statearr_43427_43488[(2)] = inst_43392);\n\n(statearr_43427_43488[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43397 === (5))){\nvar inst_43394 = (state_43396[(2)]);\nvar state_43396__$1 = state_43396;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_43396__$1,inst_43394);\n} else {\nif((state_val_43397 === (6))){\nvar inst_43377 = (state_43396[(8)]);\nvar inst_43380 = cljs.core.deref(ref);\nvar inst_43381 = translations.tongue_base.process_dict_ops(inst_43380,inst_43377);\nvar inst_43382 = cljs.core.reset_BANG_(ref,inst_43381);\nvar state_43396__$1 = state_43396;\nvar statearr_43432_43489 = state_43396__$1;\n(statearr_43432_43489[(2)] = inst_43382);\n\n(statearr_43432_43489[(1)] = (8));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43397 === (7))){\nvar inst_43385 = alert(\"Local dictionary parse failure\");\nvar state_43396__$1 = state_43396;\nvar statearr_43433_43490 = state_43396__$1;\n(statearr_43433_43490[(2)] = inst_43385);\n\n(statearr_43433_43490[(1)] = (8));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43397 === (8))){\nvar inst_43387 = (state_43396[(2)]);\nvar state_43396__$1 = state_43396;\nvar statearr_43437_43491 = state_43396__$1;\n(statearr_43437_43491[(2)] = inst_43387);\n\n(statearr_43437_43491[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n}\n});\nreturn (function() {\nvar translations$tongue_base$load_all_translations_$_state_machine__35886__auto__ = null;\nvar translations$tongue_base$load_all_translations_$_state_machine__35886__auto____0 = (function (){\nvar statearr_43439 = [null,null,null,null,null,null,null,null,null];\n(statearr_43439[(0)] = translations$tongue_base$load_all_translations_$_state_machine__35886__auto__);\n\n(statearr_43439[(1)] = (1));\n\nreturn statearr_43439;\n});\nvar translations$tongue_base$load_all_translations_$_state_machine__35886__auto____1 = (function (state_43396){\nwhile(true){\nvar ret_value__35887__auto__ = (function (){try{while(true){\nvar result__35888__auto__ = switch__35885__auto__(state_43396);\nif(cljs.core.keyword_identical_QMARK_(result__35888__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__35888__auto__;\n}\nbreak;\n}\n}catch (e43440){var ex__35889__auto__ = e43440;\nvar statearr_43441_43492 = state_43396;\n(statearr_43441_43492[(2)] = ex__35889__auto__);\n\n\nif(cljs.core.seq((state_43396[(4)]))){\nvar statearr_43442_43493 = state_43396;\n(statearr_43442_43493[(1)] = cljs.core.first((state_43396[(4)])));\n\n} else {\nthrow ex__35889__auto__;\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__35887__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__43494 = state_43396;\nstate_43396 = G__43494;\ncontinue;\n} else {\nreturn ret_value__35887__auto__;\n}\nbreak;\n}\n});\ntranslations$tongue_base$load_all_translations_$_state_machine__35886__auto__ = function(state_43396){\nswitch(arguments.length){\ncase 0:\nreturn translations$tongue_base$load_all_translations_$_state_machine__35886__auto____0.call(this);\ncase 1:\nreturn translations$tongue_base$load_all_translations_$_state_machine__35886__auto____1.call(this,state_43396);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ntranslations$tongue_base$load_all_translations_$_state_machine__35886__auto__.cljs$core$IFn$_invoke$arity$0 = translations$tongue_base$load_all_translations_$_state_machine__35886__auto____0;\ntranslations$tongue_base$load_all_translations_$_state_machine__35886__auto__.cljs$core$IFn$_invoke$arity$1 = translations$tongue_base$load_all_translations_$_state_machine__35886__auto____1;\nreturn translations$tongue_base$load_all_translations_$_state_machine__35886__auto__;\n})()\n})();\nvar state__36089__auto__ = (function (){var statearr_43446 = f__36088__auto__();\n(statearr_43446[(6)] = c__36087__auto____$1);\n\nreturn statearr_43446;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__36089__auto__);\n});\n})();\nvar inst_43400 = cljs.core.async.impl.dispatch.run(inst_43399);\nvar state_43408__$1 = (function (){var statearr_43448 = state_43408;\n(statearr_43448[(10)] = inst_43364);\n\n(statearr_43448[(11)] = inst_43355);\n\n(statearr_43448[(12)] = inst_43400);\n\nreturn statearr_43448;\n})();\nvar statearr_43449_43497 = state_43408__$1;\n(statearr_43449_43497[(2)] = inst_43398);\n\n(statearr_43449_43497[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43409 === (4))){\nvar inst_43349 = (state_43408[(9)]);\nvar inst_43402 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([inst_43349], 0));\nvar inst_43403 = [\"error from dictionary.txt \",inst_43402].join('');\nvar inst_43404 = alert(inst_43403);\nvar state_43408__$1 = state_43408;\nvar statearr_43453_43501 = state_43408__$1;\n(statearr_43453_43501[(2)] = inst_43404);\n\n(statearr_43453_43501[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43409 === (5))){\nvar inst_43406 = (state_43408[(2)]);\nvar state_43408__$1 = state_43408;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_43408__$1,inst_43406);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n});\nreturn (function() {\nvar translations$tongue_base$load_all_translations_$_state_machine__35886__auto__ = null;\nvar translations$tongue_base$load_all_translations_$_state_machine__35886__auto____0 = (function (){\nvar statearr_43459 = [null,null,null,null,null,null,null,null,null,null,null,null,null];\n(statearr_43459[(0)] = translations$tongue_base$load_all_translations_$_state_machine__35886__auto__);\n\n(statearr_43459[(1)] = (1));\n\nreturn statearr_43459;\n});\nvar translations$tongue_base$load_all_translations_$_state_machine__35886__auto____1 = (function (state_43408){\nwhile(true){\nvar ret_value__35887__auto__ = (function (){try{while(true){\nvar result__35888__auto__ = switch__35885__auto__(state_43408);\nif(cljs.core.keyword_identical_QMARK_(result__35888__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__35888__auto__;\n}\nbreak;\n}\n}catch (e43461){var ex__35889__auto__ = e43461;\nvar statearr_43462_43502 = state_43408;\n(statearr_43462_43502[(2)] = ex__35889__auto__);\n\n\nif(cljs.core.seq((state_43408[(4)]))){\nvar statearr_43463_43503 = state_43408;\n(statearr_43463_43503[(1)] = cljs.core.first((state_43408[(4)])));\n\n} else {\nthrow ex__35889__auto__;\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__35887__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__43504 = state_43408;\nstate_43408 = G__43504;\ncontinue;\n} else {\nreturn ret_value__35887__auto__;\n}\nbreak;\n}\n});\ntranslations$tongue_base$load_all_translations_$_state_machine__35886__auto__ = function(state_43408){\nswitch(arguments.length){\ncase 0:\nreturn translations$tongue_base$load_all_translations_$_state_machine__35886__auto____0.call(this);\ncase 1:\nreturn translations$tongue_base$load_all_translations_$_state_machine__35886__auto____1.call(this,state_43408);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ntranslations$tongue_base$load_all_translations_$_state_machine__35886__auto__.cljs$core$IFn$_invoke$arity$0 = translations$tongue_base$load_all_translations_$_state_machine__35886__auto____0;\ntranslations$tongue_base$load_all_translations_$_state_machine__35886__auto__.cljs$core$IFn$_invoke$arity$1 = translations$tongue_base$load_all_translations_$_state_machine__35886__auto____1;\nreturn translations$tongue_base$load_all_translations_$_state_machine__35886__auto__;\n})()\n})();\nvar state__36089__auto__ = (function (){var statearr_43468 = f__36088__auto__();\n(statearr_43468[(6)] = c__36087__auto__);\n\nreturn statearr_43468;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__36089__auto__);\n}));\n\nreturn c__36087__auto__;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Common translation support for both production and edit systems","~:file","translations/tongue_base.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",29],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$go","~$cljs.core.async"],"~:excludes",["~#set",[]],"~:name","~$translations.tongue-base","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.core","^O","~$tongue","~$tongue.core","^Q","^Q","~$cljs.core","^R","~$goog","^S","^E","^E","~$clojure.string","^T","~$cljs.reader","^U","~$predict-prostate.state.localStorage","^V","~$edn","^U"],"~:seen",["^G",["~:require","~:require-macros"]],"~:uses",["^ ","~$put!","^E","~$alts!","^E","~$GET","^O","~$POST","^O","~$starts-with?","^T","~$split","^T","~$get-settings!","^V"],"^Z",["^ ","^E","^E","^R","^R","^U","^U","^W","^U"],"~:form",["~#list",["~$ns","^I","Common translation support for both production and edit systems",["^18",["^Y",["^E","~:refer",["^10","^11"]],["^Q","~:as","^P"],["^O","^1:",["^12","^13"]],["^U","^1;","^W"],["^T","^1:",["^14","^15"]],["^V","^1:",["^16"]]]],["^18",["^Z",["^E","^1:",["^D"]]]]]],"~:flags",["^ ","^Y",["^G",[]],"^Z",["^G",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^E","^Q","^O","^U","^T","^V"]],"^L","^I","~:resource-id",["~:shadow.build.classpath/resource","translations/tongue_base.cljs"],"~:compiled-at",1648475980698,"^J",["^ ","^O","^O","^P","^Q","^Q","^Q","^R","^R","^S","^S","^E","^E","^T","^T","^U","^U","^V","^V","^W","^U"],"~:resource-name","translations/tongue_base.cljs","~:warnings",[],"~:source","(ns translations.tongue-base\n  \"Common translation support for both production and edit systems\"\n  (:require [cljs.core.async :refer [put! alts!]]\n            [tongue.core :as tongue]\n            [ajax.core :refer [GET POST]]\n            [cljs.reader :as edn]\n            [clojure.string :refer [starts-with? split]]\n            [predict-prostate.state.localStorage :refer [get-settings!]])\n  (:require-macros [cljs.core.async :refer [go]]))\n\n\n(defn wrap-translator\n  \"Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  \"\n  ([lang translator]\n   (fn [k & args]\n     (let [k* (if (keyword? k) [k] k)]\n       (if (vector? k*)\n         (let [translation (translator lang (first k*) args)]\n             ; use supplied default(s) if the translation is missing\n           (if (starts-with? translation \"{\")             ; indicates a missing entry\n             k*                                           ;(apply str (rest k*))                          ; return the original vector\n             translation))\n         (str k))))))\n\n\n(defn error-handler [{:keys [callback status status-text]}]\n  (println \"error dispatch - status : \" status \"\\ntext: \" status-text)\n  (callback (js/Error. (str status \" \" status-text))))\n\n;\n; Read the set of supported languages from \"languages.edn\" into state\n\n#_(defn handle-languages\n    \"if the languages file contains a set of two character keys, use it as a local list\"\n    ([ref edn-rsp]\n     (let [rsp (edn/read-string edn-rsp)]\n       (when (and (set? rsp) (every? #(and (keyword? %) (count (name %))) rsp))\n         (swap! ref assoc :languages rsp)))))\n\n(defn file-error [{:keys [status status-text]}]\n  (.log js/console (str \"file error: \" status \" \" status-text)))\n\n\n#_(defn get-languages\n    ([]\n     (get-languages \"languages.edn\"\n                    {:error-handler file-error\n                     :handler       handle-languages}))\n    ([m]\n     (get-languages \"languages.edn\" m))\n    ([url {:keys [error-handler handler]}]\n     (GET url {:error-handler file-error\n               :handler       handler\n               :format        :transit})))\n\n\n;\n; dictionary handling\n;\n(defn process-dict-op\n  \"Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set\"\n  ([dict [op & args] _ #_wrap?]\n   ;(print \"op\" op args)\n   (case op\n     :upsert (let [[lang new-words] args\n                   current-lang (:lang dict)\n                   ;_ (print \"dict \" dict)\n                   ;_ (print \"lang \" lang)\n                   ;_ (print \"new words \" new-words)\n                   ;_ (println \"selected lang is\" (:lang dict))\n                   ;_ (println \"adding language\" lang \"to\" (:languages dict))\n                   new-lang-dict (-> dict\n                                     (update :languages conj lang)\n                                     (update-in [:translations lang] merge new-words))]\n               (assoc new-lang-dict\n                      :translator (wrap-translator current-lang (tongue/build-translate (:translations new-lang-dict)))))\n\n     :switch (let [[lang] args]\n               ;(println \"switch lang\" lang)\n               ;(print \"translations\" (get-in dict [:translations lang]) lang)\n               (if (and lang (seq (get-in dict [:translations lang])))\n                 (assoc dict :lang lang\n                        :translator (wrap-translator lang (tongue/build-translate (:translations dict))))\n                 dict))))\n  ([dict op-args]\n   (process-dict-op dict op-args true)))\n\n\n(defn process-dict-ops\n  \"process a sequence of operations into the translation state\"\n  [t-state op-args]\n  (let [new-lang (:lang (get-settings! {:lang :en}))]\n    (reduce process-dict-op t-state (conj op-args [:switch new-lang]))))\n\n\n(defn handle-dictionary\n  \"process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD.\"\n  ([ref edn-rsp]\n   ; ref must contain a :languages set\n   {:pre (set? (:languages @ref))}\n   (let [op-args (edn/read-string edn-rsp)]\n     (when (and (seq op-args)\n                (every? (fn [[op lang & _]]\n                          (and (#{:upsert :switch} op)      ; op is valid\n                               (keyword? lang)\n                               (= 2 (count (name lang)))    ; accept lang codes of 2 characters\n                               ))\n                        op-args))\n       (reset! ref (process-dict-ops @ref op-args))))))\n\n\n(defn get-dictionary\n  \"read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD\"\n  [url {:keys [handler]}]\n  (GET url {:error-handler file-error                      ;on-error\n            :handler       handler\n            :format        :transit                        ;:transit\n            }))\n\n;;\n;; load translation state; Call this to set up the translation system\n;;\n(defn load-translations*\n  \"load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD\"\n  ([local-dictionary-url handler]\n   (get-dictionary\n    local-dictionary-url {:headers {\"Cache-Control\" \"no-store\"}\n                          :on-error file-error\n                          :handler  handler})))\n\n\n\n\n(defn validate-op-args [op-args]\n  (and (seq op-args)\n       (every? (fn [[op lang & args]]\n                 (condp = op\n                   :upsert (and\n                            (seq? args)\n                            (map? (first args))\n                            (keyword? lang))\n                   :switch (keyword? lang)\n                   false))\n               op-args)))\n\n(defn read-json-dict\n  \"Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'.\"\n  [json]\n  (->> json\n       (map\n        (fn [[cmd lang m]]\n          [(keyword cmd)\n           (keyword lang)\n           (into {} (map\n                     (fn [[k v]]\n                       [(->> (split k #\"#\")\n                             (interpose \"/\")\n                             (apply str)\n                             (keyword)) v])\n                     m))]))))\n\n;;\n;; load local translations into state; Do this once at startup\n;;\n(defn load-all-translations\n  \"Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json.\"\n  [static-chan ok-chan err-chan dictionary-endpoint ref]\n  ;{:pre (set? (:languages @ref))}                           ; ref must contain a :languages set\n  \n  (get-dictionary\n   \"/dictionary.txt\"\n   {:on-error #(put! err-chan %)\n    :handler  #(put! static-chan %)})\n\n  (go\n    (let [[seed-dict port] (alts! [static-chan err-chan])\n          seed-dict (edn/read-string seed-dict)]\n\n      (if (= static-chan port)\n\n        (do\n          (reset! ref (process-dict-ops @ref seed-dict))\n          ;(println \"seed-dict = \" seed-dict)\n          ;(println \"ref:\" @ref)\n          ;(println \"POSTING to \" dictionary-endpoint)\n          (POST dictionary-endpoint {:handler       #(put! ok-chan %)\n                                     :error-handler #(put! err-chan %)\n                                     :format        :transit})\n          (go\n            (let [[response port] (alts! [ok-chan err-chan])]\n              (if (= ok-chan port)\n                (let [op-args (read-json-dict response)]\n                  (if (validate-op-args op-args)\n                    (reset! ref (process-dict-ops @ref op-args))\n                    (js/alert (str \"Local dictionary parse failure\" #_(pr-str response)))))\n                (js/alert (str \"error from\" dictionary-endpoint \":\" (pr-str response)))))))\n        (js/alert (str \"error from dictionary.txt \" (pr-str seed-dict)))))))\n\n\n(comment\n  (process-dict-ops\n   {:lang :en}\n   [[:upsert [:en {:lang :en, :new-words \"new words\"}]]])\n\n  ; we can process a composition of op-args into the dictionary\n  (process-dict-ops\n   {:lang         :en\n    :translations {:en {}}\n    :languages    #{}}\n   [[:upsert :en {:lang :en, :new-words \"new words\"}]\n    [:upsert :es {:lang :en :some-key \"some-value\"}]]))\n","~:reader-features",["^G",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["translations.tongue-base/wrap-translator","lang","translator","k","args","k*","cljs.core/Keyword","cljs.core/vector?","translation","G__43258","G__43259","G__43260","cljs.core/first","clojure.string/starts-with?","p__43261","map__43262","cljs.core/--destructure-map","cljs.core.get","translations.tongue-base/error-handler","callback","status","status-text","cljs.core.println","G__43263","js/Error","p__43265","map__43266","translations.tongue-base/file-error","js/console","var_args","G__43270","translations.tongue-base/process-dict-op","p__43271","vec__43272","seq__43273","cljs.core/seq","first__43274","cljs.core/next","dict","op","_","G__43275","vec__43276","cljs.core.nth","new-words","current-lang","new-lang-dict","cljs.core.update","cljs.core/conj","cljs.core.update_in","cljs.core/merge","cljs.core.assoc","tongue.core/build-translate","vec__43279","and__4210__auto__","cljs.core.get_in","op-args","translations.tongue_base.process_dict_op","translations.tongue-base/process-dict-ops","t-state","new-lang","predict-prostate.state.localStorage/get-settings!","cljs.core.reduce","cljs.core.conj","translations.tongue-base/handle-dictionary","ref","edn-rsp","cljs.core/set?","cljs.core/deref","cljs.reader.read_string","cljs.core/every?","p__43284","vec__43285","seq__43286","first__43287","fexpr__43288","cljs.core._EQ_","cljs.core/name","cljs.core/reset!","p__43291","map__43292","translations.tongue-base/get-dictionary","url","handler","ajax.core.GET","translations.tongue-base/load-translations*","local-dictionary-url","translations.tongue-base/validate-op-args","p__43294","vec__43295","seq__43296","first__43297","pred__43299","expr__43300","cljs.core/=","cljs.core/seq?","cljs.core/map?","translations.tongue-base/read-json-dict","json","cljs.core.map","p__43324","vec__43325","cmd","m","cljs.core.keyword","cljs.core.into","p__43328","vec__43329","v","clojure.string.split","cljs.core.interpose","cljs.core.apply","cljs.core/str","translations.tongue-base/load-all-translations","static-chan","ok-chan","err-chan","dictionary-endpoint","p1__43332#","p1__43333#","cljs.core.async.put_BANG_","c__36087__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__36088__auto__","switch__35885__auto__","state_43408","state_val_43409","inst_43342","cljs.core/PersistentVector","inst_43343","inst_43344","cljs.core.async/ioc-alts!","inst_43346","inst_43348","inst_43347","inst_43349","inst_43350","statearr-43411","statearr-43415","statearr-43416","inst_43353","inst_43354","inst_43355","inst_43359","inst_43360","vec__43339","p1__43334#","inst_43361","p1__43335#","inst_43362","inst_43363","cljs.core/PersistentHashMap","inst_43364","inst_43398","inst_43399","state_43396","state_val_43397","inst_43368","inst_43369","inst_43370","inst_43372","inst_43373","inst_43374","inst_43375","statearr-43419","statearr-43420","statearr-43422","inst_43377","inst_43378","statearr-43424","statearr-43425","statearr-43426","inst_43390","inst_43391","inst_43392","statearr-43427","inst_43394","cljs.core.async.impl.ioc-helpers/return-chan","inst_43380","inst_43381","inst_43382","statearr-43432","inst_43385","statearr-43433","inst_43387","statearr-43437","statearr-43439","state-machine__35886__auto__","ret-value__35887__auto__","result__35888__auto__","cljs.core/keyword-identical?","ex__35889__auto__","e43440","statearr-43441","statearr-43442","state__36089__auto__","statearr-43446","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","inst_43400","statearr-43448","statearr-43449","inst_43402","inst_43403","inst_43404","statearr-43453","inst_43406","statearr-43459","e43461","statearr-43462","statearr-43463","statearr-43468","seed-dict","port","ajax.core.POST","js/alert","cljs.core.pr_str"]],"~:used-vars",["^G",["~$cljs.core/--destructure-map","~$cljs.core/keyword","~$cljs.core/str","~$cljs.core/PersistentHashMap","~$clojure.string/starts-with?","~$translations.tongue-base/validate-op-args","~$clojure.string/split","~$cljs.core/vector?","~$cljs.core/=","~$translations.tongue-base/error-handler","~$cljs.core.async/ioc-alts!","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/keyword-identical?","~$cljs.core.async/put!","~$cljs.core/pr-str","~$js/console","~$ajax.core/GET","~$js/alert","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/map","~$ajax.core/POST","~$cljs.core.async.impl.dispatch/run","~$cljs.core/PersistentVector","~$cljs.core/get-in","~$translations.tongue-base/load-all-translations","~$cljs.core.async/chan","~$cljs.core/get","~$cljs.core.async.impl.ioc-helpers/USER-START-IDX","~$translations.tongue-base/file-error","~$translations.tongue-base/handle-dictionary","~$translations.tongue-base/load-translations*","~$translations.tongue-base/process-dict-ops","~$cljs.core/set?","~$cljs.core/nth","~$cljs.core/println","~$tongue.core/build-translate","~$cljs.core/next","~$cljs.core.async.impl.ioc-helpers/return-chan","~$translations.tongue-base/read-json-dict","~$cljs.core/assoc","~$cljs.core/interpose","~$cljs.reader/read-string","~$translations.tongue-base/process-dict-op","~$cljs.core/first","~$translations.tongue-base/wrap-translator","~$cljs.core/seq?","~$cljs.core/name","~$cljs.core/merge","~$cljs.core/every?","~$cljs.core/update-in","~$js/Error","~$translations.tongue-base/get-dictionary","~$predict-prostate.state.localStorage/get-settings!"]]],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^1@","goog/async/freelist.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","cljs/core/async/impl/ioc_helpers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","~$cljs.core.async.impl.protocols"]]],["^1@","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.labs.userAgent.util","~$goog.string"]]],["^1@","cljs/core/async.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^3:","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1@","goog/timer/timer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1@","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","^3<"]]],["^1@","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","~$goog.asserts"]]],["^1@","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/events/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1@","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3;","~$goog.object","~$goog.string.internal"]]],["^1@","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3J"]]],["^1@","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F"]]],["^1@","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3;","~$goog.reflect","^3<"]]],["^1@","goog/structs/prioritypool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1@","goog/async/run.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1@","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1@","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/net/xhrmanager.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.events","~$goog.events.Event","~$goog.events.EventHandler","^3D","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.structs.Map"]]],["^1@","goog/async/workqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","~$goog.async.FreeList"]]],["^1@","ajax/interceptors.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","~$ajax.util","~$ajax.url","~$ajax.protocols"]]],["^1@","goog/events/events.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^3G","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","~$goog.events.EventId","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1@","goog/promise/resolver.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3C"]]],["^1@","goog/events/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3H"]]],["^1@","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^3<","~$goog.string.StringBuffer"]]],["^1@","goog/structs/priorityqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.structs.Heap"]]],["^1@","goog/net/xhrio.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.Timer","^3B","^3F","^4<","^3D","~$goog.json.hybrid","~$goog.log","^43","^44","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^3I","^3<","~$goog.structs","^47","~$goog.uri.utils","^3H","~$goog.Uri","^4@","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1@","goog/promise/thenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3C"]]],["^1@","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R"]]],["^1@","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3I"]]],["^1@","ajax/protocols.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R"]]],["^1@","ajax/transit.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","~$cognitect.transit","~$ajax.interceptors","^4;","^49"]]],["^1@","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4G","^4H","^4I","^4F","^3B","^3<","^4K"]]],["^1@","goog/net/wrapperxmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4U","^4V"]]],["^1@","ajax/simple.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","^4;","^4X","~$ajax.formats","^49","^45"]]],["^1@","goog/events/eventtarget.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.Disposable","^3F","^40","^41","^4>","^4?","^3I","^4A","^4B","^4D"]]],["^1@","goog/disposable/disposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.disposable.IDisposable"]]],["^1@","ajax/url.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","^49"]]],["^1@","translations/tongue_base.cljs"],["9d85e3631731115120cbe5a60eac9310eb98e42f","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^E","^Q","^O","^U","^T","^V"]]],["^1@","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F"]]],["^1@","goog/structs/set.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4R","~$goog.structs.Collection","^47","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1647940543000,1647940543000,1633031471000],["^1@","ajax/xml_http_request.cljs"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4;","^3<"]]],["^1@","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","^3T"]]],["^1@","goog/events/listener.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4D","^4>"]]],["^1@","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","~$goog.fs.blob","^3K","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3M","^3N","^3O","^3P"]]],["^1@","goog/debug/tracer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3F","~$goog.debug","~$goog.debug.Logger","~$goog.iter","^4O","^47","~$goog.structs.SimplePool"]]],["^1@","cljs/core/async/impl/channels.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^3:","^3@","^3>"]]],["^1@","goog/events/listenermap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^4E","^3I","^4A","^4>","^4D"]]],["^1@","goog/events/eventid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/events/eventwrapper.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^42","~$goog.events.ListenableType"]]],["^1@","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","cljs/core/async/impl/dispatch.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^3>","^3X"]]],["^1@","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3F","~$goog.html.SafeUrl","^3O","^3P","^3J"]]],["^1@","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^54","~$goog.html.SafeStyle","^5;","^3L","~$goog.html.uncheckedconversions","^3O","^3J"]]],["^1@","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R"]]],["^1@","cljs/core/async/impl/protocols.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R"]]],["^1@","goog/net/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^51","~$goog.iter.StopIteration"]]],["^1@","goog/net/xhriopool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^45","~$goog.structs.PriorityPool","^47"]]],["^1@","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3F","~$goog.dom.TagName","~$goog.dom.tags","^54","^5?","~$goog.html.SafeStyleSheet","^5;","^3L","^55","^3M","^3N","^3Q","^3I","^3O","^3P","^3J"]]],["^1@","tongue/macro.cljc"],["82355e198593adebc7acc44e3380c15b6ccb9fdc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R"]]],["^1@","ajax/easy.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","~$ajax.simple","~$ajax.transit","~$ajax.json","~$ajax.ring","^4:","^4Y"]]],["^1@","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3I"]]],["^1@","ajax/util.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4;"]]],["^1@","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","ajax/xhrio.cljs"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^44","^43","^45","~$goog.net.XhrManager","^4T","~$goog.json","^40","^4;"]]],["^1@","goog/structs/queue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B"]]],["^1@","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3;","^3<"]]],["^1@","ajax/ring.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4X","^4;","^4Y"]]],["^1@","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^3[","~$com.cognitect.transit.types"]]],["^1@","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B"]]],["^1@","cljs/reader.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^3I","^4J","~$cljs.tools.reader.edn","^4K"]]],["^1@","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3F","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^5C","~$goog.dom.safe","^5>","^5@","~$goog.math.Coordinate","~$goog.math.Size","^3I","^3<","^3O","~$goog.string.Unicode","^3H"]]],["^1@","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.debug.Error","^5Q"]]],["^1@","tongue/inst.cljc"],["82355e198593adebc7acc44e3380c15b6ccb9fdc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","~$tongue.macro"]]],["^1@","cljs/core/async/impl/buffers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^3:"]]],["^1@","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3F","^3<","^4R","^47","^4S","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/net/errorcode.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/debug/errorhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4Z","^3F","^56","~$goog.debug.EntryPointMonitor","^5V","~$goog.debug.Trace"]]],["^1@","tongue/core.cljc"],["82355e198593adebc7acc44e3380c15b6ccb9fdc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","~$tongue.inst","~$tongue.number","^5W"]]],["^1@","goog/disposable/idisposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/promise/promise.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3E","^3F","^48","~$goog.async.run","^3Y","^5V","~$goog.promise.Resolver"]]],["^1@","cljs/core/async/impl/timers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^3:","^3=","^3@"]]],["^1@","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",[]]],["^1@","goog/json/hybrid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","^5K"]]],["^1@","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3I"]]],["^1@","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4G","^T","~$cljs.tools.reader.impl.inspect"]]],["^1@","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^3<","^4K"]]],["^1@","goog/structs/pool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4Z","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1@","tongue/number.cljc"],["82355e198593adebc7acc44e3380c15b6ccb9fdc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","^5W"]]],["^1@","goog/net/httpstatus.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^5L","^5N","~$goog.math.Long"]]],["^1@","goog/structs/heap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3I","~$goog.structs.Node"]]],["^1@","ajax/json.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4W","~$clojure.walk","^4X","^4;"]]],["^1@","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F"]]],["^1@","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^5R","^5@","^3O","^3J"]]],["^1@","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^5L","~$com.cognitect.transit.eq","^67"]]],["^1@","ajax/formats.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4X","^49","^4;"]]],["^1@","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3J"]]],["^1@","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^5L"]]],["^1@","goog/debug/debug.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","~$goog.debug.errorcontext","^3H"]]],["^1@","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","~$goog.math"]]],["^1@","goog/debug/errorcontext.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4H","^3<","^4K"]]],["^1@","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3B","^3F","^5=","^6<"]]],["^1@","ajax/core.cljc"],["734ef60554b0b4902cfe10b10e586d0625b807d2","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^T","^4:","^5H","^5G","^5I","^4Y","^49","^4X","^5F","~$ajax.easy","^4;","~$ajax.xhrio","~$ajax.xml-http-request"]]],["^1@","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4<","~$goog.dom","^5C","^5=","^3Q","^3R"]]],["^1@","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","^5>","^54","^5?","^5E","^5;","^3L","^3O","^3J","^3M"]]],["^1@","predict_prostate/state/localStorage.cljs"],["ab609d64f83ca29ee84d7363ebaa46808ba524f7","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^U"]]],["^1@","goog/debug/logger.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^56","^4O","~$goog.log.Level","~$goog.log.LogRecord","~$goog.log.Logger"]]],["^1@","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^5M"]]],["^1@","goog/events/event.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4Z","^4A"]]],["^1@","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","^4F","^4G","^4H"]]],["^1@","goog/events/eventhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4Z","^40","^3I","^41","^4A","^3D","^4C"]]],["^1@","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^67","~$goog.math.Integer","^3<","^3I","^3B","^4T","^4K"]]],["^1@","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^5L","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^5N","^6:","^3Z","^3["]]],["^1@","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3O","^3P","^55","^3F"]]],["^1@","goog/log/log.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","^56"]]],["^1@","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3O","^5?","^3P","^3B","^3I","^3F","^3J"]]],["^1@","goog/structs/collection.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/events/browserevent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^56","^3G","^41","~$goog.events.EventType","^3T","^3H"]]],["^1@","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3T"]]],["^1@","goog/structs/node.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/structs/simplepool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4Z"]]],["^1@","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3H"]]],["^1@","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","^3<"]]],["^1@","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","^3P"]]],["^1@","goog/json/json.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","goog/events/listenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4A","^4B"]]],["^1@","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^5L","^3[","~$com.cognitect.transit.handlers","^5N","^5M","^67"]]],["^1@","goog/net/xmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^4U"]]],["^1@","goog/net/xmlhttp.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^3F","~$goog.net.WrapperXmlHttpFactory","^4V","^4U"]]],["^1@","goog/net/xhrlike.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S"]]],["^1@","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^35",["^ ","^36",null,"^37",["^G",[]],"^38",["^S","^R","~$com.cognitect.transit","^5N","^6:","^67"]]]]],"~:clj-info",["^ ","jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/cljs/core/async/impl/ioc_macros.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/protocols.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/tongue/tongue/0.4.3/tongue-0.4.3.jar!/tongue/macro.cljc",1644311977000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/reader.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/dispatch.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/cljs/core/async.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/concurrent.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1648121537000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/cljs-ajax/cljs-ajax/0.8.4/cljs-ajax-0.8.4.jar!/ajax/macros.clj",1640963189000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/exec/threadpool.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1633011066000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Common translation support for both production and edit systems","^7","translations/tongue_base.cljs","^8",1,"^9",5,"^:",1,"^;",29],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",["^ ","^D","^E"],"^F",["^G",[]],"^H","^I","^J",["^ "],"^M",null,"^N",["^ ","^O","^O","^P","^Q","^Q","^Q","^R","^R","^S","^S","^E","^E","^T","^T","^U","^U","^V","^V","^W","^U"],"^X",["^G",["^Y","^Z"]],"~:shadow/js-access-global",["^G",["alert","Error"]],"^[",["^ ","^10","^E","^11","^E","^12","^O","^13","^O","^14","^T","^15","^T","^16","^V"],"~:defs",["^ ","~$file-error",["^ ","~:protocol-inline",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",54,"^9",7,"^:",54,"^;",17,"~:arglists",["^18",["~$quote",["^18",[[["^ ","~:keys",["~$status","~$status-text"]]]]]]]],"^H","^2F","^7","translations/tongue_base.cljs","^;",17,"~:method-params",["^18",[["~$p__43265"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^9",1,"~:variadic?",false,"^8",54,"~:ret-tag","~$js","^:",54,"~:max-fixed-arity",1,"~:fn-var",true,"^7L",["^18",["^7M",["^18",[[["^ ","^7N",["^7O","^7P"]]]]]]]],"~$handle-dictionary",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",111,"^9",7,"^:",111,"^;",24,"^7L",["^18",["^7M",["^18",[["~$ref","~$edn-rsp"]]]]],"^6","process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD."],"^H","^2G","^7","translations/tongue_base.cljs","^;",24,"^7Q",["^18",[["^7[","^80"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",111,"^7V",["^G",[null,"~$any","~$clj-nil"]],"^:",111,"^7X",2,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^7[","^80"]]]]],"^6","process a sequence of operations on the dictionary, inserting them into the translation state @ref.\n  USED IN PRODUCTION DICTIONARY LOAD."],"~$load-all-translations",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",189,"^9",7,"^:",189,"^;",28,"^7L",["^18",["^7M",["^18",[["~$static-chan","~$ok-chan","~$err-chan","~$dictionary-endpoint","^7["]]]]],"^6","Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json."],"^H","^2B","^7","translations/tongue_base.cljs","^;",28,"^7Q",["^18",[["^84","^85","^86","^87","^7["]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",189,"^7V","^81","^:",189,"^7X",5,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^84","^85","^86","^87","^7["]]]]],"^6","Load the initial dictionary into the rtdb t-state from the live-dictionary-url - a static txt file on the server.\n   Once complete, and this is just used in the editing system, also download all translations on the server, and merge them.\n\n   Both remote and local dictionaries contain a vector of [:upsert lang translations] commands, and these are added\n   into the ref atom or cursor on reception. Once there, they are used to translate all text wrapped in ttt function calls.\n\n   If a [:switch lang] command is received then the default language will change too.\n   We can use transit here since we are not dependent on coast middleware which only supports json."],"~$load-translations*",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",140,"^9",7,"^:",140,"^;",25,"^7L",["^18",["^7M",["^18",[["~$local-dictionary-url","~$handler"]]]]],"^6","load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD"],"^H","^2H","^7","translations/tongue_base.cljs","^;",25,"^7Q",["^18",[["^89","^8:"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",140,"^7V","^81","^:",140,"^7X",2,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^89","^8:"]]]]],"^6","load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD"],"~$process-dict-op",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",74,"^9",7,"^:",74,"^;",22,"^7L",["^18",["^7M",["^18",[["~$dict",["~$op","~$&","~$args"],"~$_"],["^8<","~$op-args"]]]]],"^6","Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set","~:top-fn",["^ ","^7U",false,"~:fixed-arity",3,"^7X",3,"^7Q",[["^8<",["^8=","~$&","^8>"],"~$_"],["^8<","^8?"]],"^7L",["^18",[["^8<",["^8=","~$&","^8>"],"~$_"],["^8<","^8?"]]],"^7T",["^18",[null,null]]]],"^H","^2T","^7","translations/tongue_base.cljs","^;",22,"^8@",["^ ","^7U",false,"^8A",3,"^7X",3,"^7Q",[["^8<",["^8=","~$&","^8>"],"~$_"],["^8<","^8?"]],"^7L",["^18",[["^8<",["^8=","~$&","^8>"],"~$_"],["^8<","^8?"]]],"^7T",["^18",[null,null]]],"^7Q",[["^8<",["^8=","~$&","^8>"],"~$_"],["^8<","^8?"]],"^7S",null,"^8A",3,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"~:methods",[["^ ","^8A",3,"^7U",false],["^ ","^8A",2,"^7U",false,"~:tag","^81"]],"^8",74,"^:",74,"^7X",3,"^7Y",true,"^7L",["^18",[["^8<",["^8=","~$&","^8>"],"~$_"],["^8<","^8?"]]],"^6","Process ops over a dictionary, returning a new dictionary.\n  If the ops merge in words from a new language, that is merged in to the supported languages set"],"~$process-dict-ops",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",104,"^9",7,"^:",104,"^;",23,"^7L",["^18",["^7M",["^18",[["~$t-state","^8?"]]]]],"^6","process a sequence of operations into the translation state"],"^H","^2I","^7","translations/tongue_base.cljs","^;",23,"^7Q",["^18",[["^8E","^8?"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",104,"^7V",["^G",[null,"^81"]],"^:",104,"^7X",2,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^8E","^8?"]]]]],"^6","process a sequence of operations into the translation state"],"~$read-json-dict",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",168,"^9",7,"^:",168,"^;",21,"^7L",["^18",["^7M",["^18",[["~$json"]]]]],"^6","Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'."],"^H","^2P","^7","translations/tongue_base.cljs","^;",21,"^7Q",["^18",[["^8G"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",168,"^7V","~$cljs.core/LazySeq","^:",168,"^7X",1,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^8G"]]]]],"^6","Note that his code should be shared with the babashka bin/getdictionary.clj script, once we work out how to do that.\n  Take json read in from the dictionary api end point and convert it into a valid clojure data structure with valid\n  keywords in the form :ns/key rather than teh string ':ns#key'."],"~$validate-op-args",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",156,"^9",7,"^:",156,"^;",23,"^7L",["^18",["^7M",["^18",[["^8?"]]]]]],"^H","^1Q","^7","translations/tongue_base.cljs","^;",23,"^7Q",["^18",[["^8?"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",156,"^7V","~$boolean","^:",156,"^7X",1,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^8?"]]]]]],"~$get-dictionary",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",128,"^9",7,"^:",128,"^;",21,"^7L",["^18",["^7M",["^18",[["~$url",["^ ","^7N",["^8:"]]]]]]],"^6","read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD"],"^H","^31","^7","translations/tongue_base.cljs","^;",21,"^7Q",["^18",[["^8L","~$p__43291"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",128,"^7V","^81","^:",128,"^7X",2,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^8L",["^ ","^7N",["^8:"]]]]]]],"^6","read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD"],"~$wrap-translator",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",12,"^9",7,"^:",12,"^;",22,"^7L",["^18",["^7M",["^18",[["~$lang","~$translator"]]]]],"^6","Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  "],"^H","^2V","^7","translations/tongue_base.cljs","^;",22,"^7Q",["^18",[["^8O","^8P"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",12,"^7V","~$function","^:",12,"^7X",2,"^7Y",true,"^7L",["^18",["^7M",["^18",[["^8O","^8P"]]]]],"^6","Return a translation function which wraps tongue 'translate', giving it similar\n  capabilities as the tempura translator.\n\n  The returned function takes a language, a k to translate, plus any args\n\n  If k is a string it returns k untranslated.\n\n  If k is a keyword, it looks up  k in the translations dictionary for the\n  given language, possibly with argument interpolation. i.e. Just like the original.\n\n  If k is a vector, the first element is used as the lookup key. The remaining elements are ignored and may\n  be used to document the translation.\n\n  If k is some other type (most usefully a string), it is converted to a string and returned. Any other arguments are ignored.\n  "],"~$error-handler",["^ ","^7K",null,"^5",["^ ","^7","translations/tongue_base.cljs","^8",40,"^9",7,"^:",40,"^;",20,"^7L",["^18",["^7M",["^18",[[["^ ","^7N",["~$callback","^7O","^7P"]]]]]]]],"^H","^1U","^7","translations/tongue_base.cljs","^;",20,"^7Q",["^18",[["~$p__43261"]]],"^7S",null,"^7T",["^18",[null,null]],"^9",1,"^7U",false,"^8",40,"^7V","^81","^:",40,"^7X",1,"^7Y",true,"^7L",["^18",["^7M",["^18",[[["^ ","^7N",["^8S","^7O","^7P"]]]]]]]]],"^Z",["^ ","^E","^E","^R","^R","^U","^U","^W","^U"],"~:cljs.analyzer/constants",["^ ","^X",["^G",["~:format","~:status-text","~:recur","~:headers","~:error-handler","~:lang","~:en","~:transit","~:status","~:translator","~:upsert","~:on-error","~:languages","~:callback","~:handler","~:switch","~:translations"]],"~:order",["^97","^92","^8W","^8[","^96","^9:","^93","^90","^99","^94","^98","^8Z","^8V","^91","^8Y","^95","^8X"]],"^1<",["^ ","^Y",["^G",[]],"^Z",["^G",[]]],"^1=",["^ "],"^1>",["^S","^R","^E","^Q","^O","^U","^T","^V"]],"^L","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^34",[["^9>","~:static-fns"],true,["^9>","~:shadow-tweaks"],null,["^9>","~:source-map-inline"],null,["^9>","~:elide-asserts"],false,["^9>","~:optimize-constants"],null,["^9>","^1C"],null,["^9>","~:external-config"],null,["^9>","~:tooling-config"],null,["^9>","~:emit-constants"],null,["^9>","~:load-tests"],null,["^9>","~:form-size-threshold"],null,["^9>","~:data-readers"],null,["^9>","~:infer-externs"],"~:auto",["^9>","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9>","~:fn-invoke-direct"],null,["^9>","~:source-map"],"/dev/null"]]]