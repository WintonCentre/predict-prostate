["^ ","~:output",["^ ","~:js","goog.provide('garden.util');\n/**\n * Formats a string using goog.string.format.\n */\ngarden.util.format = (function garden$util$format(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___43909 = arguments.length;\nvar i__4819__auto___43910 = (0);\nwhile(true){\nif((i__4819__auto___43910 < len__4818__auto___43909)){\nargs__4824__auto__.push((arguments[i__4819__auto___43910]));\n\nvar G__43911 = (i__4819__auto___43910 + (1));\ni__4819__auto___43910 = G__43911;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn garden.util.format.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(garden.util.format.cljs$core$IFn$_invoke$arity$variadic = (function (fmt,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(goog.string.format,fmt,args);\n}));\n\n(garden.util.format.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(garden.util.format.cljs$lang$applyTo = (function (seq43744){\nvar G__43745 = cljs.core.first(seq43744);\nvar seq43744__$1 = cljs.core.next(seq43744);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__43745,seq43744__$1);\n}));\n\n\n/**\n * @interface\n */\ngarden.util.ToString = function(){};\n\nvar garden$util$ToString$to_str$dyn_43926 = (function (this$){\nvar x__4509__auto__ = (((this$ == null))?null:this$);\nvar m__4510__auto__ = (garden.util.to_str[goog.typeOf(x__4509__auto__)]);\nif((!((m__4510__auto__ == null)))){\nreturn (m__4510__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4510__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4510__auto__.call(null,this$));\n} else {\nvar m__4508__auto__ = (garden.util.to_str[\"_\"]);\nif((!((m__4508__auto__ == null)))){\nreturn (m__4508__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4508__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4508__auto__.call(null,this$));\n} else {\nthrow cljs.core.missing_protocol(\"ToString.to-str\",this$);\n}\n}\n});\n/**\n * Convert a value into a string.\n */\ngarden.util.to_str = (function garden$util$to_str(this$){\nif((((!((this$ == null)))) && ((!((this$.garden$util$ToString$to_str$arity$1 == null)))))){\nreturn this$.garden$util$ToString$to_str$arity$1(this$);\n} else {\nreturn garden$util$ToString$to_str$dyn_43926(this$);\n}\n});\n\n(cljs.core.Keyword.prototype.garden$util$ToString$ = cljs.core.PROTOCOL_SENTINEL);\n\n(cljs.core.Keyword.prototype.garden$util$ToString$to_str$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.name(this$__$1);\n}));\n\ngoog.object.set(garden.util.ToString,\"_\",true);\n\ngoog.object.set(garden.util.to_str,\"_\",(function (this$){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$);\n}));\n\ngoog.object.set(garden.util.ToString,\"null\",true);\n\ngoog.object.set(garden.util.to_str,\"null\",(function (this$){\nreturn \"\";\n}));\n/**\n * Convert a variable number of values into strings.\n */\ngarden.util.as_str = (function garden$util$as_str(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___43935 = arguments.length;\nvar i__4819__auto___43936 = (0);\nwhile(true){\nif((i__4819__auto___43936 < len__4818__auto___43935)){\nargs__4824__auto__.push((arguments[i__4819__auto___43936]));\n\nvar G__43937 = (i__4819__auto___43936 + (1));\ni__4819__auto___43936 = G__43937;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((0) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((0)),(0),null)):null);\nreturn garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic(argseq__4825__auto__);\n});\n\n(garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.util.to_str,args));\n}));\n\n(garden.util.as_str.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(garden.util.as_str.cljs$lang$applyTo = (function (seq43756){\nvar self__4806__auto__ = this;\nreturn self__4806__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq43756));\n}));\n\n/**\n * Convert a string to an integer with optional base.\n */\ngarden.util.string__GT_int = (function garden$util$string__GT_int(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___43938 = arguments.length;\nvar i__4819__auto___43942 = (0);\nwhile(true){\nif((i__4819__auto___43942 < len__4818__auto___43938)){\nargs__4824__auto__.push((arguments[i__4819__auto___43942]));\n\nvar G__43944 = (i__4819__auto___43942 + (1));\ni__4819__auto___43942 = G__43944;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic = (function (s,p__43763){\nvar vec__43764 = p__43763;\nvar radix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43764,(0),null);\nvar radix__$1 = (function (){var or__4212__auto__ = radix;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn (10);\n}\n})();\nreturn parseInt(s,radix__$1);\n}));\n\n(garden.util.string__GT_int.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(garden.util.string__GT_int.cljs$lang$applyTo = (function (seq43760){\nvar G__43761 = cljs.core.first(seq43760);\nvar seq43760__$1 = cljs.core.next(seq43760);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__43761,seq43760__$1);\n}));\n\n/**\n * Convert an integer to a string with optional base.\n */\ngarden.util.int__GT_string = (function garden$util$int__GT_string(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___43953 = arguments.length;\nvar i__4819__auto___43954 = (0);\nwhile(true){\nif((i__4819__auto___43954 < len__4818__auto___43953)){\nargs__4824__auto__.push((arguments[i__4819__auto___43954]));\n\nvar G__43955 = (i__4819__auto___43954 + (1));\ni__4819__auto___43954 = G__43955;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic = (function (i,p__43775){\nvar vec__43776 = p__43775;\nvar radix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43776,(0),null);\nvar radix__$1 = (function (){var or__4212__auto__ = radix;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn (10);\n}\n})();\nreturn i.toString(radix__$1);\n}));\n\n(garden.util.int__GT_string.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(garden.util.int__GT_string.cljs$lang$applyTo = (function (seq43770){\nvar G__43771 = cljs.core.first(seq43770);\nvar seq43770__$1 = cljs.core.next(seq43770);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__43771,seq43770__$1);\n}));\n\n/**\n * Return a space separated list of values.\n */\ngarden.util.space_join = (function garden$util$space_join(xs){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.util.to_str,xs));\n});\n/**\n * Return a comma separated list of values. Subsequences are joined with\n * spaces.\n */\ngarden.util.comma_join = (function garden$util$comma_join(xs){\nvar ys = (function (){var iter__4611__auto__ = (function garden$util$comma_join_$_iter__43783(s__43784){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__43784__$1 = s__43784;\nwhile(true){\nvar temp__5753__auto__ = cljs.core.seq(s__43784__$1);\nif(temp__5753__auto__){\nvar s__43784__$2 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__43784__$2)){\nvar c__4609__auto__ = cljs.core.chunk_first(s__43784__$2);\nvar size__4610__auto__ = cljs.core.count(c__4609__auto__);\nvar b__43786 = cljs.core.chunk_buffer(size__4610__auto__);\nif((function (){var i__43785 = (0);\nwhile(true){\nif((i__43785 < size__4610__auto__)){\nvar x = cljs.core._nth(c__4609__auto__,i__43785);\ncljs.core.chunk_append(b__43786,((cljs.core.sequential_QMARK_(x))?garden.util.space_join(x):garden.util.to_str(x)));\n\nvar G__43965 = (i__43785 + (1));\ni__43785 = G__43965;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__43786),garden$util$comma_join_$_iter__43783(cljs.core.chunk_rest(s__43784__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__43786),null);\n}\n} else {\nvar x = cljs.core.first(s__43784__$2);\nreturn cljs.core.cons(((cljs.core.sequential_QMARK_(x))?garden.util.space_join(x):garden.util.to_str(x)),garden$util$comma_join_$_iter__43783(cljs.core.rest(s__43784__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4611__auto__(xs);\n})();\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\", \",ys);\n});\n/**\n * Wrap a string with double quotes.\n */\ngarden.util.wrap_quotes = (function garden$util$wrap_quotes(s){\nreturn [\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\"\\\"\"].join('');\n});\n/**\n * True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\n */\ngarden.util.hash_map_QMARK_ = (function garden$util$hash_map_QMARK_(x){\nreturn ((cljs.core.map_QMARK_(x)) && ((!(cljs.core.record_QMARK_(x)))));\n});\n/**\n * Alias to `vector?`.\n */\ngarden.util.rule_QMARK_ = cljs.core.vector_QMARK_;\n/**\n * Alias to `hash-map?`.\n */\ngarden.util.declaration_QMARK_ = garden.util.hash_map_QMARK_;\ngarden.util.at_rule_QMARK_ = (function garden$util$at_rule_QMARK_(x){\nreturn (x instanceof garden.types.CSSAtRule);\n});\n/**\n * True if `x` is a CSS `@media` rule.\n */\ngarden.util.at_media_QMARK_ = (function garden$util$at_media_QMARK_(x){\nreturn ((garden.util.at_rule_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498).cljs$core$IFn$_invoke$arity$1(x),new cljs.core.Keyword(null,\"media\",\"media\",-1066138403))));\n});\n/**\n * True if `x` is a CSS `@keyframes` rule.\n */\ngarden.util.at_keyframes_QMARK_ = (function garden$util$at_keyframes_QMARK_(x){\nreturn ((garden.util.at_rule_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498).cljs$core$IFn$_invoke$arity$1(x),new cljs.core.Keyword(null,\"keyframes\",\"keyframes\",-1437976012))));\n});\n/**\n * True if `x` is a CSS `@import` rule.\n */\ngarden.util.at_import_QMARK_ = (function garden$util$at_import_QMARK_(x){\nreturn ((garden.util.at_rule_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498).cljs$core$IFn$_invoke$arity$1(x),new cljs.core.Keyword(null,\"import\",\"import\",-1399500709))));\n});\n/**\n * Attach a CSS style prefix to s.\n */\ngarden.util.prefix = (function garden$util$prefix(p,s){\nvar p__$1 = garden.util.to_str(p);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"-\",cljs.core.last(p__$1))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p__$1),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');\n}\n});\n/**\n * Attach a CSS vendor prefix to s.\n */\ngarden.util.vendor_prefix = (function garden$util$vendor_prefix(p,s){\nvar p__$1 = garden.util.to_str(p);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"-\",cljs.core.first(p__$1))){\nreturn garden.util.prefix(p__$1,s);\n} else {\nreturn garden.util.prefix([\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p__$1)].join(''),s);\n}\n});\n/**\n * True if n is a natural number.\n */\ngarden.util.natural_QMARK_ = (function garden$util$natural_QMARK_(n){\nreturn ((cljs.core.integer_QMARK_(n)) && ((n > (0))));\n});\n/**\n * True if n is a number between a and b.\n */\ngarden.util.between_QMARK_ = (function garden$util$between_QMARK_(n,a,b){\nvar bottom = (function (){var x__4298__auto__ = a;\nvar y__4299__auto__ = b;\nreturn ((x__4298__auto__ < y__4299__auto__) ? x__4298__auto__ : y__4299__auto__);\n})();\nvar top = (function (){var x__4295__auto__ = a;\nvar y__4296__auto__ = b;\nreturn ((x__4295__auto__ > y__4296__auto__) ? x__4295__auto__ : y__4296__auto__);\n})();\nreturn (((n >= bottom)) && ((n <= top)));\n});\n/**\n * Return a number such that n is no less than a and no more than b.\n */\ngarden.util.clip = (function garden$util$clip(a,b,n){\nvar vec__43842 = (((a <= b))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b,a], null));\nvar a__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43842,(0),null);\nvar b__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43842,(1),null);\nvar x__4295__auto__ = a__$1;\nvar y__4296__auto__ = (function (){var x__4298__auto__ = b__$1;\nvar y__4299__auto__ = n;\nreturn ((x__4298__auto__ < y__4299__auto__) ? x__4298__auto__ : y__4299__auto__);\n})();\nreturn ((x__4295__auto__ > y__4296__auto__) ? x__4295__auto__ : y__4296__auto__);\n});\n/**\n * Return the average of two or more numbers.\n */\ngarden.util.average = (function garden$util$average(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___44003 = arguments.length;\nvar i__4819__auto___44004 = (0);\nwhile(true){\nif((i__4819__auto___44004 < len__4818__auto___44003)){\nargs__4824__auto__.push((arguments[i__4819__auto___44004]));\n\nvar G__44005 = (i__4819__auto___44004 + (1));\ni__4819__auto___44004 = G__44005;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((2) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((2)),(0),null)):null);\nreturn garden.util.average.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4825__auto__);\n});\n\n(garden.util.average.cljs$core$IFn$_invoke$arity$variadic = (function (n,m,more){\nreturn (cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._PLUS_,n,m,more) / (2.0 + cljs.core.count(more)));\n}));\n\n(garden.util.average.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(garden.util.average.cljs$lang$applyTo = (function (seq43846){\nvar G__43847 = cljs.core.first(seq43846);\nvar seq43846__$1 = cljs.core.next(seq43846);\nvar G__43848 = cljs.core.first(seq43846__$1);\nvar seq43846__$2 = cljs.core.next(seq43846__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__43847,G__43848,seq43846__$2);\n}));\n\n/**\n * All the ways to take one item from each sequence.\n */\ngarden.util.cartesian_product = (function garden$util$cartesian_product(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___44010 = arguments.length;\nvar i__4819__auto___44011 = (0);\nwhile(true){\nif((i__4819__auto___44011 < len__4818__auto___44010)){\nargs__4824__auto__.push((arguments[i__4819__auto___44011]));\n\nvar G__44012 = (i__4819__auto___44011 + (1));\ni__4819__auto___44011 = G__44012;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((0) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((0)),(0),null)):null);\nreturn garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic(argseq__4825__auto__);\n});\n\n(garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic = (function (seqs){\nvar v_original_seqs = cljs.core.vec(seqs);\nvar step = (function garden$util$step(v_seqs){\nvar increment = (function (v_seqs__$1){\nvar i = (cljs.core.count(v_seqs__$1) - (1));\nvar v_seqs__$2 = v_seqs__$1;\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(-1))){\nreturn null;\n} else {\nvar temp__5751__auto__ = cljs.core.next((v_seqs__$2.cljs$core$IFn$_invoke$arity$1 ? v_seqs__$2.cljs$core$IFn$_invoke$arity$1(i) : v_seqs__$2.call(null,i)));\nif(temp__5751__auto__){\nvar rst = temp__5751__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v_seqs__$2,i,rst);\n} else {\nvar G__44013 = (i - (1));\nvar G__44014 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v_seqs__$2,i,(v_original_seqs.cljs$core$IFn$_invoke$arity$1 ? v_original_seqs.cljs$core$IFn$_invoke$arity$1(i) : v_original_seqs.call(null,i)));\ni = G__44013;\nv_seqs__$2 = G__44014;\ncontinue;\n}\n}\nbreak;\n}\n});\nif(cljs.core.truth_(v_seqs)){\nreturn cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,v_seqs),(new cljs.core.LazySeq(null,(function (){\nreturn garden$util$step(increment(v_seqs));\n}),null,null)));\n} else {\nreturn null;\n}\n});\nif(cljs.core.every_QMARK_(cljs.core.seq,seqs)){\nreturn (new cljs.core.LazySeq(null,(function (){\nreturn step(v_original_seqs);\n}),null,null));\n} else {\nreturn null;\n}\n}));\n\n(garden.util.cartesian_product.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(garden.util.cartesian_product.cljs$lang$applyTo = (function (seq43862){\nvar self__4806__auto__ = this;\nreturn self__4806__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq43862));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utility functions used by Garden.","~:file","garden/util.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$garden.util","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^M","~$str","^M","~$garden.types","^O","~$t","^O","~$goog.string","^P","~$goog.string.format","^Q","~$cljs.core","^R","~$goog","^S"],"~:seen",["^E",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^G","Utility functions used by Garden.",["^Y",["^U",["^M","~:as","^N"],["^O","^[","~$t"],["^P"],["^Q"]]]]],"~:flags",["^ ","^U",["^E",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^M","^O","^P","^Q"]],"^J","^G","~:resource-id",["~:shadow.build.classpath/resource","garden/util.cljc"],"~:compiled-at",1648475980786,"^H",["^ ","^M","^M","^N","^M","^O","^O","~$t","^O","^P","^P","^Q","^Q","^R","^R","^S","^S"],"~:resource-name","garden/util.cljc","~:warnings",[],"~:source","(ns garden.util\n  \"Utility functions used by Garden.\"\n  (:require\n   [clojure.string :as str]\n   [garden.types :as t]\n   #?@(:cljs\n       [[goog.string]\n        [goog.string.format]]))\n  #?(:clj\n     (:refer-clojure :exclude [format]))\n  #?(:clj\n     (:import garden.types.CSSAtRule)))\n\n;; ---------------------------------------------------------------------\n;; String utilities\n\n#?(:cljs\n   (defn format\n     \"Formats a string using goog.string.format.\"\n     [fmt & args]\n     (apply goog.string/format fmt args)))\n\n;; To avoid the pain of #?cljs :refer.\n#?(:clj\n   (def format #'clojure.core/format))\n\n(defprotocol ToString\n  (^String to-str [this] \"Convert a value into a string.\"))\n\n(extend-protocol ToString\n  #?(:clj clojure.lang.Keyword)\n  #?(:cljs Keyword)\n  (to-str [this] (name this))\n\n  #?(:clj Object)\n  #?(:cljs default)\n  (to-str [this] (str this))\n\n  nil (to-str [this] \"\"))\n\n(defn ^String as-str\n  \"Convert a variable number of values into strings.\"\n  [& args]\n  (apply str (map to-str args)))\n\n(defn string->int\n  \"Convert a string to an integer with optional base.\"\n  [s & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/parseInt ^String s ^Long radix))\n    #?(:cljs\n       (js/parseInt s radix))))\n\n(defn int->string\n  \"Convert an integer to a string with optional base.\"\n  [i & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/toString ^Long i ^Long radix))\n    #?(:cljs\n       (.toString i radix))))\n\n(defn space-join\n  \"Return a space separated list of values.\"\n  [xs]\n  (str/join \" \" (map to-str xs)))\n\n(defn comma-join\n  \"Return a comma separated list of values. Subsequences are joined with\n   spaces.\"\n  [xs]\n  (let [ys (for [x xs]\n             (if (sequential? x)\n               (space-join x)\n               (to-str x)))]\n    (str/join \", \" ys)))\n\n(defn wrap-quotes\n  \"Wrap a string with double quotes.\"\n  [s]\n  (str \\\" s \\\"))\n\n;; ---------------------------------------------------------------------\n;; Predicates\n\n(defn hash-map?\n  \"True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\"\n  [x]\n  (and (map? x) (not (record? x))))\n\n(def\n  ^{:doc \"Alias to `vector?`.\"}\n  rule? vector?)\n\n(def\n  ^{:doc \"Alias to `hash-map?`.\"}\n  declaration? hash-map?)\n\n(defn at-rule?\n  [x]\n  (instance? #?(:clj CSSAtRule) #?(:cljs t/CSSAtRule) x))\n\n(defn at-media?\n  \"True if `x` is a CSS `@media` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :media)))\n\n(defn at-keyframes?\n  \"True if `x` is a CSS `@keyframes` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :keyframes)))\n\n(defn at-import?\n  \"True if `x` is a CSS `@import` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :import)))\n\n(defn prefix\n  \"Attach a CSS style prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (last p))\n      (str p s)\n      (str p \\- s))))\n\n(defn vendor-prefix\n  \"Attach a CSS vendor prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (first p))\n      (prefix p s) \n      (prefix (str \\- p) s))))\n\n;; ---------------------------------------------------------------------\n;; Math utilities\n\n(defn natural?\n  \"True if n is a natural number.\"\n  [n]\n  (and (integer? n) (pos? n)))\n\n(defn between?\n  \"True if n is a number between a and b.\"\n  [n a b]\n  (let [bottom (min a b)\n        top (max a b)]\n    (and (>= n bottom) (<= n top))))\n\n(defn clip\n  \"Return a number such that n is no less than a and no more than b.\"\n  [a b n]\n  (let [[a b] (if (<= a b) [a b] [b a])] \n    (max a (min b n))))\n\n(defn average\n  \"Return the average of two or more numbers.\"\n  [n m & more]\n  (/ (apply + n m more) (+ 2.0 (count more))))\n\n;; Taken from clojure.math.combinatorics.\n(defn cartesian-product\n  \"All the ways to take one item from each sequence.\"\n  [& seqs]\n  (let [v-original-seqs (vec seqs)\n\tstep\n\t(fn step [v-seqs]\n\t  (let [increment\n\t\t(fn [v-seqs]\n\t\t  (loop [i (dec (count v-seqs)), v-seqs v-seqs]\n\t\t    (if (= i -1) nil\n\t\t\t(if-let [rst (next (v-seqs i))]\n\t\t\t  (assoc v-seqs i rst)\n\t\t\t  (recur (dec i) (assoc v-seqs i (v-original-seqs i)))))))]\n\t    (when v-seqs\n              (cons (map first v-seqs)\n                    (lazy-seq (step (increment v-seqs)))))))]\n    (when (every? seq seqs)\n      (lazy-seq (step v-original-seqs)))))\n","~:reader-features",["^E",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","garden.util/format","seq43744","G__43745","cljs.core/first","cljs.core/next","self__4805__auto__","fmt","args","cljs.core.apply","goog.string/format","garden$util$ToString$to_str$dyn","x__4509__auto__","m__4510__auto__","garden.util/to-str","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","garden.util/ToString","this","cljs.core/PROTOCOL_SENTINEL","goog.object/set","cljs.core/Keyword","cljs.core/name","garden.util/as-str","seq43756","self__4806__auto__","cljs.core/seq","cljs.core/str","cljs.core.map","garden.util/string->int","p__43763","vec__43764","cljs.core.nth","seq43760","G__43761","s","radix","or__4212__auto__","js/parseInt","garden.util/int->string","p__43775","vec__43776","seq43770","G__43771","i","garden.util/space-join","xs","clojure.string.join","garden.util/comma-join","ys","iter__4611__auto__","s__43784","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__43786","cljs.core/chunk-buffer","i__43785","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43783","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","cljs.core/sequential?","garden.util/wrap-quotes","garden.util/hash-map?","cljs.core/map?","cljs.core/record?","garden.util/rule?","cljs.core/vector?","garden.util/declaration?","garden.util/at-rule?","garden.types/CSSAtRule","garden.util/at-media?","cljs.core._EQ_","garden.util/at-keyframes?","garden.util/at-import?","garden.util/prefix","p","cljs.core/last","garden.util/vendor-prefix","garden.util/natural?","n","cljs.core/integer?","garden.util/between?","a","b","bottom","x__4298__auto__","y__4299__auto__","top","x__4295__auto__","y__4296__auto__","garden.util/clip","vec__43842","garden.util/average","seq43846","G__43847","G__43848","m","more","cljs.core/+","garden.util/cartesian-product","seq43862","seqs","v-original-seqs","cljs.core/vec","step","v-seqs","increment","temp__5751__auto__","rst","cljs.core.assoc","cljs.core/every?","cljs.core/chunk-first"]],"~:used-vars",["^E",["~$clojure.string/join","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$garden.util/int->string","~$cljs.core/str","~$cljs.core/sequential?","~$garden.util/rule?","~$cljs.core/vector?","~$cljs.core/=","~$garden.util/at-import?","~$cljs.core/IndexedSeq","~$garden.util/at-rule?","~$cljs.core/count","~$goog/typeOf","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$cljs.core/Keyword","~$goog.string/format","~$cljs.core/last","~$cljs.core/chunk","~$garden.util/space-join","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$garden.util/ToString","~$garden.util/comma-join","~$cljs.core/map?","~$garden.util/at-media?","~$garden.util/hash-map?","~$garden.util/to-str","~$cljs.core/map","~$js/parseInt","~$garden.util/clip","~$garden.util/between?","~$goog.object/set","~$cljs.core/integer?","~$cljs.core/chunk-append","~$cljs.core/-nth","~$garden.util/prefix","~$garden.types/CSSAtRule","~$cljs.core/record?","~$cljs.core/missing-protocol","~$garden.util/cartesian-product","~$garden.util/format","~$cljs.core/nth","~$cljs.core/next","~$cljs.core/vec","~$garden.util/as-str","~$garden.util/natural?","~$cljs.core/chunk-cons","~$cljs.core/not","~$garden.util/at-keyframes?","~$cljs.core/cons","~$cljs.core/assoc","~$cljs.core/chunk-buffer","~$garden.util/average","~$garden.util/string->int","~$cljs.core/first","~$garden.util/vendor-prefix","~$cljs.core/name","~$cljs.core/+","~$cljs.core/every?","~$garden.util/declaration?","~$garden.util/wrap-quotes","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^14","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^E",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^14","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","~$goog.array","~$goog.asserts"]]],["^14","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/string/stringformat.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^P"]]],["^14","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^30","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^14","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^34"]]],["^14","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31"]]],["^14","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31"]]],"~:SHADOW-TIMESTAMP",[1647940543000,1647940543000,1633031471000],["^14","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31","~$goog.reflect"]]],["^14","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31","~$goog.fs.blob","^35","~$goog.html.SafeScript","~$goog.html.trustedtypes","^37","^38","^39","^3:"]]],["^14","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^30","^31","~$goog.html.SafeUrl","^39","^3:","^34"]]],["^14","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3>","~$goog.html.SafeStyle","^3@","^36","~$goog.html.uncheckedconversions","^39","^34"]]],["^14","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^30","^31","~$goog.dom.TagName","~$goog.dom.tags","^3>","^3D","~$goog.html.SafeStyleSheet","^3@","^36","^3?","^37","^38","~$goog.labs.userAgent.browser","^33","^39","^3:","^34"]]],["^14","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^33"]]],["^14","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^30"]]],["^14","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","garden/types.cljc"],["ee5fc50fad089581dd0cf1fd0f16e4ec745a57dd","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^R"]]],["^14","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^30","^31","^P","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^14","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",[]]],["^14","garden/util.cljc"],["ee5fc50fad089581dd0cf1fd0f16e4ec745a57dd","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^R","^M","^O","^P","^Q"]]],["^14","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^30","^33"]]],["^14","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^R","^P","~$goog.string.StringBuffer"]]],["^14","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","~$goog.dom.safe","^3E","^39","^34"]]],["^14","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^34"]]],["^14","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^30","^31","^3B","~$goog.math"]]],["^14","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31","^3C","^3>","^3D","^3J","^3@","^36","^39","^34","^37"]]],["^14","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S"]]],["^14","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","~$goog.math.Long","~$goog.math.Integer","^P","^33","^30","~$goog.Uri","^3S"]]],["^14","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^39","^3:","^3?","^31"]]],["^14","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^39","^3D","^3:","^30","^33","^31","^34"]]],["^14","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^3<"]]],["^14","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31","^P"]]],["^14","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^E",[]],"^2Z",["^S","^31","^3:"]]]]],"~:clj-info",["^ ","jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1648121537000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1633011066000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1633031471000,"jar:file:/Users/mehdi/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1633011066000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utility functions used by Garden.","^7","garden/util.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"~:shadow/protocol-prefixes",["^E",["garden$util$ToString$"]],"^C",null,"^D",["^E",[]],"^F","^G","^H",["^ "],"^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","~$t","^O","^P","^P","^Q","^Q","^R","^R","^S","^S"],"^T",["^E",["^U"]],"~:shadow/js-access-global",["^E",["parseInt"]],"^V",null,"~:defs",["^ ","~$space-join",["^ ","~:protocol-inline",null,"^5",["^ ","^7","garden/util.cljc","^8",64,"^9",7,"^:",64,"^;",17,"~:arglists",["^Y",["~$quote",["^Y",[["~$xs"]]]]],"^6","Return a space separated list of values."],"^F","^1U","^7","garden/util.cljc","^;",17,"~:method-params",["^Y",[["^4S"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^9",1,"~:variadic?",false,"^8",64,"~:ret-tag","~$string","^:",64,"~:max-fixed-arity",1,"~:fn-var",true,"^4Q",["^Y",["^4R",["^Y",[["^4S"]]]]],"^6","Return a space separated list of values."],"~$at-import?",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",114,"^9",7,"^:",114,"^;",17,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `x` is a CSS `@import` rule."],"^F","^1I","^7","garden/util.cljc","^;",17,"^4T",["^Y",[["~$x"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",114,"^4X","~$boolean","^:",114,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `x` is a CSS `@import` rule."],"~$int->string",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",55,"^9",7,"^:",55,"^;",18,"^4Q",["^Y",["^4R",["^Y",[["~$i","~$&",["~$radix"]]]]]],"^6","Convert an integer to a string with optional base.","~:top-fn",["^ ","^4W",true,"~:fixed-arity",1,"^4Z",1,"^4T",[["^Y",["~$i",["^53"]]]],"^4Q",["^Y",[["~$i","~$&",["^53"]]]],"^4V",["^Y",[null]]]],"^F","^1C","^7","garden/util.cljc","^;",18,"^54",["^ ","^4W",true,"^55",1,"^4Z",1,"^4T",[["^Y",["~$i",["^53"]]]],"^4Q",["^Y",[["~$i","~$&",["^53"]]]],"^4V",["^Y",[null]]],"^4T",[["^Y",["~$i",["^53"]]]],"^4U",null,"^55",1,"^4V",["^Y",[null]],"^9",1,"^4W",true,"~:methods",[["^ ","^55",1,"^4W",true,"~:tag","~$any"]],"^8",55,"^4X","^58","^:",55,"^4Z",1,"^4[",true,"^4Q",["^Y",[["~$i","~$&",["^53"]]]],"^6","Convert an integer to a string with optional base."],"~$rule?",["^ ","^F","^1F","^7","garden/util.cljc","^8",92,"^9",1,"^:",94,"^;",8,"^6","Alias to `vector?`.","^5",["^ ","^7","garden/util.cljc","^8",94,"^9",3,"^:",94,"^;",8,"^6","Alias to `vector?`."]],"~$to-str",["^ ","^4P",null,"^5",["^ ","~:protocol","^1X","^7","garden/util.cljc","^;",18,"^9",12,"^8",28,"^:",28,"^57","~$String","^4Q",["^Y",["^4R",["^Y",[["~$this"]]]]],"^6","Convert a value into a string."],"^5;","^1X","^F","^21","^7","garden/util.cljc","^;",18,"^4T",["^Y",[["^5="]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",27,"^4X","^5<","^:",28,"^4Z",1,"^57","^5<","^4[",true,"^4Q",["^Y",["^4R",["^Y",[["^5="]]]]],"^6","Convert a value into a string."],"~$cartesian-product",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",162,"^9",7,"^:",162,"^;",24,"^4Q",["^Y",["^4R",["^Y",[["~$&","~$seqs"]]]]],"^6","All the ways to take one item from each sequence.","^54",["^ ","^4W",true,"^55",0,"^4Z",0,"^4T",[["^Y",["^5?"]]],"^4Q",["^Y",[["~$&","^5?"]]],"^4V",["^Y",[null]]]],"^F","^2>","^7","garden/util.cljc","^;",24,"^54",["^ ","^4W",true,"^55",0,"^4Z",0,"^4T",[["^Y",["^5?"]]],"^4Q",["^Y",[["~$&","^5?"]]],"^4V",["^Y",[null]]],"^4T",[["^Y",["^5?"]]],"^4U",null,"^55",0,"^4V",["^Y",[null]],"^9",1,"^4W",true,"^56",[["^ ","^55",0,"^4W",true,"^57",["^E",["^1V","~$clj-nil"]]]],"^8",162,"^4X","^58","^:",162,"^4Z",0,"^4[",true,"^4Q",["^Y",[["~$&","^5?"]]],"^6","All the ways to take one item from each sequence."],"~$format",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",18,"^9",10,"^:",18,"^;",16,"^4Q",["^Y",["^4R",["^Y",[["~$fmt","~$&","~$args"]]]]],"^6","Formats a string using goog.string.format.","^54",["^ ","^4W",true,"^55",1,"^4Z",1,"^4T",[["^Y",["^5B","^5C"]]],"^4Q",["^Y",[["^5B","~$&","^5C"]]],"^4V",["^Y",[null]]]],"^F","^2?","^7","garden/util.cljc","^;",16,"^54",["^ ","^4W",true,"^55",1,"^4Z",1,"^4T",[["^Y",["^5B","^5C"]]],"^4Q",["^Y",[["^5B","~$&","^5C"]]],"^4V",["^Y",[null]]],"^4T",[["^Y",["^5B","^5C"]]],"^4U",null,"^55",1,"^4V",["^Y",[null]],"^9",4,"^4W",true,"^56",[["^ ","^55",1,"^4W",true,"^57","^58"]],"^8",18,"^4X","^58","^:",18,"^4Z",1,"^4[",true,"^4Q",["^Y",[["^5B","~$&","^5C"]]],"^6","Formats a string using goog.string.format."],"~$clip",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",150,"^9",7,"^:",150,"^;",11,"^4Q",["^Y",["^4R",["^Y",[["~$a","~$b","~$n"]]]]],"^6","Return a number such that n is no less than a and no more than b."],"^F","^24","^7","garden/util.cljc","^;",11,"^4T",["^Y",[["~$a","~$b","~$n"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",150,"^4X","^58","^:",150,"^4Z",3,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$a","~$b","~$n"]]]]],"^6","Return a number such that n is no less than a and no more than b."],"~$between?",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",143,"^9",7,"^:",143,"^;",15,"^4Q",["^Y",["^4R",["^Y",[["~$n","~$a","~$b"]]]]],"^6","True if n is a number between a and b."],"^F","^25","^7","garden/util.cljc","^;",15,"^4T",["^Y",[["~$n","~$a","~$b"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",143,"^4X","^51","^:",143,"^4Z",3,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$n","~$a","~$b"]]]]],"^6","True if n is a number between a and b."],"~$at-media?",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",104,"^9",7,"^:",104,"^;",16,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `x` is a CSS `@media` rule."],"^F","^1[","^7","garden/util.cljc","^;",16,"^4T",["^Y",[["~$x"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",104,"^4X","^51","^:",104,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `x` is a CSS `@media` rule."],"~$string->int",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",46,"^9",7,"^:",46,"^;",18,"^4Q",["^Y",["^4R",["^Y",[["~$s","~$&",["^53"]]]]]],"^6","Convert a string to an integer with optional base.","^54",["^ ","^4W",true,"^55",1,"^4Z",1,"^4T",[["^Y",["~$s",["^53"]]]],"^4Q",["^Y",[["~$s","~$&",["^53"]]]],"^4V",["^Y",[null]]]],"^F","^2L","^7","garden/util.cljc","^;",18,"^54",["^ ","^4W",true,"^55",1,"^4Z",1,"^4T",[["^Y",["~$s",["^53"]]]],"^4Q",["^Y",[["~$s","~$&",["^53"]]]],"^4V",["^Y",[null]]],"^4T",[["^Y",["~$s",["^53"]]]],"^4U",null,"^55",1,"^4V",["^Y",[null]],"^9",1,"^4W",true,"^56",[["^ ","^55",1,"^4W",true,"^57","~$js"]],"^8",46,"^4X","^58","^:",46,"^4Z",1,"^4[",true,"^4Q",["^Y",[["~$s","~$&",["^53"]]]],"^6","Convert a string to an integer with optional base."],"~$as-str",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^;",21,"^54",["^ ","^4W",true,"^55",0,"^4Z",0,"^4T",[["^Y",["^5C"]]],"^4Q",["^Y",[["~$&","^5C"]]],"^4V",["^Y",[null]]],"^9",15,"^8",41,"^:",41,"^57","^5<","^4Q",["^Y",["^4R",["^Y",[["~$&","^5C"]]]]],"^6","Convert a variable number of values into strings."],"^F","^2C","^7","garden/util.cljc","^;",21,"^54",["^ ","^4W",true,"^55",0,"^4Z",0,"^4T",[["^Y",["^5C"]]],"^4Q",["^Y",[["~$&","^5C"]]],"^4V",["^Y",[null]]],"^4T",[["^Y",["^5C"]]],"^4U",null,"^55",0,"^4V",["^Y",[null]],"^9",1,"^4W",true,"^56",[["^ ","^55",0,"^4W",true,"^57","^58"]],"^8",41,"^4X","^5<","^:",41,"^4Z",0,"^57","^5<","^4[",true,"^4Q",["^Y",[["~$&","^5C"]]],"^6","Convert a variable number of values into strings."],"~$comma-join",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",69,"^9",7,"^:",69,"^;",17,"^4Q",["^Y",["^4R",["^Y",[["^4S"]]]]],"^6","Return a comma separated list of values. Subsequences are joined with\n   spaces."],"^F","^1Y","^7","garden/util.cljc","^;",17,"^4T",["^Y",[["^4S"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",69,"^4X","^4Y","^:",69,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["^4S"]]]]],"^6","Return a comma separated list of values. Subsequences are joined with\n   spaces."],"~$vendor-prefix",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",127,"^9",7,"^:",127,"^;",20,"^4Q",["^Y",["^4R",["^Y",[["~$p","~$s"]]]]],"^6","Attach a CSS vendor prefix to s."],"^F","^2N","^7","garden/util.cljc","^;",20,"^4T",["^Y",[["~$p","~$s"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",127,"^4X","^4Y","^:",127,"^4Z",2,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$p","~$s"]]]]],"^6","Attach a CSS vendor prefix to s."],"~$hash-map?",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",87,"^9",7,"^:",87,"^;",16,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`."],"^F","^20","^7","garden/util.cljc","^;",16,"^4T",["^Y",[["~$x"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",87,"^4X","^51","^:",87,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`."],"~$natural?",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",138,"^9",7,"^:",138,"^;",15,"^4Q",["^Y",["^4R",["^Y",[["~$n"]]]]],"^6","True if n is a natural number."],"^F","^2D","^7","garden/util.cljc","^;",15,"^4T",["^Y",[["~$n"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",138,"^4X","^51","^:",138,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$n"]]]]],"^6","True if n is a natural number."],"~$ToString",["^ ","^5",["^ ","~:protocol-symbol",true,"^7","garden/util.cljc","^;",22,"^9",14,"^8",27,"~:protocol-info",["^ ","^56",["^ ","^5:",[["^5="]]]],"^:",27,"~:sigs",["^ ","~:to-str",["^ ","^F","^5:","^4Q",["^Y",[["^5="]]],"^6","Convert a value into a string."]],"~:jsdoc",["^Y",["@interface"]]],"^5O",true,"^F","^1X","^7","garden/util.cljc","^;",22,"^9",1,"^8",27,"^5P",["^ ","^56",["^ ","^5:",[["^5="]]]],"~:info",null,"^:",27,"^57","^58","^5Q",["^ ","^5R",["^ ","^F","^5:","^4Q",["^Y",[["^5="]]],"^6","Convert a value into a string."]],"~:impls",["^E",[null,"^1Q","~$default"]],"^5S",["^Y",["@interface"]]],"~$wrap-quotes",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",79,"^9",7,"^:",79,"^;",18,"^4Q",["^Y",["^4R",["^Y",[["~$s"]]]]],"^6","Wrap a string with double quotes."],"^F","^2S","^7","garden/util.cljc","^;",18,"^4T",["^Y",[["~$s"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",79,"^4X","^4Y","^:",79,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$s"]]]]],"^6","Wrap a string with double quotes."],"~$prefix",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",119,"^9",7,"^:",119,"^;",13,"^4Q",["^Y",["^4R",["^Y",[["~$p","~$s"]]]]],"^6","Attach a CSS style prefix to s."],"^F","^2:","^7","garden/util.cljc","^;",13,"^4T",["^Y",[["~$p","~$s"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",119,"^4X","^4Y","^:",119,"^4Z",2,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$p","~$s"]]]]],"^6","Attach a CSS style prefix to s."],"~$declaration?",["^ ","^F","^2R","^7","garden/util.cljc","^8",96,"^9",1,"^:",98,"^;",15,"^6","Alias to `hash-map?`.","^5",["^ ","^7","garden/util.cljc","^8",98,"^9",3,"^:",98,"^;",15,"^6","Alias to `hash-map?`."]],"~$at-keyframes?",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",109,"^9",7,"^:",109,"^;",20,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `x` is a CSS `@keyframes` rule."],"^F","^2G","^7","garden/util.cljc","^;",20,"^4T",["^Y",[["~$x"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",109,"^4X","^51","^:",109,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]],"^6","True if `x` is a CSS `@keyframes` rule."],"~$at-rule?",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",100,"^9",7,"^:",100,"^;",15,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]]],"^F","^1K","^7","garden/util.cljc","^;",15,"^4T",["^Y",[["~$x"]]],"^4U",null,"^4V",["^Y",[null,null]],"^9",1,"^4W",false,"^8",100,"^4X","^51","^:",100,"^4Z",1,"^4[",true,"^4Q",["^Y",["^4R",["^Y",[["~$x"]]]]]],"~$average",["^ ","^4P",null,"^5",["^ ","^7","garden/util.cljc","^8",156,"^9",7,"^:",156,"^;",14,"^4Q",["^Y",["^4R",["^Y",[["~$n","~$m","~$&","~$more"]]]]],"^6","Return the average of two or more numbers.","^54",["^ ","^4W",true,"^55",2,"^4Z",2,"^4T",[["^Y",["~$n","~$m","^61"]]],"^4Q",["^Y",[["~$n","~$m","~$&","^61"]]],"^4V",["^Y",[null]]]],"^F","^2K","^7","garden/util.cljc","^;",14,"^54",["^ ","^4W",true,"^55",2,"^4Z",2,"^4T",[["^Y",["~$n","~$m","^61"]]],"^4Q",["^Y",[["~$n","~$m","~$&","^61"]]],"^4V",["^Y",[null]]],"^4T",[["^Y",["~$n","~$m","^61"]]],"^4U",null,"^55",2,"^4V",["^Y",[null]],"^9",1,"^4W",true,"^56",[["^ ","^55",2,"^4W",true,"^57","~$number"]],"^8",156,"^4X","^58","^:",156,"^4Z",2,"^4[",true,"^4Q",["^Y",[["~$n","~$m","~$&","^61"]]],"^6","Return the average of two or more numbers."]],"^W",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^E",["~:keyframes","~:identifier","~:import","~:media"]],"~:order",["^65","^67","^64","^66"]],"^10",["^ ","^U",["^E",[]]],"^11",["^ "],"^12",["^S","^R","^M","^O","^P","^Q"]],"^J","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^E",[]],"~:compiler-options",["^2V",[["^6;","~:static-fns"],true,["^6;","~:shadow-tweaks"],null,["^6;","~:source-map-inline"],null,["^6;","~:elide-asserts"],false,["^6;","~:optimize-constants"],null,["^6;","^17"],null,["^6;","~:external-config"],null,["^6;","~:tooling-config"],null,["^6;","~:emit-constants"],null,["^6;","~:load-tests"],null,["^6;","~:form-size-threshold"],null,["^6;","~:data-readers"],null,["^6;","~:infer-externs"],"~:auto",["^6;","^19"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6;","~:fn-invoke-direct"],null,["^6;","~:source-map"],"/dev/null"]]]