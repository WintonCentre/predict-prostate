["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/DOMChildrenOperations.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$DOMChildrenOperations=function(global,process,require,module,exports,shadow$shims){function getNodeAfter(parentNode,node){Array.isArray(node)&&(node=node[1]);return node?node.nextSibling:parentNode.firstChild}function removeDelimitedText(parentNode,startNode,closingComment){for(;;){var node=startNode.nextSibling;if(node===closingComment)break;else parentNode.removeChild(node)}}var DOMLazyTree=require(\"module$node_modules$react_dom$lib$DOMLazyTree\"),\nDanger=require(\"module$node_modules$react_dom$lib$Danger\"),ReactDOMComponentTree=require(\"module$node_modules$react_dom$lib$ReactDOMComponentTree\"),ReactInstrumentation=require(\"module$node_modules$react_dom$lib$ReactInstrumentation\");global=require(\"module$node_modules$react_dom$lib$createMicrosoftUnsafeLocalFunction\");var setInnerHTML=require(\"module$node_modules$react_dom$lib$setInnerHTML\"),setTextContent=require(\"module$node_modules$react_dom$lib$setTextContent\"),insertChildAt=global(function(parentNode,\nchildNode,referenceNode){parentNode.insertBefore(childNode,referenceNode)});require=Danger.dangerouslyReplaceNodeWithMarkup;require=function(oldChild,markup,prevInstance){Danger.dangerouslyReplaceNodeWithMarkup(oldChild,markup);if(0!==prevInstance._debugID)ReactInstrumentation.debugTool.onHostOperation({instanceID:prevInstance._debugID,type:\"replace with\",payload:markup.toString()});else if(oldChild=ReactDOMComponentTree.getInstanceFromNode(markup.node),0!==oldChild._debugID)ReactInstrumentation.debugTool.onHostOperation({instanceID:oldChild._debugID,\ntype:\"mount\",payload:markup.toString()})};module.exports={dangerouslyReplaceNodeWithMarkup:require,replaceDelimitedText:function(openingComment,closingComment,stringText){var parentNode=openingComment.parentNode,nodeAfterComment=openingComment.nextSibling;nodeAfterComment===closingComment?stringText&&insertChildAt(parentNode,document.createTextNode(stringText),nodeAfterComment):stringText?(setTextContent(nodeAfterComment,stringText),removeDelimitedText(parentNode,nodeAfterComment,closingComment)):\nremoveDelimitedText(parentNode,openingComment,closingComment);ReactInstrumentation.debugTool.onHostOperation({instanceID:ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,type:\"replace text\",payload:stringText})},processUpdates:function(parentNode,updates){for(var parentNodeDebugID=ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID,k=0;k<updates.length;k++){var update=updates[k];switch(update.type){case \"INSERT_MARKUP\":var referenceNode=getNodeAfter(parentNode,update.afterNode);\nDOMLazyTree.insertTreeBefore(parentNode,update.content,referenceNode);ReactInstrumentation.debugTool.onHostOperation({instanceID:parentNodeDebugID,type:\"insert child\",payload:{toIndex:update.toIndex,content:update.content.toString()}});break;case \"MOVE_EXISTING\":referenceNode=parentNode;var childNode=update.fromNode,referenceNode$jscomp$0=getNodeAfter(parentNode,update.afterNode);if(Array.isArray(childNode)){var closingComment=childNode[1];for(childNode=childNode[0];;){var nextNode=childNode.nextSibling;\ninsertChildAt(referenceNode,childNode,referenceNode$jscomp$0);if(childNode===closingComment)break;childNode=nextNode}}else insertChildAt(referenceNode,childNode,referenceNode$jscomp$0);ReactInstrumentation.debugTool.onHostOperation({instanceID:parentNodeDebugID,type:\"move child\",payload:{fromIndex:update.fromIndex,toIndex:update.toIndex}});break;case \"SET_MARKUP\":setInnerHTML(parentNode,update.content);ReactInstrumentation.debugTool.onHostOperation({instanceID:parentNodeDebugID,type:\"replace children\",\npayload:update.content.toString()});break;case \"TEXT_CONTENT\":setTextContent(parentNode,update.content);ReactInstrumentation.debugTool.onHostOperation({instanceID:parentNodeDebugID,type:\"replace text\",payload:update.content.toString()});break;case \"REMOVE_NODE\":referenceNode=parentNode,closingComment=update.fromNode,Array.isArray(closingComment)&&(childNode=closingComment[1],closingComment=closingComment[0],removeDelimitedText(referenceNode,closingComment,childNode),referenceNode.removeChild(childNode)),\nreferenceNode.removeChild(closingComment),ReactInstrumentation.debugTool.onHostOperation({instanceID:parentNodeDebugID,type:\"remove child\",payload:{fromIndex:update.fromIndex}})}}}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$DOMChildrenOperations\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar Danger = require('./Danger');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\n\nfunction getNodeAfter(parentNode, node) {\n  // Special case for text components, which return [open, close] comments\n  // from getHostNode.\n  if (Array.isArray(node)) {\n    node = node[1];\n  }\n  return node ? node.nextSibling : parentNode.firstChild;\n}\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nvar insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {\n  // We rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so\n  // we are careful to use `null`.)\n  parentNode.insertBefore(childNode, referenceNode);\n});\n\nfunction insertLazyTreeChildAt(parentNode, childTree, referenceNode) {\n  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);\n}\n\nfunction moveChild(parentNode, childNode, referenceNode) {\n  if (Array.isArray(childNode)) {\n    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);\n  } else {\n    insertChildAt(parentNode, childNode, referenceNode);\n  }\n}\n\nfunction removeChild(parentNode, childNode) {\n  if (Array.isArray(childNode)) {\n    var closingComment = childNode[1];\n    childNode = childNode[0];\n    removeDelimitedText(parentNode, childNode, closingComment);\n    parentNode.removeChild(closingComment);\n  }\n  parentNode.removeChild(childNode);\n}\n\nfunction moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {\n  var node = openingComment;\n  while (true) {\n    var nextNode = node.nextSibling;\n    insertChildAt(parentNode, node, referenceNode);\n    if (node === closingComment) {\n      break;\n    }\n    node = nextNode;\n  }\n}\n\nfunction removeDelimitedText(parentNode, startNode, closingComment) {\n  while (true) {\n    var node = startNode.nextSibling;\n    if (node === closingComment) {\n      // The closing comment is removed by ReactMultiChild.\n      break;\n    } else {\n      parentNode.removeChild(node);\n    }\n  }\n}\n\nfunction replaceDelimitedText(openingComment, closingComment, stringText) {\n  var parentNode = openingComment.parentNode;\n  var nodeAfterComment = openingComment.nextSibling;\n  if (nodeAfterComment === closingComment) {\n    // There are no text nodes between the opening and closing comments; insert\n    // a new one if stringText isn't empty.\n    if (stringText) {\n      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);\n    }\n  } else {\n    if (stringText) {\n      // Set the text content of the first node after the opening comment, and\n      // remove all following nodes up until the closing comment.\n      setTextContent(nodeAfterComment, stringText);\n      removeDelimitedText(parentNode, nodeAfterComment, closingComment);\n    } else {\n      removeDelimitedText(parentNode, openingComment, closingComment);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onHostOperation({\n      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,\n      type: 'replace text',\n      payload: stringText\n    });\n  }\n}\n\nvar dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;\nif (process.env.NODE_ENV !== 'production') {\n  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {\n    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);\n    if (prevInstance._debugID !== 0) {\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: prevInstance._debugID,\n        type: 'replace with',\n        payload: markup.toString()\n      });\n    } else {\n      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);\n      if (nextInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onHostOperation({\n          instanceID: nextInstance._debugID,\n          type: 'mount',\n          payload: markup.toString()\n        });\n      }\n    }\n  };\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,\n\n  replaceDelimitedText: replaceDelimitedText,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @internal\n   */\n  processUpdates: function (parentNode, updates) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      var update = updates[k];\n      switch (update.type) {\n        case 'INSERT_MARKUP':\n          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'insert child',\n              payload: { toIndex: update.toIndex, content: update.content.toString() }\n            });\n          }\n          break;\n        case 'MOVE_EXISTING':\n          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'move child',\n              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }\n            });\n          }\n          break;\n        case 'SET_MARKUP':\n          setInnerHTML(parentNode, update.content);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'replace children',\n              payload: update.content.toString()\n            });\n          }\n          break;\n        case 'TEXT_CONTENT':\n          setTextContent(parentNode, update.content);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'replace text',\n              payload: update.content.toString()\n            });\n          }\n          break;\n        case 'REMOVE_NODE':\n          removeChild(parentNode, update.fromNode);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'remove child',\n              payload: { fromIndex: update.fromIndex }\n            });\n          }\n          break;\n      }\n    }\n  }\n\n};\n\nmodule.exports = DOMChildrenOperations;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$ReactInstrumentation","~$module$node_modules$react_dom$lib$setInnerHTML","~$module$node_modules$react_dom$lib$DOMLazyTree","~$shadow.js","~$module$node_modules$react_dom$lib$ReactDOMComponentTree","~$module$node_modules$react_dom$lib$Danger","~$module$node_modules$react_dom$lib$createMicrosoftUnsafeLocalFunction","~$module$node_modules$react_dom$lib$setTextContent"]],"~:properties",["^5",["instanceID","replaceDelimitedText","toIndex","dangerouslyReplaceNodeWithMarkup","fromIndex","processUpdates","content","type","payload"]],"~:compiled-at",1635270336832,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$DOMChildrenOperations.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-dom/lib/DOMChildrenOperations.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$DOMChildrenOperations\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar DOMLazyTree = require('./DOMLazyTree');\\nvar Danger = require('./Danger');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar ReactInstrumentation = require('./ReactInstrumentation');\\n\\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\\nvar setInnerHTML = require('./setInnerHTML');\\nvar setTextContent = require('./setTextContent');\\n\\nfunction getNodeAfter(parentNode, node) {\\n  // Special case for text components, which return [open, close] comments\\n  // from getHostNode.\\n  if (Array.isArray(node)) {\\n    node = node[1];\\n  }\\n  return node ? node.nextSibling : parentNode.firstChild;\\n}\\n\\n/**\\n * Inserts `childNode` as a child of `parentNode` at the `index`.\\n *\\n * @param {DOMElement} parentNode Parent node in which to insert.\\n * @param {DOMElement} childNode Child node to insert.\\n * @param {number} index Index at which to insert the child.\\n * @internal\\n */\\nvar insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {\\n  // We rely exclusively on `insertBefore(node, null)` instead of also using\\n  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so\\n  // we are careful to use `null`.)\\n  parentNode.insertBefore(childNode, referenceNode);\\n});\\n\\nfunction insertLazyTreeChildAt(parentNode, childTree, referenceNode) {\\n  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);\\n}\\n\\nfunction moveChild(parentNode, childNode, referenceNode) {\\n  if (Array.isArray(childNode)) {\\n    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);\\n  } else {\\n    insertChildAt(parentNode, childNode, referenceNode);\\n  }\\n}\\n\\nfunction removeChild(parentNode, childNode) {\\n  if (Array.isArray(childNode)) {\\n    var closingComment = childNode[1];\\n    childNode = childNode[0];\\n    removeDelimitedText(parentNode, childNode, closingComment);\\n    parentNode.removeChild(closingComment);\\n  }\\n  parentNode.removeChild(childNode);\\n}\\n\\nfunction moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {\\n  var node = openingComment;\\n  while (true) {\\n    var nextNode = node.nextSibling;\\n    insertChildAt(parentNode, node, referenceNode);\\n    if (node === closingComment) {\\n      break;\\n    }\\n    node = nextNode;\\n  }\\n}\\n\\nfunction removeDelimitedText(parentNode, startNode, closingComment) {\\n  while (true) {\\n    var node = startNode.nextSibling;\\n    if (node === closingComment) {\\n      // The closing comment is removed by ReactMultiChild.\\n      break;\\n    } else {\\n      parentNode.removeChild(node);\\n    }\\n  }\\n}\\n\\nfunction replaceDelimitedText(openingComment, closingComment, stringText) {\\n  var parentNode = openingComment.parentNode;\\n  var nodeAfterComment = openingComment.nextSibling;\\n  if (nodeAfterComment === closingComment) {\\n    // There are no text nodes between the opening and closing comments; insert\\n    // a new one if stringText isn't empty.\\n    if (stringText) {\\n      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);\\n    }\\n  } else {\\n    if (stringText) {\\n      // Set the text content of the first node after the opening comment, and\\n      // remove all following nodes up until the closing comment.\\n      setTextContent(nodeAfterComment, stringText);\\n      removeDelimitedText(parentNode, nodeAfterComment, closingComment);\\n    } else {\\n      removeDelimitedText(parentNode, openingComment, closingComment);\\n    }\\n  }\\n\\n  if (process.env.NODE_ENV !== 'production') {\\n    ReactInstrumentation.debugTool.onHostOperation({\\n      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,\\n      type: 'replace text',\\n      payload: stringText\\n    });\\n  }\\n}\\n\\nvar dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;\\nif (process.env.NODE_ENV !== 'production') {\\n  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {\\n    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);\\n    if (prevInstance._debugID !== 0) {\\n      ReactInstrumentation.debugTool.onHostOperation({\\n        instanceID: prevInstance._debugID,\\n        type: 'replace with',\\n        payload: markup.toString()\\n      });\\n    } else {\\n      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);\\n      if (nextInstance._debugID !== 0) {\\n        ReactInstrumentation.debugTool.onHostOperation({\\n          instanceID: nextInstance._debugID,\\n          type: 'mount',\\n          payload: markup.toString()\\n        });\\n      }\\n    }\\n  };\\n}\\n\\n/**\\n * Operations for updating with DOM children.\\n */\\nvar DOMChildrenOperations = {\\n\\n  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,\\n\\n  replaceDelimitedText: replaceDelimitedText,\\n\\n  /**\\n   * Updates a component's children by processing a series of updates. The\\n   * update configurations are each expected to have a `parentNode` property.\\n   *\\n   * @param {array<object>} updates List of update configurations.\\n   * @internal\\n   */\\n  processUpdates: function (parentNode, updates) {\\n    if (process.env.NODE_ENV !== 'production') {\\n      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;\\n    }\\n\\n    for (var k = 0; k < updates.length; k++) {\\n      var update = updates[k];\\n      switch (update.type) {\\n        case 'INSERT_MARKUP':\\n          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));\\n          if (process.env.NODE_ENV !== 'production') {\\n            ReactInstrumentation.debugTool.onHostOperation({\\n              instanceID: parentNodeDebugID,\\n              type: 'insert child',\\n              payload: { toIndex: update.toIndex, content: update.content.toString() }\\n            });\\n          }\\n          break;\\n        case 'MOVE_EXISTING':\\n          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));\\n          if (process.env.NODE_ENV !== 'production') {\\n            ReactInstrumentation.debugTool.onHostOperation({\\n              instanceID: parentNodeDebugID,\\n              type: 'move child',\\n              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }\\n            });\\n          }\\n          break;\\n        case 'SET_MARKUP':\\n          setInnerHTML(parentNode, update.content);\\n          if (process.env.NODE_ENV !== 'production') {\\n            ReactInstrumentation.debugTool.onHostOperation({\\n              instanceID: parentNodeDebugID,\\n              type: 'replace children',\\n              payload: update.content.toString()\\n            });\\n          }\\n          break;\\n        case 'TEXT_CONTENT':\\n          setTextContent(parentNode, update.content);\\n          if (process.env.NODE_ENV !== 'production') {\\n            ReactInstrumentation.debugTool.onHostOperation({\\n              instanceID: parentNodeDebugID,\\n              type: 'replace text',\\n              payload: update.content.toString()\\n            });\\n          }\\n          break;\\n        case 'REMOVE_NODE':\\n          removeChild(parentNode, update.fromNode);\\n          if (process.env.NODE_ENV !== 'production') {\\n            ReactInstrumentation.debugTool.onHostOperation({\\n              instanceID: parentNodeDebugID,\\n              type: 'remove child',\\n              payload: { fromIndex: update.fromIndex }\\n            });\\n          }\\n          break;\\n      }\\n    }\\n  }\\n\\n};\\n\\nmodule.exports = DOMChildrenOperations;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getNodeAfter\",\"parentNode\",\"node\",\"Array\",\"isArray\",\"nextSibling\",\"firstChild\",\"removeDelimitedText\",\"startNode\",\"closingComment\",\"removeChild\",\"DOMLazyTree\",\"Danger\",\"ReactDOMComponentTree\",\"ReactInstrumentation\",\"createMicrosoftUnsafeLocalFunction\",\"setInnerHTML\",\"setTextContent\",\"insertChildAt\",\"childNode\",\"referenceNode\",\"insertBefore\",\"dangerouslyReplaceNodeWithMarkup\",\"oldChild\",\"markup\",\"prevInstance\",\"_debugID\",\"debugTool\",\"onHostOperation\",\"instanceID\",\"type\",\"payload\",\"toString\",\"nextInstance\",\"getInstanceFromNode\",\"DOMChildrenOperations\",\"replaceDelimitedText\",\"openingComment\",\"stringText\",\"nodeAfterComment\",\"document\",\"createTextNode\",\"processUpdates\",\"updates\",\"parentNodeDebugID\",\"k\",\"length\",\"update\",\"afterNode\",\"insertTreeBefore\",\"content\",\"toIndex\",\"fromNode\",\"nextNode\",\"fromIndex\"]\n}\n"]