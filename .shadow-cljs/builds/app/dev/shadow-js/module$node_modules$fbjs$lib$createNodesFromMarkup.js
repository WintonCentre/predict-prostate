["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/createNodesFromMarkup.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$createNodesFromMarkup=function(global,process,require,module,exports,shadow$shims){global=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var createArrayFromMixed=require(\"module$node_modules$fbjs$lib$createArrayFromMixed\"),getMarkupWrap=require(\"module$node_modules$fbjs$lib$getMarkupWrap\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),dummyNode=global.canUseDOM?document.createElement(\"div\"):null,nodeNamePattern=/^\\s*<(\\w+)/;module.exports=\nfunction(markup,handleScript){var node=dummyNode;dummyNode?void 0:invariant(!1,\"createNodesFromMarkup dummy not initialized\");var nodeName;if(nodeName=(nodeName=(nodeName=markup.match(nodeNamePattern))&&nodeName[1].toLowerCase())&&getMarkupWrap(nodeName))for(node.innerHTML=nodeName[1]+markup+nodeName[2],markup=nodeName[0];markup--;)node=node.lastChild;else node.innerHTML=markup;markup=node.getElementsByTagName(\"script\");markup.length&&(handleScript?void 0:invariant(!1,\"createNodesFromMarkup(...): Unexpected \\x3cscript\\x3e element rendered.\"),\ncreateArrayFromMixed(markup).forEach(handleScript));for(handleScript=Array.from(node.childNodes);node.lastChild;)node.removeChild(node.lastChild);return handleScript}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$createNodesFromMarkup\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = Array.from(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$createArrayFromMixed","~$shadow.js","~$module$node_modules$fbjs$lib$getMarkupWrap","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$ExecutionEnvironment"]],"~:properties",["^5",["innerHTML"]],"~:compiled-at",1635270336831,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$createNodesFromMarkup.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAchIC,MAAAA,CAAuBJ,OAAA,CAAQ,mDAAR,CAE3B,KAAIK,qBAAuBL,OAAA,CAAQ,mDAAR,CAA3B,CACIM,cAAgBN,OAAA,CAAQ,4CAAR,CADpB,CAEIO,UAAYP,OAAA,CAAQ,wCAAR,CAFhB,CAOIQ,UAAYJ,MAAAK,UAAA,CAAiCC,QAAAC,cAAA,CAAuB,KAAvB,CAAjC,CAAiE,IAPjF,CAYIC,gBAAkB,YAqDtBX,OAAAC,QAAA;AA9BAW,QAA8B,CAACC,MAAD,CAASC,YAAT,CAAuB,CACnD,IAAIC,KAAOR,SACRA,UAAH,CAA4I,IAAK,EAAjJ,CAAuDD,SAAA,CAAU,CAAA,CAAV,CAAiB,6CAAjB,CACvD,KAAIU,QAGJ,IADIC,QACJ,EAnBA,QAmBA,EApBIC,QAoBJ,CAH2BL,MAjBPM,MAAA,CAAaR,eAAb,CAoBpB,GAnBwBO,QAAA,CAAc,CAAd,CAAAE,YAAA,EAmBxB,GADuBf,aAAA,CAAcW,QAAd,CACvB,CAIE,IAHAD,IAAAM,UAEIC,CAFaL,QAAA,CAAK,CAAL,CAEbK,CAFuBT,MAEvBS,CAFgCL,QAAA,CAAK,CAAL,CAEhCK,CAAAA,MAAAA,CAAYL,QAAA,CAAK,CAAL,CAChB,CAAOK,MAAA,EAAP,CAAA,CACEP,IAAA,CAAOA,IAAAQ,UALX,KAQER,KAAAM,UAAA,CAAiBR,MAGfW,OAAAA,CAAUT,IAAAU,qBAAA,CAA0B,QAA1B,CACVD,OAAAE,OAAJ,GACGZ,YAAD,CAAmK,IAAK,EAAxK,CAAwDR,SAAA,CAAU,CAAA,CAAV,CAAiB,yEAAjB,CACxD;AAAAF,oBAAA,CAAqBoB,MAArB,CAAAG,QAAA,CAAsCb,YAAtC,CAFF,CAMA,KADIc,YACJ,CADYC,KAAAC,KAAA,CAAWf,IAAAgB,WAAX,CACZ,CAAOhB,IAAAQ,UAAP,CAAA,CACER,IAAAiB,YAAA,CAAiBjB,IAAAQ,UAAjB,CAEF,OAAOK,aA3B4C,CAnD+E;\",\n\"sources\":[\"node_modules/fbjs/lib/createNodesFromMarkup.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$createNodesFromMarkup\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n */\\n\\n/*eslint-disable fb-www/unsafe-html*/\\n\\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\\n\\nvar createArrayFromMixed = require('./createArrayFromMixed');\\nvar getMarkupWrap = require('./getMarkupWrap');\\nvar invariant = require('./invariant');\\n\\n/**\\n * Dummy container used to render all markup.\\n */\\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\\n\\n/**\\n * Pattern used by `getNodeName`.\\n */\\nvar nodeNamePattern = /^\\\\s*<(\\\\w+)/;\\n\\n/**\\n * Extracts the `nodeName` of the first element in a string of markup.\\n *\\n * @param {string} markup String of markup.\\n * @return {?string} Node name of the supplied markup.\\n */\\nfunction getNodeName(markup) {\\n  var nodeNameMatch = markup.match(nodeNamePattern);\\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\\n}\\n\\n/**\\n * Creates an array containing the nodes rendered from the supplied markup. The\\n * optionally supplied `handleScript` function will be invoked once for each\\n * <script> element that is rendered. If no `handleScript` function is supplied,\\n * an exception is thrown if any <script> elements are rendered.\\n *\\n * @param {string} markup A string of valid HTML markup.\\n * @param {?function} handleScript Invoked once for each rendered <script>.\\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\\n */\\nfunction createNodesFromMarkup(markup, handleScript) {\\n  var node = dummyNode;\\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;\\n  var nodeName = getNodeName(markup);\\n\\n  var wrap = nodeName && getMarkupWrap(nodeName);\\n  if (wrap) {\\n    node.innerHTML = wrap[1] + markup + wrap[2];\\n\\n    var wrapDepth = wrap[0];\\n    while (wrapDepth--) {\\n      node = node.lastChild;\\n    }\\n  } else {\\n    node.innerHTML = markup;\\n  }\\n\\n  var scripts = node.getElementsByTagName('script');\\n  if (scripts.length) {\\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;\\n    createArrayFromMixed(scripts).forEach(handleScript);\\n  }\\n\\n  var nodes = Array.from(node.childNodes);\\n  while (node.lastChild) {\\n    node.removeChild(node.lastChild);\\n  }\\n  return nodes;\\n}\\n\\nmodule.exports = createNodesFromMarkup;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ExecutionEnvironment\",\"createArrayFromMixed\",\"getMarkupWrap\",\"invariant\",\"dummyNode\",\"canUseDOM\",\"document\",\"createElement\",\"nodeNamePattern\",\"createNodesFromMarkup\",\"markup\",\"handleScript\",\"node\",\"nodeName\",\"wrap\",\"nodeNameMatch\",\"match\",\"toLowerCase\",\"innerHTML\",\"wrapDepth\",\"lastChild\",\"scripts\",\"getElementsByTagName\",\"length\",\"forEach\",\"nodes\",\"Array\",\"from\",\"childNodes\",\"removeChild\"]\n}\n"]