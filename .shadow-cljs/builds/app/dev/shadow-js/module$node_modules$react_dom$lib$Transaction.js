["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/Transaction.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$Transaction=function(global,process,require,module,exports,shadow$shims){require(\"module$node_modules$react_dom$lib$reactProdInvariant\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\"),OBSERVED_ERROR={};module.exports={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers();this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[];this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,\nisInTransaction:function(){return!!this._isInTransaction},perform:function(method,scope,a,b,c,d,e,f){this.isInTransaction()?invariant(!1,\"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.\"):void 0;try{var errorThrown=this._isInTransaction=!0;this.initializeAll(0);var ret=method.call(scope,a,b,c,d,e,f);errorThrown=!1}finally{try{if(errorThrown)try{this.closeAll(0)}catch(err){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return ret},\ninitializeAll:function(startIndex){for(var transactionWrappers=this.transactionWrappers;startIndex<transactionWrappers.length;startIndex++){var wrapper=transactionWrappers[startIndex];try{this.wrapperInitData[startIndex]=OBSERVED_ERROR,this.wrapperInitData[startIndex]=wrapper.initialize?wrapper.initialize.call(this):null}finally{if(this.wrapperInitData[startIndex]===OBSERVED_ERROR)try{this.initializeAll(startIndex+1)}catch(err){}}}},closeAll:function(startIndex){this.isInTransaction()?void 0:invariant(!1,\n\"Transaction.closeAll(): Cannot close transaction when none are open.\");for(var transactionWrappers=this.transactionWrappers;startIndex<transactionWrappers.length;startIndex++){var wrapper=transactionWrappers[startIndex],initData=this.wrapperInitData[startIndex];try{var errorThrown=!0;initData!==OBSERVED_ERROR&&wrapper.close&&wrapper.close.call(this,initData);errorThrown=!1}finally{if(errorThrown)try{this.closeAll(startIndex+1)}catch(e){}}}this.wrapperInitData.length=0}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$Transaction\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar OBSERVED_ERROR = {};\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM updates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar TransactionImpl = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function () {\n    this.transactionWrappers = this.getTransactionWrappers();\n    if (this.wrapperInitData) {\n      this.wrapperInitData.length = 0;\n    } else {\n      this.wrapperInitData = [];\n    }\n    this._isInTransaction = false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function () {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked. The optional arguments helps prevent the need\n   * to bind in many cases.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} a Argument to pass to the method.\n   * @param {Object?=} b Argument to pass to the method.\n   * @param {Object?=} c Argument to pass to the method.\n   * @param {Object?=} d Argument to pass to the method.\n   * @param {Object?=} e Argument to pass to the method.\n   * @param {Object?=} f Argument to pass to the method.\n   *\n   * @return {*} Return value from `method`.\n   */\n  perform: function (method, scope, a, b, c, d, e, f) {\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {}\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function (startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;\n      } finally {\n        if (this.wrapperInitData[i] === OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {}\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function (startIndex) {\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n        if (initData !== OBSERVED_ERROR && wrapper.close) {\n          wrapper.close.call(this, initData);\n        }\n        errorThrown = false;\n      } finally {\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {}\n        }\n      }\n    }\n    this.wrapperInitData.length = 0;\n  }\n};\n\nmodule.exports = TransactionImpl;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react_dom$lib$reactProdInvariant"]],"~:properties",["^5",["isInTransaction","wrapperInitData","reinitializeTransaction","transactionWrappers","closeAll","getTransactionWrappers","length","initializeAll","perform","_isInTransaction"]],"~:compiled-at",1635270336824,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$Transaction.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-dom/lib/Transaction.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$Transaction\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * \\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar OBSERVED_ERROR = {};\\n\\n/**\\n * `Transaction` creates a black box that is able to wrap any method such that\\n * certain invariants are maintained before and after the method is invoked\\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\\n * instantiates a transaction can provide enforcers of the invariants at\\n * creation time. The `Transaction` class itself will supply one additional\\n * automatic invariant for you - the invariant that any transaction instance\\n * should not be run while it is already being run. You would typically create a\\n * single instance of a `Transaction` for reuse multiple times, that potentially\\n * is used to wrap several different methods. Wrappers are extremely simple -\\n * they only require implementing two methods.\\n *\\n * <pre>\\n *                       wrappers (injected at creation time)\\n *                                      +        +\\n *                                      |        |\\n *                    +-----------------|--------|--------------+\\n *                    |                 v        |              |\\n *                    |      +---------------+   |              |\\n *                    |   +--|    wrapper1   |---|----+         |\\n *                    |   |  +---------------+   v    |         |\\n *                    |   |          +-------------+  |         |\\n *                    |   |     +----|   wrapper2  |--------+   |\\n *                    |   |     |    +-------------+  |     |   |\\n *                    |   |     |                     |     |   |\\n *                    |   v     v                     v     v   | wrapper\\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\\n * +-----------------\\u003e|-|---|-|---|--\\u003e|anyMethod|---|---|-|---|-|--------\\u003e\\n *                    | |   | |   |   |         |   |   | |   | |\\n *                    | |   | |   |   |         |   |   | |   | |\\n *                    | |   | |   |   |         |   |   | |   | |\\n *                    | +---+ +---+   +---------+   +---+ +---+ |\\n *                    |  initialize                    close    |\\n *                    +-----------------------------------------+\\n * </pre>\\n *\\n * Use cases:\\n * - Preserving the input selection ranges before/after reconciliation.\\n *   Restoring selection even in the event of an unexpected error.\\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\\n *   while guaranteeing that afterwards, the event system is reactivated.\\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\\n *   reconciliation takes place in a worker thread.\\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\\n *   content.\\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\\n * - (Future use case): Layout calculations before and after DOM updates.\\n *\\n * Transactional plugin API:\\n * - A module that has an `initialize` method that returns any precomputation.\\n * - and a `close` method that accepts the precomputation. `close` is invoked\\n *   when the wrapped process is completed, or has failed.\\n *\\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\\n * that implement `initialize` and `close`.\\n * @return {Transaction} Single transaction for reuse in thread.\\n *\\n * @class Transaction\\n */\\nvar TransactionImpl = {\\n  /**\\n   * Sets up this instance so that it is prepared for collecting metrics. Does\\n   * so such that this setup method may be used on an instance that is already\\n   * initialized, in a way that does not consume additional memory upon reuse.\\n   * That can be useful if you decide to make your subclass of this mixin a\\n   * \\\"PooledClass\\\".\\n   */\\n  reinitializeTransaction: function () {\\n    this.transactionWrappers = this.getTransactionWrappers();\\n    if (this.wrapperInitData) {\\n      this.wrapperInitData.length = 0;\\n    } else {\\n      this.wrapperInitData = [];\\n    }\\n    this._isInTransaction = false;\\n  },\\n\\n  _isInTransaction: false,\\n\\n  /**\\n   * @abstract\\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\\n   */\\n  getTransactionWrappers: null,\\n\\n  isInTransaction: function () {\\n    return !!this._isInTransaction;\\n  },\\n\\n  /**\\n   * Executes the function within a safety window. Use this for the top level\\n   * methods that result in large amounts of computation/mutations that would\\n   * need to be safety checked. The optional arguments helps prevent the need\\n   * to bind in many cases.\\n   *\\n   * @param {function} method Member of scope to call.\\n   * @param {Object} scope Scope to invoke from.\\n   * @param {Object?=} a Argument to pass to the method.\\n   * @param {Object?=} b Argument to pass to the method.\\n   * @param {Object?=} c Argument to pass to the method.\\n   * @param {Object?=} d Argument to pass to the method.\\n   * @param {Object?=} e Argument to pass to the method.\\n   * @param {Object?=} f Argument to pass to the method.\\n   *\\n   * @return {*} Return value from `method`.\\n   */\\n  perform: function (method, scope, a, b, c, d, e, f) {\\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;\\n    var errorThrown;\\n    var ret;\\n    try {\\n      this._isInTransaction = true;\\n      // Catching errors makes debugging more difficult, so we start with\\n      // errorThrown set to true before setting it to false after calling\\n      // close -- if it's still set to true in the finally block, it means\\n      // one of these calls threw.\\n      errorThrown = true;\\n      this.initializeAll(0);\\n      ret = method.call(scope, a, b, c, d, e, f);\\n      errorThrown = false;\\n    } finally {\\n      try {\\n        if (errorThrown) {\\n          // If `method` throws, prefer to show that stack trace over any thrown\\n          // by invoking `closeAll`.\\n          try {\\n            this.closeAll(0);\\n          } catch (err) {}\\n        } else {\\n          // Since `method` didn't throw, we don't want to silence the exception\\n          // here.\\n          this.closeAll(0);\\n        }\\n      } finally {\\n        this._isInTransaction = false;\\n      }\\n    }\\n    return ret;\\n  },\\n\\n  initializeAll: function (startIndex) {\\n    var transactionWrappers = this.transactionWrappers;\\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\\n      var wrapper = transactionWrappers[i];\\n      try {\\n        // Catching errors makes debugging more difficult, so we start with the\\n        // OBSERVED_ERROR state before overwriting it with the real return value\\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\\n        // block, it means wrapper.initialize threw.\\n        this.wrapperInitData[i] = OBSERVED_ERROR;\\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;\\n      } finally {\\n        if (this.wrapperInitData[i] === OBSERVED_ERROR) {\\n          // The initializer for wrapper i threw an error; initialize the\\n          // remaining wrappers but silence any exceptions from them to ensure\\n          // that the first error is the one to bubble up.\\n          try {\\n            this.initializeAll(i + 1);\\n          } catch (err) {}\\n        }\\n      }\\n    }\\n  },\\n\\n  /**\\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\\n   * them the respective return values of `this.transactionWrappers.init[i]`\\n   * (`close`rs that correspond to initializers that failed will not be\\n   * invoked).\\n   */\\n  closeAll: function (startIndex) {\\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;\\n    var transactionWrappers = this.transactionWrappers;\\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\\n      var wrapper = transactionWrappers[i];\\n      var initData = this.wrapperInitData[i];\\n      var errorThrown;\\n      try {\\n        // Catching errors makes debugging more difficult, so we start with\\n        // errorThrown set to true before setting it to false after calling\\n        // close -- if it's still set to true in the finally block, it means\\n        // wrapper.close threw.\\n        errorThrown = true;\\n        if (initData !== OBSERVED_ERROR && wrapper.close) {\\n          wrapper.close.call(this, initData);\\n        }\\n        errorThrown = false;\\n      } finally {\\n        if (errorThrown) {\\n          // The closer for wrapper i threw an error; close the remaining\\n          // wrappers but silence any exceptions from them to ensure that the\\n          // first error is the one to bubble up.\\n          try {\\n            this.closeAll(i + 1);\\n          } catch (e) {}\\n        }\\n      }\\n    }\\n    this.wrapperInitData.length = 0;\\n  }\\n};\\n\\nmodule.exports = TransactionImpl;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"invariant\",\"OBSERVED_ERROR\",\"TransactionImpl\",\"reinitializeTransaction\",\"transactionWrappers\",\"getTransactionWrappers\",\"wrapperInitData\",\"length\",\"_isInTransaction\",\"isInTransaction\",\"perform\",\"method\",\"scope\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"errorThrown\",\"initializeAll\",\"ret\",\"call\",\"closeAll\",\"err\",\"startIndex\",\"i\",\"wrapper\",\"initialize\",\"initData\",\"close\"]\n}\n"]