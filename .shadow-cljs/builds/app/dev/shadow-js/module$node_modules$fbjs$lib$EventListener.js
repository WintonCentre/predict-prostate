["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/EventListener.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$EventListener=function(global,require,module,exports){var emptyFunction=require(\"module$node_modules$fbjs$lib$emptyFunction\");module.exports={listen:function(target,eventType,callback){if(target.addEventListener)return target.addEventListener(eventType,callback,!1),{remove:function(){target.removeEventListener(eventType,callback,!1)}};if(target.attachEvent)return target.attachEvent(\"on\"+eventType,callback),{remove:function(){target.detachEvent(\"on\"+eventType,\ncallback)}}},capture:function(target,eventType,callback){if(target.addEventListener)return target.addEventListener(eventType,callback,!0),{remove:function(){target.removeEventListener(eventType,callback,!0)}};console.error(\"Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events.\");return{remove:emptyFunction}},registerDefault:function(){}}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$EventListener\"] = function(global,require,module,exports) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$emptyFunction"]],"~:properties",["^5",["registerDefault","listen","remove","capture"]],"~:compiled-at",1635324226071,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$EventListener.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,0CAAf,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYvG,IAAIC,cAAgBH,OAAA,CAAQ,4CAAR,CA8DpBC,OAAA,CAAOC,OAAP,CAxDoBE,CASlBC,OAAQA,QAAe,CAACC,MAAD,CAASC,SAAT,CAAoBC,QAApB,CAA8B,CACnD,GAAIF,MAAJ,CAAWG,gBAAX,CAEE,MADAH,OAAA,CAAOG,gBAAP,CAAwBF,SAAxB,CAAmCC,QAAnC,CAA6C,CAAA,CAA7C,CACO,CAAA,CACLE,OAAQA,QAAe,EAAG,CACxBJ,MAAA,CAAOK,mBAAP,CAA2BJ,SAA3B,CAAsCC,QAAtC,CAAgD,CAAA,CAAhD,CADwB,CADrB,CAKF,IAAIF,MAAJ,CAAWM,WAAX,CAEL,MADAN,OAAA,CAAOM,WAAP,CAAmB,IAAnB,CAA0BL,SAA1B,CAAqCC,QAArC,CACO,CAAA,CACLE,OAAQA,QAAe,EAAG,CACxBJ,MAAA,CAAOO,WAAP,CAAmB,IAAnB,CAA0BN,SAA1B;AAAqCC,QAArC,CADwB,CADrB,CAV0C,CATnCJ,CAmClBU,QAASA,QAAgB,CAACR,MAAD,CAASC,SAAT,CAAoBC,QAApB,CAA8B,CACrD,GAAIF,MAAJ,CAAWG,gBAAX,CAEE,MADAH,OAAA,CAAOG,gBAAP,CAAwBF,SAAxB,CAAmCC,QAAnC,CAA6C,CAAA,CAA7C,CACO,CAAA,CACLE,OAAQA,QAAe,EAAG,CACxBJ,MAAA,CAAOK,mBAAP,CAA2BJ,SAA3B,CAAsCC,QAAtC,CAAgD,CAAA,CAAhD,CADwB,CADrB,CAOLO,QAAA,CAAQC,KAAR,CAAc,6JAAd,CAEF,OAAO,CACLN,OAAQP,aADH,CAZ4C,CAnCrCC,CAqDlBa,gBAAiBA,QAAwB,EAAG,EArD1Bb,CAlBmF;\",\n\"sources\":[\"node_modules/fbjs/lib/EventListener.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$EventListener\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n */\\n\\nvar emptyFunction = require('./emptyFunction');\\n\\n/**\\n * Upstream version of event listener. Does not take into account specific\\n * nature of platform.\\n */\\nvar EventListener = {\\n  /**\\n   * Listen to DOM events during the bubble phase.\\n   *\\n   * @param {DOMEventTarget} target DOM element to register listener on.\\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\\n   * @param {function} callback Callback function.\\n   * @return {object} Object with a `remove` method.\\n   */\\n  listen: function listen(target, eventType, callback) {\\n    if (target.addEventListener) {\\n      target.addEventListener(eventType, callback, false);\\n      return {\\n        remove: function remove() {\\n          target.removeEventListener(eventType, callback, false);\\n        }\\n      };\\n    } else if (target.attachEvent) {\\n      target.attachEvent('on' + eventType, callback);\\n      return {\\n        remove: function remove() {\\n          target.detachEvent('on' + eventType, callback);\\n        }\\n      };\\n    }\\n  },\\n\\n  /**\\n   * Listen to DOM events during the capture phase.\\n   *\\n   * @param {DOMEventTarget} target DOM element to register listener on.\\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\\n   * @param {function} callback Callback function.\\n   * @return {object} Object with a `remove` method.\\n   */\\n  capture: function capture(target, eventType, callback) {\\n    if (target.addEventListener) {\\n      target.addEventListener(eventType, callback, true);\\n      return {\\n        remove: function remove() {\\n          target.removeEventListener(eventType, callback, true);\\n        }\\n      };\\n    } else {\\n      if (process.env.NODE_ENV !== 'production') {\\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\\n      }\\n      return {\\n        remove: emptyFunction\\n      };\\n    }\\n  },\\n\\n  registerDefault: function registerDefault() {}\\n};\\n\\nmodule.exports = EventListener;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"emptyFunction\",\"EventListener\",\"listen\",\"target\",\"eventType\",\"callback\",\"addEventListener\",\"remove\",\"removeEventListener\",\"attachEvent\",\"detachEvent\",\"capture\",\"console\",\"error\",\"registerDefault\"]\n}\n"]