["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/DOMProperty.js"],"~:js","shadow$provide.module$node_modules$react$lib$DOMProperty=function(global,require,module,exports){function checkMask(value,bitmask){return(value&bitmask)===bitmask}require(\"module$node_modules$react$lib$reactProdInvariant\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\"),DOMPropertyInjection={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(domPropertyConfig){var Injection=DOMPropertyInjection,\nProperties=domPropertyConfig.Properties||{},DOMAttributeNamespaces=domPropertyConfig.DOMAttributeNamespaces||{},DOMAttributeNames=domPropertyConfig.DOMAttributeNames||{},DOMPropertyNames=domPropertyConfig.DOMPropertyNames||{},DOMMutationMethods=domPropertyConfig.DOMMutationMethods||{};domPropertyConfig.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);for(var propName in Properties){DOMProperty.properties.hasOwnProperty(propName)?invariant(!1,\"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.\",\npropName):void 0;domPropertyConfig=propName.toLowerCase();var propConfig=Properties[propName];propConfig={attributeName:domPropertyConfig,attributeNamespace:null,propertyName:propName,mutationMethod:null,mustUseProperty:checkMask(propConfig,Injection.MUST_USE_PROPERTY),hasBooleanValue:checkMask(propConfig,Injection.HAS_BOOLEAN_VALUE),hasNumericValue:checkMask(propConfig,Injection.HAS_NUMERIC_VALUE),hasPositiveNumericValue:checkMask(propConfig,Injection.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:checkMask(propConfig,\nInjection.HAS_OVERLOADED_BOOLEAN_VALUE)};1>=propConfig.hasBooleanValue+propConfig.hasNumericValue+propConfig.hasOverloadedBooleanValue?void 0:invariant(!1,\"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s\",propName);DOMProperty.getPossibleStandardName[domPropertyConfig]=propName;DOMAttributeNames.hasOwnProperty(propName)&&(domPropertyConfig=DOMAttributeNames[propName],propConfig.attributeName=domPropertyConfig,DOMProperty.getPossibleStandardName[domPropertyConfig]=\npropName);DOMAttributeNamespaces.hasOwnProperty(propName)&&(propConfig.attributeNamespace=DOMAttributeNamespaces[propName]);DOMPropertyNames.hasOwnProperty(propName)&&(propConfig.propertyName=DOMPropertyNames[propName]);DOMMutationMethods.hasOwnProperty(propName)&&(propConfig.mutationMethod=DOMMutationMethods[propName]);DOMProperty.properties[propName]=propConfig}}},DOMProperty={ID_ATTRIBUTE_NAME:\"data-reactid\",ROOT_ATTRIBUTE_NAME:\"data-reactroot\",ATTRIBUTE_NAME_START_CHAR:\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",\nATTRIBUTE_NAME_CHAR:\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\",properties:{},getPossibleStandardName:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(attributeName){for(var i=0;i<DOMProperty._isCustomAttributeFunctions.length;i++)if((0,DOMProperty._isCustomAttributeFunctions[i])(attributeName))return!0;return!1},\ninjection:DOMPropertyInjection};module.exports=DOMProperty}","~:source","shadow$provide[\"module$node_modules$react$lib$DOMProperty\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_PROPERTY: 0x1,\n  HAS_BOOLEAN_VALUE: 0x4,\n  HAS_NUMERIC_VALUE: 0x8,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property \\'%s\\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\n\n/* eslint-disable max-len */\nvar ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\n/* eslint-enable max-len */\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n  ROOT_ATTRIBUTE_NAME: 'data-reactroot',\n\n  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,\n  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react$lib$reactProdInvariant"]],"~:properties",["^5",["properties","ROOT_ATTRIBUTE_NAME","hasBooleanValue","ID_ATTRIBUTE_NAME","attributeName","injection","injectDOMPropertyConfig","hasPositiveNumericValue","hasOverloadedBooleanValue","propertyName","ATTRIBUTE_NAME_START_CHAR","HAS_BOOLEAN_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","_isCustomAttributeFunctions","hasNumericValue","attributeNamespace","mustUseProperty","mutationMethod","ATTRIBUTE_NAME_CHAR","MUST_USE_PROPERTY","HAS_POSITIVE_NUMERIC_VALUE","getPossibleStandardName","isCustomAttribute","HAS_NUMERIC_VALUE"]],"~:compiled-at",1635250628374,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$DOMProperty.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react/lib/DOMProperty.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$DOMProperty\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule DOMProperty\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\nfunction checkMask(value, bitmask) {\\n  return (value & bitmask) === bitmask;\\n}\\n\\nvar DOMPropertyInjection = {\\n  /**\\n   * Mapping from normalized, camelcased property names to a configuration that\\n   * specifies how the associated DOM property should be accessed or rendered.\\n   */\\n  MUST_USE_PROPERTY: 0x1,\\n  HAS_BOOLEAN_VALUE: 0x4,\\n  HAS_NUMERIC_VALUE: 0x8,\\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,\\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,\\n\\n  /**\\n   * Inject some specialized knowledge about the DOM. This takes a config object\\n   * with the following properties:\\n   *\\n   * isCustomAttribute: function that given an attribute name will return true\\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\\n   * attributes where it's impossible to enumerate all of the possible\\n   * attribute names,\\n   *\\n   * Properties: object mapping DOM property name to one of the\\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\\n   * it won't get written to the DOM.\\n   *\\n   * DOMAttributeNames: object mapping React attribute name to the DOM\\n   * attribute name. Attribute names not specified use the **lowercase**\\n   * normalized name.\\n   *\\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\\n   *\\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\\n   * Property names not specified use the normalized name.\\n   *\\n   * DOMMutationMethods: Properties that require special mutation methods. If\\n   * `value` is undefined, the mutation method should unset the property.\\n   *\\n   * @param {object} domPropertyConfig the config as described above.\\n   */\\n  injectDOMPropertyConfig: function (domPropertyConfig) {\\n    var Injection = DOMPropertyInjection;\\n    var Properties = domPropertyConfig.Properties || {};\\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\\n\\n    if (domPropertyConfig.isCustomAttribute) {\\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\\n    }\\n\\n    for (var propName in Properties) {\\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\\\'re trying to inject DOM property \\\\'%s\\\\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;\\n\\n      var lowerCased = propName.toLowerCase();\\n      var propConfig = Properties[propName];\\n\\n      var propertyInfo = {\\n        attributeName: lowerCased,\\n        attributeNamespace: null,\\n        propertyName: propName,\\n        mutationMethod: null,\\n\\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\\n      };\\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;\\n\\n      if (process.env.NODE_ENV !== 'production') {\\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\\n      }\\n\\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\\n        var attributeName = DOMAttributeNames[propName];\\n        propertyInfo.attributeName = attributeName;\\n        if (process.env.NODE_ENV !== 'production') {\\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\\n        }\\n      }\\n\\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\\n      }\\n\\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\\n        propertyInfo.propertyName = DOMPropertyNames[propName];\\n      }\\n\\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\\n      }\\n\\n      DOMProperty.properties[propName] = propertyInfo;\\n    }\\n  }\\n};\\n\\n/* eslint-disable max-len */\\nvar ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\\\\\u00C0-\\\\\\\\u00D6\\\\\\\\u00D8-\\\\\\\\u00F6\\\\\\\\u00F8-\\\\\\\\u02FF\\\\\\\\u0370-\\\\\\\\u037D\\\\\\\\u037F-\\\\\\\\u1FFF\\\\\\\\u200C-\\\\\\\\u200D\\\\\\\\u2070-\\\\\\\\u218F\\\\\\\\u2C00-\\\\\\\\u2FEF\\\\\\\\u3001-\\\\\\\\uD7FF\\\\\\\\uF900-\\\\\\\\uFDCF\\\\\\\\uFDF0-\\\\\\\\uFFFD';\\n/* eslint-enable max-len */\\n\\n/**\\n * DOMProperty exports lookup objects that can be used like functions:\\n *\\n *   > DOMProperty.isValid['id']\\n *   true\\n *   > DOMProperty.isValid['foobar']\\n *   undefined\\n *\\n * Although this may be confusing, it performs better in general.\\n *\\n * @see http://jsperf.com/key-exists\\n * @see http://jsperf.com/key-missing\\n */\\nvar DOMProperty = {\\n\\n  ID_ATTRIBUTE_NAME: 'data-reactid',\\n  ROOT_ATTRIBUTE_NAME: 'data-reactroot',\\n\\n  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,\\n  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\\\\\\\-.0-9\\\\\\\\u00B7\\\\\\\\u0300-\\\\\\\\u036F\\\\\\\\u203F-\\\\\\\\u2040',\\n\\n  /**\\n   * Map from property \\\"standard name\\\" to an object with info about how to set\\n   * the property in the DOM. Each object contains:\\n   *\\n   * attributeName:\\n   *   Used when rendering markup or with `*Attribute()`.\\n   * attributeNamespace\\n   * propertyName:\\n   *   Used on DOM node instances. (This includes properties that mutate due to\\n   *   external factors.)\\n   * mutationMethod:\\n   *   If non-null, used instead of the property or `setAttribute()` after\\n   *   initial render.\\n   * mustUseProperty:\\n   *   Whether the property must be accessed and mutated as an object property.\\n   * hasBooleanValue:\\n   *   Whether the property should be removed when set to a falsey value.\\n   * hasNumericValue:\\n   *   Whether the property must be numeric or parse as a numeric and should be\\n   *   removed when set to a falsey value.\\n   * hasPositiveNumericValue:\\n   *   Whether the property must be positive numeric or parse as a positive\\n   *   numeric and should be removed when set to a falsey value.\\n   * hasOverloadedBooleanValue:\\n   *   Whether the property can be used as a flag as well as with a value.\\n   *   Removed when strictly equal to false; present without a value when\\n   *   strictly equal to true; present with a value otherwise.\\n   */\\n  properties: {},\\n\\n  /**\\n   * Mapping from lowercase property names to the properly cased version, used\\n   * to warn in the case of missing properties. Available only in __DEV__.\\n   * @type {Object}\\n   */\\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\\n\\n  /**\\n   * All of the isCustomAttribute() functions that have been injected.\\n   */\\n  _isCustomAttributeFunctions: [],\\n\\n  /**\\n   * Checks whether a property name is a custom attribute.\\n   * @method\\n   */\\n  isCustomAttribute: function (attributeName) {\\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\\n      if (isCustomAttributeFn(attributeName)) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  },\\n\\n  injection: DOMPropertyInjection\\n};\\n\\nmodule.exports = DOMProperty;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"checkMask\",\"value\",\"bitmask\",\"invariant\",\"DOMPropertyInjection\",\"MUST_USE_PROPERTY\",\"HAS_BOOLEAN_VALUE\",\"HAS_NUMERIC_VALUE\",\"HAS_POSITIVE_NUMERIC_VALUE\",\"HAS_OVERLOADED_BOOLEAN_VALUE\",\"injectDOMPropertyConfig\",\"domPropertyConfig\",\"Injection\",\"Properties\",\"DOMAttributeNamespaces\",\"DOMAttributeNames\",\"DOMPropertyNames\",\"DOMMutationMethods\",\"isCustomAttribute\",\"DOMProperty\",\"_isCustomAttributeFunctions\",\"push\",\"propName\",\"properties\",\"hasOwnProperty\",\"lowerCased\",\"toLowerCase\",\"propConfig\",\"propertyInfo\",\"attributeName\",\"attributeNamespace\",\"propertyName\",\"mutationMethod\",\"mustUseProperty\",\"hasBooleanValue\",\"hasNumericValue\",\"hasPositiveNumericValue\",\"hasOverloadedBooleanValue\",\"getPossibleStandardName\",\"ID_ATTRIBUTE_NAME\",\"ROOT_ATTRIBUTE_NAME\",\"ATTRIBUTE_NAME_START_CHAR\",\"ATTRIBUTE_NAME_CHAR\",\"i\",\"length\",\"isCustomAttributeFn\",\"injection\"]\n}\n"]