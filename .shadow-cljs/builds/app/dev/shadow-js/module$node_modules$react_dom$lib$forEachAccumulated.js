["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/forEachAccumulated.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$forEachAccumulated=function(global,process,require,module,exports,shadow$shims){module.exports=function(arr,cb,scope){Array.isArray(arr)?arr.forEach(cb,scope):arr&&cb.call(scope,arr)}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$forEachAccumulated\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\n\nfunction forEachAccumulated(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\nmodule.exports = forEachAccumulated;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1635270336806,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$forEachAccumulated.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA8BtIF,MAAAC,QAAA,CARAE,QAA2B,CAACC,GAAD,CAAMC,EAAN,CAAUC,KAAV,CAAiB,CACtCC,KAAAC,QAAA,CAAcJ,GAAd,CAAJ,CACEA,GAAAK,QAAA,CAAYJ,EAAZ,CAAgBC,KAAhB,CADF,CAEWF,GAFX,EAGEC,EAAAK,KAAA,CAAQJ,KAAR,CAAeF,GAAf,CAJwC,CAtB0F;\",\n\"sources\":[\"node_modules/react-dom/lib/forEachAccumulated.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$forEachAccumulated\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * \\n */\\n\\n'use strict';\\n\\n/**\\n * @param {array} arr an \\\"accumulation\\\" of items which is either an Array or\\n * a single item. Useful when paired with the `accumulate` module. This is a\\n * simple utility that allows us to reason about a collection of items, but\\n * handling the case when there is exactly one item (and we do not need to\\n * allocate an array).\\n */\\n\\nfunction forEachAccumulated(arr, cb, scope) {\\n  if (Array.isArray(arr)) {\\n    arr.forEach(cb, scope);\\n  } else if (arr) {\\n    cb.call(scope, arr);\\n  }\\n}\\n\\nmodule.exports = forEachAccumulated;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"forEachAccumulated\",\"arr\",\"cb\",\"scope\",\"Array\",\"isArray\",\"forEach\",\"call\"]\n}\n"]