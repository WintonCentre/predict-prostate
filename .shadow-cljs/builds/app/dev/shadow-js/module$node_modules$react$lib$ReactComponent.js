["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/ReactComponent.js"],"~:js","shadow$provide.module$node_modules$react$lib$ReactComponent=function(global,process,require,module,exports,shadow$shims){function ReactComponent(props,context,updater){this.props=props;this.context=context;this.refs=emptyObject;this.updater=updater||ReactNoopUpdateQueue}require(\"module$node_modules$react$lib$reactProdInvariant\");var ReactNoopUpdateQueue=require(\"module$node_modules$react$lib$ReactNoopUpdateQueue\"),canDefineProperty=require(\"module$node_modules$react$lib$canDefineProperty\"),emptyObject=\nrequire(\"module$node_modules$fbjs$lib$emptyObject\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),warning=require(\"module$node_modules$fbjs$lib$warning\");ReactComponent.prototype.isReactComponent={};ReactComponent.prototype.setState=function(partialState,callback){\"object\"!==typeof partialState&&\"function\"!==typeof partialState&&null!=partialState?invariant(!1,\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\"):void 0;\nthis.updater.enqueueSetState(this,partialState);callback&&this.updater.enqueueCallback(this,callback,\"setState\")};ReactComponent.prototype.forceUpdate=function(callback){this.updater.enqueueForceUpdate(this);callback&&this.updater.enqueueCallback(this,callback,\"forceUpdate\")};global={isMounted:[\"isMounted\",\"Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\"],replaceState:[\"replaceState\",\"Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).\"]};\nprocess=function(methodName,info){canDefineProperty&&Object.defineProperty(ReactComponent.prototype,methodName,{get:function(){warning(!1,\"%s(...) is deprecated in plain JavaScript React classes. %s\",info[0],info[1])}})};for(var fnName in global)global.hasOwnProperty(fnName)&&process(fnName,global[fnName]);module.exports=ReactComponent}","~:source","shadow$provide[\"module$node_modules$react$lib$ReactComponent\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nReactComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'setState');\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (process.env.NODE_ENV !== 'production') {\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    if (canDefineProperty) {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;\n          return undefined;\n        }\n      });\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react$lib$reactProdInvariant","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$warning","~$module$node_modules$react$lib$canDefineProperty","~$module$node_modules$react$lib$ReactNoopUpdateQueue"]],"~:properties",["^5",["updater","setState","context","replaceState","props","isReactComponent","isMounted","forceUpdate","get","refs"]],"~:compiled-at",1635270336775,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$ReactComponent.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAyB9HC,QAASA,eAAc,CAACC,KAAD,CAAQC,OAAR,CAAiBC,OAAjB,CAA0B,CAC/C,IAAAF,MAAA,CAAaA,KACb,KAAAC,QAAA,CAAeA,OACf,KAAAE,KAAA,CAAYC,WAGZ,KAAAF,QAAA,CAAeA,OAAf,EAA0BG,oBANqB,CAZ5BV,OAAA,CAAQ,kDAAR,CAErB,KAAIU,qBAAuBV,OAAA,CAAQ,oDAAR,CAA3B,CAEIW,kBAAoBX,OAAA,CAAQ,iDAAR,CAFxB,CAGIS;AAAcT,OAAA,CAAQ,0CAAR,CAHlB,CAIIY,UAAYZ,OAAA,CAAQ,wCAAR,CAJhB,CAKIa,QAAUb,OAAA,CAAQ,sCAAR,CAcdI,eAAAU,UAAAC,iBAAA,CAA4C,EA2B5CX,eAAAU,UAAAE,SAAA,CAAoCC,QAAS,CAACC,YAAD,CAAeC,QAAf,CAAyB,CAC1C,QAA1B,GAAE,MAAOD,aAAT,EAA8D,UAA9D,GAAsC,MAAOA,aAA7C,EAA4F,IAA5F,EAA4EA,YAA5E,CAA4IN,SAAA,CAAU,CAAA,CAAV,CAAiB,uHAAjB,CAA5I,CAA+S,IAAK,EACpT;IAAAL,QAAAa,gBAAA,CAA6B,IAA7B,CAAmCF,YAAnC,CACIC,SAAJ,EACE,IAAAZ,QAAAc,gBAAA,CAA6B,IAA7B,CAAmCF,QAAnC,CAA6C,UAA7C,CAJkE,CAsBtEf,eAAAU,UAAAQ,YAAA,CAAuCC,QAAS,CAACJ,QAAD,CAAW,CACzD,IAAAZ,QAAAiB,mBAAA,CAAgC,IAAhC,CACIL,SAAJ,EACE,IAAAZ,QAAAc,gBAAA,CAA6B,IAA7B,CAAmCF,QAAnC,CAA6C,aAA7C,CAHuD,CAarDM,OAAAA,CAAiB,CACnBC,UAAW,CAAC,WAAD,CAAc,oHAAd,CADQ,CAEnBC,aAAc,CAAC,cAAD,CAAiB,iGAAjB,CAFK,CAIjBC;OAAAA,CAA2BA,QAAS,CAACC,UAAD,CAAaC,IAAb,CAAmB,CACrDnB,iBAAJ,EACEoB,MAAAC,eAAA,CAAsB5B,cAAAU,UAAtB,CAAgDe,UAAhD,CAA4D,CAC1DI,IAAKA,QAAS,EAAG,CACyBpB,OAAA,CAAQ,CAAA,CAAR,CAAe,6DAAf,CAA8EiB,IAAA,CAAK,CAAL,CAA9E,CAAuFA,IAAA,CAAK,CAAL,CAAvF,CADzB,CADyC,CAA5D,CAFuD,CAU3D,KAAKI,IAAIA,MAAT,GAAmBT,OAAnB,CACMA,MAAAU,eAAA,CAA8BD,MAA9B,CAAJ,EACEN,OAAA,CAAyBM,MAAzB,CAAiCT,MAAA,CAAeS,MAAf,CAAjC,CAKNjC,OAAAC,QAAA,CAAiBE,cArH6G;\",\n\"sources\":[\"node_modules/react/lib/ReactComponent.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$ReactComponent\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\\n\\nvar canDefineProperty = require('./canDefineProperty');\\nvar emptyObject = require('fbjs/lib/emptyObject');\\nvar invariant = require('fbjs/lib/invariant');\\nvar warning = require('fbjs/lib/warning');\\n\\n/**\\n * Base class helpers for the updating state of a component.\\n */\\nfunction ReactComponent(props, context, updater) {\\n  this.props = props;\\n  this.context = context;\\n  this.refs = emptyObject;\\n  // We initialize the default updater but the real one gets injected by the\\n  // renderer.\\n  this.updater = updater || ReactNoopUpdateQueue;\\n}\\n\\nReactComponent.prototype.isReactComponent = {};\\n\\n/**\\n * Sets a subset of the state. Always use this to mutate\\n * state. You should treat `this.state` as immutable.\\n *\\n * There is no guarantee that `this.state` will be immediately updated, so\\n * accessing `this.state` after calling this method may return the old value.\\n *\\n * There is no guarantee that calls to `setState` will run synchronously,\\n * as they may eventually be batched together.  You can provide an optional\\n * callback that will be executed when the call to setState is actually\\n * completed.\\n *\\n * When a function is provided to setState, it will be called at some point in\\n * the future (not synchronously). It will be called with the up to date\\n * component arguments (state, props, context). These values can be different\\n * from this.* because your function may be called after receiveProps but before\\n * shouldComponentUpdate, and this new state, props, and context will not yet be\\n * assigned to this.\\n *\\n * @param {object|function} partialState Next partial state or function to\\n *        produce next partial state to be merged with current state.\\n * @param {?function} callback Called after state is updated.\\n * @final\\n * @protected\\n */\\nReactComponent.prototype.setState = function (partialState, callback) {\\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\\n  this.updater.enqueueSetState(this, partialState);\\n  if (callback) {\\n    this.updater.enqueueCallback(this, callback, 'setState');\\n  }\\n};\\n\\n/**\\n * Forces an update. This should only be invoked when it is known with\\n * certainty that we are **not** in a DOM transaction.\\n *\\n * You may want to call this when you know that some deeper aspect of the\\n * component's state has changed but `setState` was not called.\\n *\\n * This will not invoke `shouldComponentUpdate`, but it will invoke\\n * `componentWillUpdate` and `componentDidUpdate`.\\n *\\n * @param {?function} callback Called after update is complete.\\n * @final\\n * @protected\\n */\\nReactComponent.prototype.forceUpdate = function (callback) {\\n  this.updater.enqueueForceUpdate(this);\\n  if (callback) {\\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');\\n  }\\n};\\n\\n/**\\n * Deprecated APIs. These APIs used to exist on classic React classes but since\\n * we would like to deprecate them, we're not going to move them over to this\\n * modern base class. Instead, we define a getter that warns if it's accessed.\\n */\\nif (process.env.NODE_ENV !== 'production') {\\n  var deprecatedAPIs = {\\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\\n  };\\n  var defineDeprecationWarning = function (methodName, info) {\\n    if (canDefineProperty) {\\n      Object.defineProperty(ReactComponent.prototype, methodName, {\\n        get: function () {\\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;\\n          return undefined;\\n        }\\n      });\\n    }\\n  };\\n  for (var fnName in deprecatedAPIs) {\\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\\n    }\\n  }\\n}\\n\\nmodule.exports = ReactComponent;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ReactComponent\",\"props\",\"context\",\"updater\",\"refs\",\"emptyObject\",\"ReactNoopUpdateQueue\",\"canDefineProperty\",\"invariant\",\"warning\",\"prototype\",\"isReactComponent\",\"setState\",\"ReactComponent.prototype.setState\",\"partialState\",\"callback\",\"enqueueSetState\",\"enqueueCallback\",\"forceUpdate\",\"ReactComponent.prototype.forceUpdate\",\"enqueueForceUpdate\",\"deprecatedAPIs\",\"isMounted\",\"replaceState\",\"defineDeprecationWarning\",\"methodName\",\"info\",\"Object\",\"defineProperty\",\"get\",\"fnName\",\"hasOwnProperty\"]\n}\n"]