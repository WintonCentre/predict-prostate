["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/KeyEscapeUtils.js"],"~:js","shadow$provide.module$node_modules$react$lib$KeyEscapeUtils=function(global,process,require,module,exports,shadow$shims){module.exports={escape:function(key){var escaperLookup={\"\\x3d\":\"\\x3d0\",\":\":\"\\x3d2\"};return\"$\"+(\"\"+key).replace(/[=:]/g,function(match){return escaperLookup[match]})},unescape:function(key){var unescaperLookup={\"\\x3d0\":\"\\x3d\",\"\\x3d2\":\":\"};return(\"\"+(\".\"===key[0]&&\"$\"===key[1]?key.substring(2):key.substring(1))).replace(/(=0|=2)/g,function(match){return unescaperLookup[match]})}}}","~:source","shadow$provide[\"module$node_modules$react$lib$KeyEscapeUtils\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * Unescape and unwrap key for human-readable display\n *\n * @param {string} key to unescape.\n * @return {string} the unescaped key.\n */\nfunction unescape(key) {\n  var unescapeRegex = /(=0|=2)/g;\n  var unescaperLookup = {\n    '=0': '=',\n    '=2': ':'\n  };\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);\n\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {\n    return unescaperLookup[match];\n  });\n}\n\nvar KeyEscapeUtils = {\n  escape: escape,\n  unescape: unescape\n};\n\nmodule.exports = KeyEscapeUtils;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["escape","unescape"]],"~:compiled-at",1635270336716,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$KeyEscapeUtils.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA0D9HF,MAAAC,QAAA,CALqBE,CACnBC,OAjCFA,QAAe,CAACC,GAAD,CAAM,CAEnB,IAAIC,cAAgB,CAClB,OAAK,OADa,CAElB,IAAK,OAFa,CAQpB,OAAO,GAAP,CAJoBC,CAAC,EAADA,CAAMF,GAANE,SAAAC,CALFC,OAKED,CAAgC,QAAS,CAACE,KAAD,CAAQ,CACnE,MAAOJ,cAAA,CAAcI,KAAd,CAD4D,CAAjDF,CAND,CAgCAL,CAEnBQ,SAfFA,QAAiB,CAACN,GAAD,CAAM,CAErB,IAAIO,gBAAkB,CACpB,QAAM,MADc,CAEpB,QAAM,GAFc,CAMtB,OAAOL,CAAC,EAADA,EAFuB,GAAXM,GAAAR,GAAA,CAAI,CAAJ,CAAAQ,EAA6B,GAA7BA,GAAkBR,GAAA,CAAI,CAAJ,CAAlBQ,CAAmCR,GAAAS,UAAA,CAAc,CAAd,CAAnCD,CAAsDR,GAAAS,UAAA,CAAc,CAAd,CAElEP,UAAA,CAPaQ,UAOb,CAA2C,QAAS,CAACL,KAAD,CAAQ,CACjE,MAAOE,gBAAA,CAAgBF,KAAhB,CAD0D,CAA5D,CARc,CAaFP,CArDyG;\",\n\"sources\":[\"node_modules/react/lib/KeyEscapeUtils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$KeyEscapeUtils\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * \\n */\\n\\n'use strict';\\n\\n/**\\n * Escape and wrap key so it is safe to use as a reactid\\n *\\n * @param {string} key to be escaped.\\n * @return {string} the escaped key.\\n */\\n\\nfunction escape(key) {\\n  var escapeRegex = /[=:]/g;\\n  var escaperLookup = {\\n    '=': '=0',\\n    ':': '=2'\\n  };\\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\\n    return escaperLookup[match];\\n  });\\n\\n  return '$' + escapedString;\\n}\\n\\n/**\\n * Unescape and unwrap key for human-readable display\\n *\\n * @param {string} key to unescape.\\n * @return {string} the unescaped key.\\n */\\nfunction unescape(key) {\\n  var unescapeRegex = /(=0|=2)/g;\\n  var unescaperLookup = {\\n    '=0': '=',\\n    '=2': ':'\\n  };\\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);\\n\\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {\\n    return unescaperLookup[match];\\n  });\\n}\\n\\nvar KeyEscapeUtils = {\\n  escape: escape,\\n  unescape: unescape\\n};\\n\\nmodule.exports = KeyEscapeUtils;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"KeyEscapeUtils\",\"escape\",\"key\",\"escaperLookup\",\"replace\",\"escapedString\",\"escapeRegex\",\"match\",\"unescape\",\"unescaperLookup\",\"keySubstring\",\"substring\",\"unescapeRegex\"]\n}\n"]