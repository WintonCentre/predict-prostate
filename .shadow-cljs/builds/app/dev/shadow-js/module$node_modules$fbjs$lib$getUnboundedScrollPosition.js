["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/getUnboundedScrollPosition.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$getUnboundedScrollPosition=function(global,process,require,module,exports,shadow$shims){module.exports=function(scrollable){return scrollable.Window&&scrollable instanceof scrollable.Window?{x:scrollable.pageXOffset||scrollable.document.documentElement.scrollLeft,y:scrollable.pageYOffset||scrollable.document.documentElement.scrollTop}:{x:scrollable.scrollLeft,y:scrollable.scrollTop}}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$getUnboundedScrollPosition\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n'use strict';\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are unbounded, unlike `getScrollPosition`. This means they\n * may be negative or exceed the element boundaries (which is possible using\n * inertial scrolling).\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\n\nfunction getUnboundedScrollPosition(scrollable) {\n  if (scrollable.Window && scrollable instanceof scrollable.Window) {\n    return {\n      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,\n      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop\n    };\n  }\n  return {\n    x: scrollable.scrollLeft,\n    y: scrollable.scrollTop\n  };\n}\n\nmodule.exports = getUnboundedScrollPosition;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["x","y"]],"~:compiled-at",1635270336851,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$getUnboundedScrollPosition.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAoCzIF,MAAAC,QAAA,CAbAE,QAAmC,CAACC,UAAD,CAAa,CAC9C,MAAIA,WAAAC,OAAJ,EAAyBD,UAAzB,WAA+CA,WAAAC,OAA/C,CACS,CACLC,EAAGF,UAAAG,YAAHD,EAA6BF,UAAAI,SAAAC,gBAAAC,WADxB,CAELC,EAAGP,UAAAQ,YAAHD,EAA6BP,UAAAI,SAAAC,gBAAAI,UAFxB,CADT,CAMO,CACLP,EAAGF,UAAAM,WADE,CAELC,EAAGP,UAAAS,UAFE,CAPuC,CAvByF;\",\n\"sources\":[\"node_modules/fbjs/lib/getUnboundedScrollPosition.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$getUnboundedScrollPosition\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n */\\n\\n'use strict';\\n\\n/**\\n * Gets the scroll position of the supplied element or window.\\n *\\n * The return values are unbounded, unlike `getScrollPosition`. This means they\\n * may be negative or exceed the element boundaries (which is possible using\\n * inertial scrolling).\\n *\\n * @param {DOMWindow|DOMElement} scrollable\\n * @return {object} Map with `x` and `y` keys.\\n */\\n\\nfunction getUnboundedScrollPosition(scrollable) {\\n  if (scrollable.Window && scrollable instanceof scrollable.Window) {\\n    return {\\n      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,\\n      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop\\n    };\\n  }\\n  return {\\n    x: scrollable.scrollLeft,\\n    y: scrollable.scrollTop\\n  };\\n}\\n\\nmodule.exports = getUnboundedScrollPosition;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getUnboundedScrollPosition\",\"scrollable\",\"Window\",\"x\",\"pageXOffset\",\"document\",\"documentElement\",\"scrollLeft\",\"y\",\"pageYOffset\",\"scrollTop\"]\n}\n"]