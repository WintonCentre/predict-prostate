["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/SelectEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react$lib$SelectEventPlugin=function(global,require,module,exports){function constructSelectEvent(nativeEvent,nativeEventTarget){if(mouseDown||null==activeElement||activeElement!==getActiveElement())return null;var currentSelection=activeElement;\"selectionStart\"in currentSelection&&ReactInputSelection.hasSelectionCapabilities(currentSelection)?currentSelection={start:currentSelection.selectionStart,end:currentSelection.selectionEnd}:window.getSelection?(currentSelection=\nwindow.getSelection(),currentSelection={anchorNode:currentSelection.anchorNode,anchorOffset:currentSelection.anchorOffset,focusNode:currentSelection.focusNode,focusOffset:currentSelection.focusOffset}):document.selection?(currentSelection=document.selection.createRange(),currentSelection={parentElement:currentSelection.parentElement(),text:currentSelection.text,top:currentSelection.boundingTop,left:currentSelection.boundingLeft}):currentSelection=void 0;return lastSelection&&shallowEqual(lastSelection,\ncurrentSelection)?null:(lastSelection=currentSelection,nativeEvent=SyntheticEvent.getPooled(eventTypes.select,activeElementInst,nativeEvent,nativeEventTarget),nativeEvent.type=\"select\",nativeEvent.target=activeElement,EventPropagators.accumulateTwoPhaseDispatches(nativeEvent),nativeEvent)}global=require(\"module$node_modules$react$lib$EventConstants\");var EventPropagators=require(\"module$node_modules$react$lib$EventPropagators\");exports=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");\nvar ReactDOMComponentTree=require(\"module$node_modules$react$lib$ReactDOMComponentTree\"),ReactInputSelection=require(\"module$node_modules$react$lib$ReactInputSelection\"),SyntheticEvent=require(\"module$node_modules$react$lib$SyntheticEvent\"),getActiveElement=require(\"module$node_modules$fbjs$lib$getActiveElement\"),isTextInputElement=require(\"module$node_modules$react$lib$isTextInputElement\"),keyOf=require(\"module$node_modules$fbjs$lib$keyOf\"),shallowEqual=require(\"module$node_modules$fbjs$lib$shallowEqual\"),\ntopLevelTypes=global.topLevelTypes,skipSelectionChangeEvent=exports.canUseDOM&&\"documentMode\"in document&&11>=document.documentMode,eventTypes={select:{phasedRegistrationNames:{bubbled:keyOf({onSelect:null}),captured:keyOf({onSelectCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topContextMenu,topLevelTypes.topFocus,topLevelTypes.topKeyDown,topLevelTypes.topMouseDown,topLevelTypes.topMouseUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementInst=null,lastSelection=\nnull,mouseDown=!1,hasListener=!1,ON_SELECT_KEY=keyOf({onSelect:null});module.exports={eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){if(!hasListener)return null;var targetNode=targetInst?ReactDOMComponentTree.getNodeFromInstance(targetInst):window;switch(topLevelType){case topLevelTypes.topFocus:if(isTextInputElement(targetNode)||\"true\"===targetNode.contentEditable)activeElement=targetNode,activeElementInst=targetInst,lastSelection=null;break;case topLevelTypes.topBlur:lastSelection=\nactiveElementInst=activeElement=null;break;case topLevelTypes.topMouseDown:mouseDown=!0;break;case topLevelTypes.topContextMenu:case topLevelTypes.topMouseUp:return mouseDown=!1,constructSelectEvent(nativeEvent,nativeEventTarget);case topLevelTypes.topSelectionChange:if(skipSelectionChangeEvent)break;case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:return constructSelectEvent(nativeEvent,nativeEventTarget)}return null},didPutListener:function(inst,registrationName,listener){registrationName===\nON_SELECT_KEY&&(hasListener=!0)}}}","~:source","shadow$provide[\"module$node_modules$react$lib$SelectEventPlugin\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSelect: null }),\n      captured: keyOf({ onSelectCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\n\nvar activeElement = null;\nvar activeElementInst = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events. See #3639.\nvar hasListener = false;\nvar ON_SELECT_KEY = keyOf({ onSelect: null });\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n          activeElement = targetNode;\n          activeElementInst = targetInst;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementInst = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case topLevelTypes.topSelectionChange:\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (inst, registrationName, listener) {\n    if (registrationName === ON_SELECT_KEY) {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$shallowEqual","~$module$node_modules$react$lib$ReactDOMComponentTree","~$module$node_modules$fbjs$lib$getActiveElement","~$shadow.js","~$module$node_modules$react$lib$isTextInputElement","~$module$node_modules$react$lib$ReactInputSelection","~$module$node_modules$react$lib$SyntheticEvent","~$module$node_modules$react$lib$EventConstants","~$module$node_modules$fbjs$lib$ExecutionEnvironment","~$module$node_modules$react$lib$EventPropagators","~$module$node_modules$fbjs$lib$keyOf"]],"~:properties",["^5",["bubbled","anchorOffset","top","didPutListener","dependencies","parentElement","focusNode","anchorNode","eventTypes","onSelectCapture","select","start","text","focusOffset","captured","type","target","onSelect","extractEvents","end","left","phasedRegistrationNames"]],"~:compiled-at",1635250628418,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$SelectEventPlugin.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react/lib/SelectEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$SelectEventPlugin\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule SelectEventPlugin\\n */\\n\\n'use strict';\\n\\nvar EventConstants = require('./EventConstants');\\nvar EventPropagators = require('./EventPropagators');\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar ReactInputSelection = require('./ReactInputSelection');\\nvar SyntheticEvent = require('./SyntheticEvent');\\n\\nvar getActiveElement = require('fbjs/lib/getActiveElement');\\nvar isTextInputElement = require('./isTextInputElement');\\nvar keyOf = require('fbjs/lib/keyOf');\\nvar shallowEqual = require('fbjs/lib/shallowEqual');\\n\\nvar topLevelTypes = EventConstants.topLevelTypes;\\n\\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\\n\\nvar eventTypes = {\\n  select: {\\n    phasedRegistrationNames: {\\n      bubbled: keyOf({ onSelect: null }),\\n      captured: keyOf({ onSelectCapture: null })\\n    },\\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\\n  }\\n};\\n\\nvar activeElement = null;\\nvar activeElementInst = null;\\nvar lastSelection = null;\\nvar mouseDown = false;\\n\\n// Track whether a listener exists for this plugin. If none exist, we do\\n// not extract events. See #3639.\\nvar hasListener = false;\\nvar ON_SELECT_KEY = keyOf({ onSelect: null });\\n\\n/**\\n * Get an object which is a unique representation of the current selection.\\n *\\n * The return value will not be consistent across nodes or browsers, but\\n * two identical selections on the same node will return identical objects.\\n *\\n * @param {DOMElement} node\\n * @return {object}\\n */\\nfunction getSelection(node) {\\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\\n    return {\\n      start: node.selectionStart,\\n      end: node.selectionEnd\\n    };\\n  } else if (window.getSelection) {\\n    var selection = window.getSelection();\\n    return {\\n      anchorNode: selection.anchorNode,\\n      anchorOffset: selection.anchorOffset,\\n      focusNode: selection.focusNode,\\n      focusOffset: selection.focusOffset\\n    };\\n  } else if (document.selection) {\\n    var range = document.selection.createRange();\\n    return {\\n      parentElement: range.parentElement(),\\n      text: range.text,\\n      top: range.boundingTop,\\n      left: range.boundingLeft\\n    };\\n  }\\n}\\n\\n/**\\n * Poll selection to see whether it's changed.\\n *\\n * @param {object} nativeEvent\\n * @return {?SyntheticEvent}\\n */\\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\\n  // Ensure we have the right element, and that the user is not dragging a\\n  // selection (this matches native `select` event behavior). In HTML5, select\\n  // fires only on input and textarea thus if there's no focused element we\\n  // won't dispatch.\\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\\n    return null;\\n  }\\n\\n  // Only fire when selection has actually changed.\\n  var currentSelection = getSelection(activeElement);\\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\\n    lastSelection = currentSelection;\\n\\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\\n\\n    syntheticEvent.type = 'select';\\n    syntheticEvent.target = activeElement;\\n\\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\\n\\n    return syntheticEvent;\\n  }\\n\\n  return null;\\n}\\n\\n/**\\n * This plugin creates an `onSelect` event that normalizes select events\\n * across form elements.\\n *\\n * Supported elements are:\\n * - input (see `isTextInputElement`)\\n * - textarea\\n * - contentEditable\\n *\\n * This differs from native browser implementations in the following ways:\\n * - Fires on contentEditable fields as well as inputs.\\n * - Fires for collapsed selection.\\n * - Fires after user input.\\n */\\nvar SelectEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    if (!hasListener) {\\n      return null;\\n    }\\n\\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\\n\\n    switch (topLevelType) {\\n      // Track the input node that has focus.\\n      case topLevelTypes.topFocus:\\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\\n          activeElement = targetNode;\\n          activeElementInst = targetInst;\\n          lastSelection = null;\\n        }\\n        break;\\n      case topLevelTypes.topBlur:\\n        activeElement = null;\\n        activeElementInst = null;\\n        lastSelection = null;\\n        break;\\n\\n      // Don't fire the event while the user is dragging. This matches the\\n      // semantics of the native select event.\\n      case topLevelTypes.topMouseDown:\\n        mouseDown = true;\\n        break;\\n      case topLevelTypes.topContextMenu:\\n      case topLevelTypes.topMouseUp:\\n        mouseDown = false;\\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\\n\\n      // Chrome and IE fire non-standard event when selection is changed (and\\n      // sometimes when it hasn't). IE's event fires out of order with respect\\n      // to key and input events on deletion, so we discard it.\\n      //\\n      // Firefox doesn't support selectionchange, so check selection status\\n      // after each key entry. The selection changes after keydown and before\\n      // keyup, but we check on keydown as well in the case of holding down a\\n      // key, when multiple keydown events are fired but only one keyup is.\\n      // This is also our approach for IE handling, for the reason above.\\n      case topLevelTypes.topSelectionChange:\\n        if (skipSelectionChangeEvent) {\\n          break;\\n        }\\n      // falls through\\n      case topLevelTypes.topKeyDown:\\n      case topLevelTypes.topKeyUp:\\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\\n    }\\n\\n    return null;\\n  },\\n\\n  didPutListener: function (inst, registrationName, listener) {\\n    if (registrationName === ON_SELECT_KEY) {\\n      hasListener = true;\\n    }\\n  }\\n};\\n\\nmodule.exports = SelectEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"constructSelectEvent\",\"nativeEvent\",\"nativeEventTarget\",\"mouseDown\",\"activeElement\",\"getActiveElement\",\"node\",\"ReactInputSelection\",\"hasSelectionCapabilities\",\"start\",\"selectionStart\",\"end\",\"selectionEnd\",\"window\",\"getSelection\",\"selection\",\"anchorNode\",\"anchorOffset\",\"focusNode\",\"focusOffset\",\"document\",\"range\",\"createRange\",\"parentElement\",\"text\",\"top\",\"boundingTop\",\"left\",\"boundingLeft\",\"lastSelection\",\"shallowEqual\",\"currentSelection\",\"syntheticEvent\",\"SyntheticEvent\",\"getPooled\",\"eventTypes\",\"select\",\"activeElementInst\",\"type\",\"target\",\"EventPropagators\",\"accumulateTwoPhaseDispatches\",\"EventConstants\",\"ExecutionEnvironment\",\"ReactDOMComponentTree\",\"isTextInputElement\",\"keyOf\",\"topLevelTypes\",\"skipSelectionChangeEvent\",\"canUseDOM\",\"documentMode\",\"phasedRegistrationNames\",\"bubbled\",\"onSelect\",\"captured\",\"onSelectCapture\",\"dependencies\",\"topBlur\",\"topContextMenu\",\"topFocus\",\"topKeyDown\",\"topMouseDown\",\"topMouseUp\",\"topSelectionChange\",\"hasListener\",\"ON_SELECT_KEY\",\"SelectEventPlugin\",\"extractEvents\",\"topLevelType\",\"targetInst\",\"targetNode\",\"getNodeFromInstance\",\"contentEditable\",\"topKeyUp\",\"didPutListener\",\"inst\",\"registrationName\",\"listener\"]\n}\n"]