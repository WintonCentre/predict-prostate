["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/findDOMNode.js"],"~:js","shadow$provide.module$node_modules$react$lib$findDOMNode=function(global,require,module,exports){require(\"module$node_modules$react$lib$reactProdInvariant\");var ReactCurrentOwner=require(\"module$node_modules$react$lib$ReactCurrentOwner\"),ReactDOMComponentTree=require(\"module$node_modules$react$lib$ReactDOMComponentTree\"),ReactInstanceMap=require(\"module$node_modules$react$lib$ReactInstanceMap\"),getHostComponentFromComposite=require(\"module$node_modules$react$lib$getHostComponentFromComposite\"),invariant=\nrequire(\"module$node_modules$fbjs$lib$invariant\"),warning=require(\"module$node_modules$fbjs$lib$warning\");module.exports=function(componentOrElement){var owner=ReactCurrentOwner.current;null!==owner&&(warning(owner._warnedAboutRefsInRender,\"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.\",\nowner.getName()||\"A component\"),owner._warnedAboutRefsInRender=!0);if(null==componentOrElement)return null;if(1===componentOrElement.nodeType)return componentOrElement;if(owner=ReactInstanceMap.get(componentOrElement))return(owner=getHostComponentFromComposite(owner))?ReactDOMComponentTree.getNodeFromInstance(owner):null;\"function\"===typeof componentOrElement.render?invariant(!1,\"findDOMNode was called on an unmounted component.\"):invariant(!1,\"Element appears to be neither ReactComponent nor DOMNode (keys: %s)\",\nObject.keys(componentOrElement))}}","~:source","shadow$provide[\"module$node_modules$react$lib$findDOMNode\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findDOMNode\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInstanceMap = require('./ReactInstanceMap');\n\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Returns the DOM node rendered by this element.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode\n *\n * @param {ReactComponent|DOMElement} componentOrElement\n * @return {?DOMElement} The root node of this element.\n */\nfunction findDOMNode(componentOrElement) {\n  if (process.env.NODE_ENV !== 'production') {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null) {\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if (componentOrElement.nodeType === 1) {\n    return componentOrElement;\n  }\n\n  var inst = ReactInstanceMap.get(componentOrElement);\n  if (inst) {\n    inst = getHostComponentFromComposite(inst);\n    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;\n  }\n\n  if (typeof componentOrElement.render === 'function') {\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;\n  } else {\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;\n  }\n}\n\nmodule.exports = findDOMNode;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$ReactDOMComponentTree","~$module$node_modules$react$lib$getHostComponentFromComposite","~$module$node_modules$react$lib$ReactInstanceMap","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react$lib$reactProdInvariant","~$module$node_modules$fbjs$lib$warning","~$module$node_modules$react$lib$ReactCurrentOwner"]],"~:properties",["^5",["_warnedAboutRefsInRender"]],"~:compiled-at",1635250628423,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$findDOMNode.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAcjFF,OAAA,CAAQ,kDAAR,CAErB,KAAIG,kBAAoBH,OAAA,CAAQ,iDAAR,CAAxB,CACII,sBAAwBJ,OAAA,CAAQ,qDAAR,CAD5B,CAEIK,iBAAmBL,OAAA,CAAQ,gDAAR,CAFvB,CAIIM,8BAAgCN,OAAA,CAAQ,6DAAR,CAJpC,CAKIO;AAAYP,OAAA,CAAQ,wCAAR,CALhB,CAMIQ,QAAUR,OAAA,CAAQ,sCAAR,CAsCdC,OAAOC,CAAAA,OAAP,CA5BAO,QAAoB,CAACC,kBAAD,CAAqB,CAErC,IAAIC,MAAQR,iBAAkBS,CAAAA,OAChB,KAAd,GAAID,KAAJ,GAC0CH,OAAA,CAAQG,KAAME,CAAAA,wBAAd,CAAwC,gRAAxC;AAA8UF,KAAMG,CAAAA,OAAN,EAA9U,EAAiW,aAAjW,CACxC,CAAAH,KAAME,CAAAA,wBAAN,CAAiC,CAAA,CAFnC,CAKF,IAA0B,IAA1B,EAAIH,kBAAJ,CACE,MAAO,KAET,IAAoC,CAApC,GAAIA,kBAAmBK,CAAAA,QAAvB,CACE,MAAOL,mBAIT,IADIM,KACJ,CADWX,gBAAiBY,CAAAA,GAAjB,CAAqBP,kBAArB,CACX,CAEE,MAAO,CADPM,KACO,CADAV,6BAAA,CAA8BU,KAA9B,CACA,EAAOZ,qBAAsBc,CAAAA,mBAAtB,CAA0CF,KAA1C,CAAP,CAAyD,IAGzB,WAAzC,GAAI,MAAON,mBAAmBS,CAAAA,MAA9B,CACmDZ,SAAA,CAAU,CAAA,CAAV,CAAiB,mDAAjB,CADnD,CAGmDA,SAAA,CAAU,CAAA,CAAV,CAAiB,qEAAjB;AAAwFa,MAAOC,CAAAA,IAAP,CAAYX,kBAAZ,CAAxF,CAxBZ,CAhC6D;\",\n\"sources\":[\"node_modules/react/lib/findDOMNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$findDOMNode\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule findDOMNode\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar ReactInstanceMap = require('./ReactInstanceMap');\\n\\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');\\nvar invariant = require('fbjs/lib/invariant');\\nvar warning = require('fbjs/lib/warning');\\n\\n/**\\n * Returns the DOM node rendered by this element.\\n *\\n * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode\\n *\\n * @param {ReactComponent|DOMElement} componentOrElement\\n * @return {?DOMElement} The root node of this element.\\n */\\nfunction findDOMNode(componentOrElement) {\\n  if (process.env.NODE_ENV !== 'production') {\\n    var owner = ReactCurrentOwner.current;\\n    if (owner !== null) {\\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\\n      owner._warnedAboutRefsInRender = true;\\n    }\\n  }\\n  if (componentOrElement == null) {\\n    return null;\\n  }\\n  if (componentOrElement.nodeType === 1) {\\n    return componentOrElement;\\n  }\\n\\n  var inst = ReactInstanceMap.get(componentOrElement);\\n  if (inst) {\\n    inst = getHostComponentFromComposite(inst);\\n    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;\\n  }\\n\\n  if (typeof componentOrElement.render === 'function') {\\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;\\n  } else {\\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;\\n  }\\n}\\n\\nmodule.exports = findDOMNode;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ReactCurrentOwner\",\"ReactDOMComponentTree\",\"ReactInstanceMap\",\"getHostComponentFromComposite\",\"invariant\",\"warning\",\"findDOMNode\",\"componentOrElement\",\"owner\",\"current\",\"_warnedAboutRefsInRender\",\"getName\",\"nodeType\",\"inst\",\"get\",\"getNodeFromInstance\",\"render\",\"Object\",\"keys\"]\n}\n"]