["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/PooledClass.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$PooledClass=function(global,process,require,module,exports,shadow$shims){require(\"module$node_modules$react_dom$lib$reactProdInvariant\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\"),oneArgumentPooler=function(copyFieldsFrom){if(this.instancePool.length){var instance=this.instancePool.pop();this.call(instance,copyFieldsFrom);return instance}return new this(copyFieldsFrom)},standardReleaser=function(instance){instance instanceof this?\nvoid 0:invariant(!1,\"Trying to release an instance into a pool of a different type.\");instance.destructor();this.instancePool.length<this.poolSize&&this.instancePool.push(instance)};module.exports={addPoolingTo:function(CopyConstructor,pooler){CopyConstructor.instancePool=[];CopyConstructor.getPooled=pooler||oneArgumentPooler;CopyConstructor.poolSize||(CopyConstructor.poolSize=10);CopyConstructor.release=standardReleaser;return CopyConstructor},oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:function(a1,\na2){if(this.instancePool.length){var instance=this.instancePool.pop();this.call(instance,a1,a2);return instance}return new this(a1,a2)},threeArgumentPooler:function(a1,a2,a3){if(this.instancePool.length){var instance=this.instancePool.pop();this.call(instance,a1,a2,a3);return instance}return new this(a1,a2,a3)},fourArgumentPooler:function(a1,a2,a3,a4){if(this.instancePool.length){var instance=this.instancePool.pop();this.call(instance,a1,a2,a3,a4);return instance}return new this(a1,a2,a3,a4)}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$PooledClass\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler\n};\n\nmodule.exports = PooledClass;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react_dom$lib$reactProdInvariant"]],"~:properties",["^5",["release","twoArgumentPooler","poolSize","addPoolingTo","oneArgumentPooler","threeArgumentPooler","getPooled","fourArgumentPooler","instancePool"]],"~:compiled-at",1635270336811,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$PooledClass.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAc1GH,OAAA,CAAQ,sDAAR,CAErB,KAAII,UAAYJ,OAAA,CAAQ,wCAAR,CAAhB,CASIK,kBAAoBA,QAAS,CAACC,cAAD,CAAiB,CAEhD,GADYC,IACRC,aAAAC,OAAJ,CAA+B,CAC7B,IAAIC,SAFMH,IAEKC,aAAAG,IAAA,EAFLJ,KAGVK,KAAA,CAAWF,QAAX,CAAqBJ,cAArB,CACA,OAAOI,SAHsB,CAK7B,MAAO,KANGH,IAMH,CAAUD,cAAV,CAPuC,CATlD,CAqDIO,iBAAmBA,QAAS,CAACH,QAAD,CAAW,CAEvCA,QAAF,WADYH,KACZ;AAAmL,IAAK,EAAxL,CAAuEH,SAAA,CAAU,CAAA,CAAV,CAAiB,gEAAjB,CACvEM,SAAAI,WAAA,EAFYP,KAGRC,aAAAC,OAAJ,CAHYF,IAGoBQ,SAAhC,EAHYR,IAIVC,aAAAQ,KAAA,CAAwBN,QAAxB,CALuC,CA0C3CT,OAAAC,QAAA,CARkBe,CAChBC,aAdiBA,QAAS,CAACC,eAAD,CAAkBC,MAAlB,CAA0B,CAGrCD,eACfX,aAAA,CAAwB,EADTW,gBAEfE,UAAA,CAAqBD,MAArB,EAhBmBf,iBAcJc,gBAGVJ,SAAL,GAHeI,eAIbJ,SADF,CAlBsBO,EAkBtB,CAHeH,gBAMfI,QAAA,CAAmBV,gBACnB,OAPeM,gBAHqC,CAapCF,CAEhBZ,kBAAmBA,iBAFHY,CAGhBO,kBAtEsBA,QAAS,CAACC,EAAD;AAAKC,EAAL,CAAS,CAExC,GADYnB,IACRC,aAAAC,OAAJ,CAA+B,CAC7B,IAAIC,SAFMH,IAEKC,aAAAG,IAAA,EAFLJ,KAGVK,KAAA,CAAWF,QAAX,CAAqBe,EAArB,CAAyBC,EAAzB,CACA,OAAOhB,SAHsB,CAK7B,MAAO,KANGH,IAMH,CAAUkB,EAAV,CAAcC,EAAd,CAP+B,CAmExBT,CAIhBU,oBA5DwBA,QAAS,CAACF,EAAD,CAAKC,EAAL,CAASE,EAAT,CAAa,CAE9C,GADYrB,IACRC,aAAAC,OAAJ,CAA+B,CAC7B,IAAIC,SAFMH,IAEKC,aAAAG,IAAA,EAFLJ,KAGVK,KAAA,CAAWF,QAAX,CAAqBe,EAArB,CAAyBC,EAAzB,CAA6BE,EAA7B,CACA,OAAOlB,SAHsB,CAK7B,MAAO,KANGH,IAMH,CAAUkB,EAAV,CAAcC,EAAd,CAAkBE,EAAlB,CAPqC,CAwD9BX,CAKhBY,mBAlDuBA,QAAS,CAACJ,EAAD,CAAKC,EAAL,CAASE,EAAT,CAAaE,EAAb,CAAiB,CAEjD,GADYvB,IACRC,aAAAC,OAAJ,CAA+B,CAC7B,IAAIC,SAFMH,IAEKC,aAAAG,IAAA,EAFLJ,KAGVK,KAAA,CAAWF,QAAX,CAAqBe,EAArB,CAAyBC,EAAzB,CAA6BE,EAA7B,CAAiCE,EAAjC,CACA,OAAOpB,SAHsB,CAK7B,MAAO,KANGH,IAMH,CAAUkB,EAAV,CAAcC,EAAd,CAAkBE,EAAlB,CAAsBE,EAAtB,CAPwC,CA6CjCb,CAvG6G;\",\n\"sources\":[\"node_modules/react-dom/lib/PooledClass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$PooledClass\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * \\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\n/**\\n * Static poolers. Several custom versions for each potential number of\\n * arguments. A completely generic pooler is easy to implement, but would\\n * require accessing the `arguments` object. In each of these, `this` refers to\\n * the Class itself, not an instance. If any others are needed, simply add them\\n * here, or in their own files.\\n */\\nvar oneArgumentPooler = function (copyFieldsFrom) {\\n  var Klass = this;\\n  if (Klass.instancePool.length) {\\n    var instance = Klass.instancePool.pop();\\n    Klass.call(instance, copyFieldsFrom);\\n    return instance;\\n  } else {\\n    return new Klass(copyFieldsFrom);\\n  }\\n};\\n\\nvar twoArgumentPooler = function (a1, a2) {\\n  var Klass = this;\\n  if (Klass.instancePool.length) {\\n    var instance = Klass.instancePool.pop();\\n    Klass.call(instance, a1, a2);\\n    return instance;\\n  } else {\\n    return new Klass(a1, a2);\\n  }\\n};\\n\\nvar threeArgumentPooler = function (a1, a2, a3) {\\n  var Klass = this;\\n  if (Klass.instancePool.length) {\\n    var instance = Klass.instancePool.pop();\\n    Klass.call(instance, a1, a2, a3);\\n    return instance;\\n  } else {\\n    return new Klass(a1, a2, a3);\\n  }\\n};\\n\\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\\n  var Klass = this;\\n  if (Klass.instancePool.length) {\\n    var instance = Klass.instancePool.pop();\\n    Klass.call(instance, a1, a2, a3, a4);\\n    return instance;\\n  } else {\\n    return new Klass(a1, a2, a3, a4);\\n  }\\n};\\n\\nvar standardReleaser = function (instance) {\\n  var Klass = this;\\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\\n  instance.destructor();\\n  if (Klass.instancePool.length < Klass.poolSize) {\\n    Klass.instancePool.push(instance);\\n  }\\n};\\n\\nvar DEFAULT_POOL_SIZE = 10;\\nvar DEFAULT_POOLER = oneArgumentPooler;\\n\\n/**\\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\\n * you give this may have a `poolSize` property, and will look for a\\n * prototypical `destructor` on instances.\\n *\\n * @param {Function} CopyConstructor Constructor that can be used to reset.\\n * @param {Function} pooler Customizable pooler.\\n */\\nvar addPoolingTo = function (CopyConstructor, pooler) {\\n  // Casting as any so that flow ignores the actual implementation and trusts\\n  // it to match the type we declared\\n  var NewKlass = CopyConstructor;\\n  NewKlass.instancePool = [];\\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\\n  if (!NewKlass.poolSize) {\\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\\n  }\\n  NewKlass.release = standardReleaser;\\n  return NewKlass;\\n};\\n\\nvar PooledClass = {\\n  addPoolingTo: addPoolingTo,\\n  oneArgumentPooler: oneArgumentPooler,\\n  twoArgumentPooler: twoArgumentPooler,\\n  threeArgumentPooler: threeArgumentPooler,\\n  fourArgumentPooler: fourArgumentPooler\\n};\\n\\nmodule.exports = PooledClass;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"invariant\",\"oneArgumentPooler\",\"copyFieldsFrom\",\"Klass\",\"instancePool\",\"length\",\"instance\",\"pop\",\"call\",\"standardReleaser\",\"destructor\",\"poolSize\",\"push\",\"PooledClass\",\"addPoolingTo\",\"CopyConstructor\",\"pooler\",\"getPooled\",\"DEFAULT_POOL_SIZE\",\"release\",\"twoArgumentPooler\",\"a1\",\"a2\",\"threeArgumentPooler\",\"a3\",\"fourArgumentPooler\",\"a4\"]\n}\n"]