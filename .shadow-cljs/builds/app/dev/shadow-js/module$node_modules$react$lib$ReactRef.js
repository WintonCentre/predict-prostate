["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/ReactRef.js"],"~:js","shadow$provide.module$node_modules$react$lib$ReactRef=function(global,require,module,exports){var ReactOwner=require(\"module$node_modules$react$lib$ReactOwner\");module.exports={attachRefs:function(instance,element){if(null!==element&&!1!==element){var ref=element.ref;null!=ref&&(element=element._owner,\"function\"===typeof ref?ref(instance.getPublicInstance()):ReactOwner.addComponentAsRefTo(instance,ref,element))}},shouldUpdateRefs:function(prevElement,nextElement){return null===prevElement||!1===prevElement||\nnull===nextElement||!1===nextElement||nextElement.ref!==prevElement.ref||\"string\"===typeof nextElement.ref&&nextElement._owner!==prevElement._owner},detachRefs:function(instance,element){if(null!==element&&!1!==element){var ref=element.ref;null!=ref&&(element=element._owner,\"function\"===typeof ref?ref(null):ReactOwner.removeComponentAsRefFrom(instance,ref,element))}}}}","~:source","shadow$provide[\"module$node_modules$react$lib$ReactRef\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n\n  return (\n    // This has a few false positives w/r/t empty components.\n    prevEmpty || nextEmpty || nextElement.ref !== prevElement.ref ||\n    // If owner changes but we have an unchanged function ref, don't update refs\n    typeof nextElement.ref === 'string' && nextElement._owner !== prevElement._owner\n  );\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$ReactOwner","~$shadow.js"]],"~:properties",["^5",["attachRefs","detachRefs","shouldUpdateRefs"]],"~:compiled-at",1635250628385,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$ReactRef.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAcnG,IAAIC,WAAaH,OAAA,CAAQ,0CAAR,CAkEjBC,OAAOC,CAAAA,OAAP,CAhEeE,CAoBf,WAAsBC,QAAS,CAACC,QAAD,CAAWC,OAAX,CAAoB,CACjD,GAAgB,IAAhB,GAAIA,OAAJ,EAAoC,CAAA,CAApC,GAAwBA,OAAxB,CAAA,CAGA,IAAIC,IAAMD,OAAQC,CAAAA,GACP,KAAX,EAAIA,GAAJ,GACmCC,OAvBnC,CAuB2BF,OAAQE,CAAAA,MAvBnC,CAAmB,UAAnB,GAAI,MAuBQD,IAvBZ,CAuBYA,GAtBV,CAsBeF,QAtBDI,CAAAA,iBAAV,EAAJ,CADF,CAIEP,UAAWQ,CAAAA,mBAAX,CAmBeL,QAnBf,CAmBUE,GAnBV,CAA+CI,OAA/C,CAkBF,CAJA,CADiD,CApBpCR,CA8Bf,iBAA4BS,QAAS,CAACC,WAAD,CAAcC,WAAd,CAA2B,CAgB9D,MAHgC,KAGhC,GAHgBD,WAGhB,EAHwD,CAAA,CAGxD,GAHwCA,WAGxC;AAFgC,IAEhC,GAFgBC,WAEhB,EAFwD,CAAA,CAExD,GAFwCA,WAExC,EAE4BA,WAAYP,CAAAA,GAFxC,GAEgDM,WAAYN,CAAAA,GAF5D,EAI6B,QAJ7B,GAIE,MAAOO,YAAYP,CAAAA,GAJrB,EAIyCO,WAAYN,CAAAA,MAJrD,GAIgEK,WAAYL,CAAAA,MApBd,CA9BjDL,CAsDf,WAAsBY,QAAS,CAACV,QAAD,CAAWC,OAAX,CAAoB,CACjD,GAAgB,IAAhB,GAAIA,OAAJ,EAAoC,CAAA,CAApC,GAAwBA,OAAxB,CAAA,CAGA,IAAIC,IAAMD,OAAQC,CAAAA,GACP,KAAX,EAAIA,GAAJ,GACmCC,OAhDnC,CAgD2BF,OAAQE,CAAAA,MAhDnC,CAAmB,UAAnB,GAAI,MAgDQD,IAhDZ,CAgDYA,GA/CV,CAAI,IAAJ,CADF,CAIEL,UAAWc,CAAAA,wBAAX,CA4CeX,QA5Cf,CA4CUE,GA5CV,CAAoDI,OAApD,CA2CF,CAJA,CADiD,CAtDpCR,CAhBoF;\",\n\"sources\":[\"node_modules/react/lib/ReactRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$ReactRef\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule ReactRef\\n */\\n\\n'use strict';\\n\\nvar ReactOwner = require('./ReactOwner');\\n\\nvar ReactRef = {};\\n\\nfunction attachRef(ref, component, owner) {\\n  if (typeof ref === 'function') {\\n    ref(component.getPublicInstance());\\n  } else {\\n    // Legacy ref\\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\\n  }\\n}\\n\\nfunction detachRef(ref, component, owner) {\\n  if (typeof ref === 'function') {\\n    ref(null);\\n  } else {\\n    // Legacy ref\\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\\n  }\\n}\\n\\nReactRef.attachRefs = function (instance, element) {\\n  if (element === null || element === false) {\\n    return;\\n  }\\n  var ref = element.ref;\\n  if (ref != null) {\\n    attachRef(ref, instance, element._owner);\\n  }\\n};\\n\\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\\n  // If either the owner or a `ref` has changed, make sure the newest owner\\n  // has stored a reference to `this`, and the previous owner (if different)\\n  // has forgotten the reference to `this`. We use the element instead\\n  // of the public this.props because the post processing cannot determine\\n  // a ref. The ref conceptually lives on the element.\\n\\n  // TODO: Should this even be possible? The owner cannot change because\\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\\n  // if you swap the keys of but not the refs. Reconsider where this check\\n  // is made. It probably belongs where the key checking and\\n  // instantiateReactComponent is done.\\n\\n  var prevEmpty = prevElement === null || prevElement === false;\\n  var nextEmpty = nextElement === null || nextElement === false;\\n\\n  return (\\n    // This has a few false positives w/r/t empty components.\\n    prevEmpty || nextEmpty || nextElement.ref !== prevElement.ref ||\\n    // If owner changes but we have an unchanged function ref, don't update refs\\n    typeof nextElement.ref === 'string' && nextElement._owner !== prevElement._owner\\n  );\\n};\\n\\nReactRef.detachRefs = function (instance, element) {\\n  if (element === null || element === false) {\\n    return;\\n  }\\n  var ref = element.ref;\\n  if (ref != null) {\\n    detachRef(ref, instance, element._owner);\\n  }\\n};\\n\\nmodule.exports = ReactRef;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ReactOwner\",\"ReactRef\",\"ReactRef.attachRefs\",\"instance\",\"element\",\"ref\",\"_owner\",\"getPublicInstance\",\"addComponentAsRefTo\",\"owner\",\"ReactRef.shouldUpdateRefs\",\"prevElement\",\"nextElement\",\"ReactRef.detachRefs\",\"removeComponentAsRefFrom\"]\n}\n"]