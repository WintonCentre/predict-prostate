["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/ReactDefaultBatchingStrategy.js"],"~:js","shadow$provide.module$node_modules$react$lib$ReactDefaultBatchingStrategy=function(global,require,module,exports){function ReactDefaultBatchingStrategyTransaction(){this.reinitializeTransaction()}global=require(\"module$node_modules$object_assign$index\");exports=require(\"module$node_modules$react$lib$ReactUpdates\");var Transaction=require(\"module$node_modules$react$lib$Transaction\");require=require(\"module$node_modules$fbjs$lib$emptyFunction\");var RESET_BATCHED_UPDATES={initialize:require,close:function(){ReactDefaultBatchingStrategy.isBatchingUpdates=\n!1}},TRANSACTION_WRAPPERS=[{initialize:require,close:exports.flushBatchedUpdates.bind(exports)},RESET_BATCHED_UPDATES];global(ReactDefaultBatchingStrategyTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS}});var transaction=new ReactDefaultBatchingStrategyTransaction,ReactDefaultBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(callback,a,b,c,d,e){var alreadyBatchingUpdates=ReactDefaultBatchingStrategy.isBatchingUpdates;ReactDefaultBatchingStrategy.isBatchingUpdates=\n!0;alreadyBatchingUpdates?callback(a,b,c,d,e):transaction.perform(callback,null,a,b,c,d,e)}};module.exports=ReactDefaultBatchingStrategy}","~:source","shadow$provide[\"module$node_modules$react$lib$ReactDefaultBatchingStrategy\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$object_assign$index","~$shadow.js","~$module$node_modules$react$lib$ReactUpdates","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$react$lib$Transaction"]],"~:properties",["^5",["batchedUpdates","isBatchingUpdates","getTransactionWrappers","close","initialize"]],"~:compiled-at",1635250628413,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$ReactDefaultBatchingStrategy.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmCvHC,QAASA,wCAAuC,EAAG,CACjD,IAAKC,CAAAA,uBAAL,EADiD,CArB/CC,MAAAA,CAAUL,OAAA,CAAQ,yCAAR,CAEVM,QAAAA,CAAeN,OAAA,CAAQ,4CAAR,CACnB,KAAIO,YAAcP,OAAA,CAAQ,2CAAR,CAEdQ,QAAAA,CAAgBR,OAAA,CAAQ,4CAAR,CAEpB,KAAIS,sBAAwB,CAC1BC,WAAYF,OADc,CAE1BG,MAAOA,QAAS,EAAG,CACjBC,4BAA6BC,CAAAA,iBAA7B;AAAiD,CAAA,CADhC,CAFO,CAA5B,CAYIC,qBAAuB,CALCC,CAC1BL,WAAYF,OADcO,CAE1BJ,MAAOL,OAAaU,CAAAA,mBAAoBC,CAAAA,IAAjC,CAAsCX,OAAtC,CAFmBS,CAKD,CAAwBN,qBAAxB,CAM3BJ,OAAA,CAAQF,uCAAwCe,CAAAA,SAAhD,CAA2DX,WAAYY,CAAAA,KAAvE,CAA8E,CAC5EC,uBAAwBA,QAAS,EAAG,CAClC,MAAON,qBAD2B,CADwC,CAA9E,CAMA,KAAIO,YAAc,IAAIlB,uCAAtB,CAEIS,6BAA+B,CACjCC,kBAAmB,CAAA,CADc,CAOjCS,eAAgBA,QAAS,CAACC,QAAD,CAAWC,CAAX,CAAcC,CAAd,CAAiBC,CAAjB,CAAoBC,CAApB,CAAuBC,CAAvB,CAA0B,CACjD,IAAIC,uBAAyBjB,4BAA6BC,CAAAA,iBAE1DD,6BAA6BC,CAAAA,iBAA7B;AAAiD,CAAA,CAG7CgB,uBAAJ,CACEN,QAAA,CAASC,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAkBC,CAAlB,CAAqBC,CAArB,CADF,CAGEP,WAAYS,CAAAA,OAAZ,CAAoBP,QAApB,CAA8B,IAA9B,CAAoCC,CAApC,CAAuCC,CAAvC,CAA0CC,CAA1C,CAA6CC,CAA7C,CAAgDC,CAAhD,CAT+C,CAPlB,CAqBnC3B,OAAOC,CAAAA,OAAP,CAAiBU,4BApEsG;\",\n\"sources\":[\"node_modules/react/lib/ReactDefaultBatchingStrategy.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$ReactDefaultBatchingStrategy\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule ReactDefaultBatchingStrategy\\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar ReactUpdates = require('./ReactUpdates');\\nvar Transaction = require('./Transaction');\\n\\nvar emptyFunction = require('fbjs/lib/emptyFunction');\\n\\nvar RESET_BATCHED_UPDATES = {\\n  initialize: emptyFunction,\\n  close: function () {\\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\\n  }\\n};\\n\\nvar FLUSH_BATCHED_UPDATES = {\\n  initialize: emptyFunction,\\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\\n};\\n\\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\\n\\nfunction ReactDefaultBatchingStrategyTransaction() {\\n  this.reinitializeTransaction();\\n}\\n\\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\\n  getTransactionWrappers: function () {\\n    return TRANSACTION_WRAPPERS;\\n  }\\n});\\n\\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\\n\\nvar ReactDefaultBatchingStrategy = {\\n  isBatchingUpdates: false,\\n\\n  /**\\n   * Call the provided function in a context within which calls to `setState`\\n   * and friends are batched such that components aren't updated unnecessarily.\\n   */\\n  batchedUpdates: function (callback, a, b, c, d, e) {\\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\\n\\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\\n\\n    // The code is written this way to avoid extra allocations\\n    if (alreadyBatchingUpdates) {\\n      callback(a, b, c, d, e);\\n    } else {\\n      transaction.perform(callback, null, a, b, c, d, e);\\n    }\\n  }\\n};\\n\\nmodule.exports = ReactDefaultBatchingStrategy;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ReactDefaultBatchingStrategyTransaction\",\"reinitializeTransaction\",\"_assign\",\"ReactUpdates\",\"Transaction\",\"emptyFunction\",\"RESET_BATCHED_UPDATES\",\"initialize\",\"close\",\"ReactDefaultBatchingStrategy\",\"isBatchingUpdates\",\"TRANSACTION_WRAPPERS\",\"FLUSH_BATCHED_UPDATES\",\"flushBatchedUpdates\",\"bind\",\"prototype\",\"Mixin\",\"getTransactionWrappers\",\"transaction\",\"batchedUpdates\",\"callback\",\"a\",\"b\",\"c\",\"d\",\"e\",\"alreadyBatchingUpdates\",\"perform\"]\n}\n"]