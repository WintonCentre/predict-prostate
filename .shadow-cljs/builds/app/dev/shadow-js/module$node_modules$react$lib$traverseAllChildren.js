["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/traverseAllChildren.js"],"~:js","shadow$provide.module$node_modules$react$lib$traverseAllChildren=function(global,process,require,module,exports,shadow$shims){function getComponentKey(component,index){return component&&\"object\"===typeof component&&null!=component.key?KeyEscapeUtils.escape(component.key):index.toString(36)}function traverseAllChildrenImpl(children,nameSoFar,callback,traverseContext){var type=typeof children;if(\"undefined\"===type||\"boolean\"===type)children=null;if(null===children||\"string\"===type||\"number\"===type||\n\"object\"===type&&children.$$typeof===REACT_ELEMENT_TYPE)return callback(traverseContext,children,\"\"===nameSoFar?\".\"+getComponentKey(children,0):nameSoFar),1;var subtreeCount=0;nameSoFar=\"\"===nameSoFar?\".\":nameSoFar+\":\";if(Array.isArray(children))for(type=0;type<children.length;type++){var child=children[type];var nextName=nameSoFar+getComponentKey(child,type);subtreeCount+=traverseAllChildrenImpl(child,nextName,callback,traverseContext)}else if(child=getIteratorFn(children))if(type=child.call(children),\nchild!==children.entries)for(children=0;!(child=type.next()).done;)child=child.value,nextName=nameSoFar+getComponentKey(child,children++),subtreeCount+=traverseAllChildrenImpl(child,nextName,callback,traverseContext);else for(children=\"\",ReactCurrentOwner.current&&(child=ReactCurrentOwner.current.getName())&&(children=\" Check the render method of `\"+child+\"`.\"),warning(didWarnAboutMaps,\"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s\",\nchildren),didWarnAboutMaps=!0;!(child=type.next()).done;){if(children=child.value)child=children[1],nextName=nameSoFar+KeyEscapeUtils.escape(children[0])+\":\"+getComponentKey(child,0),subtreeCount+=traverseAllChildrenImpl(child,nextName,callback,traverseContext)}else\"object\"===type&&(callback=\" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.\",children._isReactElement&&(callback=\" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React.\"),\nReactCurrentOwner.current&&(traverseContext=ReactCurrentOwner.current.getName())&&(callback+=\" Check the render method of `\"+traverseContext+\"`.\"),traverseContext=String(children),invariant(!1,\"Objects are not valid as a React child (found: %s).%s\",\"[object Object]\"===traverseContext?\"object with keys {\"+Object.keys(children).join(\", \")+\"}\":traverseContext,callback));return subtreeCount}require(\"module$node_modules$react$lib$reactProdInvariant\");var ReactCurrentOwner=require(\"module$node_modules$react$lib$ReactCurrentOwner\"),\nREACT_ELEMENT_TYPE=require(\"module$node_modules$react$lib$ReactElementSymbol\"),getIteratorFn=require(\"module$node_modules$react$lib$getIteratorFn\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),KeyEscapeUtils=require(\"module$node_modules$react$lib$KeyEscapeUtils\"),warning=require(\"module$node_modules$fbjs$lib$warning\"),didWarnAboutMaps=!1;module.exports=function(children,callback,traverseContext){return null==children?0:traverseAllChildrenImpl(children,\"\",callback,traverseContext)}}","~:source","shadow$provide[\"module$node_modules$react$lib$traverseAllChildren\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar REACT_ELEMENT_TYPE = require('./ReactElementSymbol');\n\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar KeyEscapeUtils = require('./KeyEscapeUtils');\nvar warning = require('fbjs/lib/warning');\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n\n/**\n * This is inlined from ReactElement since this file is shared between\n * isomorphic and renderers. We could extract this to a\n *\n */\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar didWarnAboutMaps = false;\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (component && typeof component === 'object' && component.key != null) {\n    // Explicit key\n    return KeyEscapeUtils.escape(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null || type === 'string' || type === 'number' ||\n  // The following is inlined from ReactElement. This means we can optimize\n  // some checks. React Fiber also inlines this logic for similar purposes.\n  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = nextNamePrefix + getComponentKey(child, ii++);\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n        }\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          var mapsAsChildrenAddendum = '';\n          if (ReactCurrentOwner.current) {\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();\n            if (mapsAsChildrenOwnerName) {\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';\n            }\n          }\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n          }\n        }\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      if (process.env.NODE_ENV !== 'production') {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }\n        if (ReactCurrentOwner.current) {\n          var name = ReactCurrentOwner.current.getName();\n          if (name) {\n            addendum += ' Check the render method of `' + name + '`.';\n          }\n        }\n      }\n      var childrenString = String(children);\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$getIteratorFn","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react$lib$reactProdInvariant","~$module$node_modules$react$lib$KeyEscapeUtils","~$module$node_modules$fbjs$lib$warning","~$module$node_modules$react$lib$ReactElementSymbol","~$module$node_modules$react$lib$ReactCurrentOwner"]],"~:properties",["^5",[]],"~:compiled-at",1635270336760,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$traverseAllChildren.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react/lib/traverseAllChildren.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$traverseAllChildren\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\\nvar REACT_ELEMENT_TYPE = require('./ReactElementSymbol');\\n\\nvar getIteratorFn = require('./getIteratorFn');\\nvar invariant = require('fbjs/lib/invariant');\\nvar KeyEscapeUtils = require('./KeyEscapeUtils');\\nvar warning = require('fbjs/lib/warning');\\n\\nvar SEPARATOR = '.';\\nvar SUBSEPARATOR = ':';\\n\\n/**\\n * This is inlined from ReactElement since this file is shared between\\n * isomorphic and renderers. We could extract this to a\\n *\\n */\\n\\n/**\\n * TODO: Test that a single child and an array with one item have the same key\\n * pattern.\\n */\\n\\nvar didWarnAboutMaps = false;\\n\\n/**\\n * Generate a key string that identifies a component within a set.\\n *\\n * @param {*} component A component that could contain a manual key.\\n * @param {number} index Index that is used if a manual key is not provided.\\n * @return {string}\\n */\\nfunction getComponentKey(component, index) {\\n  // Do some typechecking here since we call this blindly. We want to ensure\\n  // that we don't block potential future ES APIs.\\n  if (component && typeof component === 'object' && component.key != null) {\\n    // Explicit key\\n    return KeyEscapeUtils.escape(component.key);\\n  }\\n  // Implicit key determined by the index in the set\\n  return index.toString(36);\\n}\\n\\n/**\\n * @param {?*} children Children tree container.\\n * @param {!string} nameSoFar Name of the key path so far.\\n * @param {!function} callback Callback to invoke with each child found.\\n * @param {?*} traverseContext Used to pass information throughout the traversal\\n * process.\\n * @return {!number} The number of children in this subtree.\\n */\\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\\n  var type = typeof children;\\n\\n  if (type === 'undefined' || type === 'boolean') {\\n    // All of the above are perceived as null.\\n    children = null;\\n  }\\n\\n  if (children === null || type === 'string' || type === 'number' ||\\n  // The following is inlined from ReactElement. This means we can optimize\\n  // some checks. React Fiber also inlines this logic for similar purposes.\\n  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {\\n    callback(traverseContext, children,\\n    // If it's the only child, treat the name as if it was wrapped in an array\\n    // so that it's consistent if the number of children grows.\\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\\n    return 1;\\n  }\\n\\n  var child;\\n  var nextName;\\n  var subtreeCount = 0; // Count of children found in the current subtree.\\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\\n\\n  if (Array.isArray(children)) {\\n    for (var i = 0; i < children.length; i++) {\\n      child = children[i];\\n      nextName = nextNamePrefix + getComponentKey(child, i);\\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\\n    }\\n  } else {\\n    var iteratorFn = getIteratorFn(children);\\n    if (iteratorFn) {\\n      var iterator = iteratorFn.call(children);\\n      var step;\\n      if (iteratorFn !== children.entries) {\\n        var ii = 0;\\n        while (!(step = iterator.next()).done) {\\n          child = step.value;\\n          nextName = nextNamePrefix + getComponentKey(child, ii++);\\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\\n        }\\n      } else {\\n        if (process.env.NODE_ENV !== 'production') {\\n          var mapsAsChildrenAddendum = '';\\n          if (ReactCurrentOwner.current) {\\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();\\n            if (mapsAsChildrenOwnerName) {\\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';\\n            }\\n          }\\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\\n          didWarnAboutMaps = true;\\n        }\\n        // Iterator will provide entry [k,v] tuples rather than values.\\n        while (!(step = iterator.next()).done) {\\n          var entry = step.value;\\n          if (entry) {\\n            child = entry[1];\\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\\n          }\\n        }\\n      }\\n    } else if (type === 'object') {\\n      var addendum = '';\\n      if (process.env.NODE_ENV !== 'production') {\\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\\n        if (children._isReactElement) {\\n          addendum = ' It looks like you\\\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\\n        }\\n        if (ReactCurrentOwner.current) {\\n          var name = ReactCurrentOwner.current.getName();\\n          if (name) {\\n            addendum += ' Check the render method of `' + name + '`.';\\n          }\\n        }\\n      }\\n      var childrenString = String(children);\\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\\n    }\\n  }\\n\\n  return subtreeCount;\\n}\\n\\n/**\\n * Traverses children that are typically specified as `props.children`, but\\n * might also be specified through attributes:\\n *\\n * - `traverseAllChildren(this.props.children, ...)`\\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\\n *\\n * The `traverseContext` is an optional argument that is passed through the\\n * entire traversal. It can be used to store accumulations or anything else that\\n * the callback might find relevant.\\n *\\n * @param {?*} children Children tree object.\\n * @param {!function} callback To invoke upon traversing each child.\\n * @param {?*} traverseContext Context for traversal.\\n * @return {!number} The number of children in this subtree.\\n */\\nfunction traverseAllChildren(children, callback, traverseContext) {\\n  if (children == null) {\\n    return 0;\\n  }\\n\\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\\n}\\n\\nmodule.exports = traverseAllChildren;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getComponentKey\",\"component\",\"index\",\"key\",\"KeyEscapeUtils\",\"escape\",\"toString\",\"traverseAllChildrenImpl\",\"children\",\"nameSoFar\",\"callback\",\"traverseContext\",\"type\",\"$$typeof\",\"REACT_ELEMENT_TYPE\",\"SEPARATOR\",\"subtreeCount\",\"nextNamePrefix\",\"SUBSEPARATOR\",\"Array\",\"isArray\",\"i\",\"length\",\"child\",\"nextName\",\"iteratorFn\",\"getIteratorFn\",\"iterator\",\"call\",\"entries\",\"ii\",\"done\",\"step\",\"next\",\"value\",\"mapsAsChildrenAddendum\",\"ReactCurrentOwner\",\"current\",\"mapsAsChildrenOwnerName\",\"getName\",\"warning\",\"didWarnAboutMaps\",\"entry\",\"addendum\",\"_isReactElement\",\"name\",\"childrenString\",\"String\",\"invariant\",\"Object\",\"keys\",\"join\",\"traverseAllChildren\"]\n}\n"]