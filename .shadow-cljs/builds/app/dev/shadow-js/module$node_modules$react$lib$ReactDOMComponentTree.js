["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/ReactDOMComponentTree.js"],"~:js","shadow$provide.module$node_modules$react$lib$ReactDOMComponentTree=function(global,require,module,exports){function getRenderedHostOrTextFromComponent(component){for(var rendered;rendered=component._renderedComponent;)component=rendered;return component}function precacheNode(inst,node){inst=getRenderedHostOrTextFromComponent(inst);inst._hostNode=node;node[internalInstanceKey]=inst}function precacheChildNodes(inst,node){if(!(inst._flags&Flags.hasCachedChildNodes)){var children=inst._renderedChildren;\nnode=node.firstChild;var name;a:for(name in children)if(children.hasOwnProperty(name)){var childInst=children[name],childID=getRenderedHostOrTextFromComponent(childInst)._domID;if(0!==childID){for(;null!==node;node=node.nextSibling)if(1===node.nodeType&&node.getAttribute(ATTR_NAME)===String(childID)||8===node.nodeType&&node.nodeValue===\" react-text: \"+childID+\" \"||8===node.nodeType&&node.nodeValue===\" react-empty: \"+childID+\" \"){precacheNode(childInst,node);continue a}invariant(!1,\"Unable to find element with ID %s.\",\nchildID)}}inst._flags|=Flags.hasCachedChildNodes}}function getClosestInstanceFromNode(node){if(node[internalInstanceKey])return node[internalInstanceKey];for(var parents=[];!node[internalInstanceKey];)if(parents.push(node),node.parentNode)node=node.parentNode;else return null;for(var closest,inst;node&&(inst=node[internalInstanceKey]);node=parents.pop())closest=inst,parents.length&&precacheChildNodes(inst,node);return closest}require(\"module$node_modules$react$lib$reactProdInvariant\");global=require(\"module$node_modules$react$lib$DOMProperty\");\nexports=require(\"module$node_modules$react$lib$ReactDOMComponentFlags\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\"),ATTR_NAME=global.ID_ATTRIBUTE_NAME,Flags=exports,internalInstanceKey=\"__reactInternalInstance$\"+Math.random().toString(36).slice(2);module.exports={getClosestInstanceFromNode,getInstanceFromNode:function(node){var inst=getClosestInstanceFromNode(node);return null!=inst&&inst._hostNode===node?inst:null},getNodeFromInstance:function(inst){void 0===inst._hostNode?invariant(!1,\n\"getNodeFromInstance: Invalid argument.\"):void 0;if(inst._hostNode)return inst._hostNode;for(var parents=[];!inst._hostNode;)parents.push(inst),inst._hostParent?void 0:invariant(!1,\"React DOM tree root should always have a node reference.\"),inst=inst._hostParent;for(;parents.length;inst=parents.pop())precacheChildNodes(inst,inst._hostNode);return inst._hostNode},precacheChildNodes,precacheNode,uncacheNode:function(inst){var node=inst._hostNode;node&&(delete node[internalInstanceKey],inst._hostNode=\nnull)}}}","~:source","shadow$provide[\"module$node_modules$react$lib$ReactDOMComponentTree\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponentTree\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar Flags = ReactDOMComponentFlags;\n\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\n\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n  while (rendered = component._renderedComponent) {\n    component = rendered;\n  }\n  return component;\n}\n\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\nfunction precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}\n\nfunction uncacheNode(inst) {\n  var node = inst._hostNode;\n  if (node) {\n    delete node[internalInstanceKey];\n    inst._hostNode = null;\n  }\n}\n\n/**\n * Populate `_hostNode` on each child of `inst`, assuming that the children\n * match up with the DOM (element) children of `node`.\n *\n * We cache entire levels at once to avoid an n^2 problem where we access the\n * children of a node sequentially and have to walk from the start to our target\n * node every time.\n *\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\n * different times, we could race here and see a newer `_renderedChildren` than\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\n * time the container's child nodes are always cached (until it unmounts).\n */\nfunction precacheChildNodes(inst, node) {\n  if (inst._flags & Flags.hasCachedChildNodes) {\n    return;\n  }\n  var children = inst._renderedChildren;\n  var childNode = node.firstChild;\n  outer: for (var name in children) {\n    if (!children.hasOwnProperty(name)) {\n      continue;\n    }\n    var childInst = children[name];\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\n    if (childID === 0) {\n      // We're currently unmounting this child in ReactMultiChild; skip it.\n      continue;\n    }\n    // We assume the child nodes are in the same order as the child instances.\n    for (; childNode !== null; childNode = childNode.nextSibling) {\n      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {\n        precacheNode(childInst, childNode);\n        continue outer;\n      }\n    }\n    // We reached the end of the DOM children without finding an ID match.\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }\n  inst._flags |= Flags.hasCachedChildNodes;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  // Walk up the tree until we find an ancestor whose instance we have cached.\n  var parents = [];\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var closest;\n  var inst;\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n    if (parents.length) {\n      precacheChildNodes(inst, node);\n    }\n  }\n\n  return closest;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode(node) {\n  var inst = getClosestInstanceFromNode(node);\n  if (inst != null && inst._hostNode === node) {\n    return inst;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance(inst) {\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n\n  if (inst._hostNode) {\n    return inst._hostNode;\n  }\n\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.\n  var parents = [];\n  while (!inst._hostNode) {\n    parents.push(inst);\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;\n  }\n\n  // Now parents contains each ancestor that does *not* have a cached native\n  // node, and `inst` is the deepest ancestor that does.\n  for (; parents.length; inst = parents.pop()) {\n    precacheChildNodes(inst, inst._hostNode);\n  }\n\n  return inst._hostNode;\n}\n\nvar ReactDOMComponentTree = {\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\n  getInstanceFromNode: getInstanceFromNode,\n  getNodeFromInstance: getNodeFromInstance,\n  precacheChildNodes: precacheChildNodes,\n  precacheNode: precacheNode,\n  uncacheNode: uncacheNode\n};\n\nmodule.exports = ReactDOMComponentTree;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$DOMProperty","~$module$node_modules$react$lib$ReactDOMComponentFlags","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react$lib$reactProdInvariant"]],"~:properties",["^5",["precacheNode","uncacheNode","precacheChildNodes","_flags","getInstanceFromNode","_hostNode","getClosestInstanceFromNode","getNodeFromInstance"]],"~:compiled-at",1635250628375,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$ReactDOMComponentTree.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react/lib/ReactDOMComponentTree.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$ReactDOMComponentTree\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule ReactDOMComponentTree\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar DOMProperty = require('./DOMProperty');\\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\\nvar Flags = ReactDOMComponentFlags;\\n\\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\\n\\n/**\\n * Drill down (through composites and empty components) until we get a host or\\n * host text component.\\n *\\n * This is pretty polymorphic but unavoidable with the current structure we have\\n * for `_renderedChildren`.\\n */\\nfunction getRenderedHostOrTextFromComponent(component) {\\n  var rendered;\\n  while (rendered = component._renderedComponent) {\\n    component = rendered;\\n  }\\n  return component;\\n}\\n\\n/**\\n * Populate `_hostNode` on the rendered host/text component with the given\\n * DOM node. The passed `inst` can be a composite.\\n */\\nfunction precacheNode(inst, node) {\\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\\n  hostInst._hostNode = node;\\n  node[internalInstanceKey] = hostInst;\\n}\\n\\nfunction uncacheNode(inst) {\\n  var node = inst._hostNode;\\n  if (node) {\\n    delete node[internalInstanceKey];\\n    inst._hostNode = null;\\n  }\\n}\\n\\n/**\\n * Populate `_hostNode` on each child of `inst`, assuming that the children\\n * match up with the DOM (element) children of `node`.\\n *\\n * We cache entire levels at once to avoid an n^2 problem where we access the\\n * children of a node sequentially and have to walk from the start to our target\\n * node every time.\\n *\\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\\n * different times, we could race here and see a newer `_renderedChildren` than\\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\\n * time the container's child nodes are always cached (until it unmounts).\\n */\\nfunction precacheChildNodes(inst, node) {\\n  if (inst._flags & Flags.hasCachedChildNodes) {\\n    return;\\n  }\\n  var children = inst._renderedChildren;\\n  var childNode = node.firstChild;\\n  outer: for (var name in children) {\\n    if (!children.hasOwnProperty(name)) {\\n      continue;\\n    }\\n    var childInst = children[name];\\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\\n    if (childID === 0) {\\n      // We're currently unmounting this child in ReactMultiChild; skip it.\\n      continue;\\n    }\\n    // We assume the child nodes are in the same order as the child instances.\\n    for (; childNode !== null; childNode = childNode.nextSibling) {\\n      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {\\n        precacheNode(childInst, childNode);\\n        continue outer;\\n      }\\n    }\\n    // We reached the end of the DOM children without finding an ID match.\\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\\n  }\\n  inst._flags |= Flags.hasCachedChildNodes;\\n}\\n\\n/**\\n * Given a DOM node, return the closest ReactDOMComponent or\\n * ReactDOMTextComponent instance ancestor.\\n */\\nfunction getClosestInstanceFromNode(node) {\\n  if (node[internalInstanceKey]) {\\n    return node[internalInstanceKey];\\n  }\\n\\n  // Walk up the tree until we find an ancestor whose instance we have cached.\\n  var parents = [];\\n  while (!node[internalInstanceKey]) {\\n    parents.push(node);\\n    if (node.parentNode) {\\n      node = node.parentNode;\\n    } else {\\n      // Top of the tree. This node must not be part of a React tree (or is\\n      // unmounted, potentially).\\n      return null;\\n    }\\n  }\\n\\n  var closest;\\n  var inst;\\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\\n    closest = inst;\\n    if (parents.length) {\\n      precacheChildNodes(inst, node);\\n    }\\n  }\\n\\n  return closest;\\n}\\n\\n/**\\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\\n * instance, or null if the node was not rendered by this React.\\n */\\nfunction getInstanceFromNode(node) {\\n  var inst = getClosestInstanceFromNode(node);\\n  if (inst != null && inst._hostNode === node) {\\n    return inst;\\n  } else {\\n    return null;\\n  }\\n}\\n\\n/**\\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\\n * DOM node.\\n */\\nfunction getNodeFromInstance(inst) {\\n  // Without this first invariant, passing a non-DOM-component triggers the next\\n  // invariant for a missing parent, which is super confusing.\\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\\n\\n  if (inst._hostNode) {\\n    return inst._hostNode;\\n  }\\n\\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.\\n  var parents = [];\\n  while (!inst._hostNode) {\\n    parents.push(inst);\\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\\n    inst = inst._hostParent;\\n  }\\n\\n  // Now parents contains each ancestor that does *not* have a cached native\\n  // node, and `inst` is the deepest ancestor that does.\\n  for (; parents.length; inst = parents.pop()) {\\n    precacheChildNodes(inst, inst._hostNode);\\n  }\\n\\n  return inst._hostNode;\\n}\\n\\nvar ReactDOMComponentTree = {\\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\\n  getInstanceFromNode: getInstanceFromNode,\\n  getNodeFromInstance: getNodeFromInstance,\\n  precacheChildNodes: precacheChildNodes,\\n  precacheNode: precacheNode,\\n  uncacheNode: uncacheNode\\n};\\n\\nmodule.exports = ReactDOMComponentTree;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getRenderedHostOrTextFromComponent\",\"component\",\"rendered\",\"_renderedComponent\",\"precacheNode\",\"inst\",\"node\",\"hostInst\",\"_hostNode\",\"internalInstanceKey\",\"precacheChildNodes\",\"_flags\",\"Flags\",\"hasCachedChildNodes\",\"children\",\"_renderedChildren\",\"childNode\",\"firstChild\",\"name\",\"hasOwnProperty\",\"childInst\",\"childID\",\"_domID\",\"nextSibling\",\"nodeType\",\"getAttribute\",\"ATTR_NAME\",\"String\",\"nodeValue\",\"invariant\",\"getClosestInstanceFromNode\",\"parents\",\"push\",\"parentNode\",\"closest\",\"pop\",\"length\",\"DOMProperty\",\"ReactDOMComponentFlags\",\"ID_ATTRIBUTE_NAME\",\"Math\",\"random\",\"toString\",\"slice\",\"ReactDOMComponentTree\",\"getInstanceFromNode\",\"getNodeFromInstance\",\"undefined\",\"_hostParent\",\"uncacheNode\"]\n}\n"]