["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/dangerousStyleValue.js"],"~:js","shadow$provide.module$node_modules$react$lib$dangerousStyleValue=function(global,require,module,exports){global=require(\"module$node_modules$react$lib$CSSProperty\");var warning=require(\"module$node_modules$fbjs$lib$warning\"),isUnitlessNumber=global.isUnitlessNumber,styleWarnings={};module.exports=function(name,value,component){if(null==value||\"boolean\"===typeof value||\"\"===value)return\"\";if(isNaN(value)||0===value||isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name])return\"\"+value;if(\"string\"===\ntypeof value){if(component&&\"0\"!==value){var owner=component._currentElement._owner;(owner=owner?owner.getName():null)&&!styleWarnings[owner]&&(styleWarnings[owner]={});var warned=!1;if(owner){var warnings=styleWarnings[owner];(warned=warnings[name])||(warnings[name]=!0)}warned||warning(!1,\"a `%s` tag (owner: `%s`) was passed a numeric string value for CSS property `%s` (value: `%s`) which will be treated as a unitless number in a future version of React.\",component._currentElement.type,owner||\"unknown\",\nname,value)}value=value.trim()}return value+\"px\"}}","~:source","shadow$provide[\"module$node_modules$react$lib$dangerousStyleValue\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\nvar warning = require('fbjs/lib/warning');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\nvar styleWarnings = {};\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @param {ReactDOMComponent} component\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, component) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      // Allow '0' to pass through without warning. 0 is already special and\n      // doesn't require units, so we don't need to warn about it.\n      if (component && value !== '0') {\n        var owner = component._currentElement._owner;\n        var ownerName = owner ? owner.getName() : null;\n        if (ownerName && !styleWarnings[ownerName]) {\n          styleWarnings[ownerName] = {};\n        }\n        var warned = false;\n        if (ownerName) {\n          var warnings = styleWarnings[ownerName];\n          warned = warnings[name];\n          if (!warned) {\n            warnings[name] = true;\n          }\n        }\n        if (!warned) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;\n        }\n      }\n    }\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$react$lib$CSSProperty","~$module$node_modules$fbjs$lib$warning"]],"~:properties",["^5",[]],"~:compiled-at",1635250628395,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$dangerousStyleValue.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc1GC,MAAAA,CAAcH,OAAA,CAAQ,2CAAR,CAClB,KAAII,QAAUJ,OAAA,CAAQ,sCAAR,CAAd,CAEIK,iBAAmBF,MAAYE,CAAAA,gBAFnC,CAGIC,cAAgB,EA6DpBL,OAAOC,CAAAA,OAAP,CAjDAK,QAA4B,CAACC,IAAD,CAAOC,KAAP,CAAcC,SAAd,CAAyB,CAYnD,GADuB,IACvB,EADcD,KACd,EADgD,SAChD,GAD+B,MAAOA,MACtC,EADuE,EACvE,GAD6DA,KAC7D,CACE,MAAO,EAIT,IADmBE,KAAAC,CAAMH,KAANG,CACnB,EAA8B,CAA9B,GAAoBH,KAApB,EAAmCJ,gBAAiBQ,CAAAA,cAAjB,CAAgCL,IAAhC,CAAnC,EAA4EH,gBAAA,CAAiBG,IAAjB,CAA5E,CACE,MAAO,EAAP,CAAYC,KAGd,IAAqB,QAArB;AAAI,MAAOA,MAAX,CAA+B,CAI3B,GAAIC,SAAJ,EAA2B,GAA3B,GAAiBD,KAAjB,CAAgC,CAC9B,IAAIK,MAAQJ,SAAUK,CAAAA,eAAgBC,CAAAA,MAEtC,EADIC,KACJ,CADgBH,KAAA,CAAQA,KAAMI,CAAAA,OAAN,EAAR,CAA0B,IAC1C,GAAiB,CAACZ,aAAA,CAAcW,KAAd,CAAlB,GACEX,aAAA,CAAcW,KAAd,CADF,CAC6B,EAD7B,CAGA,KAAIE,OAAS,CAAA,CACb,IAAIF,KAAJ,CAAe,CACb,IAAIG,SAAWd,aAAA,CAAcW,KAAd,CAEf,EADAE,MACA,CADSC,QAAA,CAASZ,IAAT,CACT,IACEY,QAAA,CAASZ,IAAT,CADF,CACmB,CAAA,CADnB,CAHa,CAOVW,MAAL,EAC0Cf,OAAA,CAAQ,CAAA,CAAR,CAAe,yKAAf,CAAoMM,SAAUK,CAAAA,eAAgBM,CAAAA,IAA9N,CAAoOJ,KAApO,EAAiP,SAAjP;AAA4PT,IAA5P,CAAkQC,KAAlQ,CAfZ,CAmBlCA,KAAA,CAAQA,KAAMa,CAAAA,IAAN,EAvBqB,CAyB/B,MAAOb,MAAP,CAAe,IA9CoC,CA9ByD;\",\n\"sources\":[\"node_modules/react/lib/dangerousStyleValue.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$dangerousStyleValue\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule dangerousStyleValue\\n */\\n\\n'use strict';\\n\\nvar CSSProperty = require('./CSSProperty');\\nvar warning = require('fbjs/lib/warning');\\n\\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\\nvar styleWarnings = {};\\n\\n/**\\n * Convert a value into the proper css writable value. The style name `name`\\n * should be logical (no hyphens), as specified\\n * in `CSSProperty.isUnitlessNumber`.\\n *\\n * @param {string} name CSS property name such as `topMargin`.\\n * @param {*} value CSS property value such as `10px`.\\n * @param {ReactDOMComponent} component\\n * @return {string} Normalized style value with dimensions applied.\\n */\\nfunction dangerousStyleValue(name, value, component) {\\n  // Note that we've removed escapeTextForBrowser() calls here since the\\n  // whole string will be escaped when the attribute is injected into\\n  // the markup. If you provide unsafe user data here they can inject\\n  // arbitrary CSS which may be problematic (I couldn't repro this):\\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\\n  // This is not an XSS hole but instead a potential CSS injection issue\\n  // which has lead to a greater discussion about how we're going to\\n  // trust URLs moving forward. See #2115901\\n\\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\\n  if (isEmpty) {\\n    return '';\\n  }\\n\\n  var isNonNumeric = isNaN(value);\\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\\n    return '' + value; // cast to string\\n  }\\n\\n  if (typeof value === 'string') {\\n    if (process.env.NODE_ENV !== 'production') {\\n      // Allow '0' to pass through without warning. 0 is already special and\\n      // doesn't require units, so we don't need to warn about it.\\n      if (component && value !== '0') {\\n        var owner = component._currentElement._owner;\\n        var ownerName = owner ? owner.getName() : null;\\n        if (ownerName && !styleWarnings[ownerName]) {\\n          styleWarnings[ownerName] = {};\\n        }\\n        var warned = false;\\n        if (ownerName) {\\n          var warnings = styleWarnings[ownerName];\\n          warned = warnings[name];\\n          if (!warned) {\\n            warnings[name] = true;\\n          }\\n        }\\n        if (!warned) {\\n          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;\\n        }\\n      }\\n    }\\n    value = value.trim();\\n  }\\n  return value + 'px';\\n}\\n\\nmodule.exports = dangerousStyleValue;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"CSSProperty\",\"warning\",\"isUnitlessNumber\",\"styleWarnings\",\"dangerousStyleValue\",\"name\",\"value\",\"component\",\"isNaN\",\"isNonNumeric\",\"hasOwnProperty\",\"owner\",\"_currentElement\",\"_owner\",\"ownerName\",\"getName\",\"warned\",\"warnings\",\"type\",\"trim\"]\n}\n"]