["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/EnterLeaveEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react$lib$EnterLeaveEventPlugin=function(global,require,module,exports){global=require(\"module$node_modules$react$lib$EventConstants\");var EventPropagators=require(\"module$node_modules$react$lib$EventPropagators\"),ReactDOMComponentTree=require(\"module$node_modules$react$lib$ReactDOMComponentTree\"),SyntheticMouseEvent=require(\"module$node_modules$react$lib$SyntheticMouseEvent\");require=require(\"module$node_modules$fbjs$lib$keyOf\");var topLevelTypes=global.topLevelTypes,\neventTypes={mouseEnter:{registrationName:require({onMouseEnter:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]},mouseLeave:{registrationName:require({onMouseLeave:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]}};module.exports={eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){if(topLevelType===topLevelTypes.topMouseOver&&(nativeEvent.relatedTarget||nativeEvent.fromElement)||topLevelType!==topLevelTypes.topMouseOut&&\ntopLevelType!==topLevelTypes.topMouseOver)return null;var win=nativeEventTarget.window===nativeEventTarget?nativeEventTarget:(win=nativeEventTarget.ownerDocument)?win.defaultView||win.parentWindow:window;topLevelType===topLevelTypes.topMouseOut?(topLevelType=targetInst,targetInst=(targetInst=nativeEvent.relatedTarget||nativeEvent.toElement)?ReactDOMComponentTree.getClosestInstanceFromNode(targetInst):null):topLevelType=null;if(topLevelType===targetInst)return null;var fromNode=null==topLevelType?\nwin:ReactDOMComponentTree.getNodeFromInstance(topLevelType);win=null==targetInst?win:ReactDOMComponentTree.getNodeFromInstance(targetInst);var leave=SyntheticMouseEvent.getPooled(eventTypes.mouseLeave,topLevelType,nativeEvent,nativeEventTarget);leave.type=\"mouseleave\";leave.target=fromNode;leave.relatedTarget=win;nativeEvent=SyntheticMouseEvent.getPooled(eventTypes.mouseEnter,targetInst,nativeEvent,nativeEventTarget);nativeEvent.type=\"mouseenter\";nativeEvent.target=win;nativeEvent.relatedTarget=fromNode;\nEventPropagators.accumulateEnterLeaveDispatches(leave,nativeEvent,topLevelType,targetInst);return[leave,nativeEvent]}}}","~:source","shadow$provide[\"module$node_modules$react$lib$EnterLeaveEventPlugin\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({ onMouseEnter: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  },\n  mouseLeave: {\n    registrationName: keyOf({ onMouseLeave: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  }\n};\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$ReactDOMComponentTree","~$shadow.js","~$module$node_modules$react$lib$SyntheticMouseEvent","~$module$node_modules$react$lib$EventConstants","~$module$node_modules$react$lib$EventPropagators","~$module$node_modules$fbjs$lib$keyOf"]],"~:properties",["^5",["registrationName","dependencies","relatedTarget","mouseLeave","onMouseLeave","eventTypes","type","onMouseEnter","target","mouseEnter","extractEvents"]],"~:compiled-at",1635250628391,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$EnterLeaveEventPlugin.js\",\n\"lineCount\":5,\n\"mappings\":\"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc5GC,MAAAA,CAAiBH,OAAA,CAAQ,8CAAR,CACrB,KAAII,iBAAmBJ,OAAA,CAAQ,gDAAR,CAAvB,CACIK,sBAAwBL,OAAA,CAAQ,qDAAR,CAD5B,CAEIM,oBAAsBN,OAAA,CAAQ,mDAAR,CAEtBO,QAAAA,CAAQP,OAAA,CAAQ,oCAAR,CAEZ,KAAIQ,cAAgBL,MAAeK,CAAAA,aAAnC;AAEIC,WAAa,CACfC,WAAY,CACVC,iBAAkBJ,OAAA,CAAM,CAAEK,aAAc,IAAhB,CAAN,CADR,CAEVC,aAAc,CAACL,aAAcM,CAAAA,WAAf,CAA4BN,aAAcO,CAAAA,YAA1C,CAFJ,CADG,CAKfC,WAAY,CACVL,iBAAkBJ,OAAA,CAAM,CAAEU,aAAc,IAAhB,CAAN,CADR,CAEVJ,aAAc,CAACL,aAAcM,CAAAA,WAAf,CAA4BN,aAAcO,CAAAA,YAA1C,CAFJ,CALG,CAkFjBd,OAAOC,CAAAA,OAAP,CAvE4BgB,CAEdT,UAFcS,CAW1BC,cAAeA,QAAS,CAACC,YAAD,CAAeC,UAAf,CAA2BC,WAA3B,CAAwCC,iBAAxC,CAA2D,CAIjF,GAHIH,YAGJ,GAHqBZ,aAAcO,CAAAA,YAGnC,GAHoDO,WAAYE,CAAAA,aAGhE,EAHiFF,WAAYG,CAAAA,WAG7F,GAAIL,YAAJ,GAAqBZ,aAAcM,CAAAA,WAAnC;AAAkDM,YAAlD,GAAmEZ,aAAcO,CAAAA,YAAjF,CAEE,MAAO,KAMP,KAAAW,IAFEH,iBAAkBI,CAAAA,MAAtB,GAAiCJ,iBAAjC,CAEQA,iBAFR,CAME,CADIK,GACJ,CADUL,iBAAkBM,CAAAA,aAC5B,EACQD,GAAIE,CAAAA,WADZ,EAC2BF,GAAIG,CAAAA,YAD/B,CAGQJ,MAMNP,aAAJ,GAAqBZ,aAAcM,CAAAA,WAAnC,EACEkB,YAEA,CAFOX,UAEP,CAAAY,UAAA,CAAK,CADDC,UACC,CADSZ,WAAYE,CAAAA,aACrB,EADsCF,WAAYa,CAAAA,SAClD,EAAU9B,qBAAsB+B,CAAAA,0BAAtB,CAAiDF,UAAjD,CAAV,CAAsE,IAH7E,EAMEF,YANF,CAMS,IAIT,IAAIA,YAAJ,GAAaC,UAAb,CAEE,MAAO,KAGT,KAAII,SAAmB,IAAR,EAAAL,YAAA;AAAeN,GAAf,CAAqBrB,qBAAsBiC,CAAAA,mBAAtB,CAA0CN,YAA1C,CAChCO,IAAAA,CAAe,IAAN,EAAAN,UAAA,CAAaP,GAAb,CAAmBrB,qBAAsBiC,CAAAA,mBAAtB,CAA0CL,UAA1C,CAEhC,KAAIO,MAAQlC,mBAAoBmC,CAAAA,SAApB,CAA8BhC,UAAWO,CAAAA,UAAzC,CAAqDgB,YAArD,CAA2DV,WAA3D,CAAwEC,iBAAxE,CACZiB,MAAME,CAAAA,IAAN,CAAa,YACbF,MAAMG,CAAAA,MAAN,CAAeN,QACfG,MAAMhB,CAAAA,aAAN,CAAsBe,GAElBK,YAAAA,CAAQtC,mBAAoBmC,CAAAA,SAApB,CAA8BhC,UAAWC,CAAAA,UAAzC,CAAqDuB,UAArD,CAAyDX,WAAzD,CAAsEC,iBAAtE,CACZqB,YAAMF,CAAAA,IAAN,CAAa,YACbE,YAAMD,CAAAA,MAAN,CAAeJ,GACfK,YAAMpB,CAAAA,aAAN,CAAsBa,QAEtBjC;gBAAiByC,CAAAA,8BAAjB,CAAgDL,KAAhD,CAAuDI,WAAvD,CAA8DZ,YAA9D,CAAoEC,UAApE,CAEA,OAAO,CAACO,KAAD,CAAQI,WAAR,CAvD0E,CAXzD1B,CAlCoF;\",\n\"sources\":[\"node_modules/react/lib/EnterLeaveEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$EnterLeaveEventPlugin\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule EnterLeaveEventPlugin\\n */\\n\\n'use strict';\\n\\nvar EventConstants = require('./EventConstants');\\nvar EventPropagators = require('./EventPropagators');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\\n\\nvar keyOf = require('fbjs/lib/keyOf');\\n\\nvar topLevelTypes = EventConstants.topLevelTypes;\\n\\nvar eventTypes = {\\n  mouseEnter: {\\n    registrationName: keyOf({ onMouseEnter: null }),\\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\\n  },\\n  mouseLeave: {\\n    registrationName: keyOf({ onMouseLeave: null }),\\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\\n  }\\n};\\n\\nvar EnterLeaveEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  /**\\n   * For almost every interaction we care about, there will be both a top-level\\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\\n   * we do not extract duplicate events. However, moving the mouse into the\\n   * browser from outside will not fire a `mouseout` event. In this case, we use\\n   * the `mouseover` top-level event.\\n   */\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\\n      return null;\\n    }\\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\\n      // Must not be a mouse in or mouse out - ignoring.\\n      return null;\\n    }\\n\\n    var win;\\n    if (nativeEventTarget.window === nativeEventTarget) {\\n      // `nativeEventTarget` is probably a window object.\\n      win = nativeEventTarget;\\n    } else {\\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\\n      var doc = nativeEventTarget.ownerDocument;\\n      if (doc) {\\n        win = doc.defaultView || doc.parentWindow;\\n      } else {\\n        win = window;\\n      }\\n    }\\n\\n    var from;\\n    var to;\\n    if (topLevelType === topLevelTypes.topMouseOut) {\\n      from = targetInst;\\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\\n    } else {\\n      // Moving to a node from outside the window.\\n      from = null;\\n      to = targetInst;\\n    }\\n\\n    if (from === to) {\\n      // Nothing pertains to our managed components.\\n      return null;\\n    }\\n\\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\\n\\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\\n    leave.type = 'mouseleave';\\n    leave.target = fromNode;\\n    leave.relatedTarget = toNode;\\n\\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\\n    enter.type = 'mouseenter';\\n    enter.target = toNode;\\n    enter.relatedTarget = fromNode;\\n\\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\\n\\n    return [leave, enter];\\n  }\\n\\n};\\n\\nmodule.exports = EnterLeaveEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"EventConstants\",\"EventPropagators\",\"ReactDOMComponentTree\",\"SyntheticMouseEvent\",\"keyOf\",\"topLevelTypes\",\"eventTypes\",\"mouseEnter\",\"registrationName\",\"onMouseEnter\",\"dependencies\",\"topMouseOut\",\"topMouseOver\",\"mouseLeave\",\"onMouseLeave\",\"EnterLeaveEventPlugin\",\"extractEvents\",\"topLevelType\",\"targetInst\",\"nativeEvent\",\"nativeEventTarget\",\"relatedTarget\",\"fromElement\",\"win\",\"window\",\"doc\",\"ownerDocument\",\"defaultView\",\"parentWindow\",\"from\",\"to\",\"related\",\"toElement\",\"getClosestInstanceFromNode\",\"fromNode\",\"getNodeFromInstance\",\"toNode\",\"leave\",\"getPooled\",\"type\",\"target\",\"enter\",\"accumulateEnterLeaveDispatches\"]\n}\n"]