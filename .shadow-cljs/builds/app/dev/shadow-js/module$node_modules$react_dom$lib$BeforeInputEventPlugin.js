["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/BeforeInputEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$BeforeInputEventPlugin=function(global,process,require,module,exports,shadow$shims){function isPresto(){var opera=window.opera;return\"object\"===typeof opera&&\"function\"===typeof opera.version&&12>=parseInt(opera.version(),10)}function isFallbackCompositionEnd(topLevelType,nativeEvent){switch(topLevelType){case \"topKeyUp\":return-1!==END_KEYCODES.indexOf(nativeEvent.keyCode);case \"topKeyDown\":return 229!==nativeEvent.keyCode;case \"topKeyPress\":case \"topMouseDown\":case \"topBlur\":return!0;\ndefault:return!1}}function getDataFromCustomEvent(nativeEvent){nativeEvent=nativeEvent.detail;return\"object\"===typeof nativeEvent&&\"data\"in nativeEvent?nativeEvent.data:null}function getNativeBeforeInputChars(topLevelType,nativeEvent){switch(topLevelType){case \"topCompositionEnd\":return getDataFromCustomEvent(nativeEvent);case \"topKeyPress\":if(32!==nativeEvent.which)return null;hasSpaceKeypress=!0;return SPACEBAR_CHAR;case \"topTextInput\":return topLevelType=nativeEvent.data,topLevelType===SPACEBAR_CHAR&&\nhasSpaceKeypress?null:topLevelType;default:return null}}function getFallbackBeforeInputChars(topLevelType,nativeEvent){if(currentComposition)return\"topCompositionEnd\"===topLevelType||!canUseCompositionEvent&&isFallbackCompositionEnd(topLevelType,nativeEvent)?(topLevelType=currentComposition.getData(),FallbackCompositionState.release(currentComposition),currentComposition=null,topLevelType):null;switch(topLevelType){case \"topPaste\":return null;case \"topKeyPress\":return nativeEvent.which&&(!(nativeEvent.ctrlKey||\nnativeEvent.altKey||nativeEvent.metaKey)||nativeEvent.ctrlKey&&nativeEvent.altKey)?String.fromCharCode(nativeEvent.which):null;case \"topCompositionEnd\":return useFallbackCompositionData?null:nativeEvent.data;default:return null}}var EventPropagators=require(\"module$node_modules$react_dom$lib$EventPropagators\");global=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var FallbackCompositionState=require(\"module$node_modules$react_dom$lib$FallbackCompositionState\"),SyntheticCompositionEvent=\nrequire(\"module$node_modules$react_dom$lib$SyntheticCompositionEvent\"),SyntheticInputEvent=require(\"module$node_modules$react_dom$lib$SyntheticInputEvent\"),END_KEYCODES=[9,13,27,32],canUseCompositionEvent=global.canUseDOM&&\"CompositionEvent\"in window;require=null;global.canUseDOM&&\"documentMode\"in document&&(require=document.documentMode);var canUseTextInputEvent=global.canUseDOM&&\"TextEvent\"in window&&!require&&!isPresto(),useFallbackCompositionData=global.canUseDOM&&(!canUseCompositionEvent||require&&\n8<require&&11>=require),SPACEBAR_CHAR=String.fromCharCode(32),eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:\"onBeforeInput\",captured:\"onBeforeInputCapture\"},dependencies:[\"topCompositionEnd\",\"topKeyPress\",\"topTextInput\",\"topPaste\"]},compositionEnd:{phasedRegistrationNames:{bubbled:\"onCompositionEnd\",captured:\"onCompositionEndCapture\"},dependencies:\"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionStart:{phasedRegistrationNames:{bubbled:\"onCompositionStart\",\ncaptured:\"onCompositionStartCapture\"},dependencies:\"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionUpdate:{phasedRegistrationNames:{bubbled:\"onCompositionUpdate\",captured:\"onCompositionUpdateCapture\"},dependencies:\"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")}},hasSpaceKeypress=!1,currentComposition=null;module.exports={eventTypes:eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var JSCompiler_inline_result;\nif(canUseCompositionEvent)b:{switch(topLevelType){case \"topCompositionStart\":var eventType=eventTypes.compositionStart;break b;case \"topCompositionEnd\":eventType=eventTypes.compositionEnd;break b;case \"topCompositionUpdate\":eventType=eventTypes.compositionUpdate;break b}eventType=void 0}else currentComposition?isFallbackCompositionEnd(topLevelType,nativeEvent)&&(eventType=eventTypes.compositionEnd):\"topKeyDown\"===topLevelType&&229===nativeEvent.keyCode&&(eventType=eventTypes.compositionStart);eventType?\n(useFallbackCompositionData&&(currentComposition||eventType!==eventTypes.compositionStart?eventType===eventTypes.compositionEnd&&currentComposition&&(JSCompiler_inline_result=currentComposition.getData()):currentComposition=FallbackCompositionState.getPooled(nativeEventTarget)),eventType=SyntheticCompositionEvent.getPooled(eventType,targetInst,nativeEvent,nativeEventTarget),JSCompiler_inline_result?eventType.data=JSCompiler_inline_result:(JSCompiler_inline_result=getDataFromCustomEvent(nativeEvent),\nnull!==JSCompiler_inline_result&&(eventType.data=JSCompiler_inline_result)),EventPropagators.accumulateTwoPhaseDispatches(eventType),JSCompiler_inline_result=eventType):JSCompiler_inline_result=null;(topLevelType=canUseTextInputEvent?getNativeBeforeInputChars(topLevelType,nativeEvent):getFallbackBeforeInputChars(topLevelType,nativeEvent))?(targetInst=SyntheticInputEvent.getPooled(eventTypes.beforeInput,targetInst,nativeEvent,nativeEventTarget),targetInst.data=topLevelType,EventPropagators.accumulateTwoPhaseDispatches(targetInst)):\ntargetInst=null;return[JSCompiler_inline_result,targetInst]}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$BeforeInputEventPlugin\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: 'onBeforeInput',\n      captured: 'onBeforeInputCapture'\n    },\n    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionEnd',\n      captured: 'onCompositionEndCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionStart',\n      captured: 'onCompositionStartCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionUpdate',\n      captured: 'onCompositionUpdateCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case 'topCompositionStart':\n      return eventTypes.compositionStart;\n    case 'topCompositionEnd':\n      return eventTypes.compositionEnd;\n    case 'topCompositionUpdate':\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topKeyUp':\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case 'topKeyDown':\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case 'topKeyPress':\n    case 'topMouseDown':\n    case 'topBlur':\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topCompositionEnd':\n      return getDataFromCustomEvent(nativeEvent);\n    case 'topKeyPress':\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case 'topTextInput':\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (currentComposition) {\n    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case 'topPaste':\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case 'topKeyPress':\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case 'topCompositionEnd':\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$SyntheticInputEvent","~$shadow.js","~$module$node_modules$react_dom$lib$EventPropagators","~$module$node_modules$fbjs$lib$ExecutionEnvironment","~$module$node_modules$react_dom$lib$SyntheticCompositionEvent","~$module$node_modules$react_dom$lib$FallbackCompositionState"]],"~:properties",["^5",["bubbled","dependencies","beforeInput","eventTypes","compositionEnd","captured","compositionUpdate","data","extractEvents","compositionStart","phasedRegistrationNames"]],"~:compiled-at",1635270336816,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$BeforeInputEventPlugin.js\",\n\"lineCount\":11,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-dom/lib/BeforeInputEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$BeforeInputEventPlugin\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar EventPropagators = require('./EventPropagators');\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\nvar FallbackCompositionState = require('./FallbackCompositionState');\\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\\n\\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\\nvar START_KEYCODE = 229;\\n\\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\\n\\nvar documentMode = null;\\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\\n  documentMode = document.documentMode;\\n}\\n\\n// Webkit offers a very useful `textInput` event that can be used to\\n// directly represent `beforeInput`. The IE `textinput` event is not as\\n// useful, so we don't use it.\\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\\n\\n// In IE9+, we have access to composition events, but the data supplied\\n// by the native compositionend event may be incorrect. Japanese ideographic\\n// spaces, for instance (\\\\u3000) are not recorded correctly.\\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\\n\\n/**\\n * Opera <= 12 includes TextEvent in window, but does not fire\\n * text input events. Rely on keypress instead.\\n */\\nfunction isPresto() {\\n  var opera = window.opera;\\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\\n}\\n\\nvar SPACEBAR_CODE = 32;\\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\\n\\n// Events and their corresponding property names.\\nvar eventTypes = {\\n  beforeInput: {\\n    phasedRegistrationNames: {\\n      bubbled: 'onBeforeInput',\\n      captured: 'onBeforeInputCapture'\\n    },\\n    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']\\n  },\\n  compositionEnd: {\\n    phasedRegistrationNames: {\\n      bubbled: 'onCompositionEnd',\\n      captured: 'onCompositionEndCapture'\\n    },\\n    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\\n  },\\n  compositionStart: {\\n    phasedRegistrationNames: {\\n      bubbled: 'onCompositionStart',\\n      captured: 'onCompositionStartCapture'\\n    },\\n    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\\n  },\\n  compositionUpdate: {\\n    phasedRegistrationNames: {\\n      bubbled: 'onCompositionUpdate',\\n      captured: 'onCompositionUpdateCapture'\\n    },\\n    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\\n  }\\n};\\n\\n// Track whether we've ever handled a keypress on the space key.\\nvar hasSpaceKeypress = false;\\n\\n/**\\n * Return whether a native keypress event is assumed to be a command.\\n * This is required because Firefox fires `keypress` events for key commands\\n * (cut, copy, select-all, etc.) even though no character is inserted.\\n */\\nfunction isKeypressCommand(nativeEvent) {\\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\\n}\\n\\n/**\\n * Translate native top level events into event types.\\n *\\n * @param {string} topLevelType\\n * @return {object}\\n */\\nfunction getCompositionEventType(topLevelType) {\\n  switch (topLevelType) {\\n    case 'topCompositionStart':\\n      return eventTypes.compositionStart;\\n    case 'topCompositionEnd':\\n      return eventTypes.compositionEnd;\\n    case 'topCompositionUpdate':\\n      return eventTypes.compositionUpdate;\\n  }\\n}\\n\\n/**\\n * Does our fallback best-guess model think this event signifies that\\n * composition has begun?\\n *\\n * @param {string} topLevelType\\n * @param {object} nativeEvent\\n * @return {boolean}\\n */\\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\\n  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\\n}\\n\\n/**\\n * Does our fallback mode think that this event is the end of composition?\\n *\\n * @param {string} topLevelType\\n * @param {object} nativeEvent\\n * @return {boolean}\\n */\\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\\n  switch (topLevelType) {\\n    case 'topKeyUp':\\n      // Command keys insert or clear IME input.\\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\\n    case 'topKeyDown':\\n      // Expect IME keyCode on each keydown. If we get any other\\n      // code we must have exited earlier.\\n      return nativeEvent.keyCode !== START_KEYCODE;\\n    case 'topKeyPress':\\n    case 'topMouseDown':\\n    case 'topBlur':\\n      // Events are not possible without cancelling IME.\\n      return true;\\n    default:\\n      return false;\\n  }\\n}\\n\\n/**\\n * Google Input Tools provides composition data via a CustomEvent,\\n * with the `data` property populated in the `detail` object. If this\\n * is available on the event object, use it. If not, this is a plain\\n * composition event and we have nothing special to extract.\\n *\\n * @param {object} nativeEvent\\n * @return {?string}\\n */\\nfunction getDataFromCustomEvent(nativeEvent) {\\n  var detail = nativeEvent.detail;\\n  if (typeof detail === 'object' && 'data' in detail) {\\n    return detail.data;\\n  }\\n  return null;\\n}\\n\\n// Track the current IME composition fallback object, if any.\\nvar currentComposition = null;\\n\\n/**\\n * @return {?object} A SyntheticCompositionEvent.\\n */\\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n  var eventType;\\n  var fallbackData;\\n\\n  if (canUseCompositionEvent) {\\n    eventType = getCompositionEventType(topLevelType);\\n  } else if (!currentComposition) {\\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\\n      eventType = eventTypes.compositionStart;\\n    }\\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\\n    eventType = eventTypes.compositionEnd;\\n  }\\n\\n  if (!eventType) {\\n    return null;\\n  }\\n\\n  if (useFallbackCompositionData) {\\n    // The current composition is stored statically and must not be\\n    // overwritten while composition continues.\\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);\\n    } else if (eventType === eventTypes.compositionEnd) {\\n      if (currentComposition) {\\n        fallbackData = currentComposition.getData();\\n      }\\n    }\\n  }\\n\\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\\n\\n  if (fallbackData) {\\n    // Inject data generated from fallback path into the synthetic event.\\n    // This matches the property of native CompositionEventInterface.\\n    event.data = fallbackData;\\n  } else {\\n    var customData = getDataFromCustomEvent(nativeEvent);\\n    if (customData !== null) {\\n      event.data = customData;\\n    }\\n  }\\n\\n  EventPropagators.accumulateTwoPhaseDispatches(event);\\n  return event;\\n}\\n\\n/**\\n * @param {string} topLevelType Record from `EventConstants`.\\n * @param {object} nativeEvent Native browser event.\\n * @return {?string} The string corresponding to this `beforeInput` event.\\n */\\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\\n  switch (topLevelType) {\\n    case 'topCompositionEnd':\\n      return getDataFromCustomEvent(nativeEvent);\\n    case 'topKeyPress':\\n      /**\\n       * If native `textInput` events are available, our goal is to make\\n       * use of them. However, there is a special case: the spacebar key.\\n       * In Webkit, preventing default on a spacebar `textInput` event\\n       * cancels character insertion, but it *also* causes the browser\\n       * to fall back to its default spacebar behavior of scrolling the\\n       * page.\\n       *\\n       * Tracking at:\\n       * https://code.google.com/p/chromium/issues/detail?id=355103\\n       *\\n       * To avoid this issue, use the keypress event as if no `textInput`\\n       * event is available.\\n       */\\n      var which = nativeEvent.which;\\n      if (which !== SPACEBAR_CODE) {\\n        return null;\\n      }\\n\\n      hasSpaceKeypress = true;\\n      return SPACEBAR_CHAR;\\n\\n    case 'topTextInput':\\n      // Record the characters to be added to the DOM.\\n      var chars = nativeEvent.data;\\n\\n      // If it's a spacebar character, assume that we have already handled\\n      // it at the keypress level and bail immediately. Android Chrome\\n      // doesn't give us keycodes, so we need to blacklist it.\\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\\n        return null;\\n      }\\n\\n      return chars;\\n\\n    default:\\n      // For other native event types, do nothing.\\n      return null;\\n  }\\n}\\n\\n/**\\n * For browsers that do not provide the `textInput` event, extract the\\n * appropriate string to use for SyntheticInputEvent.\\n *\\n * @param {string} topLevelType Record from `EventConstants`.\\n * @param {object} nativeEvent Native browser event.\\n * @return {?string} The fallback string for this `beforeInput` event.\\n */\\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\\n  // If we are currently composing (IME) and using a fallback to do so,\\n  // try to extract the composed characters from the fallback object.\\n  // If composition event is available, we extract a string only at\\n  // compositionevent, otherwise extract it at fallback events.\\n  if (currentComposition) {\\n    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\\n      var chars = currentComposition.getData();\\n      FallbackCompositionState.release(currentComposition);\\n      currentComposition = null;\\n      return chars;\\n    }\\n    return null;\\n  }\\n\\n  switch (topLevelType) {\\n    case 'topPaste':\\n      // If a paste event occurs after a keypress, throw out the input\\n      // chars. Paste events should not lead to BeforeInput events.\\n      return null;\\n    case 'topKeyPress':\\n      /**\\n       * As of v27, Firefox may fire keypress events even when no character\\n       * will be inserted. A few possibilities:\\n       *\\n       * - `which` is `0`. Arrow keys, Esc key, etc.\\n       *\\n       * - `which` is the pressed key code, but no char is available.\\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\\n       *   this key combination and no character is inserted into the\\n       *   document, but FF fires the keypress for char code `100` anyway.\\n       *   No `input` event will occur.\\n       *\\n       * - `which` is the pressed key code, but a command combination is\\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\\n       *   `input` event will occur.\\n       */\\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\\n        return String.fromCharCode(nativeEvent.which);\\n      }\\n      return null;\\n    case 'topCompositionEnd':\\n      return useFallbackCompositionData ? null : nativeEvent.data;\\n    default:\\n      return null;\\n  }\\n}\\n\\n/**\\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\\n * `textInput` or fallback behavior.\\n *\\n * @return {?object} A SyntheticInputEvent.\\n */\\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n  var chars;\\n\\n  if (canUseTextInputEvent) {\\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\\n  } else {\\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\\n  }\\n\\n  // If no characters are being inserted, no BeforeInput event should\\n  // be fired.\\n  if (!chars) {\\n    return null;\\n  }\\n\\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\\n\\n  event.data = chars;\\n  EventPropagators.accumulateTwoPhaseDispatches(event);\\n  return event;\\n}\\n\\n/**\\n * Create an `onBeforeInput` event to match\\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\\n *\\n * This event plugin is based on the native `textInput` event\\n * available in Chrome, Safari, Opera, and IE. This event fires after\\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\\n *\\n * `beforeInput` is spec'd but not implemented in any browsers, and\\n * the `input` event does not provide any useful information about what has\\n * actually been added, contrary to the spec. Thus, `textInput` is the best\\n * available event to identify the characters that have actually been inserted\\n * into the target node.\\n *\\n * This plugin is also responsible for emitting `composition` events, thus\\n * allowing us to share composition fallback code for both `beforeInput` and\\n * `composition` event types.\\n */\\nvar BeforeInputEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\\n  }\\n};\\n\\nmodule.exports = BeforeInputEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"isPresto\",\"opera\",\"window\",\"version\",\"parseInt\",\"isFallbackCompositionEnd\",\"topLevelType\",\"nativeEvent\",\"END_KEYCODES\",\"indexOf\",\"keyCode\",\"START_KEYCODE\",\"getDataFromCustomEvent\",\"detail\",\"data\",\"getNativeBeforeInputChars\",\"SPACEBAR_CODE\",\"which\",\"hasSpaceKeypress\",\"SPACEBAR_CHAR\",\"chars\",\"getFallbackBeforeInputChars\",\"currentComposition\",\"canUseCompositionEvent\",\"getData\",\"FallbackCompositionState\",\"release\",\"ctrlKey\",\"altKey\",\"metaKey\",\"String\",\"fromCharCode\",\"useFallbackCompositionData\",\"EventPropagators\",\"ExecutionEnvironment\",\"SyntheticCompositionEvent\",\"SyntheticInputEvent\",\"canUseDOM\",\"documentMode\",\"document\",\"canUseTextInputEvent\",\"eventTypes\",\"beforeInput\",\"phasedRegistrationNames\",\"bubbled\",\"captured\",\"dependencies\",\"compositionEnd\",\"compositionStart\",\"compositionUpdate\",\"BeforeInputEventPlugin\",\"extractEvents\",\"targetInst\",\"nativeEventTarget\",\"eventType\",\"fallbackData\",\"getPooled\",\"event\",\"customData\",\"accumulateTwoPhaseDispatches\"]\n}\n"]