["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/Danger.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$Danger=function(global,process,require,module,exports,shadow$shims){require(\"module$node_modules$react_dom$lib$reactProdInvariant\");var DOMLazyTree=require(\"module$node_modules$react_dom$lib$DOMLazyTree\"),ExecutionEnvironment=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\"),createNodesFromMarkup=require(\"module$node_modules$fbjs$lib$createNodesFromMarkup\"),emptyFunction=require(\"module$node_modules$fbjs$lib$emptyFunction\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\");\nmodule.exports={dangerouslyReplaceNodeWithMarkup:function(oldChild,markup){ExecutionEnvironment.canUseDOM?void 0:invariant(!1,\"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.\");markup?void 0:invariant(!1,\"dangerouslyReplaceNodeWithMarkup(...): Missing markup.\");\"HTML\"===oldChild.nodeName?invariant(!1,\"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the \\x3chtml\\x3e node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().\"):\nvoid 0;\"string\"===typeof markup?(markup=createNodesFromMarkup(markup,emptyFunction)[0],oldChild.parentNode.replaceChild(markup,oldChild)):DOMLazyTree.replaceChildWithTree(oldChild,markup)}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$Danger\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Danger = {\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n\n    if (typeof markup === 'string') {\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n      oldChild.parentNode.replaceChild(newChild, oldChild);\n    } else {\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\n    }\n  }\n\n};\n\nmodule.exports = Danger;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$DOMLazyTree","~$module$node_modules$fbjs$lib$createNodesFromMarkup","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$react_dom$lib$reactProdInvariant","~$module$node_modules$fbjs$lib$ExecutionEnvironment"]],"~:properties",["^5",["dangerouslyReplaceNodeWithMarkup"]],"~:compiled-at",1635270336831,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$Danger.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAarGH,OAAA,CAAQ,sDAAR,CAErB,KAAII,YAAcJ,OAAA,CAAQ,+CAAR,CAAlB,CACIK,qBAAuBL,OAAA,CAAQ,mDAAR,CAD3B,CAGIM,sBAAwBN,OAAA,CAAQ,oDAAR,CAH5B,CAIIO,cAAgBP,OAAA,CAAQ,4CAAR,CAJpB,CAKIQ,UAAYR,OAAA,CAAQ,wCAAR,CA2BhBC;MAAAC,QAAA,CAzBaO,CAUXC,iCAAkCA,QAAS,CAACC,QAAD,CAAWC,MAAX,CAAmB,CAC3DP,oBAAAQ,UAAD,CAAsW,IAAK,EAA3W,CAA0EL,SAAA,CAAU,CAAA,CAAV,CAAiB,gPAAjB,CACzEI,OAAD,CAAsJ,IAAK,EAA3J,CAAkDJ,SAAA,CAAU,CAAA,CAAV,CAAiB,wDAAjB,CAC1B,OAAxB,GAAEG,QAAAG,SAAF,CAA0EN,SAAA,CAAU,CAAA,CAAV,CAAiB,+PAAjB,CAA1E;AAA+W,IAAK,EAE9V,SAAtB,GAAI,MAAOI,OAAX,EACMG,MACJ,CADeT,qBAAA,CAAsBM,MAAtB,CAA8BL,aAA9B,CAAA,CAA6C,CAA7C,CACf,CAAAI,QAAAK,WAAAC,aAAA,CAAiCF,MAAjC,CAA2CJ,QAA3C,CAFF,EAIEP,WAAAc,qBAAA,CAAiCP,QAAjC,CAA2CC,MAA3C,CAT0D,CAVnDH,CAtB6G;\",\n\"sources\":[\"node_modules/react-dom/lib/Danger.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$Danger\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar DOMLazyTree = require('./DOMLazyTree');\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\n\\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\\nvar emptyFunction = require('fbjs/lib/emptyFunction');\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar Danger = {\\n\\n  /**\\n   * Replaces a node with a string of markup at its current position within its\\n   * parent. The markup must render into a single root node.\\n   *\\n   * @param {DOMElement} oldChild Child node to replace.\\n   * @param {string} markup Markup to render in place of the child node.\\n   * @internal\\n   */\\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\\n\\n    if (typeof markup === 'string') {\\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\\n      oldChild.parentNode.replaceChild(newChild, oldChild);\\n    } else {\\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\\n    }\\n  }\\n\\n};\\n\\nmodule.exports = Danger;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"DOMLazyTree\",\"ExecutionEnvironment\",\"createNodesFromMarkup\",\"emptyFunction\",\"invariant\",\"Danger\",\"dangerouslyReplaceNodeWithMarkup\",\"oldChild\",\"markup\",\"canUseDOM\",\"nodeName\",\"newChild\",\"parentNode\",\"replaceChild\",\"replaceChildWithTree\"]\n}\n"]