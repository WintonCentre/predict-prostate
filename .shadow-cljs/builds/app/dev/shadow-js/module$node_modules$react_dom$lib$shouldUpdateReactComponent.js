["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/shouldUpdateReactComponent.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$shouldUpdateReactComponent=function(global,process,require,module,exports,shadow$shims){module.exports=function(prevElement,nextElement){var prevEmpty=null===prevElement||!1===prevElement,nextEmpty=null===nextElement||!1===nextElement;if(prevEmpty||nextEmpty)return prevEmpty===nextEmpty;prevEmpty=typeof prevElement;nextEmpty=typeof nextElement;return\"string\"===prevEmpty||\"number\"===prevEmpty?\"string\"===nextEmpty||\"number\"===nextEmpty:\"object\"===nextEmpty&&\nprevElement.type===nextElement.type&&prevElement.key===nextElement.key}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$shouldUpdateReactComponent\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\n\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  var prevType = typeof prevElement;\n  var nextType = typeof nextElement;\n  if (prevType === 'string' || prevType === 'number') {\n    return nextType === 'string' || nextType === 'number';\n  } else {\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n  }\n}\n\nmodule.exports = shouldUpdateReactComponent;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1635270336842,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$shouldUpdateReactComponent.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,6DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAyC9IF,MAAAC,QAAA,CAhBAE,QAAmC,CAACC,WAAD,CAAcC,WAAd,CAA2B,CAC5D,IAAIC,UAA4B,IAA5BA,GAAYF,WAAZE,EAAoD,CAAA,CAApDA,GAAoCF,WAAxC,CACIG,UAA4B,IAA5BA,GAAYF,WAAZE,EAAoD,CAAA,CAApDA,GAAoCF,WACxC,IAAIC,SAAJ,EAAiBC,SAAjB,CACE,MAAOD,UAAP,GAAqBC,SAGnBC,UAAAA,CAAW,MAAOJ,YAClBK,UAAAA,CAAW,MAAOJ,YACtB,OAAiB,QAAjB,GAAIG,SAAJ,EAA0C,QAA1C,GAA6BA,SAA7B,CACsB,QADtB,GACSC,SADT,EAC+C,QAD/C,GACkCA,SADlC,CAGsB,QAHtB,GAGSA,SAHT;AAGkCL,WAAAM,KAHlC,GAGuDL,WAAAK,KAHvD,EAG2EN,WAAAO,IAH3E,GAG+FN,WAAAM,IAZnC,CAzBgF;\",\n\"sources\":[\"node_modules/react-dom/lib/shouldUpdateReactComponent.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$shouldUpdateReactComponent\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\n/**\\n * Given a `prevElement` and `nextElement`, determines if the existing\\n * instance should be updated as opposed to being destroyed or replaced by a new\\n * instance. Both arguments are elements. This ensures that this logic can\\n * operate on stateless trees without any backing instance.\\n *\\n * @param {?object} prevElement\\n * @param {?object} nextElement\\n * @return {boolean} True if the existing instance should be updated.\\n * @protected\\n */\\n\\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\\n  var prevEmpty = prevElement === null || prevElement === false;\\n  var nextEmpty = nextElement === null || nextElement === false;\\n  if (prevEmpty || nextEmpty) {\\n    return prevEmpty === nextEmpty;\\n  }\\n\\n  var prevType = typeof prevElement;\\n  var nextType = typeof nextElement;\\n  if (prevType === 'string' || prevType === 'number') {\\n    return nextType === 'string' || nextType === 'number';\\n  } else {\\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\\n  }\\n}\\n\\nmodule.exports = shouldUpdateReactComponent;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"shouldUpdateReactComponent\",\"prevElement\",\"nextElement\",\"prevEmpty\",\"nextEmpty\",\"prevType\",\"nextType\",\"type\",\"key\"]\n}\n"]