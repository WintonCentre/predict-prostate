["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/SyntheticKeyboardEvent.js"],"~:js","shadow$provide.module$node_modules$react$lib$SyntheticKeyboardEvent=function(global,require,module,exports){function SyntheticKeyboardEvent(dispatchConfig,dispatchMarker,nativeEvent,nativeEventTarget){return SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent,nativeEventTarget)}var SyntheticUIEvent=require(\"module$node_modules$react$lib$SyntheticUIEvent\"),getEventCharCode=require(\"module$node_modules$react$lib$getEventCharCode\");global=require(\"module$node_modules$react$lib$getEventKey\");\nrequire=require(\"module$node_modules$react$lib$getEventModifierState\");SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent,{key:global,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:require,charCode:function(event){return\"keypress\"===event.type?getEventCharCode(event):0},keyCode:function(event){return\"keydown\"===event.type||\"keyup\"===event.type?event.keyCode:0},which:function(event){return\"keypress\"===event.type?getEventCharCode(event):\n\"keydown\"===event.type||\"keyup\"===event.type?event.keyCode:0}});module.exports=SyntheticKeyboardEvent}","~:source","shadow$provide[\"module$node_modules$react$lib$SyntheticKeyboardEvent\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticKeyboardEvent\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventCharCode = require('./getEventCharCode');\nvar getEventKey = require('./getEventKey');\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$getEventModifierState","~$shadow.js","~$module$node_modules$react$lib$getEventKey","~$module$node_modules$react$lib$getEventCharCode","~$module$node_modules$react$lib$SyntheticUIEvent"]],"~:properties",["^5",["metaKey","altKey","which","charCode","key","repeat","ctrlKey","shiftKey","locale","location","getModifierState","keyCode"]],"~:compiled-at",1635250628419,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$SyntheticKeyboardEvent.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8EjHC,QAASA,uBAAsB,CAACC,cAAD,CAAiBC,cAAjB,CAAiCC,WAAjC,CAA8CC,iBAA9C,CAAiE,CAC9F,MAAOC,iBAAiBC,CAAAA,IAAjB,CAAsB,IAAtB,CAA4BL,cAA5B,CAA4CC,cAA5C,CAA4DC,WAA5D,CAAyEC,iBAAzE,CADuF,CAhEhG,IAAIC,iBAAmBR,OAAA,CAAQ,gDAAR,CAAvB,CAEIU,iBAAmBV,OAAA,CAAQ,gDAAR,CACnBW,OAAAA,CAAcX,OAAA,CAAQ,2CAAR,CACdY;OAAAA,CAAwBZ,OAAA,CAAQ,qDAAR,CAgE5BQ,iBAAiBK,CAAAA,YAAjB,CAA8BV,sBAA9B,CA1D6BW,CAC3BC,IAAKJ,MADsBG,CAE3BE,SAAU,IAFiBF,CAG3BG,QAAS,IAHkBH,CAI3BI,SAAU,IAJiBJ,CAK3BK,OAAQ,IALmBL,CAM3BM,QAAS,IANkBN,CAO3BO,OAAQ,IAPmBP,CAQ3BQ,OAAQ,IARmBR,CAS3BS,iBAAkBX,OATSE,CAW3BU,SAAUA,QAAS,CAACC,KAAD,CAAQ,CAMzB,MAAmB,UAAnB,GAAIA,KAAMC,CAAAA,IAAV,CACShB,gBAAA,CAAiBe,KAAjB,CADT,CAGO,CATkB,CAXAX,CAsB3Ba,QAASA,QAAS,CAACF,KAAD,CAAQ,CAQxB,MAAmB,SAAnB,GAAIA,KAAMC,CAAAA,IAAV,EAA+C,OAA/C,GAAgCD,KAAMC,CAAAA,IAAtC,CACSD,KAAME,CAAAA,OADf,CAGO,CAXiB,CAtBCb,CAmC3Bc,MAAOA,QAAS,CAACH,KAAD,CAAQ,CAGtB,MAAmB,UAAnB,GAAIA,KAAMC,CAAAA,IAAV,CACShB,gBAAA,CAAiBe,KAAjB,CADT;AAGmB,SAAnB,GAAIA,KAAMC,CAAAA,IAAV,EAA+C,OAA/C,GAAgCD,KAAMC,CAAAA,IAAtC,CACSD,KAAME,CAAAA,OADf,CAGO,CATe,CAnCGb,CA0D7B,CAEAb,OAAOC,CAAAA,OAAP,CAAiBC,sBApFgG;\",\n\"sources\":[\"node_modules/react/lib/SyntheticKeyboardEvent.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$SyntheticKeyboardEvent\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule SyntheticKeyboardEvent\\n */\\n\\n'use strict';\\n\\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\\n\\nvar getEventCharCode = require('./getEventCharCode');\\nvar getEventKey = require('./getEventKey');\\nvar getEventModifierState = require('./getEventModifierState');\\n\\n/**\\n * @interface KeyboardEvent\\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\\n */\\nvar KeyboardEventInterface = {\\n  key: getEventKey,\\n  location: null,\\n  ctrlKey: null,\\n  shiftKey: null,\\n  altKey: null,\\n  metaKey: null,\\n  repeat: null,\\n  locale: null,\\n  getModifierState: getEventModifierState,\\n  // Legacy Interface\\n  charCode: function (event) {\\n    // `charCode` is the result of a KeyPress event and represents the value of\\n    // the actual printable character.\\n\\n    // KeyPress is deprecated, but its replacement is not yet final and not\\n    // implemented in any major browser. Only KeyPress has charCode.\\n    if (event.type === 'keypress') {\\n      return getEventCharCode(event);\\n    }\\n    return 0;\\n  },\\n  keyCode: function (event) {\\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\\n    // physical keyboard key.\\n\\n    // The actual meaning of the value depends on the users' keyboard layout\\n    // which cannot be detected. Assuming that it is a US keyboard layout\\n    // provides a surprisingly accurate mapping for US and European users.\\n    // Due to this, it is left to the user to implement at this time.\\n    if (event.type === 'keydown' || event.type === 'keyup') {\\n      return event.keyCode;\\n    }\\n    return 0;\\n  },\\n  which: function (event) {\\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\\n    // type of the event.\\n    if (event.type === 'keypress') {\\n      return getEventCharCode(event);\\n    }\\n    if (event.type === 'keydown' || event.type === 'keyup') {\\n      return event.keyCode;\\n    }\\n    return 0;\\n  }\\n};\\n\\n/**\\n * @param {object} dispatchConfig Configuration used to dispatch this event.\\n * @param {string} dispatchMarker Marker identifying the event target.\\n * @param {object} nativeEvent Native browser event.\\n * @extends {SyntheticUIEvent}\\n */\\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\\n}\\n\\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\\n\\nmodule.exports = SyntheticKeyboardEvent;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"SyntheticKeyboardEvent\",\"dispatchConfig\",\"dispatchMarker\",\"nativeEvent\",\"nativeEventTarget\",\"SyntheticUIEvent\",\"call\",\"getEventCharCode\",\"getEventKey\",\"getEventModifierState\",\"augmentClass\",\"KeyboardEventInterface\",\"key\",\"location\",\"ctrlKey\",\"shiftKey\",\"altKey\",\"metaKey\",\"repeat\",\"locale\",\"getModifierState\",\"charCode\",\"event\",\"type\",\"keyCode\",\"which\"]\n}\n"]