["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/BeforeInputEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react$lib$BeforeInputEventPlugin=function(global,require,module,exports){function isPresto(){var opera=window.opera;return\"object\"===typeof opera&&\"function\"===typeof opera.version&&12>=parseInt(opera.version(),10)}function isFallbackCompositionEnd(topLevelType,nativeEvent){switch(topLevelType){case topLevelTypes.topKeyUp:return-1!==END_KEYCODES.indexOf(nativeEvent.keyCode);case topLevelTypes.topKeyDown:return 229!==nativeEvent.keyCode;case topLevelTypes.topKeyPress:case topLevelTypes.topMouseDown:case topLevelTypes.topBlur:return!0;\ndefault:return!1}}function getDataFromCustomEvent(nativeEvent){nativeEvent=nativeEvent.detail;return\"object\"===typeof nativeEvent&&\"data\"in nativeEvent?nativeEvent.data:null}function getNativeBeforeInputChars(topLevelType,nativeEvent){switch(topLevelType){case topLevelTypes.topCompositionEnd:return getDataFromCustomEvent(nativeEvent);case topLevelTypes.topKeyPress:if(32!==nativeEvent.which)return null;hasSpaceKeypress=!0;return SPACEBAR_CHAR;case topLevelTypes.topTextInput:return topLevelType=nativeEvent.data,\ntopLevelType===SPACEBAR_CHAR&&hasSpaceKeypress?null:topLevelType;default:return null}}function getFallbackBeforeInputChars(topLevelType,nativeEvent){if(currentComposition)return topLevelType===topLevelTypes.topCompositionEnd||isFallbackCompositionEnd(topLevelType,nativeEvent)?(topLevelType=currentComposition.getData(),FallbackCompositionState.release(currentComposition),currentComposition=null,topLevelType):null;switch(topLevelType){case topLevelTypes.topPaste:return null;case topLevelTypes.topKeyPress:return nativeEvent.which&&\n(!(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)||nativeEvent.ctrlKey&&nativeEvent.altKey)?String.fromCharCode(nativeEvent.which):null;case topLevelTypes.topCompositionEnd:return useFallbackCompositionData?null:nativeEvent.data;default:return null}}global=require(\"module$node_modules$react$lib$EventConstants\");var EventPropagators=require(\"module$node_modules$react$lib$EventPropagators\");exports=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var FallbackCompositionState=\nrequire(\"module$node_modules$react$lib$FallbackCompositionState\"),SyntheticCompositionEvent=require(\"module$node_modules$react$lib$SyntheticCompositionEvent\"),SyntheticInputEvent=require(\"module$node_modules$react$lib$SyntheticInputEvent\");require=require(\"module$node_modules$fbjs$lib$keyOf\");var END_KEYCODES=[9,13,27,32],canUseCompositionEvent=exports.canUseDOM&&\"CompositionEvent\"in window,documentMode=null;exports.canUseDOM&&\"documentMode\"in document&&(documentMode=document.documentMode);var canUseTextInputEvent=\nexports.canUseDOM&&\"TextEvent\"in window&&!documentMode&&!isPresto(),useFallbackCompositionData=exports.canUseDOM&&(!canUseCompositionEvent||documentMode&&8<documentMode&&11>=documentMode),SPACEBAR_CHAR=String.fromCharCode(32),topLevelTypes=global.topLevelTypes,eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:require({onBeforeInput:null}),captured:require({onBeforeInputCapture:null})},dependencies:[topLevelTypes.topCompositionEnd,topLevelTypes.topKeyPress,topLevelTypes.topTextInput,topLevelTypes.topPaste]},\ncompositionEnd:{phasedRegistrationNames:{bubbled:require({onCompositionEnd:null}),captured:require({onCompositionEndCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionEnd,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:require({onCompositionStart:null}),captured:require({onCompositionStartCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionStart,\ntopLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:require({onCompositionUpdate:null}),captured:require({onCompositionUpdateCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionUpdate,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]}},hasSpaceKeypress=!1,currentComposition=null;module.exports={eventTypes,extractEvents:function(topLevelType,\ntargetInst,nativeEvent,nativeEventTarget){var JSCompiler_inline_result;if(canUseCompositionEvent)b:{switch(topLevelType){case topLevelTypes.topCompositionStart:var eventType=eventTypes.compositionStart;break b;case topLevelTypes.topCompositionEnd:eventType=eventTypes.compositionEnd;break b;case topLevelTypes.topCompositionUpdate:eventType=eventTypes.compositionUpdate;break b}eventType=void 0}else currentComposition?isFallbackCompositionEnd(topLevelType,nativeEvent)&&(eventType=eventTypes.compositionEnd):\ntopLevelType===topLevelTypes.topKeyDown&&229===nativeEvent.keyCode&&(eventType=eventTypes.compositionStart);eventType?(useFallbackCompositionData&&(currentComposition||eventType!==eventTypes.compositionStart?eventType===eventTypes.compositionEnd&&currentComposition&&(JSCompiler_inline_result=currentComposition.getData()):currentComposition=FallbackCompositionState.getPooled(nativeEventTarget)),eventType=SyntheticCompositionEvent.getPooled(eventType,targetInst,nativeEvent,nativeEventTarget),JSCompiler_inline_result?\neventType.data=JSCompiler_inline_result:(JSCompiler_inline_result=getDataFromCustomEvent(nativeEvent),null!==JSCompiler_inline_result&&(eventType.data=JSCompiler_inline_result)),EventPropagators.accumulateTwoPhaseDispatches(eventType),JSCompiler_inline_result=eventType):JSCompiler_inline_result=null;(topLevelType=canUseTextInputEvent?getNativeBeforeInputChars(topLevelType,nativeEvent):getFallbackBeforeInputChars(topLevelType,nativeEvent))?(targetInst=SyntheticInputEvent.getPooled(eventTypes.beforeInput,\ntargetInst,nativeEvent,nativeEventTarget),targetInst.data=topLevelType,EventPropagators.accumulateTwoPhaseDispatches(targetInst)):targetInst=null;return[JSCompiler_inline_result,targetInst]}}}","~:source","shadow$provide[\"module$node_modules$react$lib$BeforeInputEventPlugin\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$SyntheticCompositionEvent","~$shadow.js","~$module$node_modules$react$lib$FallbackCompositionState","~$module$node_modules$react$lib$SyntheticInputEvent","~$module$node_modules$react$lib$EventConstants","~$module$node_modules$fbjs$lib$ExecutionEnvironment","~$module$node_modules$react$lib$EventPropagators","~$module$node_modules$fbjs$lib$keyOf"]],"~:properties",["^5",["onCompositionStart","bubbled","onBeforeInput","dependencies","beforeInput","onCompositionUpdate","onCompositionStartCapture","onBeforeInputCapture","eventTypes","compositionEnd","captured","onCompositionUpdateCapture","compositionUpdate","onCompositionEnd","data","onCompositionEndCapture","extractEvents","compositionStart","phasedRegistrationNames"]],"~:compiled-at",1635250628384,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$BeforeInputEventPlugin.js\",\n\"lineCount\":12,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react/lib/BeforeInputEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$BeforeInputEventPlugin\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule BeforeInputEventPlugin\\n */\\n\\n'use strict';\\n\\nvar EventConstants = require('./EventConstants');\\nvar EventPropagators = require('./EventPropagators');\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\nvar FallbackCompositionState = require('./FallbackCompositionState');\\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\\n\\nvar keyOf = require('fbjs/lib/keyOf');\\n\\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\\nvar START_KEYCODE = 229;\\n\\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\\n\\nvar documentMode = null;\\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\\n  documentMode = document.documentMode;\\n}\\n\\n// Webkit offers a very useful `textInput` event that can be used to\\n// directly represent `beforeInput`. The IE `textinput` event is not as\\n// useful, so we don't use it.\\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\\n\\n// In IE9+, we have access to composition events, but the data supplied\\n// by the native compositionend event may be incorrect. Japanese ideographic\\n// spaces, for instance (\\\\u3000) are not recorded correctly.\\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\\n\\n/**\\n * Opera <= 12 includes TextEvent in window, but does not fire\\n * text input events. Rely on keypress instead.\\n */\\nfunction isPresto() {\\n  var opera = window.opera;\\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\\n}\\n\\nvar SPACEBAR_CODE = 32;\\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\\n\\nvar topLevelTypes = EventConstants.topLevelTypes;\\n\\n// Events and their corresponding property names.\\nvar eventTypes = {\\n  beforeInput: {\\n    phasedRegistrationNames: {\\n      bubbled: keyOf({ onBeforeInput: null }),\\n      captured: keyOf({ onBeforeInputCapture: null })\\n    },\\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\\n  },\\n  compositionEnd: {\\n    phasedRegistrationNames: {\\n      bubbled: keyOf({ onCompositionEnd: null }),\\n      captured: keyOf({ onCompositionEndCapture: null })\\n    },\\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\\n  },\\n  compositionStart: {\\n    phasedRegistrationNames: {\\n      bubbled: keyOf({ onCompositionStart: null }),\\n      captured: keyOf({ onCompositionStartCapture: null })\\n    },\\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\\n  },\\n  compositionUpdate: {\\n    phasedRegistrationNames: {\\n      bubbled: keyOf({ onCompositionUpdate: null }),\\n      captured: keyOf({ onCompositionUpdateCapture: null })\\n    },\\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\\n  }\\n};\\n\\n// Track whether we've ever handled a keypress on the space key.\\nvar hasSpaceKeypress = false;\\n\\n/**\\n * Return whether a native keypress event is assumed to be a command.\\n * This is required because Firefox fires `keypress` events for key commands\\n * (cut, copy, select-all, etc.) even though no character is inserted.\\n */\\nfunction isKeypressCommand(nativeEvent) {\\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\\n}\\n\\n/**\\n * Translate native top level events into event types.\\n *\\n * @param {string} topLevelType\\n * @return {object}\\n */\\nfunction getCompositionEventType(topLevelType) {\\n  switch (topLevelType) {\\n    case topLevelTypes.topCompositionStart:\\n      return eventTypes.compositionStart;\\n    case topLevelTypes.topCompositionEnd:\\n      return eventTypes.compositionEnd;\\n    case topLevelTypes.topCompositionUpdate:\\n      return eventTypes.compositionUpdate;\\n  }\\n}\\n\\n/**\\n * Does our fallback best-guess model think this event signifies that\\n * composition has begun?\\n *\\n * @param {string} topLevelType\\n * @param {object} nativeEvent\\n * @return {boolean}\\n */\\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\\n}\\n\\n/**\\n * Does our fallback mode think that this event is the end of composition?\\n *\\n * @param {string} topLevelType\\n * @param {object} nativeEvent\\n * @return {boolean}\\n */\\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\\n  switch (topLevelType) {\\n    case topLevelTypes.topKeyUp:\\n      // Command keys insert or clear IME input.\\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\\n    case topLevelTypes.topKeyDown:\\n      // Expect IME keyCode on each keydown. If we get any other\\n      // code we must have exited earlier.\\n      return nativeEvent.keyCode !== START_KEYCODE;\\n    case topLevelTypes.topKeyPress:\\n    case topLevelTypes.topMouseDown:\\n    case topLevelTypes.topBlur:\\n      // Events are not possible without cancelling IME.\\n      return true;\\n    default:\\n      return false;\\n  }\\n}\\n\\n/**\\n * Google Input Tools provides composition data via a CustomEvent,\\n * with the `data` property populated in the `detail` object. If this\\n * is available on the event object, use it. If not, this is a plain\\n * composition event and we have nothing special to extract.\\n *\\n * @param {object} nativeEvent\\n * @return {?string}\\n */\\nfunction getDataFromCustomEvent(nativeEvent) {\\n  var detail = nativeEvent.detail;\\n  if (typeof detail === 'object' && 'data' in detail) {\\n    return detail.data;\\n  }\\n  return null;\\n}\\n\\n// Track the current IME composition fallback object, if any.\\nvar currentComposition = null;\\n\\n/**\\n * @return {?object} A SyntheticCompositionEvent.\\n */\\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n  var eventType;\\n  var fallbackData;\\n\\n  if (canUseCompositionEvent) {\\n    eventType = getCompositionEventType(topLevelType);\\n  } else if (!currentComposition) {\\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\\n      eventType = eventTypes.compositionStart;\\n    }\\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\\n    eventType = eventTypes.compositionEnd;\\n  }\\n\\n  if (!eventType) {\\n    return null;\\n  }\\n\\n  if (useFallbackCompositionData) {\\n    // The current composition is stored statically and must not be\\n    // overwritten while composition continues.\\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);\\n    } else if (eventType === eventTypes.compositionEnd) {\\n      if (currentComposition) {\\n        fallbackData = currentComposition.getData();\\n      }\\n    }\\n  }\\n\\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\\n\\n  if (fallbackData) {\\n    // Inject data generated from fallback path into the synthetic event.\\n    // This matches the property of native CompositionEventInterface.\\n    event.data = fallbackData;\\n  } else {\\n    var customData = getDataFromCustomEvent(nativeEvent);\\n    if (customData !== null) {\\n      event.data = customData;\\n    }\\n  }\\n\\n  EventPropagators.accumulateTwoPhaseDispatches(event);\\n  return event;\\n}\\n\\n/**\\n * @param {string} topLevelType Record from `EventConstants`.\\n * @param {object} nativeEvent Native browser event.\\n * @return {?string} The string corresponding to this `beforeInput` event.\\n */\\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\\n  switch (topLevelType) {\\n    case topLevelTypes.topCompositionEnd:\\n      return getDataFromCustomEvent(nativeEvent);\\n    case topLevelTypes.topKeyPress:\\n      /**\\n       * If native `textInput` events are available, our goal is to make\\n       * use of them. However, there is a special case: the spacebar key.\\n       * In Webkit, preventing default on a spacebar `textInput` event\\n       * cancels character insertion, but it *also* causes the browser\\n       * to fall back to its default spacebar behavior of scrolling the\\n       * page.\\n       *\\n       * Tracking at:\\n       * https://code.google.com/p/chromium/issues/detail?id=355103\\n       *\\n       * To avoid this issue, use the keypress event as if no `textInput`\\n       * event is available.\\n       */\\n      var which = nativeEvent.which;\\n      if (which !== SPACEBAR_CODE) {\\n        return null;\\n      }\\n\\n      hasSpaceKeypress = true;\\n      return SPACEBAR_CHAR;\\n\\n    case topLevelTypes.topTextInput:\\n      // Record the characters to be added to the DOM.\\n      var chars = nativeEvent.data;\\n\\n      // If it's a spacebar character, assume that we have already handled\\n      // it at the keypress level and bail immediately. Android Chrome\\n      // doesn't give us keycodes, so we need to blacklist it.\\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\\n        return null;\\n      }\\n\\n      return chars;\\n\\n    default:\\n      // For other native event types, do nothing.\\n      return null;\\n  }\\n}\\n\\n/**\\n * For browsers that do not provide the `textInput` event, extract the\\n * appropriate string to use for SyntheticInputEvent.\\n *\\n * @param {string} topLevelType Record from `EventConstants`.\\n * @param {object} nativeEvent Native browser event.\\n * @return {?string} The fallback string for this `beforeInput` event.\\n */\\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\\n  // If we are currently composing (IME) and using a fallback to do so,\\n  // try to extract the composed characters from the fallback object.\\n  if (currentComposition) {\\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\\n      var chars = currentComposition.getData();\\n      FallbackCompositionState.release(currentComposition);\\n      currentComposition = null;\\n      return chars;\\n    }\\n    return null;\\n  }\\n\\n  switch (topLevelType) {\\n    case topLevelTypes.topPaste:\\n      // If a paste event occurs after a keypress, throw out the input\\n      // chars. Paste events should not lead to BeforeInput events.\\n      return null;\\n    case topLevelTypes.topKeyPress:\\n      /**\\n       * As of v27, Firefox may fire keypress events even when no character\\n       * will be inserted. A few possibilities:\\n       *\\n       * - `which` is `0`. Arrow keys, Esc key, etc.\\n       *\\n       * - `which` is the pressed key code, but no char is available.\\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\\n       *   this key combination and no character is inserted into the\\n       *   document, but FF fires the keypress for char code `100` anyway.\\n       *   No `input` event will occur.\\n       *\\n       * - `which` is the pressed key code, but a command combination is\\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\\n       *   `input` event will occur.\\n       */\\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\\n        return String.fromCharCode(nativeEvent.which);\\n      }\\n      return null;\\n    case topLevelTypes.topCompositionEnd:\\n      return useFallbackCompositionData ? null : nativeEvent.data;\\n    default:\\n      return null;\\n  }\\n}\\n\\n/**\\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\\n * `textInput` or fallback behavior.\\n *\\n * @return {?object} A SyntheticInputEvent.\\n */\\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n  var chars;\\n\\n  if (canUseTextInputEvent) {\\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\\n  } else {\\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\\n  }\\n\\n  // If no characters are being inserted, no BeforeInput event should\\n  // be fired.\\n  if (!chars) {\\n    return null;\\n  }\\n\\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\\n\\n  event.data = chars;\\n  EventPropagators.accumulateTwoPhaseDispatches(event);\\n  return event;\\n}\\n\\n/**\\n * Create an `onBeforeInput` event to match\\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\\n *\\n * This event plugin is based on the native `textInput` event\\n * available in Chrome, Safari, Opera, and IE. This event fires after\\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\\n *\\n * `beforeInput` is spec'd but not implemented in any browsers, and\\n * the `input` event does not provide any useful information about what has\\n * actually been added, contrary to the spec. Thus, `textInput` is the best\\n * available event to identify the characters that have actually been inserted\\n * into the target node.\\n *\\n * This plugin is also responsible for emitting `composition` events, thus\\n * allowing us to share composition fallback code for both `beforeInput` and\\n * `composition` event types.\\n */\\nvar BeforeInputEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\\n  }\\n};\\n\\nmodule.exports = BeforeInputEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isPresto\",\"opera\",\"window\",\"version\",\"parseInt\",\"isFallbackCompositionEnd\",\"topLevelType\",\"nativeEvent\",\"topLevelTypes\",\"topKeyUp\",\"END_KEYCODES\",\"indexOf\",\"keyCode\",\"topKeyDown\",\"START_KEYCODE\",\"topKeyPress\",\"topMouseDown\",\"topBlur\",\"getDataFromCustomEvent\",\"detail\",\"data\",\"getNativeBeforeInputChars\",\"topCompositionEnd\",\"SPACEBAR_CODE\",\"which\",\"hasSpaceKeypress\",\"SPACEBAR_CHAR\",\"topTextInput\",\"chars\",\"getFallbackBeforeInputChars\",\"currentComposition\",\"getData\",\"FallbackCompositionState\",\"release\",\"topPaste\",\"ctrlKey\",\"altKey\",\"metaKey\",\"String\",\"fromCharCode\",\"useFallbackCompositionData\",\"EventConstants\",\"EventPropagators\",\"ExecutionEnvironment\",\"SyntheticCompositionEvent\",\"SyntheticInputEvent\",\"keyOf\",\"canUseCompositionEvent\",\"canUseDOM\",\"documentMode\",\"document\",\"canUseTextInputEvent\",\"eventTypes\",\"beforeInput\",\"phasedRegistrationNames\",\"bubbled\",\"onBeforeInput\",\"captured\",\"onBeforeInputCapture\",\"dependencies\",\"compositionEnd\",\"onCompositionEnd\",\"onCompositionEndCapture\",\"compositionStart\",\"onCompositionStart\",\"onCompositionStartCapture\",\"topCompositionStart\",\"compositionUpdate\",\"onCompositionUpdate\",\"onCompositionUpdateCapture\",\"topCompositionUpdate\",\"BeforeInputEventPlugin\",\"extractEvents\",\"targetInst\",\"nativeEventTarget\",\"eventType\",\"fallbackData\",\"getPooled\",\"event\",\"customData\",\"accumulateTwoPhaseDispatches\"]\n}\n"]