["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/ChangeEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$ChangeEventPlugin=function(global,process,require,module,exports,shadow$shims){function manualDispatchChangeEvent(nativeEvent){nativeEvent=SyntheticEvent.getPooled(eventTypes.change,activeElementInst,nativeEvent,getEventTarget(nativeEvent));EventPropagators.accumulateTwoPhaseDispatches(nativeEvent);ReactUpdates.batchedUpdates(runEventInBatch,nativeEvent)}function runEventInBatch(event){EventPluginHub.enqueueEvents(event);EventPluginHub.processEventQueue(!1)}\nfunction stopWatchingForChangeEventIE8(){activeElement&&(activeElement.detachEvent(\"onchange\",manualDispatchChangeEvent),activeElementInst=activeElement=null)}function getTargetInstForChangeEvent(topLevelType,targetInst){if(\"topChange\"===topLevelType)return targetInst}function handleEventsForChangeEventIE8(topLevelType,target,targetInst){\"topFocus\"===topLevelType?(stopWatchingForChangeEventIE8(),activeElement=target,activeElementInst=targetInst,activeElement.attachEvent(\"onchange\",manualDispatchChangeEvent)):\n\"topBlur\"===topLevelType&&stopWatchingForChangeEventIE8()}function stopWatchingForValueChange(){activeElement&&(delete activeElement.value,activeElement.detachEvent?activeElement.detachEvent(\"onpropertychange\",handlePropertyChange):activeElement.removeEventListener(\"propertychange\",handlePropertyChange,!1),activeElementValueProp=activeElementValue=activeElementInst=activeElement=null)}function handlePropertyChange(nativeEvent){if(\"value\"===nativeEvent.propertyName){var value=nativeEvent.srcElement.value;\nvalue!==activeElementValue&&(activeElementValue=value,manualDispatchChangeEvent(nativeEvent))}}function getTargetInstForInputEvent(topLevelType,targetInst){if(\"topInput\"===topLevelType)return targetInst}function handleEventsForInputEventIE(topLevelType,target,targetInst){\"topFocus\"===topLevelType?(stopWatchingForValueChange(),activeElement=target,activeElementInst=targetInst,activeElementValue=target.value,activeElementValueProp=Object.getOwnPropertyDescriptor(target.constructor.prototype,\"value\"),\nObject.defineProperty(activeElement,\"value\",newValueProp),activeElement.attachEvent?activeElement.attachEvent(\"onpropertychange\",handlePropertyChange):activeElement.addEventListener(\"propertychange\",handlePropertyChange,!1)):\"topBlur\"===topLevelType&&stopWatchingForValueChange()}function getTargetInstForInputEventIE(topLevelType,targetInst){if((\"topSelectionChange\"===topLevelType||\"topKeyUp\"===topLevelType||\"topKeyDown\"===topLevelType)&&activeElement&&activeElement.value!==activeElementValue)return activeElementValue=\nactiveElement.value,activeElementInst}function getTargetInstForClickEvent(topLevelType,targetInst){if(\"topClick\"===topLevelType)return targetInst}var EventPluginHub=require(\"module$node_modules$react_dom$lib$EventPluginHub\"),EventPropagators=require(\"module$node_modules$react_dom$lib$EventPropagators\");global=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var ReactDOMComponentTree=require(\"module$node_modules$react_dom$lib$ReactDOMComponentTree\"),ReactUpdates=require(\"module$node_modules$react_dom$lib$ReactUpdates\"),\nSyntheticEvent=require(\"module$node_modules$react_dom$lib$SyntheticEvent\"),getEventTarget=require(\"module$node_modules$react_dom$lib$getEventTarget\");process=require(\"module$node_modules$react_dom$lib$isEventSupported\");var isTextInputElement=require(\"module$node_modules$react_dom$lib$isTextInputElement\"),eventTypes={change:{phasedRegistrationNames:{bubbled:\"onChange\",captured:\"onChangeCapture\"},dependencies:\"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange\".split(\" \")}},\nactiveElement=null,activeElementInst=null,activeElementValue=null,activeElementValueProp=null,doesChangeEventBubble=!1;global.canUseDOM&&(doesChangeEventBubble=process(\"change\")&&(!document.documentMode||8<document.documentMode));var isInputEventSupported=!1;global.canUseDOM&&(isInputEventSupported=process(\"input\")&&(!document.documentMode||11<document.documentMode));var newValueProp={get:function(){return activeElementValueProp.get.call(this)},set:function(val){activeElementValue=\"\"+val;activeElementValueProp.set.call(this,\nval)}};module.exports={eventTypes:eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var targetNode=targetInst?ReactDOMComponentTree.getNodeFromInstance(targetInst):window,getTargetInstFunc,handleEventFunc,nodeName=targetNode.nodeName&&targetNode.nodeName.toLowerCase();\"select\"===nodeName||\"input\"===nodeName&&\"file\"===targetNode.type?doesChangeEventBubble?getTargetInstFunc=getTargetInstForChangeEvent:handleEventFunc=handleEventsForChangeEventIE8:isTextInputElement(targetNode)?\nisInputEventSupported?getTargetInstFunc=getTargetInstForInputEvent:(getTargetInstFunc=getTargetInstForInputEventIE,handleEventFunc=handleEventsForInputEventIE):targetNode.nodeName&&\"input\"===targetNode.nodeName.toLowerCase()&&(\"checkbox\"===targetNode.type||\"radio\"===targetNode.type)&&(getTargetInstFunc=getTargetInstForClickEvent);if(getTargetInstFunc&&(getTargetInstFunc=getTargetInstFunc(topLevelType,targetInst)))return topLevelType=SyntheticEvent.getPooled(eventTypes.change,getTargetInstFunc,nativeEvent,\nnativeEventTarget),topLevelType.type=\"change\",EventPropagators.accumulateTwoPhaseDispatches(topLevelType),topLevelType;handleEventFunc&&handleEventFunc(topLevelType,targetNode,targetInst)}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$ChangeEventPlugin\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: 'onChange',\n      captured: 'onChangeCapture'\n    },\n    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementInst = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementInst = null;\n}\n\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topChange') {\n    return targetInst;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {\n  if (topLevelType === 'topFocus') {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(target, targetInst);\n  } else if (topLevelType === 'topBlur') {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  // IE10+ fire input events to often, such when a placeholder\n  // changes or when an input with a placeholder is focused.\n  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);\n}\n\n/**\n * (For IE <=11) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For IE <=11) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  if (activeElement.attachEvent) {\n    activeElement.attachEvent('onpropertychange', handlePropertyChange);\n  } else {\n    activeElement.addEventListener('propertychange', handlePropertyChange, false);\n  }\n}\n\n/**\n * (For IE <=11) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n\n  if (activeElement.detachEvent) {\n    activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  } else {\n    activeElement.removeEventListener('propertychange', handlePropertyChange, false);\n  }\n\n  activeElement = null;\n  activeElementInst = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For IE <=11) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetInstForInputEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topInput') {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return targetInst;\n  }\n}\n\nfunction handleEventsForInputEventIE(topLevelType, target, targetInst) {\n  if (topLevelType === 'topFocus') {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9-11, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (topLevelType === 'topBlur') {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetInstForInputEventIE(topLevelType, targetInst) {\n  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementInst;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topClick') {\n    return targetInst;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    var getTargetInstFunc, handleEventFunc;\n    if (shouldUseChangeEvent(targetNode)) {\n      if (doesChangeEventBubble) {\n        getTargetInstFunc = getTargetInstForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(targetNode)) {\n      if (isInputEventSupported) {\n        getTargetInstFunc = getTargetInstForInputEvent;\n      } else {\n        getTargetInstFunc = getTargetInstForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForClickEvent;\n    }\n\n    if (getTargetInstFunc) {\n      var inst = getTargetInstFunc(topLevelType, targetInst);\n      if (inst) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, targetNode, targetInst);\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$ReactUpdates","~$module$node_modules$react_dom$lib$getEventTarget","~$shadow.js","~$module$node_modules$react_dom$lib$isTextInputElement","~$module$node_modules$react_dom$lib$EventPluginHub","~$module$node_modules$react_dom$lib$ReactDOMComponentTree","~$module$node_modules$react_dom$lib$EventPropagators","~$module$node_modules$react_dom$lib$isEventSupported","~$module$node_modules$fbjs$lib$ExecutionEnvironment","~$module$node_modules$react_dom$lib$SyntheticEvent"]],"~:properties",["^5",["bubbled","dependencies","eventTypes","value","captured","type","set","get","extractEvents","change","phasedRegistrationNames"]],"~:compiled-at",1635270336827,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$ChangeEventPlugin.js\",\n\"lineCount\":11,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-dom/lib/ChangeEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$ChangeEventPlugin\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar EventPluginHub = require('./EventPluginHub');\\nvar EventPropagators = require('./EventPropagators');\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar ReactUpdates = require('./ReactUpdates');\\nvar SyntheticEvent = require('./SyntheticEvent');\\n\\nvar getEventTarget = require('./getEventTarget');\\nvar isEventSupported = require('./isEventSupported');\\nvar isTextInputElement = require('./isTextInputElement');\\n\\nvar eventTypes = {\\n  change: {\\n    phasedRegistrationNames: {\\n      bubbled: 'onChange',\\n      captured: 'onChangeCapture'\\n    },\\n    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']\\n  }\\n};\\n\\n/**\\n * For IE shims\\n */\\nvar activeElement = null;\\nvar activeElementInst = null;\\nvar activeElementValue = null;\\nvar activeElementValueProp = null;\\n\\n/**\\n * SECTION: handle `change` event\\n */\\nfunction shouldUseChangeEvent(elem) {\\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\\n}\\n\\nvar doesChangeEventBubble = false;\\nif (ExecutionEnvironment.canUseDOM) {\\n  // See `handleChange` comment below\\n  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);\\n}\\n\\nfunction manualDispatchChangeEvent(nativeEvent) {\\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));\\n  EventPropagators.accumulateTwoPhaseDispatches(event);\\n\\n  // If change and propertychange bubbled, we'd just bind to it like all the\\n  // other events and have it go through ReactBrowserEventEmitter. Since it\\n  // doesn't, we manually listen for the events and so we have to enqueue and\\n  // process the abstract event manually.\\n  //\\n  // Batching is necessary here in order to ensure that all event handlers run\\n  // before the next rerender (including event handlers attached to ancestor\\n  // elements instead of directly on the input). Without this, controlled\\n  // components don't work properly in conjunction with event bubbling because\\n  // the component is rerendered and the value reverted before all the event\\n  // handlers can run. See https://github.com/facebook/react/issues/708.\\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\\n}\\n\\nfunction runEventInBatch(event) {\\n  EventPluginHub.enqueueEvents(event);\\n  EventPluginHub.processEventQueue(false);\\n}\\n\\nfunction startWatchingForChangeEventIE8(target, targetInst) {\\n  activeElement = target;\\n  activeElementInst = targetInst;\\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\\n}\\n\\nfunction stopWatchingForChangeEventIE8() {\\n  if (!activeElement) {\\n    return;\\n  }\\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\\n  activeElement = null;\\n  activeElementInst = null;\\n}\\n\\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\\n  if (topLevelType === 'topChange') {\\n    return targetInst;\\n  }\\n}\\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {\\n  if (topLevelType === 'topFocus') {\\n    // stopWatching() should be a noop here but we call it just in case we\\n    // missed a blur event somehow.\\n    stopWatchingForChangeEventIE8();\\n    startWatchingForChangeEventIE8(target, targetInst);\\n  } else if (topLevelType === 'topBlur') {\\n    stopWatchingForChangeEventIE8();\\n  }\\n}\\n\\n/**\\n * SECTION: handle `input` event\\n */\\nvar isInputEventSupported = false;\\nif (ExecutionEnvironment.canUseDOM) {\\n  // IE9 claims to support the input event but fails to trigger it when\\n  // deleting text, so we ignore its input events.\\n  // IE10+ fire input events to often, such when a placeholder\\n  // changes or when an input with a placeholder is focused.\\n  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);\\n}\\n\\n/**\\n * (For IE <=11) Replacement getter/setter for the `value` property that gets\\n * set on the active element.\\n */\\nvar newValueProp = {\\n  get: function () {\\n    return activeElementValueProp.get.call(this);\\n  },\\n  set: function (val) {\\n    // Cast to a string so we can do equality checks.\\n    activeElementValue = '' + val;\\n    activeElementValueProp.set.call(this, val);\\n  }\\n};\\n\\n/**\\n * (For IE <=11) Starts tracking propertychange events on the passed-in element\\n * and override the value property so that we can distinguish user events from\\n * value changes in JS.\\n */\\nfunction startWatchingForValueChange(target, targetInst) {\\n  activeElement = target;\\n  activeElementInst = targetInst;\\n  activeElementValue = target.value;\\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\\n\\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\\n  // on DOM elements\\n  Object.defineProperty(activeElement, 'value', newValueProp);\\n  if (activeElement.attachEvent) {\\n    activeElement.attachEvent('onpropertychange', handlePropertyChange);\\n  } else {\\n    activeElement.addEventListener('propertychange', handlePropertyChange, false);\\n  }\\n}\\n\\n/**\\n * (For IE <=11) Removes the event listeners from the currently-tracked element,\\n * if any exists.\\n */\\nfunction stopWatchingForValueChange() {\\n  if (!activeElement) {\\n    return;\\n  }\\n\\n  // delete restores the original property definition\\n  delete activeElement.value;\\n\\n  if (activeElement.detachEvent) {\\n    activeElement.detachEvent('onpropertychange', handlePropertyChange);\\n  } else {\\n    activeElement.removeEventListener('propertychange', handlePropertyChange, false);\\n  }\\n\\n  activeElement = null;\\n  activeElementInst = null;\\n  activeElementValue = null;\\n  activeElementValueProp = null;\\n}\\n\\n/**\\n * (For IE <=11) Handles a propertychange event, sending a `change` event if\\n * the value of the active element has changed.\\n */\\nfunction handlePropertyChange(nativeEvent) {\\n  if (nativeEvent.propertyName !== 'value') {\\n    return;\\n  }\\n  var value = nativeEvent.srcElement.value;\\n  if (value === activeElementValue) {\\n    return;\\n  }\\n  activeElementValue = value;\\n\\n  manualDispatchChangeEvent(nativeEvent);\\n}\\n\\n/**\\n * If a `change` event should be fired, returns the target's ID.\\n */\\nfunction getTargetInstForInputEvent(topLevelType, targetInst) {\\n  if (topLevelType === 'topInput') {\\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\\n    // what we want so fall through here and trigger an abstract event\\n    return targetInst;\\n  }\\n}\\n\\nfunction handleEventsForInputEventIE(topLevelType, target, targetInst) {\\n  if (topLevelType === 'topFocus') {\\n    // In IE8, we can capture almost all .value changes by adding a\\n    // propertychange handler and looking for events with propertyName\\n    // equal to 'value'\\n    // In IE9-11, propertychange fires for most input events but is buggy and\\n    // doesn't fire when text is deleted, but conveniently, selectionchange\\n    // appears to fire in all of the remaining cases so we catch those and\\n    // forward the event if the value has changed\\n    // In either case, we don't want to call the event handler if the value\\n    // is changed from JS so we redefine a setter for `.value` that updates\\n    // our activeElementValue variable, allowing us to ignore those changes\\n    //\\n    // stopWatching() should be a noop here but we call it just in case we\\n    // missed a blur event somehow.\\n    stopWatchingForValueChange();\\n    startWatchingForValueChange(target, targetInst);\\n  } else if (topLevelType === 'topBlur') {\\n    stopWatchingForValueChange();\\n  }\\n}\\n\\n// For IE8 and IE9.\\nfunction getTargetInstForInputEventIE(topLevelType, targetInst) {\\n  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {\\n    // On the selectionchange event, the target is just document which isn't\\n    // helpful for us so just check activeElement instead.\\n    //\\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\\n    // propertychange on the first input event after setting `value` from a\\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\\n    // gets it and catching keydown lets us fire an event for the first\\n    // keystroke if user does a key repeat (it'll be a little delayed: right\\n    // before the second keystroke). Other input methods (e.g., paste) seem to\\n    // fire selectionchange normally.\\n    if (activeElement && activeElement.value !== activeElementValue) {\\n      activeElementValue = activeElement.value;\\n      return activeElementInst;\\n    }\\n  }\\n}\\n\\n/**\\n * SECTION: handle `click` event\\n */\\nfunction shouldUseClickEvent(elem) {\\n  // Use the `click` event to detect changes to checkbox and radio inputs.\\n  // This approach works across all browsers, whereas `change` does not fire\\n  // until `blur` in IE8.\\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\\n}\\n\\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {\\n  if (topLevelType === 'topClick') {\\n    return targetInst;\\n  }\\n}\\n\\n/**\\n * This plugin creates an `onChange` event that normalizes change events\\n * across form elements. This event fires at a time when it's possible to\\n * change the element's value without seeing a flicker.\\n *\\n * Supported elements are:\\n * - input (see `isTextInputElement`)\\n * - textarea\\n * - select\\n */\\nvar ChangeEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\\n\\n    var getTargetInstFunc, handleEventFunc;\\n    if (shouldUseChangeEvent(targetNode)) {\\n      if (doesChangeEventBubble) {\\n        getTargetInstFunc = getTargetInstForChangeEvent;\\n      } else {\\n        handleEventFunc = handleEventsForChangeEventIE8;\\n      }\\n    } else if (isTextInputElement(targetNode)) {\\n      if (isInputEventSupported) {\\n        getTargetInstFunc = getTargetInstForInputEvent;\\n      } else {\\n        getTargetInstFunc = getTargetInstForInputEventIE;\\n        handleEventFunc = handleEventsForInputEventIE;\\n      }\\n    } else if (shouldUseClickEvent(targetNode)) {\\n      getTargetInstFunc = getTargetInstForClickEvent;\\n    }\\n\\n    if (getTargetInstFunc) {\\n      var inst = getTargetInstFunc(topLevelType, targetInst);\\n      if (inst) {\\n        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);\\n        event.type = 'change';\\n        EventPropagators.accumulateTwoPhaseDispatches(event);\\n        return event;\\n      }\\n    }\\n\\n    if (handleEventFunc) {\\n      handleEventFunc(topLevelType, targetNode, targetInst);\\n    }\\n  }\\n\\n};\\n\\nmodule.exports = ChangeEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"manualDispatchChangeEvent\",\"nativeEvent\",\"event\",\"SyntheticEvent\",\"getPooled\",\"eventTypes\",\"change\",\"activeElementInst\",\"getEventTarget\",\"EventPropagators\",\"accumulateTwoPhaseDispatches\",\"ReactUpdates\",\"batchedUpdates\",\"runEventInBatch\",\"EventPluginHub\",\"enqueueEvents\",\"processEventQueue\",\"stopWatchingForChangeEventIE8\",\"activeElement\",\"detachEvent\",\"getTargetInstForChangeEvent\",\"topLevelType\",\"targetInst\",\"handleEventsForChangeEventIE8\",\"target\",\"attachEvent\",\"stopWatchingForValueChange\",\"value\",\"handlePropertyChange\",\"removeEventListener\",\"activeElementValueProp\",\"activeElementValue\",\"propertyName\",\"srcElement\",\"getTargetInstForInputEvent\",\"handleEventsForInputEventIE\",\"Object\",\"getOwnPropertyDescriptor\",\"constructor\",\"prototype\",\"defineProperty\",\"newValueProp\",\"addEventListener\",\"getTargetInstForInputEventIE\",\"getTargetInstForClickEvent\",\"ExecutionEnvironment\",\"ReactDOMComponentTree\",\"isEventSupported\",\"isTextInputElement\",\"phasedRegistrationNames\",\"bubbled\",\"captured\",\"dependencies\",\"doesChangeEventBubble\",\"canUseDOM\",\"document\",\"documentMode\",\"isInputEventSupported\",\"get\",\"call\",\"set\",\"val\",\"ChangeEventPlugin\",\"extractEvents\",\"nativeEventTarget\",\"targetNode\",\"getNodeFromInstance\",\"window\",\"getTargetInstFunc\",\"handleEventFunc\",\"nodeName\",\"toLowerCase\",\"type\",\"inst\"]\n}\n"]