["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/ReactInputSelection.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$ReactInputSelection=function(global,process,require,module,exports,shadow$shims){var ReactDOMSelection=require(\"module$node_modules$react_dom$lib$ReactDOMSelection\"),containsNode=require(\"module$node_modules$fbjs$lib$containsNode\"),focusNode=require(\"module$node_modules$fbjs$lib$focusNode\"),getActiveElement=require(\"module$node_modules$fbjs$lib$getActiveElement\"),ReactInputSelection={hasSelectionCapabilities:function(elem){var nodeName=elem&&elem.nodeName&&\nelem.nodeName.toLowerCase();return nodeName&&(\"input\"===nodeName&&\"text\"===elem.type||\"textarea\"===nodeName||\"true\"===elem.contentEditable)},getSelectionInformation:function(){var focusedElem=getActiveElement();return{focusedElem:focusedElem,selectionRange:ReactInputSelection.hasSelectionCapabilities(focusedElem)?ReactInputSelection.getSelection(focusedElem):null}},restoreSelection:function(priorSelectionInformation){var curFocusedElem=getActiveElement(),priorFocusedElem=priorSelectionInformation.focusedElem;\npriorSelectionInformation=priorSelectionInformation.selectionRange;curFocusedElem!==priorFocusedElem&&containsNode(document.documentElement,priorFocusedElem)&&(ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)&&ReactInputSelection.setSelection(priorFocusedElem,priorSelectionInformation),focusNode(priorFocusedElem))},getSelection:function(input){if(\"selectionStart\"in input)var selection={start:input.selectionStart,end:input.selectionEnd};else if(document.selection&&input.nodeName&&\"input\"===\ninput.nodeName.toLowerCase()){var range=document.selection.createRange();range.parentElement()===input&&(selection={start:-range.moveStart(\"character\",-input.value.length),end:-range.moveEnd(\"character\",-input.value.length)})}else selection=ReactDOMSelection.getOffsets(input);return selection||{start:0,end:0}},setSelection:function(input,offsets){var start=offsets.start,end=offsets.end;void 0===end&&(end=start);\"selectionStart\"in input?(input.selectionStart=start,input.selectionEnd=Math.min(end,input.value.length)):\ndocument.selection&&input.nodeName&&\"input\"===input.nodeName.toLowerCase()?(input=input.createTextRange(),input.collapse(!0),input.moveStart(\"character\",start),input.moveEnd(\"character\",end-start),input.select()):ReactDOMSelection.setOffsets(input,offsets)}};module.exports=ReactInputSelection}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$ReactInputSelection\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || { start: 0, end: 0 };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (end === undefined) {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$getActiveElement","~$module$node_modules$fbjs$lib$containsNode","~$shadow.js","~$module$node_modules$react_dom$lib$ReactDOMSelection","~$module$node_modules$fbjs$lib$focusNode"]],"~:properties",["^5",["hasSelectionCapabilities","restoreSelection","selectionStart","getSelection","setSelection","start","selectionEnd","focusedElem","end","selectionRange","getSelectionInformation"]],"~:compiled-at",1635270336852,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$ReactInputSelection.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-dom/lib/ReactInputSelection.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$ReactInputSelection\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar ReactDOMSelection = require('./ReactDOMSelection');\\n\\nvar containsNode = require('fbjs/lib/containsNode');\\nvar focusNode = require('fbjs/lib/focusNode');\\nvar getActiveElement = require('fbjs/lib/getActiveElement');\\n\\nfunction isInDocument(node) {\\n  return containsNode(document.documentElement, node);\\n}\\n\\n/**\\n * @ReactInputSelection: React input selection module. Based on Selection.js,\\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\\n * assume buttons have range selections allowed).\\n * Input selection module for React.\\n */\\nvar ReactInputSelection = {\\n\\n  hasSelectionCapabilities: function (elem) {\\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\\n  },\\n\\n  getSelectionInformation: function () {\\n    var focusedElem = getActiveElement();\\n    return {\\n      focusedElem: focusedElem,\\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\\n    };\\n  },\\n\\n  /**\\n   * @restoreSelection: If any selection information was potentially lost,\\n   * restore it. This is useful when performing operations that could remove dom\\n   * nodes and place them back in, resulting in focus being lost.\\n   */\\n  restoreSelection: function (priorSelectionInformation) {\\n    var curFocusedElem = getActiveElement();\\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\\n      }\\n      focusNode(priorFocusedElem);\\n    }\\n  },\\n\\n  /**\\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\\n   * contentEditable node.\\n   * -@input: Look up selection bounds of this input\\n   * -@return {start: selectionStart, end: selectionEnd}\\n   */\\n  getSelection: function (input) {\\n    var selection;\\n\\n    if ('selectionStart' in input) {\\n      // Modern browser with input or textarea.\\n      selection = {\\n        start: input.selectionStart,\\n        end: input.selectionEnd\\n      };\\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\\n      // IE8 input.\\n      var range = document.selection.createRange();\\n      // There can only be one selection per document in IE, so it must\\n      // be in our element.\\n      if (range.parentElement() === input) {\\n        selection = {\\n          start: -range.moveStart('character', -input.value.length),\\n          end: -range.moveEnd('character', -input.value.length)\\n        };\\n      }\\n    } else {\\n      // Content editable or old IE textarea.\\n      selection = ReactDOMSelection.getOffsets(input);\\n    }\\n\\n    return selection || { start: 0, end: 0 };\\n  },\\n\\n  /**\\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\\n   * the input.\\n   * -@input     Set selection bounds of this input or textarea\\n   * -@offsets   Object of same form that is returned from get*\\n   */\\n  setSelection: function (input, offsets) {\\n    var start = offsets.start;\\n    var end = offsets.end;\\n    if (end === undefined) {\\n      end = start;\\n    }\\n\\n    if ('selectionStart' in input) {\\n      input.selectionStart = start;\\n      input.selectionEnd = Math.min(end, input.value.length);\\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\\n      var range = input.createTextRange();\\n      range.collapse(true);\\n      range.moveStart('character', start);\\n      range.moveEnd('character', end - start);\\n      range.select();\\n    } else {\\n      ReactDOMSelection.setOffsets(input, offsets);\\n    }\\n  }\\n};\\n\\nmodule.exports = ReactInputSelection;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ReactDOMSelection\",\"containsNode\",\"focusNode\",\"getActiveElement\",\"ReactInputSelection\",\"hasSelectionCapabilities\",\"elem\",\"nodeName\",\"toLowerCase\",\"type\",\"contentEditable\",\"getSelectionInformation\",\"focusedElem\",\"selectionRange\",\"getSelection\",\"restoreSelection\",\"priorSelectionInformation\",\"curFocusedElem\",\"priorFocusedElem\",\"priorSelectionRange\",\"document\",\"documentElement\",\"setSelection\",\"input\",\"selection\",\"start\",\"selectionStart\",\"end\",\"selectionEnd\",\"range\",\"createRange\",\"parentElement\",\"moveStart\",\"value\",\"length\",\"moveEnd\",\"getOffsets\",\"offsets\",\"undefined\",\"Math\",\"min\",\"createTextRange\",\"collapse\",\"select\",\"setOffsets\"]\n}\n"]