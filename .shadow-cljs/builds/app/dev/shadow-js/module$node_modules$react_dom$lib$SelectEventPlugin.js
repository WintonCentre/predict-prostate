["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/SelectEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$SelectEventPlugin=function(global,process,require,module,exports,shadow$shims){function constructSelectEvent(nativeEvent,nativeEventTarget){if(mouseDown||null==activeElement||activeElement!==getActiveElement())return null;var currentSelection=activeElement;\"selectionStart\"in currentSelection&&ReactInputSelection.hasSelectionCapabilities(currentSelection)?currentSelection={start:currentSelection.selectionStart,end:currentSelection.selectionEnd}:window.getSelection?\n(currentSelection=window.getSelection(),currentSelection={anchorNode:currentSelection.anchorNode,anchorOffset:currentSelection.anchorOffset,focusNode:currentSelection.focusNode,focusOffset:currentSelection.focusOffset}):document.selection?(currentSelection=document.selection.createRange(),currentSelection={parentElement:currentSelection.parentElement(),text:currentSelection.text,top:currentSelection.boundingTop,left:currentSelection.boundingLeft}):currentSelection=void 0;return lastSelection&&shallowEqual(lastSelection,\ncurrentSelection)?null:(lastSelection=currentSelection,nativeEvent=SyntheticEvent.getPooled(eventTypes.select,activeElementInst,nativeEvent,nativeEventTarget),nativeEvent.type=\"select\",nativeEvent.target=activeElement,EventPropagators.accumulateTwoPhaseDispatches(nativeEvent),nativeEvent)}var EventPropagators=require(\"module$node_modules$react_dom$lib$EventPropagators\");global=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var ReactDOMComponentTree=require(\"module$node_modules$react_dom$lib$ReactDOMComponentTree\"),\nReactInputSelection=require(\"module$node_modules$react_dom$lib$ReactInputSelection\"),SyntheticEvent=require(\"module$node_modules$react_dom$lib$SyntheticEvent\"),getActiveElement=require(\"module$node_modules$fbjs$lib$getActiveElement\"),isTextInputElement=require(\"module$node_modules$react_dom$lib$isTextInputElement\"),shallowEqual=require(\"module$node_modules$fbjs$lib$shallowEqual\"),skipSelectionChangeEvent=global.canUseDOM&&\"documentMode\"in document&&11>=document.documentMode,eventTypes={select:{phasedRegistrationNames:{bubbled:\"onSelect\",\ncaptured:\"onSelectCapture\"},dependencies:\"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange\".split(\" \")}},activeElement=null,activeElementInst=null,lastSelection=null,mouseDown=!1,hasListener=!1;module.exports={eventTypes:eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){if(!hasListener)return null;var targetNode=targetInst?ReactDOMComponentTree.getNodeFromInstance(targetInst):window;switch(topLevelType){case \"topFocus\":if(isTextInputElement(targetNode)||\n\"true\"===targetNode.contentEditable)activeElement=targetNode,activeElementInst=targetInst,lastSelection=null;break;case \"topBlur\":lastSelection=activeElementInst=activeElement=null;break;case \"topMouseDown\":mouseDown=!0;break;case \"topContextMenu\":case \"topMouseUp\":return mouseDown=!1,constructSelectEvent(nativeEvent,nativeEventTarget);case \"topSelectionChange\":if(skipSelectionChangeEvent)break;case \"topKeyDown\":case \"topKeyUp\":return constructSelectEvent(nativeEvent,nativeEventTarget)}return null},\ndidPutListener:function(inst,registrationName,listener){\"onSelect\"===registrationName&&(hasListener=!0)}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$SelectEventPlugin\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: 'onSelect',\n      captured: 'onSelectCapture'\n    },\n    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']\n  }\n};\n\nvar activeElement = null;\nvar activeElementInst = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events. See #3639.\nvar hasListener = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case 'topFocus':\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n          activeElement = targetNode;\n          activeElementInst = targetInst;\n          lastSelection = null;\n        }\n        break;\n      case 'topBlur':\n        activeElement = null;\n        activeElementInst = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case 'topMouseDown':\n        mouseDown = true;\n        break;\n      case 'topContextMenu':\n      case 'topMouseUp':\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case 'topSelectionChange':\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case 'topKeyDown':\n      case 'topKeyUp':\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (inst, registrationName, listener) {\n    if (registrationName === 'onSelect') {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$shallowEqual","~$module$node_modules$fbjs$lib$getActiveElement","~$shadow.js","~$module$node_modules$react_dom$lib$isTextInputElement","~$module$node_modules$react_dom$lib$ReactDOMComponentTree","~$module$node_modules$react_dom$lib$ReactInputSelection","~$module$node_modules$react_dom$lib$EventPropagators","~$module$node_modules$fbjs$lib$ExecutionEnvironment","~$module$node_modules$react_dom$lib$SyntheticEvent"]],"~:properties",["^5",["bubbled","anchorOffset","top","didPutListener","dependencies","parentElement","focusNode","anchorNode","eventTypes","select","start","text","focusOffset","captured","type","target","extractEvents","end","left","phasedRegistrationNames"]],"~:compiled-at",1635270336853,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$SelectEventPlugin.js\",\n\"lineCount\":7,\n\"mappings\":\"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAoFrIC,QAASA,qBAAoB,CAACC,WAAD,CAAcC,iBAAd,CAAiC,CAK5D,GAAIC,SAAJ,EAAkC,IAAlC,EAAiBC,aAAjB,EAA0CA,aAA1C,GAA4DC,gBAAA,EAA5D,CACE,MAAO,KAI2BD,KAAAA,iBAAAA,aAxChC,iBAAJ,EAAwBE,iBAAxB,EAAgCC,mBAAAC,yBAAA,CAA6CF,gBAA7C,CAAhC,CACE,gBADF,CACS,CACLG,MAAOH,gBAAAI,eADF,CAELC,IAAKL,gBAAAM,aAFA,CADT,CAKWC,MAAAC,aAAJ;CACDC,gBACJ,CADgBF,MAAAC,aAAA,EAChB,CAAA,gBAAA,CAAO,CACLE,WAAYD,gBAAAC,WADP,CAELC,aAAcF,gBAAAE,aAFT,CAGLC,UAAWH,gBAAAG,UAHN,CAILC,YAAaJ,gBAAAI,YAJR,CAFF,EAQIC,QAAAL,UAAJ,EACDM,gBACJ,CADYD,QAAAL,UAAAO,YAAA,EACZ,CAAA,gBAAA,CAAO,CACLC,cAAeF,gBAAAE,cAAA,EADV,CAELC,KAAMH,gBAAAG,KAFD,CAGLC,IAAKJ,gBAAAK,YAHA,CAILC,KAAMN,gBAAAO,aAJD,CAFF,EAdmB,gBAcnB,CAdmB,IAAA,EA0C1B,OAAKC,cAAL,EAAuBC,YAAA,CAAaD,aAAb;AAA4BE,gBAA5B,CAAvB,CAaO,IAbP,EACEF,aASOG,CATSD,gBASTC,CAPHA,WAOGA,CAPcC,cAAAC,UAAA,CAAyBC,UAAAC,OAAzB,CAA4CC,iBAA5C,CAA+DpC,WAA/D,CAA4EC,iBAA5E,CAOd8B,CALPA,WAAAM,KAKON,CALe,QAKfA,CAJPA,WAAAO,OAIOP,CAJiB5B,aAIjB4B,CAFPQ,gBAAAC,6BAAA,CAA8CT,WAA9C,CAEOA,CAAAA,WAVT,CAX4D,CAvE9D,IAAIQ,iBAAmB5C,OAAA,CAAQ,oDAAR,CACnB8C,OAAAA,CAAuB9C,OAAA,CAAQ,mDAAR,CAC3B,KAAI+C,sBAAwB/C,OAAA,CAAQ,yDAAR,CAA5B;AACIW,oBAAsBX,OAAA,CAAQ,uDAAR,CAD1B,CAEIqC,eAAiBrC,OAAA,CAAQ,kDAAR,CAFrB,CAIIS,iBAAmBT,OAAA,CAAQ,+CAAR,CAJvB,CAKIgD,mBAAqBhD,OAAA,CAAQ,sDAAR,CALzB,CAMIkC,aAAelC,OAAA,CAAQ,2CAAR,CANnB,CAQIiD,yBAA2BH,MAAAI,UAA3BD,EAA6D,cAA7DA,EAA+EzB,SAA/EyB,EAAoH,EAApHA,EAA2FzB,QAAA2B,aAR/F,CAUIZ,WAAa,CACfC,OAAQ,CACNY,wBAAyB,CACvBC,QAAS,UADc;AAEvBC,SAAU,iBAFa,CADnB,CAKNC,aAAc,gGAAA,MAAA,CAAA,GAAA,CALR,CADO,CAVjB,CAoBI/C,cAAgB,IApBpB,CAqBIiC,kBAAoB,IArBxB,CAsBIR,cAAgB,IAtBpB,CAuBI1B,UAAY,CAAA,CAvBhB,CA2BIiD,YAAc,CAAA,CAoJlBvD,OAAAC,QAAA,CAjEwBuD,CAEtBlB,WAAYA,UAFUkB,CAItBC,cAAeA,QAAS,CAACC,YAAD,CAAeC,UAAf,CAA2BvD,WAA3B,CAAwCC,iBAAxC,CAA2D,CACjF,GAAI,CAACkD,WAAL,CACE,MAAO,KAGT,KAAIK,WAAaD,UAAA,CAAab,qBAAAe,oBAAA,CAA0CF,UAA1C,CAAb,CAAqE3C,MAEtF,QAAQ0C,YAAR,EAEE,KAAK,UAAL,CACE,GAAIX,kBAAA,CAAmBa,UAAnB,CAAJ;AAAqE,MAArE,GAAsCA,UAAAE,gBAAtC,CACEvD,aAEA,CAFgBqD,UAEhB,CADApB,iBACA,CADoBmB,UACpB,CAAA3B,aAAA,CAAgB,IAElB,MACF,MAAK,SAAL,CAGEA,aAAA,CADAQ,iBACA,CAFAjC,aAEA,CAFgB,IAGhB,MAIF,MAAK,cAAL,CACED,SAAA,CAAY,CAAA,CACZ,MACF,MAAK,gBAAL,CACA,KAAK,YAAL,CAEE,MADAA,UACO,CADK,CAAA,CACL,CAAAH,oBAAA,CAAqBC,WAArB,CAAkCC,iBAAlC,CAWT,MAAK,oBAAL,CACE,GAAI2C,wBAAJ,CACE,KAGJ,MAAK,YAAL,CACA,KAAK,UAAL,CACE,MAAO7C,qBAAA,CAAqBC,WAArB,CAAkCC,iBAAlC,CAzCX,CA4CA,MAAO,KAnD0E,CAJ7DmD;AA0DtBO,eAAgBA,QAAS,CAACC,IAAD,CAAOC,gBAAP,CAAyBC,QAAzB,CAAmC,CACjC,UAAzB,GAAID,gBAAJ,GACEV,WADF,CACgB,CAAA,CADhB,CAD0D,CA1DtCC,CA7H6G;\",\n\"sources\":[\"node_modules/react-dom/lib/SelectEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$SelectEventPlugin\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar EventPropagators = require('./EventPropagators');\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar ReactInputSelection = require('./ReactInputSelection');\\nvar SyntheticEvent = require('./SyntheticEvent');\\n\\nvar getActiveElement = require('fbjs/lib/getActiveElement');\\nvar isTextInputElement = require('./isTextInputElement');\\nvar shallowEqual = require('fbjs/lib/shallowEqual');\\n\\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\\n\\nvar eventTypes = {\\n  select: {\\n    phasedRegistrationNames: {\\n      bubbled: 'onSelect',\\n      captured: 'onSelectCapture'\\n    },\\n    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']\\n  }\\n};\\n\\nvar activeElement = null;\\nvar activeElementInst = null;\\nvar lastSelection = null;\\nvar mouseDown = false;\\n\\n// Track whether a listener exists for this plugin. If none exist, we do\\n// not extract events. See #3639.\\nvar hasListener = false;\\n\\n/**\\n * Get an object which is a unique representation of the current selection.\\n *\\n * The return value will not be consistent across nodes or browsers, but\\n * two identical selections on the same node will return identical objects.\\n *\\n * @param {DOMElement} node\\n * @return {object}\\n */\\nfunction getSelection(node) {\\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\\n    return {\\n      start: node.selectionStart,\\n      end: node.selectionEnd\\n    };\\n  } else if (window.getSelection) {\\n    var selection = window.getSelection();\\n    return {\\n      anchorNode: selection.anchorNode,\\n      anchorOffset: selection.anchorOffset,\\n      focusNode: selection.focusNode,\\n      focusOffset: selection.focusOffset\\n    };\\n  } else if (document.selection) {\\n    var range = document.selection.createRange();\\n    return {\\n      parentElement: range.parentElement(),\\n      text: range.text,\\n      top: range.boundingTop,\\n      left: range.boundingLeft\\n    };\\n  }\\n}\\n\\n/**\\n * Poll selection to see whether it's changed.\\n *\\n * @param {object} nativeEvent\\n * @return {?SyntheticEvent}\\n */\\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\\n  // Ensure we have the right element, and that the user is not dragging a\\n  // selection (this matches native `select` event behavior). In HTML5, select\\n  // fires only on input and textarea thus if there's no focused element we\\n  // won't dispatch.\\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\\n    return null;\\n  }\\n\\n  // Only fire when selection has actually changed.\\n  var currentSelection = getSelection(activeElement);\\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\\n    lastSelection = currentSelection;\\n\\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\\n\\n    syntheticEvent.type = 'select';\\n    syntheticEvent.target = activeElement;\\n\\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\\n\\n    return syntheticEvent;\\n  }\\n\\n  return null;\\n}\\n\\n/**\\n * This plugin creates an `onSelect` event that normalizes select events\\n * across form elements.\\n *\\n * Supported elements are:\\n * - input (see `isTextInputElement`)\\n * - textarea\\n * - contentEditable\\n *\\n * This differs from native browser implementations in the following ways:\\n * - Fires on contentEditable fields as well as inputs.\\n * - Fires for collapsed selection.\\n * - Fires after user input.\\n */\\nvar SelectEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    if (!hasListener) {\\n      return null;\\n    }\\n\\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\\n\\n    switch (topLevelType) {\\n      // Track the input node that has focus.\\n      case 'topFocus':\\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\\n          activeElement = targetNode;\\n          activeElementInst = targetInst;\\n          lastSelection = null;\\n        }\\n        break;\\n      case 'topBlur':\\n        activeElement = null;\\n        activeElementInst = null;\\n        lastSelection = null;\\n        break;\\n\\n      // Don't fire the event while the user is dragging. This matches the\\n      // semantics of the native select event.\\n      case 'topMouseDown':\\n        mouseDown = true;\\n        break;\\n      case 'topContextMenu':\\n      case 'topMouseUp':\\n        mouseDown = false;\\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\\n\\n      // Chrome and IE fire non-standard event when selection is changed (and\\n      // sometimes when it hasn't). IE's event fires out of order with respect\\n      // to key and input events on deletion, so we discard it.\\n      //\\n      // Firefox doesn't support selectionchange, so check selection status\\n      // after each key entry. The selection changes after keydown and before\\n      // keyup, but we check on keydown as well in the case of holding down a\\n      // key, when multiple keydown events are fired but only one keyup is.\\n      // This is also our approach for IE handling, for the reason above.\\n      case 'topSelectionChange':\\n        if (skipSelectionChangeEvent) {\\n          break;\\n        }\\n      // falls through\\n      case 'topKeyDown':\\n      case 'topKeyUp':\\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\\n    }\\n\\n    return null;\\n  },\\n\\n  didPutListener: function (inst, registrationName, listener) {\\n    if (registrationName === 'onSelect') {\\n      hasListener = true;\\n    }\\n  }\\n};\\n\\nmodule.exports = SelectEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"constructSelectEvent\",\"nativeEvent\",\"nativeEventTarget\",\"mouseDown\",\"activeElement\",\"getActiveElement\",\"node\",\"ReactInputSelection\",\"hasSelectionCapabilities\",\"start\",\"selectionStart\",\"end\",\"selectionEnd\",\"window\",\"getSelection\",\"selection\",\"anchorNode\",\"anchorOffset\",\"focusNode\",\"focusOffset\",\"document\",\"range\",\"createRange\",\"parentElement\",\"text\",\"top\",\"boundingTop\",\"left\",\"boundingLeft\",\"lastSelection\",\"shallowEqual\",\"currentSelection\",\"syntheticEvent\",\"SyntheticEvent\",\"getPooled\",\"eventTypes\",\"select\",\"activeElementInst\",\"type\",\"target\",\"EventPropagators\",\"accumulateTwoPhaseDispatches\",\"ExecutionEnvironment\",\"ReactDOMComponentTree\",\"isTextInputElement\",\"skipSelectionChangeEvent\",\"canUseDOM\",\"documentMode\",\"phasedRegistrationNames\",\"bubbled\",\"captured\",\"dependencies\",\"hasListener\",\"SelectEventPlugin\",\"extractEvents\",\"topLevelType\",\"targetInst\",\"targetNode\",\"getNodeFromInstance\",\"contentEditable\",\"didPutListener\",\"inst\",\"registrationName\",\"listener\"]\n}\n"]