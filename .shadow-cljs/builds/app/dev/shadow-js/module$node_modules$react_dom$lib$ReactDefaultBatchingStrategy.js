["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$ReactDefaultBatchingStrategy=function(global,process,require,module,exports,shadow$shims){function ReactDefaultBatchingStrategyTransaction(){this.reinitializeTransaction()}global=require(\"module$node_modules$object_assign$index\");process=require(\"module$node_modules$react_dom$lib$ReactUpdates\");exports=require(\"module$node_modules$react_dom$lib$Transaction\");require=require(\"module$node_modules$fbjs$lib$emptyFunction\");shadow$shims={initialize:require,\nclose:function(){ReactDefaultBatchingStrategy.isBatchingUpdates=!1}};var TRANSACTION_WRAPPERS=[{initialize:require,close:process.flushBatchedUpdates.bind(process)},shadow$shims];global(ReactDefaultBatchingStrategyTransaction.prototype,exports,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS}});var transaction=new ReactDefaultBatchingStrategyTransaction,ReactDefaultBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(callback,a,b,c,d,e){var alreadyBatchingUpdates=ReactDefaultBatchingStrategy.isBatchingUpdates;\nReactDefaultBatchingStrategy.isBatchingUpdates=!0;return alreadyBatchingUpdates?callback(a,b,c,d,e):transaction.perform(callback,null,a,b,c,d,e)}};module.exports=ReactDefaultBatchingStrategy}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$ReactDefaultBatchingStrategy\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      return callback(a, b, c, d, e);\n    } else {\n      return transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$ReactUpdates","~$module$node_modules$object_assign$index","~$shadow.js","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$react_dom$lib$Transaction"]],"~:properties",["^5",["batchedUpdates","isBatchingUpdates","getTransactionWrappers","close","initialize"]],"~:compiled-at",1635270336850,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$ReactDefaultBatchingStrategy.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAkChJC,QAASA,wCAAuC,EAAG,CACjD,IAAAC,wBAAA,EADiD,CArB/CC,MAAAA,CAAUN,OAAA,CAAQ,yCAAR,CAEVO,QAAAA,CAAeP,OAAA,CAAQ,gDAAR,CACfQ,QAAAA,CAAcR,OAAA,CAAQ,+CAAR,CAEdS,QAAAA,CAAgBT,OAAA,CAAQ,4CAAR,CAEhBU,aAAAA,CAAwB,CAC1BC,WAAYF,OADc;AAE1BG,MAAOA,QAAS,EAAG,CACjBC,4BAAAC,kBAAA,CAAiD,CAAA,CADhC,CAFO,CAY5B,KAAIC,qBAAuB,CALCC,CAC1BL,WAAYF,OADcO,CAE1BJ,MAAOL,OAAAU,oBAAAC,KAAA,CAAsCX,OAAtC,CAFmBS,CAKD,CAAwBN,YAAxB,CAM3BJ,OAAA,CAAQF,uCAAAe,UAAR,CAA2DX,OAA3D,CAAwE,CACtEY,uBAAwBA,QAAS,EAAG,CAClC,MAAOL,qBAD2B,CADkC,CAAxE,CAMA,KAAIM,YAAc,IAAIjB,uCAAtB,CAEIS,6BAA+B,CACjCC,kBAAmB,CAAA,CADc,CAOjCQ,eAAgBA,QAAS,CAACC,QAAD,CAAWC,CAAX,CAAcC,CAAd,CAAiBC,CAAjB,CAAoBC,CAApB,CAAuBC,CAAvB,CAA0B,CACjD,IAAIC,uBAAyBhB,4BAAAC,kBAE7BD;4BAAAC,kBAAA,CAAiD,CAAA,CAGjD,OAAIe,uBAAJ,CACSN,QAAA,CAASC,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAkBC,CAAlB,CAAqBC,CAArB,CADT,CAGSP,WAAAS,QAAA,CAAoBP,QAApB,CAA8B,IAA9B,CAAoCC,CAApC,CAAuCC,CAAvC,CAA0CC,CAA1C,CAA6CC,CAA7C,CAAgDC,CAAhD,CATwC,CAPlB,CAqBnC3B,OAAAC,QAAA,CAAiBW,4BAnE+H;\",\n\"sources\":[\"node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$ReactDefaultBatchingStrategy\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar ReactUpdates = require('./ReactUpdates');\\nvar Transaction = require('./Transaction');\\n\\nvar emptyFunction = require('fbjs/lib/emptyFunction');\\n\\nvar RESET_BATCHED_UPDATES = {\\n  initialize: emptyFunction,\\n  close: function () {\\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\\n  }\\n};\\n\\nvar FLUSH_BATCHED_UPDATES = {\\n  initialize: emptyFunction,\\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\\n};\\n\\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\\n\\nfunction ReactDefaultBatchingStrategyTransaction() {\\n  this.reinitializeTransaction();\\n}\\n\\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {\\n  getTransactionWrappers: function () {\\n    return TRANSACTION_WRAPPERS;\\n  }\\n});\\n\\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\\n\\nvar ReactDefaultBatchingStrategy = {\\n  isBatchingUpdates: false,\\n\\n  /**\\n   * Call the provided function in a context within which calls to `setState`\\n   * and friends are batched such that components aren't updated unnecessarily.\\n   */\\n  batchedUpdates: function (callback, a, b, c, d, e) {\\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\\n\\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\\n\\n    // The code is written this way to avoid extra allocations\\n    if (alreadyBatchingUpdates) {\\n      return callback(a, b, c, d, e);\\n    } else {\\n      return transaction.perform(callback, null, a, b, c, d, e);\\n    }\\n  }\\n};\\n\\nmodule.exports = ReactDefaultBatchingStrategy;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ReactDefaultBatchingStrategyTransaction\",\"reinitializeTransaction\",\"_assign\",\"ReactUpdates\",\"Transaction\",\"emptyFunction\",\"RESET_BATCHED_UPDATES\",\"initialize\",\"close\",\"ReactDefaultBatchingStrategy\",\"isBatchingUpdates\",\"TRANSACTION_WRAPPERS\",\"FLUSH_BATCHED_UPDATES\",\"flushBatchedUpdates\",\"bind\",\"prototype\",\"getTransactionWrappers\",\"transaction\",\"batchedUpdates\",\"callback\",\"a\",\"b\",\"c\",\"d\",\"e\",\"alreadyBatchingUpdates\",\"perform\"]\n}\n"]