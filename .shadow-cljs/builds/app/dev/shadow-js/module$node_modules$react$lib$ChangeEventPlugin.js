["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/ChangeEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react$lib$ChangeEventPlugin=function(global,require,module,exports){function manualDispatchChangeEvent(nativeEvent){nativeEvent=SyntheticEvent.getPooled(eventTypes.change,activeElementInst,nativeEvent,getEventTarget(nativeEvent));EventPropagators.accumulateTwoPhaseDispatches(nativeEvent);ReactUpdates.batchedUpdates(runEventInBatch,nativeEvent)}function runEventInBatch(event){EventPluginHub.enqueueEvents(event);EventPluginHub.processEventQueue(!1)}function stopWatchingForChangeEventIE8(){activeElement&&\n(activeElement.detachEvent(\"onchange\",manualDispatchChangeEvent),activeElementInst=activeElement=null)}function getTargetInstForChangeEvent(topLevelType,targetInst){if(topLevelType===topLevelTypes.topChange)return targetInst}function handleEventsForChangeEventIE8(topLevelType,target,targetInst){topLevelType===topLevelTypes.topFocus?(stopWatchingForChangeEventIE8(),activeElement=target,activeElementInst=targetInst,activeElement.attachEvent(\"onchange\",manualDispatchChangeEvent)):topLevelType===topLevelTypes.topBlur&&\nstopWatchingForChangeEventIE8()}function stopWatchingForValueChange(){activeElement&&(delete activeElement.value,activeElement.detachEvent?activeElement.detachEvent(\"onpropertychange\",handlePropertyChange):activeElement.removeEventListener(\"propertychange\",handlePropertyChange,!1),activeElementValueProp=activeElementValue=activeElementInst=activeElement=null)}function handlePropertyChange(nativeEvent){if(\"value\"===nativeEvent.propertyName){var value=nativeEvent.srcElement.value;value!==activeElementValue&&\n(activeElementValue=value,manualDispatchChangeEvent(nativeEvent))}}function getTargetInstForInputEvent(topLevelType,targetInst){if(topLevelType===topLevelTypes.topInput)return targetInst}function handleEventsForInputEventIE(topLevelType,target,targetInst){topLevelType===topLevelTypes.topFocus?(stopWatchingForValueChange(),activeElement=target,activeElementInst=targetInst,activeElementValue=target.value,activeElementValueProp=Object.getOwnPropertyDescriptor(target.constructor.prototype,\"value\"),Object.defineProperty(activeElement,\n\"value\",newValueProp),activeElement.attachEvent?activeElement.attachEvent(\"onpropertychange\",handlePropertyChange):activeElement.addEventListener(\"propertychange\",handlePropertyChange,!1)):topLevelType===topLevelTypes.topBlur&&stopWatchingForValueChange()}function getTargetInstForInputEventIE(topLevelType,targetInst){if((topLevelType===topLevelTypes.topSelectionChange||topLevelType===topLevelTypes.topKeyUp||topLevelType===topLevelTypes.topKeyDown)&&activeElement&&activeElement.value!==activeElementValue)return activeElementValue=\nactiveElement.value,activeElementInst}function getTargetInstForClickEvent(topLevelType,targetInst){if(topLevelType===topLevelTypes.topClick)return targetInst}global=require(\"module$node_modules$react$lib$EventConstants\");var EventPluginHub=require(\"module$node_modules$react$lib$EventPluginHub\"),EventPropagators=require(\"module$node_modules$react$lib$EventPropagators\");exports=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var ReactDOMComponentTree=require(\"module$node_modules$react$lib$ReactDOMComponentTree\"),\nReactUpdates=require(\"module$node_modules$react$lib$ReactUpdates\"),SyntheticEvent=require(\"module$node_modules$react$lib$SyntheticEvent\"),getEventTarget=require(\"module$node_modules$react$lib$getEventTarget\"),isEventSupported=require(\"module$node_modules$react$lib$isEventSupported\"),isTextInputElement=require(\"module$node_modules$react$lib$isTextInputElement\");require=require(\"module$node_modules$fbjs$lib$keyOf\");var topLevelTypes=global.topLevelTypes,eventTypes={change:{phasedRegistrationNames:{bubbled:require({onChange:null}),\ncaptured:require({onChangeCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topChange,topLevelTypes.topClick,topLevelTypes.topFocus,topLevelTypes.topInput,topLevelTypes.topKeyDown,topLevelTypes.topKeyUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementInst=null,activeElementValue=null,activeElementValueProp=null,doesChangeEventBubble=!1;exports.canUseDOM&&(doesChangeEventBubble=isEventSupported(\"change\")&&(!(\"documentMode\"in document)||8<document.documentMode));\nvar isInputEventSupported=!1;exports.canUseDOM&&(isInputEventSupported=isEventSupported(\"input\")&&(!(\"documentMode\"in document)||11<document.documentMode));var newValueProp={get:function(){return activeElementValueProp.get.call(this)},set:function(val){activeElementValue=\"\"+val;activeElementValueProp.set.call(this,val)}};module.exports={eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var targetNode=targetInst?ReactDOMComponentTree.getNodeFromInstance(targetInst):\nwindow,getTargetInstFunc,handleEventFunc,nodeName=targetNode.nodeName&&targetNode.nodeName.toLowerCase();\"select\"===nodeName||\"input\"===nodeName&&\"file\"===targetNode.type?doesChangeEventBubble?getTargetInstFunc=getTargetInstForChangeEvent:handleEventFunc=handleEventsForChangeEventIE8:isTextInputElement(targetNode)?isInputEventSupported?getTargetInstFunc=getTargetInstForInputEvent:(getTargetInstFunc=getTargetInstForInputEventIE,handleEventFunc=handleEventsForInputEventIE):targetNode.nodeName&&\"input\"===\ntargetNode.nodeName.toLowerCase()&&(\"checkbox\"===targetNode.type||\"radio\"===targetNode.type)&&(getTargetInstFunc=getTargetInstForClickEvent);if(getTargetInstFunc&&(getTargetInstFunc=getTargetInstFunc(topLevelType,targetInst)))return topLevelType=SyntheticEvent.getPooled(eventTypes.change,getTargetInstFunc,nativeEvent,nativeEventTarget),topLevelType.type=\"change\",EventPropagators.accumulateTwoPhaseDispatches(topLevelType),topLevelType;handleEventFunc&&handleEventFunc(topLevelType,targetNode,targetInst)}}}","~:source","shadow$provide[\"module$node_modules$react$lib$ChangeEventPlugin\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onChange: null }),\n      captured: keyOf({ onChangeCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementInst = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementInst = null;\n}\n\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return targetInst;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(target, targetInst);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  // IE10+ fire input events to often, such when a placeholder\n  // changes or when an input with a placeholder is focused.\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);\n}\n\n/**\n * (For IE <=11) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For IE <=11) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  if (activeElement.attachEvent) {\n    activeElement.attachEvent('onpropertychange', handlePropertyChange);\n  } else {\n    activeElement.addEventListener('propertychange', handlePropertyChange, false);\n  }\n}\n\n/**\n * (For IE <=11) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n\n  if (activeElement.detachEvent) {\n    activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  } else {\n    activeElement.removeEventListener('propertychange', handlePropertyChange, false);\n  }\n\n  activeElement = null;\n  activeElementInst = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For IE <=11) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetInstForInputEvent(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return targetInst;\n  }\n}\n\nfunction handleEventsForInputEventIE(topLevelType, target, targetInst) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9-11, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetInstForInputEventIE(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementInst;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return targetInst;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    var getTargetInstFunc, handleEventFunc;\n    if (shouldUseChangeEvent(targetNode)) {\n      if (doesChangeEventBubble) {\n        getTargetInstFunc = getTargetInstForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(targetNode)) {\n      if (isInputEventSupported) {\n        getTargetInstFunc = getTargetInstForInputEvent;\n      } else {\n        getTargetInstFunc = getTargetInstForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForClickEvent;\n    }\n\n    if (getTargetInstFunc) {\n      var inst = getTargetInstFunc(topLevelType, targetInst);\n      if (inst) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, targetNode, targetInst);\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$ReactDOMComponentTree","~$module$node_modules$react$lib$EventPluginHub","~$shadow.js","~$module$node_modules$react$lib$isTextInputElement","~$module$node_modules$react$lib$getEventTarget","~$module$node_modules$react$lib$ReactUpdates","~$module$node_modules$react$lib$SyntheticEvent","~$module$node_modules$react$lib$EventConstants","~$module$node_modules$fbjs$lib$ExecutionEnvironment","~$module$node_modules$react$lib$EventPropagators","~$module$node_modules$fbjs$lib$keyOf","~$module$node_modules$react$lib$isEventSupported"]],"~:properties",["^5",["bubbled","onChange","dependencies","onChangeCapture","eventTypes","value","captured","type","set","get","extractEvents","change","phasedRegistrationNames"]],"~:compiled-at",1635250628390,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$ChangeEventPlugin.js\",\n\"lineCount\":11,\n\"mappings\":\"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6D5GC,QAASA,0BAAyB,CAACC,WAAD,CAAc,CAC1CC,WAAAA,CAAQC,cAAeC,CAAAA,SAAf,CAAyBC,UAAWC,CAAAA,MAApC,CAA4CC,iBAA5C,CAA+DN,WAA/D,CAA4EO,cAAA,CAAeP,WAAf,CAA5E,CACZQ,iBAAiBC,CAAAA,4BAAjB,CAA8CR,WAA9C,CAaAS,aAAaC,CAAAA,cAAb,CAA4BC,eAA5B,CAA6CX,WAA7C,CAf8C,CAkBhDW,QAASA,gBAAe,CAACX,KAAD,CAAQ,CAC9BY,cAAeC,CAAAA,aAAf,CAA6Bb,KAA7B,CACAY,eAAeE,CAAAA,iBAAf,CAAiC,CAAA,CAAjC,CAF8B,CAWhCC,QAASA,8BAA6B,EAAG,CAClCC,aAAL;CAGAA,aAAcC,CAAAA,WAAd,CAA0B,UAA1B,CAAsCnB,yBAAtC,CAEA,CAAAO,iBAAA,CADAW,aACA,CADgB,IAJhB,CADuC,CASzCE,QAASA,4BAA2B,CAACC,YAAD,CAAeC,UAAf,CAA2B,CAC7D,GAAID,YAAJ,GAAqBE,aAAcC,CAAAA,SAAnC,CACE,MAAOF,WAFoD,CAK/DG,QAASA,8BAA6B,CAACJ,YAAD,CAAeK,MAAf,CAAuBJ,UAAvB,CAAmC,CACnED,YAAJ,GAAqBE,aAAcI,CAAAA,QAAnC,EAGEV,6BAAA,EArBF,CAFAC,aAEA,CAsBiCQ,MAtBjC,CADAnB,iBACA,CAsByCe,UAtBzC,CAAAJ,aAAcU,CAAAA,WAAd,CAA0B,UAA1B,CAAsC5B,yBAAtC,CAkBA,EAKWqB,YALX,GAK4BE,aAAcM,CAAAA,OAL1C;AAMEZ,6BAAA,EAPqE,CA+DzEa,QAASA,2BAA0B,EAAG,CAC/BZ,aAAL,GAKA,OAAOA,aAAca,CAAAA,KAWrB,CATIb,aAAcC,CAAAA,WAAlB,CACED,aAAcC,CAAAA,WAAd,CAA0B,kBAA1B,CAA8Ca,oBAA9C,CADF,CAGEd,aAAce,CAAAA,mBAAd,CAAkC,gBAAlC,CAAoDD,oBAApD,CAA0E,CAAA,CAA1E,CAMF,CAAAE,sBAAA,CADAC,kBACA,CAFA5B,iBAEA,CAHAW,aAGA,CAHgB,IAbhB,CADoC,CAwBtCc,QAASA,qBAAoB,CAAC/B,WAAD,CAAc,CACzC,GAAiC,OAAjC,GAAIA,WAAYmC,CAAAA,YAAhB,CAAA,CAGA,IAAIL,MAAQ9B,WAAYoC,CAAAA,UAAWN,CAAAA,KAC/BA,MAAJ,GAAcI,kBAAd;CAGAA,kBAEA,CAFqBJ,KAErB,CAAA/B,yBAAA,CAA0BC,WAA1B,CALA,CAJA,CADyC,CAgB3CqC,QAASA,2BAA0B,CAACjB,YAAD,CAAeC,UAAf,CAA2B,CAC5D,GAAID,YAAJ,GAAqBE,aAAcgB,CAAAA,QAAnC,CAGE,MAAOjB,WAJmD,CAQ9DkB,QAASA,4BAA2B,CAACnB,YAAD,CAAeK,MAAf,CAAuBJ,UAAvB,CAAmC,CACjED,YAAJ,GAAqBE,aAAcI,CAAAA,QAAnC,EAcEG,0BAAA,EA1EF,CARAZ,aAQA,CA2E8BQ,MA3E9B,CAPAnB,iBAOA,CA2EsCe,UA3EtC,CANAa,kBAMA,CA2E8BT,MAjFFK,CAAAA,KAM5B,CALAG,sBAKA,CALyBO,MAAOC,CAAAA,wBAAP,CAgFKhB,MAhFkCiB,CAAAA,WAAYC,CAAAA,SAAnD,CAA8D,OAA9D,CAKzB,CADAH,MAAOI,CAAAA,cAAP,CAAsB3B,aAAtB;AAAqC,OAArC,CAA8C4B,YAA9C,CACA,CAAI5B,aAAcU,CAAAA,WAAlB,CACEV,aAAcU,CAAAA,WAAd,CAA0B,kBAA1B,CAA8CI,oBAA9C,CADF,CAGEd,aAAc6B,CAAAA,gBAAd,CAA+B,gBAA/B,CAAiDf,oBAAjD,CAAuE,CAAA,CAAvE,CAyDF,EAgBWX,YAhBX,GAgB4BE,aAAcM,CAAAA,OAhB1C,EAiBEC,0BAAA,EAlBmE,CAuBvEkB,QAASA,6BAA4B,CAAC3B,YAAD,CAAeC,UAAf,CAA2B,CAC9D,IAAID,YAAJ,GAAqBE,aAAc0B,CAAAA,kBAAnC,EAAyD5B,YAAzD,GAA0EE,aAAc2B,CAAAA,QAAxF,EAAoG7B,YAApG,GAAqHE,aAAc4B,CAAAA,UAAnI,GAWMjC,aAXN,EAWuBA,aAAca,CAAAA,KAXrC,GAW+CI,kBAX/C,CAaI,MADAA,mBACO5B;AADcW,aAAca,CAAAA,KAC5BxB,CAAAA,iBAdmD,CA6BhE6C,QAASA,2BAA0B,CAAC/B,YAAD,CAAeC,UAAf,CAA2B,CAC5D,GAAID,YAAJ,GAAqBE,aAAc8B,CAAAA,QAAnC,CACE,MAAO/B,WAFmD,CA7P1DgC,MAAAA,CAAiBzD,OAAA,CAAQ,8CAAR,CACrB,KAAIiB,eAAiBjB,OAAA,CAAQ,8CAAR,CAArB,CACIY,iBAAmBZ,OAAA,CAAQ,gDAAR,CACnB0D,QAAAA,CAAuB1D,OAAA,CAAQ,mDAAR,CAC3B,KAAI2D,sBAAwB3D,OAAA,CAAQ,qDAAR,CAA5B;AACIc,aAAed,OAAA,CAAQ,4CAAR,CADnB,CAEIM,eAAiBN,OAAA,CAAQ,8CAAR,CAFrB,CAIIW,eAAiBX,OAAA,CAAQ,8CAAR,CAJrB,CAKI4D,iBAAmB5D,OAAA,CAAQ,gDAAR,CALvB,CAMI6D,mBAAqB7D,OAAA,CAAQ,kDAAR,CACrB8D,QAAAA,CAAQ9D,OAAA,CAAQ,oCAAR,CAEZ,KAAI0B,cAAgB+B,MAAe/B,CAAAA,aAAnC,CAEIlB,WAAa,CACfC,OAAQ,CACNsD,wBAAyB,CACvBC,QAASF,OAAA,CAAM,CAAEG,SAAU,IAAZ,CAAN,CADc;AAEvBC,SAAUJ,OAAA,CAAM,CAAEK,gBAAiB,IAAnB,CAAN,CAFa,CADnB,CAKNC,aAAc,CAAC1C,aAAcM,CAAAA,OAAf,CAAwBN,aAAcC,CAAAA,SAAtC,CAAiDD,aAAc8B,CAAAA,QAA/D,CAAyE9B,aAAcI,CAAAA,QAAvF,CAAiGJ,aAAcgB,CAAAA,QAA/G,CAAyHhB,aAAc4B,CAAAA,UAAvI,CAAmJ5B,aAAc2B,CAAAA,QAAjK,CAA2K3B,aAAc0B,CAAAA,kBAAzL,CALR,CADO,CAFjB,CAeI/B,cAAgB,IAfpB,CAgBIX,kBAAoB,IAhBxB,CAiBI4B,mBAAqB,IAjBzB,CAkBID,uBAAyB,IAlB7B,CA4BIgC,sBAAwB,CAAA,CACxBX,QAAqBY,CAAAA,SAAzB,GAEED,qBAFF,CAE0BT,gBAAA,CAAiB,QAAjB,CAF1B,GAEyD,EAAE,cAAF,EAAoBW,SAApB,CAFzD,EAEkH,CAFlH,CAE0FA,QAASC,CAAAA,YAFnG,EA8DA;IAAIC,sBAAwB,CAAA,CACxBf,QAAqBY,CAAAA,SAAzB,GAKEG,qBALF,CAK0Bb,gBAAA,CAAiB,OAAjB,CAL1B,GAKwD,EAAE,cAAF,EAAoBW,SAApB,CALxD,EAKiH,EALjH,CAKyFA,QAASC,CAAAA,YALlG,EAYA,KAAIvB,aAAe,CACjByB,IAAKA,QAAS,EAAG,CACf,MAAOrC,uBAAuBqC,CAAAA,GAAIC,CAAAA,IAA3B,CAAgC,IAAhC,CADQ,CADA,CAIjBC,IAAKA,QAAS,CAACC,GAAD,CAAM,CAElBvC,kBAAA,CAAqB,EAArB,CAA0BuC,GAC1BxC,uBAAuBuC,CAAAA,GAAID,CAAAA,IAA3B,CAAgC,IAAhC,CAAsCE,GAAtC,CAHkB,CAJH,CAkMnB5E,OAAOC,CAAAA,OAAP,CA1CwB4E,CAEVtE,UAFUsE,CAItBC,cAAeA,QAAS,CAACvD,YAAD,CAAeC,UAAf,CAA2BrB,WAA3B,CAAwC4E,iBAAxC,CAA2D,CACjF,IAAIC,WAAaxD,UAAA,CAAakC,qBAAsBuB,CAAAA,mBAAtB,CAA0CzD,UAA1C,CAAb;AAAqE0D,MAAtF,CAEIC,iBAFJ,CAEuBC,eAFvB,CA7OEC,SAgPuBL,UAhPPK,CAAAA,QAAhBA,EAgPuBL,UAhPUK,CAAAA,QAASC,CAAAA,WAAd,EACZ,SA+OlB,GA/OKD,QA+OL,EA/O2C,OA+O3C,GA/O8BA,QA+O9B,EA/OoE,MA+OpE,GAAyBL,UA/OkCO,CAAAA,IA+O3D,CACMnB,qBAAJ,CACEe,iBADF,CACsB7D,2BADtB,CAGE8D,eAHF,CAGoBzD,6BAJtB,CAMWiC,kBAAA,CAAmBoB,UAAnB,CAAJ,CACDR,qBAAJ,CACEW,iBADF,CACsB3C,0BADtB,EAGE2C,iBACA,CADoBjC,4BACpB,CAAAkC,eAAA,CAAkB1C,2BAJpB,CADK,CAOwBsC,UAxCrBK,CAAAA,QAiCH,EAjC+C,OAiC/C;AAOwBL,UAxCJK,CAAAA,QAASC,CAAAA,WAAd,EAiCf,GAjCyE,UAiCzE,GAOwBN,UAxCwCO,CAAAA,IAiChE,EAjCqG,OAiCrG,GAOwBP,UAxCoEO,CAAAA,IAiC5F,IAQLJ,iBARK,CAQe7B,0BARf,CAWP,IAAI6B,iBAAJ,GACMK,iBADN,CACaL,iBAAA,CAAkB5D,YAAlB,CAAgCC,UAAhC,CADb,EAMI,MAHIpB,aAGGA,CAHKC,cAAeC,CAAAA,SAAf,CAAyBC,UAAWC,CAAAA,MAApC,CAA4CgF,iBAA5C,CAAkDrF,WAAlD,CAA+D4E,iBAA/D,CAGL3E,CAFPA,YAAMmF,CAAAA,IAECnF,CAFM,QAENA,CADPO,gBAAiBC,CAAAA,4BAAjB,CAA8CR,YAA9C,CACOA,CAAAA,YAIPgF,gBAAJ,EACEA,eAAA,CAAgB7D,YAAhB,CAA8ByD,UAA9B,CAA0CxD,UAA1C,CAhC+E,CAJ7DqD,CA3RoF;\",\n\"sources\":[\"node_modules/react/lib/ChangeEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$ChangeEventPlugin\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule ChangeEventPlugin\\n */\\n\\n'use strict';\\n\\nvar EventConstants = require('./EventConstants');\\nvar EventPluginHub = require('./EventPluginHub');\\nvar EventPropagators = require('./EventPropagators');\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar ReactUpdates = require('./ReactUpdates');\\nvar SyntheticEvent = require('./SyntheticEvent');\\n\\nvar getEventTarget = require('./getEventTarget');\\nvar isEventSupported = require('./isEventSupported');\\nvar isTextInputElement = require('./isTextInputElement');\\nvar keyOf = require('fbjs/lib/keyOf');\\n\\nvar topLevelTypes = EventConstants.topLevelTypes;\\n\\nvar eventTypes = {\\n  change: {\\n    phasedRegistrationNames: {\\n      bubbled: keyOf({ onChange: null }),\\n      captured: keyOf({ onChangeCapture: null })\\n    },\\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\\n  }\\n};\\n\\n/**\\n * For IE shims\\n */\\nvar activeElement = null;\\nvar activeElementInst = null;\\nvar activeElementValue = null;\\nvar activeElementValueProp = null;\\n\\n/**\\n * SECTION: handle `change` event\\n */\\nfunction shouldUseChangeEvent(elem) {\\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\\n}\\n\\nvar doesChangeEventBubble = false;\\nif (ExecutionEnvironment.canUseDOM) {\\n  // See `handleChange` comment below\\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\\n}\\n\\nfunction manualDispatchChangeEvent(nativeEvent) {\\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));\\n  EventPropagators.accumulateTwoPhaseDispatches(event);\\n\\n  // If change and propertychange bubbled, we'd just bind to it like all the\\n  // other events and have it go through ReactBrowserEventEmitter. Since it\\n  // doesn't, we manually listen for the events and so we have to enqueue and\\n  // process the abstract event manually.\\n  //\\n  // Batching is necessary here in order to ensure that all event handlers run\\n  // before the next rerender (including event handlers attached to ancestor\\n  // elements instead of directly on the input). Without this, controlled\\n  // components don't work properly in conjunction with event bubbling because\\n  // the component is rerendered and the value reverted before all the event\\n  // handlers can run. See https://github.com/facebook/react/issues/708.\\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\\n}\\n\\nfunction runEventInBatch(event) {\\n  EventPluginHub.enqueueEvents(event);\\n  EventPluginHub.processEventQueue(false);\\n}\\n\\nfunction startWatchingForChangeEventIE8(target, targetInst) {\\n  activeElement = target;\\n  activeElementInst = targetInst;\\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\\n}\\n\\nfunction stopWatchingForChangeEventIE8() {\\n  if (!activeElement) {\\n    return;\\n  }\\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\\n  activeElement = null;\\n  activeElementInst = null;\\n}\\n\\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\\n  if (topLevelType === topLevelTypes.topChange) {\\n    return targetInst;\\n  }\\n}\\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {\\n  if (topLevelType === topLevelTypes.topFocus) {\\n    // stopWatching() should be a noop here but we call it just in case we\\n    // missed a blur event somehow.\\n    stopWatchingForChangeEventIE8();\\n    startWatchingForChangeEventIE8(target, targetInst);\\n  } else if (topLevelType === topLevelTypes.topBlur) {\\n    stopWatchingForChangeEventIE8();\\n  }\\n}\\n\\n/**\\n * SECTION: handle `input` event\\n */\\nvar isInputEventSupported = false;\\nif (ExecutionEnvironment.canUseDOM) {\\n  // IE9 claims to support the input event but fails to trigger it when\\n  // deleting text, so we ignore its input events.\\n  // IE10+ fire input events to often, such when a placeholder\\n  // changes or when an input with a placeholder is focused.\\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);\\n}\\n\\n/**\\n * (For IE <=11) Replacement getter/setter for the `value` property that gets\\n * set on the active element.\\n */\\nvar newValueProp = {\\n  get: function () {\\n    return activeElementValueProp.get.call(this);\\n  },\\n  set: function (val) {\\n    // Cast to a string so we can do equality checks.\\n    activeElementValue = '' + val;\\n    activeElementValueProp.set.call(this, val);\\n  }\\n};\\n\\n/**\\n * (For IE <=11) Starts tracking propertychange events on the passed-in element\\n * and override the value property so that we can distinguish user events from\\n * value changes in JS.\\n */\\nfunction startWatchingForValueChange(target, targetInst) {\\n  activeElement = target;\\n  activeElementInst = targetInst;\\n  activeElementValue = target.value;\\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\\n\\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\\n  // on DOM elements\\n  Object.defineProperty(activeElement, 'value', newValueProp);\\n  if (activeElement.attachEvent) {\\n    activeElement.attachEvent('onpropertychange', handlePropertyChange);\\n  } else {\\n    activeElement.addEventListener('propertychange', handlePropertyChange, false);\\n  }\\n}\\n\\n/**\\n * (For IE <=11) Removes the event listeners from the currently-tracked element,\\n * if any exists.\\n */\\nfunction stopWatchingForValueChange() {\\n  if (!activeElement) {\\n    return;\\n  }\\n\\n  // delete restores the original property definition\\n  delete activeElement.value;\\n\\n  if (activeElement.detachEvent) {\\n    activeElement.detachEvent('onpropertychange', handlePropertyChange);\\n  } else {\\n    activeElement.removeEventListener('propertychange', handlePropertyChange, false);\\n  }\\n\\n  activeElement = null;\\n  activeElementInst = null;\\n  activeElementValue = null;\\n  activeElementValueProp = null;\\n}\\n\\n/**\\n * (For IE <=11) Handles a propertychange event, sending a `change` event if\\n * the value of the active element has changed.\\n */\\nfunction handlePropertyChange(nativeEvent) {\\n  if (nativeEvent.propertyName !== 'value') {\\n    return;\\n  }\\n  var value = nativeEvent.srcElement.value;\\n  if (value === activeElementValue) {\\n    return;\\n  }\\n  activeElementValue = value;\\n\\n  manualDispatchChangeEvent(nativeEvent);\\n}\\n\\n/**\\n * If a `change` event should be fired, returns the target's ID.\\n */\\nfunction getTargetInstForInputEvent(topLevelType, targetInst) {\\n  if (topLevelType === topLevelTypes.topInput) {\\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\\n    // what we want so fall through here and trigger an abstract event\\n    return targetInst;\\n  }\\n}\\n\\nfunction handleEventsForInputEventIE(topLevelType, target, targetInst) {\\n  if (topLevelType === topLevelTypes.topFocus) {\\n    // In IE8, we can capture almost all .value changes by adding a\\n    // propertychange handler and looking for events with propertyName\\n    // equal to 'value'\\n    // In IE9-11, propertychange fires for most input events but is buggy and\\n    // doesn't fire when text is deleted, but conveniently, selectionchange\\n    // appears to fire in all of the remaining cases so we catch those and\\n    // forward the event if the value has changed\\n    // In either case, we don't want to call the event handler if the value\\n    // is changed from JS so we redefine a setter for `.value` that updates\\n    // our activeElementValue variable, allowing us to ignore those changes\\n    //\\n    // stopWatching() should be a noop here but we call it just in case we\\n    // missed a blur event somehow.\\n    stopWatchingForValueChange();\\n    startWatchingForValueChange(target, targetInst);\\n  } else if (topLevelType === topLevelTypes.topBlur) {\\n    stopWatchingForValueChange();\\n  }\\n}\\n\\n// For IE8 and IE9.\\nfunction getTargetInstForInputEventIE(topLevelType, targetInst) {\\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\\n    // On the selectionchange event, the target is just document which isn't\\n    // helpful for us so just check activeElement instead.\\n    //\\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\\n    // propertychange on the first input event after setting `value` from a\\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\\n    // gets it and catching keydown lets us fire an event for the first\\n    // keystroke if user does a key repeat (it'll be a little delayed: right\\n    // before the second keystroke). Other input methods (e.g., paste) seem to\\n    // fire selectionchange normally.\\n    if (activeElement && activeElement.value !== activeElementValue) {\\n      activeElementValue = activeElement.value;\\n      return activeElementInst;\\n    }\\n  }\\n}\\n\\n/**\\n * SECTION: handle `click` event\\n */\\nfunction shouldUseClickEvent(elem) {\\n  // Use the `click` event to detect changes to checkbox and radio inputs.\\n  // This approach works across all browsers, whereas `change` does not fire\\n  // until `blur` in IE8.\\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\\n}\\n\\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {\\n  if (topLevelType === topLevelTypes.topClick) {\\n    return targetInst;\\n  }\\n}\\n\\n/**\\n * This plugin creates an `onChange` event that normalizes change events\\n * across form elements. This event fires at a time when it's possible to\\n * change the element's value without seeing a flicker.\\n *\\n * Supported elements are:\\n * - input (see `isTextInputElement`)\\n * - textarea\\n * - select\\n */\\nvar ChangeEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\\n\\n    var getTargetInstFunc, handleEventFunc;\\n    if (shouldUseChangeEvent(targetNode)) {\\n      if (doesChangeEventBubble) {\\n        getTargetInstFunc = getTargetInstForChangeEvent;\\n      } else {\\n        handleEventFunc = handleEventsForChangeEventIE8;\\n      }\\n    } else if (isTextInputElement(targetNode)) {\\n      if (isInputEventSupported) {\\n        getTargetInstFunc = getTargetInstForInputEvent;\\n      } else {\\n        getTargetInstFunc = getTargetInstForInputEventIE;\\n        handleEventFunc = handleEventsForInputEventIE;\\n      }\\n    } else if (shouldUseClickEvent(targetNode)) {\\n      getTargetInstFunc = getTargetInstForClickEvent;\\n    }\\n\\n    if (getTargetInstFunc) {\\n      var inst = getTargetInstFunc(topLevelType, targetInst);\\n      if (inst) {\\n        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);\\n        event.type = 'change';\\n        EventPropagators.accumulateTwoPhaseDispatches(event);\\n        return event;\\n      }\\n    }\\n\\n    if (handleEventFunc) {\\n      handleEventFunc(topLevelType, targetNode, targetInst);\\n    }\\n  }\\n\\n};\\n\\nmodule.exports = ChangeEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"manualDispatchChangeEvent\",\"nativeEvent\",\"event\",\"SyntheticEvent\",\"getPooled\",\"eventTypes\",\"change\",\"activeElementInst\",\"getEventTarget\",\"EventPropagators\",\"accumulateTwoPhaseDispatches\",\"ReactUpdates\",\"batchedUpdates\",\"runEventInBatch\",\"EventPluginHub\",\"enqueueEvents\",\"processEventQueue\",\"stopWatchingForChangeEventIE8\",\"activeElement\",\"detachEvent\",\"getTargetInstForChangeEvent\",\"topLevelType\",\"targetInst\",\"topLevelTypes\",\"topChange\",\"handleEventsForChangeEventIE8\",\"target\",\"topFocus\",\"attachEvent\",\"topBlur\",\"stopWatchingForValueChange\",\"value\",\"handlePropertyChange\",\"removeEventListener\",\"activeElementValueProp\",\"activeElementValue\",\"propertyName\",\"srcElement\",\"getTargetInstForInputEvent\",\"topInput\",\"handleEventsForInputEventIE\",\"Object\",\"getOwnPropertyDescriptor\",\"constructor\",\"prototype\",\"defineProperty\",\"newValueProp\",\"addEventListener\",\"getTargetInstForInputEventIE\",\"topSelectionChange\",\"topKeyUp\",\"topKeyDown\",\"getTargetInstForClickEvent\",\"topClick\",\"EventConstants\",\"ExecutionEnvironment\",\"ReactDOMComponentTree\",\"isEventSupported\",\"isTextInputElement\",\"keyOf\",\"phasedRegistrationNames\",\"bubbled\",\"onChange\",\"captured\",\"onChangeCapture\",\"dependencies\",\"doesChangeEventBubble\",\"canUseDOM\",\"document\",\"documentMode\",\"isInputEventSupported\",\"get\",\"call\",\"set\",\"val\",\"ChangeEventPlugin\",\"extractEvents\",\"nativeEventTarget\",\"targetNode\",\"getNodeFromInstance\",\"window\",\"getTargetInstFunc\",\"handleEventFunc\",\"nodeName\",\"toLowerCase\",\"type\",\"inst\"]\n}\n"]