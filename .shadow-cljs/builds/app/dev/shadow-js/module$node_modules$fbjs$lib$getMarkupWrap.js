["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/getMarkupWrap.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$getMarkupWrap=function(global,process,require,module,exports,shadow$shims){global=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\"),dummyNode=global.canUseDOM?document.createElement(\"div\"):null,shouldWrap={};require=[1,'\\x3cselect multiple\\x3d\"true\"\\x3e',\"\\x3c/select\\x3e\"];global=[1,\"\\x3ctable\\x3e\",\"\\x3c/table\\x3e\"];process=[3,\"\\x3ctable\\x3e\\x3ctbody\\x3e\\x3ctr\\x3e\",\"\\x3c/tr\\x3e\\x3c/tbody\\x3e\\x3c/table\\x3e\"];\nvar svgWrap=[1,'\\x3csvg xmlns\\x3d\"http://www.w3.org/2000/svg\"\\x3e',\"\\x3c/svg\\x3e\"],markupWrap={\"*\":[1,\"?\\x3cdiv\\x3e\",\"\\x3c/div\\x3e\"],area:[1,\"\\x3cmap\\x3e\",\"\\x3c/map\\x3e\"],col:[2,\"\\x3ctable\\x3e\\x3ctbody\\x3e\\x3c/tbody\\x3e\\x3ccolgroup\\x3e\",\"\\x3c/colgroup\\x3e\\x3c/table\\x3e\"],legend:[1,\"\\x3cfieldset\\x3e\",\"\\x3c/fieldset\\x3e\"],param:[1,\"\\x3cobject\\x3e\",\"\\x3c/object\\x3e\"],tr:[2,\"\\x3ctable\\x3e\\x3ctbody\\x3e\",\"\\x3c/tbody\\x3e\\x3c/table\\x3e\"],optgroup:require,option:require,caption:global,colgroup:global,tbody:global,\ntfoot:global,thead:global,td:process,th:process};\"circle clipPath defs ellipse g image line linearGradient mask path pattern polygon polyline radialGradient rect stop text tspan\".split(\" \").forEach(function(nodeName){markupWrap[nodeName]=svgWrap;shouldWrap[nodeName]=!0});module.exports=function(nodeName){dummyNode?void 0:invariant(!1,\"Markup wrapping node not initialized\");markupWrap.hasOwnProperty(nodeName)||(nodeName=\"*\");shouldWrap.hasOwnProperty(nodeName)||(dummyNode.innerHTML=\"*\"===nodeName?\n\"\\x3clink /\\x3e\":\"\\x3c\"+nodeName+\"\\x3e\\x3c/\"+nodeName+\"\\x3e\",shouldWrap[nodeName]=!dummyNode.firstChild);return shouldWrap[nodeName]?markupWrap[nodeName]:null}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$getMarkupWrap\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/*eslint-disable fb-www/unsafe-html */\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\n */\n\nvar shouldWrap = {};\n\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\n\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n\n  'optgroup': selectWrap,\n  'option': selectWrap,\n\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n\n  'td': trWrap,\n  'th': trWrap\n};\n\n// Initialize the SVG elements since we know they'll always need to be wrapped\n// consistently. If they are created inside a <div> they will be initialized in\n// the wrong namespace (and will not display).\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {\n  markupWrap[nodeName] = svgWrap;\n  shouldWrap[nodeName] = true;\n});\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\nmodule.exports = getMarkupWrap;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$ExecutionEnvironment"]],"~:properties",["^5",["td","optgroup","tfoot","innerHTML","tr","area","option","legend","thead","col","param","caption","th","colgroup","tbody"]],"~:compiled-at",1635270336831,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$getMarkupWrap.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAaxHC,MAAAA,CAAuBJ,OAAA,CAAQ,mDAAR,CAE3B,KAAIK,UAAYL,OAAA,CAAQ,wCAAR,CAAhB,CAKIM,UAAYF,MAAAG,UAAA,CAAiCC,QAAAC,cAAA,CAAuB,KAAvB,CAAjC,CAAiE,IALjF,CAcIC,WAAa,EAEbC,QAAAA,CAAa,CAAC,CAAD,CAAI,mCAAJ,CAAgC,iBAAhC,CACbC,OAAAA,CAAY,CAAC,CAAD,CAAI,eAAJ,CAAe,gBAAf,CACZC,QAAAA,CAAS,CAAC,CAAD,CAAI,sCAAJ,CAA0B,yCAA1B,CAEb;IAAIC,QAAU,CAAC,CAAD,CAAI,mDAAJ,CAAgD,cAAhD,CAAd,CAEIC,WAAa,CACf,IAAK,CAAC,CAAD,CAAI,cAAJ,CAAc,cAAd,CADU,CAGf,KAAQ,CAAC,CAAD,CAAI,aAAJ,CAAa,cAAb,CAHO,CAIf,IAAO,CAAC,CAAD,CAAI,0DAAJ,CAAwC,iCAAxC,CAJQ,CAKf,OAAU,CAAC,CAAD,CAAI,kBAAJ,CAAkB,mBAAlB,CALK,CAMf,MAAS,CAAC,CAAD,CAAI,gBAAJ,CAAgB,iBAAhB,CANM,CAOf,GAAM,CAAC,CAAD,CAAI,4BAAJ,CAAsB,8BAAtB,CAPS,CASf,SAAYJ,OATG,CAUf,OAAUA,OAVK,CAYf,QAAWC,MAZI,CAaf,SAAYA,MAbG,CAcf,MAASA,MAdM;AAef,MAASA,MAfM,CAgBf,MAASA,MAhBM,CAkBf,GAAMC,OAlBS,CAmBf,GAAMA,OAnBS,CAyBCG,kIAAAA,MAAAA,CAAAA,GAAAA,CAClBC,QAAA,CAAoB,QAAS,CAACC,QAAD,CAAW,CACtCH,UAAA,CAAWG,QAAX,CAAA,CAAuBJ,OACvBJ,WAAA,CAAWQ,QAAX,CAAA,CAAuB,CAAA,CAFe,CAAxC,CA6BAjB,OAAAC,QAAA,CAhBAiB,QAAsB,CAACD,QAAD,CAAW,CAC5BZ,SAAH,CAAqI,IAAK,EAA1I,CAAuDD,SAAA,CAAU,CAAA,CAAV,CAAiB,sCAAjB,CAClDU,WAAAK,eAAA,CAA0BF,QAA1B,CAAL,GACEA,QADF,CACa,GADb,CAGKR,WAAAU,eAAA,CAA0BF,QAA1B,CAAL,GAEIZ,SAAAe,UAIF,CALiB,GAAjB,GAAIH,QAAJ;AACwB,gBADxB,CAGwB,MAHxB,CAG8BA,QAH9B,CAGyC,WAHzC,CAGiDA,QAHjD,CAG4D,MAE5D,CAAAR,UAAA,CAAWQ,QAAX,CAAA,CAAuB,CAACZ,SAAAgB,WAN1B,CAQA,OAAOZ,WAAA,CAAWQ,QAAX,CAAA,CAAuBH,UAAA,CAAWG,QAAX,CAAvB,CAA8C,IAbtB,CA5E2F;\",\n\"sources\":[\"node_modules/fbjs/lib/getMarkupWrap.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$getMarkupWrap\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n/*eslint-disable fb-www/unsafe-html */\\n\\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\\n\\nvar invariant = require('./invariant');\\n\\n/**\\n * Dummy container used to detect which wraps are necessary.\\n */\\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\\n\\n/**\\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\\n * so we wrap them, render the wrapped nodes, then extract the desired node.\\n *\\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\\n */\\n\\nvar shouldWrap = {};\\n\\nvar selectWrap = [1, '<select multiple=\\\"true\\\">', '</select>'];\\nvar tableWrap = [1, '<table>', '</table>'];\\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\\n\\nvar svgWrap = [1, '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">', '</svg>'];\\n\\nvar markupWrap = {\\n  '*': [1, '?<div>', '</div>'],\\n\\n  'area': [1, '<map>', '</map>'],\\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\\n  'legend': [1, '<fieldset>', '</fieldset>'],\\n  'param': [1, '<object>', '</object>'],\\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\\n\\n  'optgroup': selectWrap,\\n  'option': selectWrap,\\n\\n  'caption': tableWrap,\\n  'colgroup': tableWrap,\\n  'tbody': tableWrap,\\n  'tfoot': tableWrap,\\n  'thead': tableWrap,\\n\\n  'td': trWrap,\\n  'th': trWrap\\n};\\n\\n// Initialize the SVG elements since we know they'll always need to be wrapped\\n// consistently. If they are created inside a <div> they will be initialized in\\n// the wrong namespace (and will not display).\\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\\nsvgElements.forEach(function (nodeName) {\\n  markupWrap[nodeName] = svgWrap;\\n  shouldWrap[nodeName] = true;\\n});\\n\\n/**\\n * Gets the markup wrap configuration for the supplied `nodeName`.\\n *\\n * NOTE: This lazily detects which wraps are necessary for the current browser.\\n *\\n * @param {string} nodeName Lowercase `nodeName`.\\n * @return {?array} Markup wrap configuration, if applicable.\\n */\\nfunction getMarkupWrap(nodeName) {\\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;\\n  if (!markupWrap.hasOwnProperty(nodeName)) {\\n    nodeName = '*';\\n  }\\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\\n    if (nodeName === '*') {\\n      dummyNode.innerHTML = '<link />';\\n    } else {\\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\\n    }\\n    shouldWrap[nodeName] = !dummyNode.firstChild;\\n  }\\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\\n}\\n\\nmodule.exports = getMarkupWrap;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ExecutionEnvironment\",\"invariant\",\"dummyNode\",\"canUseDOM\",\"document\",\"createElement\",\"shouldWrap\",\"selectWrap\",\"tableWrap\",\"trWrap\",\"svgWrap\",\"markupWrap\",\"svgElements\",\"forEach\",\"nodeName\",\"getMarkupWrap\",\"hasOwnProperty\",\"innerHTML\",\"firstChild\"]\n}\n"]