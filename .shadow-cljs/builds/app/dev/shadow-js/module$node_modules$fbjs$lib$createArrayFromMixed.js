["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/createArrayFromMixed.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$createArrayFromMixed=function(global,process,require,module,exports,shadow$shims){var invariant=require(\"module$node_modules$fbjs$lib$invariant\");module.exports=function(obj){if(obj&&(\"object\"==typeof obj||\"function\"==typeof obj)&&\"length\"in obj&&!(\"setInterval\"in obj)&&\"number\"!=typeof obj.nodeType&&(Array.isArray(obj)||\"callee\"in obj||\"item\"in obj)){if(Array.isArray(obj))return obj.slice();a:{var length=obj.length;Array.isArray(obj)||\"object\"!==typeof obj&&\n\"function\"!==typeof obj?invariant(!1,\"toArray: Array-like object expected\"):void 0;\"number\"!==typeof length?invariant(!1,\"toArray: Object needs a length property\"):void 0;0===length||length-1 in obj?void 0:invariant(!1,\"toArray: Object should have keys for indices\");\"function\"===typeof obj.callee?invariant(!1,\"toArray: Object can't be `arguments`. Use rest params (function(...args) {}) or Array.from() instead.\"):void 0;if(obj.hasOwnProperty)try{var JSCompiler_inline_result=Array.prototype.slice.call(obj);\nbreak a}catch(e){}JSCompiler_inline_result=Array(length);for(var ii=0;ii<length;ii++)JSCompiler_inline_result[ii]=obj[ii]}return JSCompiler_inline_result}return[obj]}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$createArrayFromMixed\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\n  // in old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant"]],"~:properties",["^5",[]],"~:compiled-at",1635270336830,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$createArrayFromMixed.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAYnI,IAAIC,UAAYJ,OAAA,CAAQ,wCAAR,CAgHhBC,OAAAC,QAAA,CAVAG,QAA6B,CAACC,GAAD,CAAM,CACjC,GAAoBA,GAApB,GAvCgB,QAuChB,EAvCE,MAuCkBA,IAApB,EAvC0C,UAuC1C,EAvC4B,MAuCRA,IAApB,GArCE,QAqCF,EAAoBA,IAApB,EAnCE,EAAE,aAAF,EAmCkBA,IAnClB,CAmCF,EAhCyB,QAgCzB,EAhCE,MAgCkBA,IAhCXC,SAgCT,GA9BEC,KAAAC,QAAA,CA8BkBH,GA9BlB,CA8BF,EA5BE,QA4BF,EAAoBA,IAApB,EA1BE,MA0BF,EAAoBA,IAApB,EAEO,CAAA,GAAIE,KAAAC,QAAA,CAAcH,GAAd,CAAJ,CACL,MAAOA,IAAAI,MAAA,EA/FW,EAAA,CAAA,CACpB,IAAIC,OAgGaL,GAhGJK,OAIVH,MAAAC,QAAA,CA4FcH,GA5Fd,CAAH,EAAyC,QAAzC,GAA0B,MA4FTA,IA5FjB;AAAoE,UAApE,GAAqD,MA4FpCA,IA5FjB,CAA2HF,SAAA,CAAU,CAAA,CAAV,CAAiB,qCAAjB,CAA3H,CAAwM,IAAK,EAEzL,SAApB,GAAE,MAAOO,OAAT,CAAwEP,SAAA,CAAU,CAAA,CAAV,CAAiB,yCAAjB,CAAxE,CAAyJ,IAAK,EAEjJ,EAAb,GAAEO,MAAF,EAAkBA,MAAlB,CAA2B,CAA3B,GAwFiBL,IAxFjB,CAAqK,IAAK,EAA1K,CAA+EF,SAAA,CAAU,CAAA,CAAV,CAAiB,8CAAjB,CAEvD,WAAxB,GAAE,MAsFeE,IAtFRM,OAAT,CAA8ER,SAAA,CAAU,CAAA,CAAV,CAAiB,uGAAjB,CAA9E,CAAmO,IAAK,EAKxO,IAiFiBE,GAjFbO,eAAJ,CACE,GAAI,CACF,IAAA,yBAAOL,KAAAM,UAAAJ,MAAAK,KAAA,CA+EMT,GA/EN,CAAP;MAAA,CADE,CAEF,MAAOU,CAAP,CAAU,EAOVC,wBAAAA,CAAMT,KAAA,CAAMG,MAAN,CACV,KAAK,IAAIO,GAAK,CAAd,CAAiBA,EAAjB,CAAsBP,MAAtB,CAA8BO,EAAA,EAA9B,CACED,wBAAA,CAAIC,EAAJ,CAAA,CAqEeZ,GArEL,CAAIY,EAAJ,CA5BQ,CAiGlB,MAAO,yBAHF,CADL,MAAO,CAACZ,GAAD,CAFwB,CAlHgG;\",\n\"sources\":[\"node_modules/fbjs/lib/createArrayFromMixed.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$createArrayFromMixed\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n */\\n\\nvar invariant = require('./invariant');\\n\\n/**\\n * Convert array-like objects to arrays.\\n *\\n * This API assumes the caller knows the contents of the data type. For less\\n * well defined inputs use createArrayFromMixed.\\n *\\n * @param {object|function|filelist} obj\\n * @return {array}\\n */\\nfunction toArray(obj) {\\n  var length = obj.length;\\n\\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\\n  // in old versions of Safari).\\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\\n\\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\\n\\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\\n\\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\\n\\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\\n  // without method will throw during the slice call and skip straight to the\\n  // fallback.\\n  if (obj.hasOwnProperty) {\\n    try {\\n      return Array.prototype.slice.call(obj);\\n    } catch (e) {\\n      // IE < 9 does not support Array#slice on collections objects\\n    }\\n  }\\n\\n  // Fall back to copying key by key. This assumes all keys have a value,\\n  // so will not preserve sparsely populated inputs.\\n  var ret = Array(length);\\n  for (var ii = 0; ii < length; ii++) {\\n    ret[ii] = obj[ii];\\n  }\\n  return ret;\\n}\\n\\n/**\\n * Perform a heuristic test to determine if an object is \\\"array-like\\\".\\n *\\n *   A monk asked Joshu, a Zen master, \\\"Has a dog Buddha nature?\\\"\\n *   Joshu replied: \\\"Mu.\\\"\\n *\\n * This function determines if its argument has \\\"array nature\\\": it returns\\n * true if the argument is an actual array, an `arguments' object, or an\\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\\n *\\n * It will return false for other array-like objects like Filelist.\\n *\\n * @param {*} obj\\n * @return {boolean}\\n */\\nfunction hasArrayNature(obj) {\\n  return (\\n    // not null/false\\n    !!obj && (\\n    // arrays are objects, NodeLists are functions in Safari\\n    typeof obj == 'object' || typeof obj == 'function') &&\\n    // quacks like an array\\n    'length' in obj &&\\n    // not window\\n    !('setInterval' in obj) &&\\n    // no DOM node should be considered an array-like\\n    // a 'select' element has 'length' and 'item' properties on IE8\\n    typeof obj.nodeType != 'number' && (\\n    // a real array\\n    Array.isArray(obj) ||\\n    // arguments\\n    'callee' in obj ||\\n    // HTMLCollection/NodeList\\n    'item' in obj)\\n  );\\n}\\n\\n/**\\n * Ensure that the argument is an array by wrapping it in an array if it is not.\\n * Creates a copy of the argument if it is already an array.\\n *\\n * This is mostly useful idiomatically:\\n *\\n *   var createArrayFromMixed = require('createArrayFromMixed');\\n *\\n *   function takesOneOrMoreThings(things) {\\n *     things = createArrayFromMixed(things);\\n *     ...\\n *   }\\n *\\n * This allows you to treat `things' as an array, but accept scalars in the API.\\n *\\n * If you need to convert an array-like object, like `arguments`, into an array\\n * use toArray instead.\\n *\\n * @param {*} obj\\n * @return {array}\\n */\\nfunction createArrayFromMixed(obj) {\\n  if (!hasArrayNature(obj)) {\\n    return [obj];\\n  } else if (Array.isArray(obj)) {\\n    return obj.slice();\\n  } else {\\n    return toArray(obj);\\n  }\\n}\\n\\nmodule.exports = createArrayFromMixed;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"invariant\",\"createArrayFromMixed\",\"obj\",\"nodeType\",\"Array\",\"isArray\",\"slice\",\"length\",\"callee\",\"hasOwnProperty\",\"prototype\",\"call\",\"e\",\"ret\",\"ii\"]\n}\n"]