["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/EnterLeaveEventPlugin.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$EnterLeaveEventPlugin=function(global,process,require,module,exports,shadow$shims){var EventPropagators=require(\"module$node_modules$react_dom$lib$EventPropagators\"),ReactDOMComponentTree=require(\"module$node_modules$react_dom$lib$ReactDOMComponentTree\"),SyntheticMouseEvent=require(\"module$node_modules$react_dom$lib$SyntheticMouseEvent\"),eventTypes={mouseEnter:{registrationName:\"onMouseEnter\",dependencies:[\"topMouseOut\",\"topMouseOver\"]},mouseLeave:{registrationName:\"onMouseLeave\",\ndependencies:[\"topMouseOut\",\"topMouseOver\"]}};module.exports={eventTypes:eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){if(\"topMouseOver\"===topLevelType&&(nativeEvent.relatedTarget||nativeEvent.fromElement)||\"topMouseOut\"!==topLevelType&&\"topMouseOver\"!==topLevelType)return null;var win=nativeEventTarget.window===nativeEventTarget?nativeEventTarget:(win=nativeEventTarget.ownerDocument)?win.defaultView||win.parentWindow:window;\"topMouseOut\"===topLevelType?\n(topLevelType=targetInst,targetInst=(targetInst=nativeEvent.relatedTarget||nativeEvent.toElement)?ReactDOMComponentTree.getClosestInstanceFromNode(targetInst):null):topLevelType=null;if(topLevelType===targetInst)return null;var fromNode=null==topLevelType?win:ReactDOMComponentTree.getNodeFromInstance(topLevelType);win=null==targetInst?win:ReactDOMComponentTree.getNodeFromInstance(targetInst);var leave=SyntheticMouseEvent.getPooled(eventTypes.mouseLeave,topLevelType,nativeEvent,nativeEventTarget);\nleave.type=\"mouseleave\";leave.target=fromNode;leave.relatedTarget=win;nativeEvent=SyntheticMouseEvent.getPooled(eventTypes.mouseEnter,targetInst,nativeEvent,nativeEventTarget);nativeEvent.type=\"mouseenter\";nativeEvent.target=win;nativeEvent.relatedTarget=fromNode;EventPropagators.accumulateEnterLeaveDispatches(leave,nativeEvent,topLevelType,targetInst);return[leave,nativeEvent]}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$EnterLeaveEventPlugin\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: 'onMouseEnter',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  },\n  mouseLeave: {\n    registrationName: 'onMouseLeave',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  }\n};\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    if (topLevelType === 'topMouseOut') {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$react_dom$lib$ReactDOMComponentTree","~$module$node_modules$react_dom$lib$EventPropagators","~$module$node_modules$react_dom$lib$SyntheticMouseEvent"]],"~:properties",["^5",["registrationName","dependencies","relatedTarget","mouseLeave","eventTypes","type","target","mouseEnter","extractEvents"]],"~:compiled-at",1635270336828,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$EnterLeaveEventPlugin.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAazI,IAAIC,iBAAmBJ,OAAA,CAAQ,oDAAR,CAAvB,CACIK,sBAAwBL,OAAA,CAAQ,yDAAR,CAD5B,CAEIM,oBAAsBN,OAAA,CAAQ,uDAAR,CAF1B,CAIIO,WAAa,CACfC,WAAY,CACVC,iBAAkB,cADR,CAEVC,aAAc,CAAC,aAAD,CAAgB,cAAhB,CAFJ,CADG,CAKfC,WAAY,CACVF,iBAAkB,cADR;AAEVC,aAAc,CAAC,aAAD,CAAgB,cAAhB,CAFJ,CALG,CAkFjBT,OAAAC,QAAA,CAvE4BU,CAE1BL,WAAYA,UAFcK,CAW1BC,cAAeA,QAAS,CAACC,YAAD,CAAeC,UAAf,CAA2BC,WAA3B,CAAwCC,iBAAxC,CAA2D,CAIjF,GAHqB,cAGrB,GAHIH,YAGJ,GAHwCE,WAAAE,cAGxC,EAHqEF,WAAAG,YAGrE,GAAqB,aAArB,GAAIL,YAAJ,EAAuD,cAAvD,GAAsCA,YAAtC,CAEE,MAAO,KAMP,KAAAM,IAFEH,iBAAAI,OAAJ,GAAiCJ,iBAAjC,CAEQA,iBAFR,CAME,CADIK,GACJ,CADUL,iBAAAM,cACV,EACQD,GAAAE,YADR,EAC2BF,GAAAG,aAD3B,CAGQJ,MAMW,cAArB,GAAIP,YAAJ;CACEY,YAEA,CAFOX,UAEP,CAAAY,UAAA,CAAK,CADDC,UACC,CADSZ,WAAAE,cACT,EADsCF,WAAAa,UACtC,EAAUxB,qBAAAyB,2BAAA,CAAiDF,UAAjD,CAAV,CAAsE,IAH7E,EAMEF,YANF,CAMS,IAIT,IAAIA,YAAJ,GAAaC,UAAb,CAEE,MAAO,KAGT,KAAII,SAAmB,IAAR,EAAAL,YAAA,CAAeN,GAAf,CAAqBf,qBAAA2B,oBAAA,CAA0CN,YAA1C,CAChCO,IAAAA,CAAe,IAAN,EAAAN,UAAA,CAAaP,GAAb,CAAmBf,qBAAA2B,oBAAA,CAA0CL,UAA1C,CAEhC,KAAIO,MAAQ5B,mBAAA6B,UAAA,CAA8B5B,UAAAI,WAA9B,CAAqDe,YAArD,CAA2DV,WAA3D,CAAwEC,iBAAxE,CACZiB;KAAAE,KAAA,CAAa,YACbF,MAAAG,OAAA,CAAeN,QACfG,MAAAhB,cAAA,CAAsBe,GAElBK,YAAAA,CAAQhC,mBAAA6B,UAAA,CAA8B5B,UAAAC,WAA9B,CAAqDmB,UAArD,CAAyDX,WAAzD,CAAsEC,iBAAtE,CACZqB,YAAAF,KAAA,CAAa,YACbE,YAAAD,OAAA,CAAeJ,GACfK,YAAApB,cAAA,CAAsBa,QAEtB3B,iBAAAmC,+BAAA,CAAgDL,KAAhD,CAAuDI,WAAvD,CAA8DZ,YAA9D,CAAoEC,UAApE,CAEA,OAAO,CAACO,KAAD,CAAQI,WAAR,CAvD0E,CAXzD1B,CA5B6G;\",\n\"sources\":[\"node_modules/react-dom/lib/EnterLeaveEventPlugin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$EnterLeaveEventPlugin\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar EventPropagators = require('./EventPropagators');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\\n\\nvar eventTypes = {\\n  mouseEnter: {\\n    registrationName: 'onMouseEnter',\\n    dependencies: ['topMouseOut', 'topMouseOver']\\n  },\\n  mouseLeave: {\\n    registrationName: 'onMouseLeave',\\n    dependencies: ['topMouseOut', 'topMouseOver']\\n  }\\n};\\n\\nvar EnterLeaveEventPlugin = {\\n\\n  eventTypes: eventTypes,\\n\\n  /**\\n   * For almost every interaction we care about, there will be both a top-level\\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\\n   * we do not extract duplicate events. However, moving the mouse into the\\n   * browser from outside will not fire a `mouseout` event. In this case, we use\\n   * the `mouseover` top-level event.\\n   */\\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\\n      return null;\\n    }\\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {\\n      // Must not be a mouse in or mouse out - ignoring.\\n      return null;\\n    }\\n\\n    var win;\\n    if (nativeEventTarget.window === nativeEventTarget) {\\n      // `nativeEventTarget` is probably a window object.\\n      win = nativeEventTarget;\\n    } else {\\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\\n      var doc = nativeEventTarget.ownerDocument;\\n      if (doc) {\\n        win = doc.defaultView || doc.parentWindow;\\n      } else {\\n        win = window;\\n      }\\n    }\\n\\n    var from;\\n    var to;\\n    if (topLevelType === 'topMouseOut') {\\n      from = targetInst;\\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\\n    } else {\\n      // Moving to a node from outside the window.\\n      from = null;\\n      to = targetInst;\\n    }\\n\\n    if (from === to) {\\n      // Nothing pertains to our managed components.\\n      return null;\\n    }\\n\\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\\n\\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\\n    leave.type = 'mouseleave';\\n    leave.target = fromNode;\\n    leave.relatedTarget = toNode;\\n\\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\\n    enter.type = 'mouseenter';\\n    enter.target = toNode;\\n    enter.relatedTarget = fromNode;\\n\\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\\n\\n    return [leave, enter];\\n  }\\n\\n};\\n\\nmodule.exports = EnterLeaveEventPlugin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"EventPropagators\",\"ReactDOMComponentTree\",\"SyntheticMouseEvent\",\"eventTypes\",\"mouseEnter\",\"registrationName\",\"dependencies\",\"mouseLeave\",\"EnterLeaveEventPlugin\",\"extractEvents\",\"topLevelType\",\"targetInst\",\"nativeEvent\",\"nativeEventTarget\",\"relatedTarget\",\"fromElement\",\"win\",\"window\",\"doc\",\"ownerDocument\",\"defaultView\",\"parentWindow\",\"from\",\"to\",\"related\",\"toElement\",\"getClosestInstanceFromNode\",\"fromNode\",\"getNodeFromInstance\",\"toNode\",\"leave\",\"getPooled\",\"type\",\"target\",\"enter\",\"accumulateEnterLeaveDispatches\"]\n}\n"]