["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/ReactOwner.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$ReactOwner=function(global,process,require,module,exports,shadow$shims){function isValidOwner(object){return!(!object||\"function\"!==typeof object.attachRef||\"function\"!==typeof object.detachRef)}require(\"module$node_modules$react_dom$lib$reactProdInvariant\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\");module.exports={addComponentAsRefTo:function(component,ref,owner){isValidOwner(owner)?void 0:invariant(!1,\"addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\");\nowner.attachRef(ref,component)},removeComponentAsRefFrom:function(component,ref,owner){isValidOwner(owner)?void 0:invariant(!1,\"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\");var ownerPublicInstance=owner.getPublicInstance();ownerPublicInstance&&ownerPublicInstance.refs[ref]===component.getPublicInstance()&&\nowner.detachRef(ref)}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$ReactOwner\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid owner.\n * @final\n */\nfunction isValidOwner(object) {\n  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n}\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;\n    var ownerPublicInstance = owner.getPublicInstance();\n    // Check that `component`'s owner is still alive and that `component` is still the current ref\n    // because we do not want to detach the ref if another component stole it.\n    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n\n};\n\nmodule.exports = ReactOwner;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react_dom$lib$reactProdInvariant"]],"~:properties",["^5",["addComponentAsRefTo","removeComponentAsRefFrom"]],"~:compiled-at",1635270336818,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$ReactOwner.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAuB9HC,QAASA,aAAY,CAACC,MAAD,CAAS,CAC5B,MAAO,EAAGA,CAAAA,MAAH,EAAyC,UAAzC,GAAa,MAAOA,OAAAC,UAApB,EAAmF,UAAnF,GAAuD,MAAOD,OAAAE,UAA9D,CADqB,CATTP,OAAA,CAAQ,sDAAR,CAErB,KAAIQ,UAAYR,OAAA,CAAQ,wCAAR,CA6EhBC,OAAAC,QAAA,CApCiBO,CAUfC,oBAAqBA,QAAS,CAACC,SAAD,CAAYC,GAAZ,CAAiBC,KAAjB,CAAwB,CACnDT,YAAA,CAAaS,KAAb,CAAD,CAA8W,IAAK,EAAnX,CAA+DL,SAAA,CAAU,CAAA,CAAV,CAAiB,iQAAjB,CAC/DK;KAAAP,UAAA,CAAgBM,GAAhB,CAAqBD,SAArB,CAFoD,CAVvCF,CAwBfK,yBAA0BA,QAAS,CAACH,SAAD,CAAYC,GAAZ,CAAiBC,KAAjB,CAAwB,CACxDT,YAAA,CAAaS,KAAb,CAAD,CAAqX,IAAK,EAA1X,CAA+DL,SAAA,CAAU,CAAA,CAAV,CAAiB,wQAAjB,CAC/D,KAAIO,oBAAsBF,KAAAG,kBAAA,EAGtBD,oBAAJ,EAA2BA,mBAAAE,KAAA,CAAyBL,GAAzB,CAA3B,GAA6DD,SAAAK,kBAAA,EAA7D;AACEH,KAAAN,UAAA,CAAgBK,GAAhB,CANuD,CAxB5CH,CAzD6G;\",\n\"sources\":[\"node_modules/react-dom/lib/ReactOwner.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$ReactOwner\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * \\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\n/**\\n * @param {?object} object\\n * @return {boolean} True if `object` is a valid owner.\\n * @final\\n */\\nfunction isValidOwner(object) {\\n  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\\n}\\n\\n/**\\n * ReactOwners are capable of storing references to owned components.\\n *\\n * All components are capable of //being// referenced by owner components, but\\n * only ReactOwner components are capable of //referencing// owned components.\\n * The named reference is known as a \\\"ref\\\".\\n *\\n * Refs are available when mounted and updated during reconciliation.\\n *\\n *   var MyComponent = React.createClass({\\n *     render: function() {\\n *       return (\\n *         <div onClick={this.handleClick}>\\n *           <CustomComponent ref=\\\"custom\\\" />\\n *         </div>\\n *       );\\n *     },\\n *     handleClick: function() {\\n *       this.refs.custom.handleClick();\\n *     },\\n *     componentDidMount: function() {\\n *       this.refs.custom.initialize();\\n *     }\\n *   });\\n *\\n * Refs should rarely be used. When refs are used, they should only be done to\\n * control data that is not handled by React's data flow.\\n *\\n * @class ReactOwner\\n */\\nvar ReactOwner = {\\n  /**\\n   * Adds a component by ref to an owner component.\\n   *\\n   * @param {ReactComponent} component Component to reference.\\n   * @param {string} ref Name by which to refer to the component.\\n   * @param {ReactOwner} owner Component on which to record the ref.\\n   * @final\\n   * @internal\\n   */\\n  addComponentAsRefTo: function (component, ref, owner) {\\n    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\\\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;\\n    owner.attachRef(ref, component);\\n  },\\n\\n  /**\\n   * Removes a component by ref from an owner component.\\n   *\\n   * @param {ReactComponent} component Component to dereference.\\n   * @param {string} ref Name of the ref to remove.\\n   * @param {ReactOwner} owner Component on which the ref is recorded.\\n   * @final\\n   * @internal\\n   */\\n  removeComponentAsRefFrom: function (component, ref, owner) {\\n    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\\\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;\\n    var ownerPublicInstance = owner.getPublicInstance();\\n    // Check that `component`'s owner is still alive and that `component` is still the current ref\\n    // because we do not want to detach the ref if another component stole it.\\n    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {\\n      owner.detachRef(ref);\\n    }\\n  }\\n\\n};\\n\\nmodule.exports = ReactOwner;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"isValidOwner\",\"object\",\"attachRef\",\"detachRef\",\"invariant\",\"ReactOwner\",\"addComponentAsRefTo\",\"component\",\"ref\",\"owner\",\"removeComponentAsRefFrom\",\"ownerPublicInstance\",\"getPublicInstance\",\"refs\"]\n}\n"]