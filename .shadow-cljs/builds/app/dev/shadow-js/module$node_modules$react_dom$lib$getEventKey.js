["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/getEventKey.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$getEventKey=function(global,process,require,module,exports,shadow$shims){var getEventCharCode=require(\"module$node_modules$react_dom$lib$getEventCharCode\"),normalizeKey={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},translateToKey={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",\n18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"};module.exports=function(nativeEvent){if(nativeEvent.key){var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if(\"Unidentified\"!==key)return key}return\"keypress\"===\nnativeEvent.type?(nativeEvent=getEventCharCode(nativeEvent),13===nativeEvent?\"Enter\":String.fromCharCode(nativeEvent)):\"keydown\"===nativeEvent.type||\"keyup\"===nativeEvent.type?translateToKey[nativeEvent.keyCode]||\"Unidentified\":\"\"}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$getEventKey\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$react_dom$lib$getEventCharCode"]],"~:properties",["^5",["Left","Del","MozPrintableKey","Win","Down","Menu","Apps","Scroll","Esc","Up","Right","Spacebar"]],"~:compiled-at",1635270336854,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$getEventKey.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAa/H,IAAIC,iBAAmBJ,OAAA,CAAQ,oDAAR,CAAvB,CAMIK,aAAe,CACjB,IAAO,QADU,CAEjB,SAAY,GAFK,CAGjB,KAAQ,WAHS,CAIjB,GAAM,SAJW,CAKjB,MAAS,YALQ,CAMjB,KAAQ,WANS,CAOjB,IAAO,QAPU,CAQjB,IAAO,IARU,CASjB,KAAQ,aATS,CAUjB,KAAQ,aAVS,CAWjB,OAAU,YAXO,CAYjB,gBAAmB,cAZF,CANnB,CA0BIC,eAAiB,CACnB,EAAG,WADgB,CAEnB,EAAG,KAFgB,CAGnB,GAAI,OAHe,CAInB,GAAI,OAJe,CAKnB,GAAI,OALe,CAMnB,GAAI,SANe;AAOnB,GAAI,KAPe,CAQnB,GAAI,OARe,CASnB,GAAI,UATe,CAUnB,GAAI,QAVe,CAWnB,GAAI,GAXe,CAYnB,GAAI,QAZe,CAanB,GAAI,UAbe,CAcnB,GAAI,KAde,CAenB,GAAI,MAfe,CAgBnB,GAAI,WAhBe,CAiBnB,GAAI,SAjBe,CAkBnB,GAAI,YAlBe,CAmBnB,GAAI,WAnBe,CAoBnB,GAAI,QApBe,CAqBnB,GAAI,QArBe,CAsBnB,IAAK,IAtBc,CAsBR,IAAK,IAtBG,CAsBG,IAAK,IAtBR,CAsBc,IAAK,IAtBnB,CAsByB,IAAK,IAtB9B,CAsBoC,IAAK,IAtBzC,CAuBnB,IAAK,IAvBc,CAuBR,IAAK,IAvBG,CAuBG,IAAK,IAvBR,CAuBc,IAAK,KAvBnB,CAuB0B,IAAK,KAvB/B,CAuBsC,IAAK,KAvB3C,CAwBnB,IAAK,SAxBc,CAyBnB,IAAK,YAzBc,CA0BnB,IAAK,MA1Bc,CA8DrBL,OAAAC,QAAA,CA7BAK,QAAoB,CAACC,WAAD,CAAc,CAChC,GAAIA,WAAAC,IAAJ,CAAqB,CAMnB,IAAIA,IAAMJ,YAAA,CAAaG,WAAAC,IAAb,CAANA,EAAuCD,WAAAC,IAC3C,IAAY,cAAZ,GAAIA,GAAJ,CACE,MAAOA,IARU,CAarB,MAAyB,UAAzB;AAAID,WAAAE,KAAJ,EACMC,WAIG,CAJQP,gBAAA,CAAiBI,WAAjB,CAIR,CAAa,EAAb,GAAAG,WAAA,CAAkB,OAAlB,CAA4BC,MAAAC,aAAA,CAAoBF,WAApB,CALrC,EAOyB,SAAzB,GAAIH,WAAAE,KAAJ,EAA2D,OAA3D,GAAsCF,WAAAE,KAAtC,CAGSJ,cAAA,CAAeE,WAAAM,QAAf,CAHT,EAGgD,cAHhD,CAKO,EA1ByB,CAxE6F;\",\n\"sources\":[\"node_modules/react-dom/lib/getEventKey.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$getEventKey\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar getEventCharCode = require('./getEventCharCode');\\n\\n/**\\n * Normalization of deprecated HTML5 `key` values\\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\\n */\\nvar normalizeKey = {\\n  'Esc': 'Escape',\\n  'Spacebar': ' ',\\n  'Left': 'ArrowLeft',\\n  'Up': 'ArrowUp',\\n  'Right': 'ArrowRight',\\n  'Down': 'ArrowDown',\\n  'Del': 'Delete',\\n  'Win': 'OS',\\n  'Menu': 'ContextMenu',\\n  'Apps': 'ContextMenu',\\n  'Scroll': 'ScrollLock',\\n  'MozPrintableKey': 'Unidentified'\\n};\\n\\n/**\\n * Translation from legacy `keyCode` to HTML5 `key`\\n * Only special keys supported, all others depend on keyboard layout or browser\\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\\n */\\nvar translateToKey = {\\n  8: 'Backspace',\\n  9: 'Tab',\\n  12: 'Clear',\\n  13: 'Enter',\\n  16: 'Shift',\\n  17: 'Control',\\n  18: 'Alt',\\n  19: 'Pause',\\n  20: 'CapsLock',\\n  27: 'Escape',\\n  32: ' ',\\n  33: 'PageUp',\\n  34: 'PageDown',\\n  35: 'End',\\n  36: 'Home',\\n  37: 'ArrowLeft',\\n  38: 'ArrowUp',\\n  39: 'ArrowRight',\\n  40: 'ArrowDown',\\n  45: 'Insert',\\n  46: 'Delete',\\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\\n  144: 'NumLock',\\n  145: 'ScrollLock',\\n  224: 'Meta'\\n};\\n\\n/**\\n * @param {object} nativeEvent Native browser event.\\n * @return {string} Normalized `key` property.\\n */\\nfunction getEventKey(nativeEvent) {\\n  if (nativeEvent.key) {\\n    // Normalize inconsistent values reported by browsers due to\\n    // implementations of a working draft specification.\\n\\n    // FireFox implements `key` but returns `MozPrintableKey` for all\\n    // printable characters (normalized to `Unidentified`), ignore it.\\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\\n    if (key !== 'Unidentified') {\\n      return key;\\n    }\\n  }\\n\\n  // Browser does not implement `key`, polyfill as much of it as we can.\\n  if (nativeEvent.type === 'keypress') {\\n    var charCode = getEventCharCode(nativeEvent);\\n\\n    // The enter-key is technically both printable and non-printable and can\\n    // thus be captured by `keypress`, no other non-printable key should.\\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\\n  }\\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\\n    // While user keyboard layout determines the actual meaning of each\\n    // `keyCode` value, almost all function keys have a universal value.\\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\\n  }\\n  return '';\\n}\\n\\nmodule.exports = getEventKey;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getEventCharCode\",\"normalizeKey\",\"translateToKey\",\"getEventKey\",\"nativeEvent\",\"key\",\"type\",\"charCode\",\"String\",\"fromCharCode\",\"keyCode\"]\n}\n"]