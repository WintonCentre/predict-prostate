["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/ReactReconcileTransaction.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$ReactReconcileTransaction=function(global,process,require,module,exports,shadow$shims){function ReactReconcileTransaction(useCreateElement){this.reinitializeTransaction();this.renderToStaticMarkup=!1;this.reactMountReady=CallbackQueue.getPooled(null);this.useCreateElement=useCreateElement}global=require(\"module$node_modules$object_assign$index\");var CallbackQueue=require(\"module$node_modules$react_dom$lib$CallbackQueue\");process=require(\"module$node_modules$react_dom$lib$PooledClass\");\nvar ReactBrowserEventEmitter=require(\"module$node_modules$react_dom$lib$ReactBrowserEventEmitter\");exports=require(\"module$node_modules$react_dom$lib$ReactInputSelection\");shadow$shims=require(\"module$node_modules$react_dom$lib$ReactInstrumentation\");var Transaction=require(\"module$node_modules$react_dom$lib$Transaction\"),ReactUpdateQueue=require(\"module$node_modules$react_dom$lib$ReactUpdateQueue\"),TRANSACTION_WRAPPERS=[{initialize:exports.getSelectionInformation,close:exports.restoreSelection},\n{initialize:function(){var currentlyEnabled=ReactBrowserEventEmitter.isEnabled();ReactBrowserEventEmitter.setEnabled(!1);return currentlyEnabled},close:function(previouslyEnabled){ReactBrowserEventEmitter.setEnabled(previouslyEnabled)}},{initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}}];TRANSACTION_WRAPPERS.push({initialize:shadow$shims.debugTool.onBeginFlush,close:shadow$shims.debugTool.onEndFlush});global(ReactReconcileTransaction.prototype,\nTransaction,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},getUpdateQueue:function(){return ReactUpdateQueue},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(checkpoint){this.reactMountReady.rollback(checkpoint)},destructor:function(){CallbackQueue.release(this.reactMountReady);this.reactMountReady=null}});process.addPoolingTo(ReactReconcileTransaction);module.exports=ReactReconcileTransaction}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$ReactReconcileTransaction\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar Transaction = require('./Transaction');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n\nif (process.env.NODE_ENV !== 'production') {\n  TRANSACTION_WRAPPERS.push({\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,\n    close: ReactInstrumentation.debugTool.onEndFlush\n  });\n}\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(useCreateElement) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactDOMTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = useCreateElement;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * @return {object} The queue to collect React async events.\n   */\n  getUpdateQueue: function () {\n    return ReactUpdateQueue;\n  },\n\n  /**\n   * Save current transaction state -- if the return value from this method is\n   * passed to `rollback`, the transaction will be reset to that state.\n   */\n  checkpoint: function () {\n    // reactMountReady is the our only stateful wrapper\n    return this.reactMountReady.checkpoint();\n  },\n\n  rollback: function (checkpoint) {\n    this.reactMountReady.rollback(checkpoint);\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\n_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$ReactInstrumentation","~$module$node_modules$object_assign$index","~$module$node_modules$react_dom$lib$ReactUpdateQueue","~$shadow.js","~$module$node_modules$react_dom$lib$PooledClass","~$module$node_modules$react_dom$lib$ReactBrowserEventEmitter","~$module$node_modules$react_dom$lib$ReactInputSelection","~$module$node_modules$react_dom$lib$CallbackQueue","~$module$node_modules$react_dom$lib$Transaction"]],"~:properties",["^5",["getReactMountReady","getUpdateQueue","getTransactionWrappers","reactMountReady","renderToStaticMarkup","close","checkpoint","initialize","useCreateElement","destructor","rollback"]],"~:compiled-at",1635270336852,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$ReactReconcileTransaction.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgH7IC,QAASA,0BAAyB,CAACC,gBAAD,CAAmB,CACnD,IAAAC,wBAAA,EAMA,KAAAC,qBAAA,CAA4B,CAAA,CAC5B,KAAAC,gBAAA,CAAuBC,aAAAC,UAAA,CAAwB,IAAxB,CACvB,KAAAL,iBAAA,CAAwBA,gBAT2B,CAnGjDM,MAAAA,CAAUX,OAAA,CAAQ,yCAAR,CAEd,KAAIS,cAAgBT,OAAA,CAAQ,iDAAR,CAChBY,QAAAA,CAAcZ,OAAA,CAAQ,+CAAR,CAClB;IAAIa,yBAA2Bb,OAAA,CAAQ,4DAAR,CAC3Bc,QAAAA,CAAsBd,OAAA,CAAQ,uDAAR,CACtBe,aAAAA,CAAuBf,OAAA,CAAQ,wDAAR,CAC3B,KAAIgB,YAAchB,OAAA,CAAQ,+CAAR,CAAlB,CACIiB,iBAAmBjB,OAAA,CAAQ,oDAAR,CADvB,CAqEIkB,qBAAuB,CA9DCC,CAI1BC,WAAYN,OAAAO,wBAJcF,CAQ1BG,MAAOR,OAAAS,iBARmBJ,CA8DD;AA9CHK,CAKtBJ,WAAYA,QAAS,EAAG,CACtB,IAAIK,iBAAmBZ,wBAAAa,UAAA,EACvBb,yBAAAc,WAAA,CAAoC,CAAA,CAApC,CACA,OAAOF,iBAHe,CALFD,CAgBtBF,MAAOA,QAAS,CAACM,iBAAD,CAAoB,CAClCf,wBAAAc,WAAA,CAAoCC,iBAApC,CADkC,CAhBdJ,CA8CG,CArBCK,CAI1BT,WAAYA,QAAS,EAAG,CACtB,IAAAZ,gBAAAsB,MAAA,EADsB,CAJED,CAW1BP,MAAOA,QAAS,EAAG,CACjB,IAAAd,gBAAAuB,UAAA,EADiB,CAXOF,CAqBD,CAGzBX,qBAAAc,KAAA,CAA0B,CACxBZ,WAAYL,YAAAkB,UAAAC,aADY,CAExBZ,MAAOP,YAAAkB,UAAAE,WAFiB,CAA1B,CAiFFxB,OAAA,CAAQP,yBAAAgC,UAAR;AAA6CpB,WAA7C,CAjDYqB,CAQVC,uBAAwBA,QAAS,EAAG,CAClC,MAAOpB,qBAD2B,CAR1BmB,CAeVE,mBAAoBA,QAAS,EAAG,CAC9B,MAAO,KAAA/B,gBADuB,CAftB6B,CAsBVG,eAAgBA,QAAS,EAAG,CAC1B,MAAOvB,iBADmB,CAtBlBoB,CA8BVI,WAAYA,QAAS,EAAG,CAEtB,MAAO,KAAAjC,gBAAAiC,WAAA,EAFe,CA9BdJ,CAmCVK,SAAUA,QAAS,CAACD,UAAD,CAAa,CAC9B,IAAAjC,gBAAAkC,SAAA,CAA8BD,UAA9B,CAD8B,CAnCtBJ,CA2CVM,WAAYA,QAAS,EAAG,CACtBlC,aAAAmC,QAAA,CAAsB,IAAApC,gBAAtB,CACA,KAAAA,gBAAA,CAAuB,IAFD,CA3Cd6B,CAiDZ,CAEAzB,QAAAiC,aAAA,CAAyBzC,yBAAzB,CAEAH,OAAAC,QAAA,CAAiBE,yBAjL4H;\",\n\"sources\":[\"node_modules/react-dom/lib/ReactReconcileTransaction.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$ReactReconcileTransaction\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar CallbackQueue = require('./CallbackQueue');\\nvar PooledClass = require('./PooledClass');\\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\\nvar ReactInputSelection = require('./ReactInputSelection');\\nvar ReactInstrumentation = require('./ReactInstrumentation');\\nvar Transaction = require('./Transaction');\\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\\n\\n/**\\n * Ensures that, when possible, the selection range (currently selected text\\n * input) is not disturbed by performing the transaction.\\n */\\nvar SELECTION_RESTORATION = {\\n  /**\\n   * @return {Selection} Selection information.\\n   */\\n  initialize: ReactInputSelection.getSelectionInformation,\\n  /**\\n   * @param {Selection} sel Selection information returned from `initialize`.\\n   */\\n  close: ReactInputSelection.restoreSelection\\n};\\n\\n/**\\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\\n * high level DOM manipulations (like temporarily removing a text input from the\\n * DOM).\\n */\\nvar EVENT_SUPPRESSION = {\\n  /**\\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\\n   * the reconciliation.\\n   */\\n  initialize: function () {\\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\\n    ReactBrowserEventEmitter.setEnabled(false);\\n    return currentlyEnabled;\\n  },\\n\\n  /**\\n   * @param {boolean} previouslyEnabled Enabled status of\\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\\n   *   restores the previous value.\\n   */\\n  close: function (previouslyEnabled) {\\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\\n  }\\n};\\n\\n/**\\n * Provides a queue for collecting `componentDidMount` and\\n * `componentDidUpdate` callbacks during the transaction.\\n */\\nvar ON_DOM_READY_QUEUEING = {\\n  /**\\n   * Initializes the internal `onDOMReady` queue.\\n   */\\n  initialize: function () {\\n    this.reactMountReady.reset();\\n  },\\n\\n  /**\\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\\n   */\\n  close: function () {\\n    this.reactMountReady.notifyAll();\\n  }\\n};\\n\\n/**\\n * Executed within the scope of the `Transaction` instance. Consider these as\\n * being member methods, but with an implied ordering while being isolated from\\n * each other.\\n */\\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  TRANSACTION_WRAPPERS.push({\\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,\\n    close: ReactInstrumentation.debugTool.onEndFlush\\n  });\\n}\\n\\n/**\\n * Currently:\\n * - The order that these are listed in the transaction is critical:\\n * - Suppresses events.\\n * - Restores selection range.\\n *\\n * Future:\\n * - Restore document/overflow scroll positions that were unintentionally\\n *   modified via DOM insertions above the top viewport boundary.\\n * - Implement/integrate with customized constraint based layout system and keep\\n *   track of which dimensions must be remeasured.\\n *\\n * @class ReactReconcileTransaction\\n */\\nfunction ReactReconcileTransaction(useCreateElement) {\\n  this.reinitializeTransaction();\\n  // Only server-side rendering really needs this option (see\\n  // `ReactServerRendering`), but server-side uses\\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\\n  // accessible and defaults to false when `ReactDOMComponent` and\\n  // `ReactDOMTextComponent` checks it in `mountComponent`.`\\n  this.renderToStaticMarkup = false;\\n  this.reactMountReady = CallbackQueue.getPooled(null);\\n  this.useCreateElement = useCreateElement;\\n}\\n\\nvar Mixin = {\\n  /**\\n   * @see Transaction\\n   * @abstract\\n   * @final\\n   * @return {array<object>} List of operation wrap procedures.\\n   *   TODO: convert to array<TransactionWrapper>\\n   */\\n  getTransactionWrappers: function () {\\n    return TRANSACTION_WRAPPERS;\\n  },\\n\\n  /**\\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\\n   */\\n  getReactMountReady: function () {\\n    return this.reactMountReady;\\n  },\\n\\n  /**\\n   * @return {object} The queue to collect React async events.\\n   */\\n  getUpdateQueue: function () {\\n    return ReactUpdateQueue;\\n  },\\n\\n  /**\\n   * Save current transaction state -- if the return value from this method is\\n   * passed to `rollback`, the transaction will be reset to that state.\\n   */\\n  checkpoint: function () {\\n    // reactMountReady is the our only stateful wrapper\\n    return this.reactMountReady.checkpoint();\\n  },\\n\\n  rollback: function (checkpoint) {\\n    this.reactMountReady.rollback(checkpoint);\\n  },\\n\\n  /**\\n   * `PooledClass` looks for this, and will invoke this before allowing this\\n   * instance to be reused.\\n   */\\n  destructor: function () {\\n    CallbackQueue.release(this.reactMountReady);\\n    this.reactMountReady = null;\\n  }\\n};\\n\\n_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);\\n\\nPooledClass.addPoolingTo(ReactReconcileTransaction);\\n\\nmodule.exports = ReactReconcileTransaction;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ReactReconcileTransaction\",\"useCreateElement\",\"reinitializeTransaction\",\"renderToStaticMarkup\",\"reactMountReady\",\"CallbackQueue\",\"getPooled\",\"_assign\",\"PooledClass\",\"ReactBrowserEventEmitter\",\"ReactInputSelection\",\"ReactInstrumentation\",\"Transaction\",\"ReactUpdateQueue\",\"TRANSACTION_WRAPPERS\",\"SELECTION_RESTORATION\",\"initialize\",\"getSelectionInformation\",\"close\",\"restoreSelection\",\"EVENT_SUPPRESSION\",\"currentlyEnabled\",\"isEnabled\",\"setEnabled\",\"previouslyEnabled\",\"ON_DOM_READY_QUEUEING\",\"reset\",\"notifyAll\",\"push\",\"debugTool\",\"onBeginFlush\",\"onEndFlush\",\"prototype\",\"Mixin\",\"getTransactionWrappers\",\"getReactMountReady\",\"getUpdateQueue\",\"checkpoint\",\"rollback\",\"destructor\",\"release\",\"addPoolingTo\"]\n}\n"]