["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/checkReactTypeSpec.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$checkReactTypeSpec=function(global,process,require,module,exports,shadow$shims){require(\"module$node_modules$react_dom$lib$reactProdInvariant\");var ReactPropTypeLocationNames=require(\"module$node_modules$react_dom$lib$ReactPropTypeLocationNames\"),ReactPropTypesSecret=require(\"module$node_modules$react_dom$lib$ReactPropTypesSecret\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),warning=require(\"module$node_modules$fbjs$lib$warning\"),ReactComponentTreeHook,\nloggedTypeFailures={};module.exports=function(typeSpecs,values,location,componentName,element,debugID){for(var typeSpecName in typeSpecs)if(typeSpecs.hasOwnProperty(typeSpecName)){try{\"function\"!==typeof typeSpecs[typeSpecName]?invariant(!1,\"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.\",componentName||\"React class\",ReactPropTypeLocationNames[location],typeSpecName):void 0;var error=typeSpecs[typeSpecName](values,typeSpecName,componentName,location,null,ReactPropTypesSecret)}catch(ex){error=\nex}warning(!error||error instanceof Error,\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",componentName||\"React class\",ReactPropTypeLocationNames[location],typeSpecName,typeof error);if(error instanceof Error&&!(error.message in loggedTypeFailures)){loggedTypeFailures[error.message]=\n!0;var componentStackInfo=\"\";ReactComponentTreeHook||(ReactComponentTreeHook=require(\"module$node_modules$react$lib$ReactComponentTreeHook\"));null!==debugID?componentStackInfo=ReactComponentTreeHook.getStackAddendumByID(debugID):null!==element&&(componentStackInfo=ReactComponentTreeHook.getCurrentStackAddendum(element));warning(!1,\"Failed %s type: %s%s\",location,error.message,componentStackInfo)}}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$checkReactTypeSpec\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactComponentTreeHook;\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');\n}\n\nvar loggedTypeFailures = {};\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?object} element The React element that is being type-checked\n * @param {?number} debugID The React component instance that is being type-checked\n * @private\n */\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var componentStackInfo = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!ReactComponentTreeHook) {\n            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');\n          }\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\n          }\n        }\n\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\n\nmodule.exports = checkReactTypeSpec;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$ReactComponentTreeHook","~$module$node_modules$react_dom$lib$ReactPropTypeLocationNames","~$shadow.js","~$module$node_modules$react_dom$lib$ReactPropTypesSecret","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react_dom$lib$reactProdInvariant","~$module$node_modules$fbjs$lib$warning"]],"~:properties",["^5",[]],"~:compiled-at",1635270336841,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$checkReactTypeSpec.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAajHH,OAAA,CAAQ,sDAAR,CAErB,KAAII,2BAA6BJ,OAAA,CAAQ,8DAAR,CAAjC,CACIK,qBAAuBL,OAAA,CAAQ,wDAAR,CAD3B,CAGIM,UAAYN,OAAA,CAAQ,wCAAR,CAHhB,CAIIO,QAAUP,OAAA,CAAQ,sCAAR,CAJd,CAMIQ,sBANJ;AAiBIC,mBAAqB,EAsDzBR,OAAAC,QAAA,CAxCAQ,QAA2B,CAACC,SAAD,CAAYC,MAAZ,CAAoBC,QAApB,CAA8BC,aAA9B,CAA6CC,OAA7C,CAAsDC,OAAtD,CAA+D,CACxF,IAAKC,IAAIA,YAAT,GAAyBN,UAAzB,CACE,GAAIA,SAAAO,eAAA,CAAyBD,YAAzB,CAAJ,CAA4C,CAK1C,GAAI,CAGmC,UAArC,GAAE,MAAON,UAAA,CAAUM,YAAV,CAAT,CAA2FX,SAAA,CAAU,CAAA,CAAV,CAAiB,mFAAjB,CAAsGQ,aAAtG,EAAuH,aAAvH,CAAsIV,0BAAA,CAA2BS,QAA3B,CAAtI,CAA4KI,YAA5K,CAA3F,CAAkY,IAAK,EACvY,KAAAE,MAAQR,SAAA,CAAUM,YAAV,CAAA,CAAwBL,MAAxB,CAAgCK,YAAhC,CAA8CH,aAA9C,CAA6DD,QAA7D,CAAuE,IAAvE,CAA6ER,oBAA7E,CAJN,CAKF,MAAOe,EAAP,CAAW,CACXD,KAAA;AAAQC,EADG,CAG2Bb,OAAA,CAAQ,CAACY,KAAT,EAAkBA,KAAlB,WAAmCE,MAAnC,CAA0C,0RAA1C,CAA0VP,aAA1V,EAA2W,aAA3W,CAA0XV,0BAAA,CAA2BS,QAA3B,CAA1X,CAAgaI,YAAha,CAA8a,MAAOE,MAArb,CACxC,IAAIA,KAAJ,WAAqBE,MAArB,EAA8B,EAAEF,KAAAG,QAAF,GAAmBb,mBAAnB,CAA9B,CAAsE,CAGpEA,kBAAA,CAAmBU,KAAAG,QAAnB,CAAA;AAAoC,CAAA,CAEpC,KAAIC,mBAAqB,EAGlBf,uBAAL,GACEA,sBADF,CAC2BR,OAAA,CAAQ,sDAAR,CAD3B,CAGgB,KAAhB,GAAIgB,OAAJ,CACEO,kBADF,CACuBf,sBAAAgB,qBAAA,CAA4CR,OAA5C,CADvB,CAEuB,IAFvB,GAEWD,OAFX,GAGEQ,kBAHF,CAGuBf,sBAAAiB,wBAAA,CAA+CV,OAA/C,CAHvB,CAOsCR,QAAA,CAAQ,CAAA,CAAR,CAAe,sBAAf,CAAuCM,QAAvC,CAAiDM,KAAAG,QAAjD,CAAgEC,kBAAhE,CAlB4B,CAd5B,CAF0C,CA9C4C;\",\n\"sources\":[\"node_modules/react-dom/lib/checkReactTypeSpec.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$checkReactTypeSpec\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\\n\\nvar invariant = require('fbjs/lib/invariant');\\nvar warning = require('fbjs/lib/warning');\\n\\nvar ReactComponentTreeHook;\\n\\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\\n  // Temporary hack.\\n  // Inline requires don't work well with Jest:\\n  // https://github.com/facebook/react/issues/7240\\n  // Remove the inline requires when we don't need them anymore:\\n  // https://github.com/facebook/react/pull/7178\\n  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');\\n}\\n\\nvar loggedTypeFailures = {};\\n\\n/**\\n * Assert that the values match with the type specs.\\n * Error messages are memorized and will only be shown once.\\n *\\n * @param {object} typeSpecs Map of name to a ReactPropType\\n * @param {object} values Runtime values that need to be type-checked\\n * @param {string} location e.g. \\\"prop\\\", \\\"context\\\", \\\"child context\\\"\\n * @param {string} componentName Name of the component for error messages.\\n * @param {?object} element The React element that is being type-checked\\n * @param {?number} debugID The React component instance that is being type-checked\\n * @private\\n */\\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\\n  for (var typeSpecName in typeSpecs) {\\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\\n      var error;\\n      // Prop type validation may throw. In case they do, we don't want to\\n      // fail the render phase where it didn't fail before. So we log it.\\n      // After these have been cleaned up, we'll let them throw.\\n      try {\\n        // This is intentionally an invariant that gets caught. It's the same\\n        // behavior as without this statement except with a better message.\\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\\n      } catch (ex) {\\n        error = ex;\\n      }\\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\\n        // Only monitor this failure once because there tends to be a lot of the\\n        // same error.\\n        loggedTypeFailures[error.message] = true;\\n\\n        var componentStackInfo = '';\\n\\n        if (process.env.NODE_ENV !== 'production') {\\n          if (!ReactComponentTreeHook) {\\n            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');\\n          }\\n          if (debugID !== null) {\\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\\n          } else if (element !== null) {\\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\\n          }\\n        }\\n\\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\\n      }\\n    }\\n  }\\n}\\n\\nmodule.exports = checkReactTypeSpec;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ReactPropTypeLocationNames\",\"ReactPropTypesSecret\",\"invariant\",\"warning\",\"ReactComponentTreeHook\",\"loggedTypeFailures\",\"checkReactTypeSpec\",\"typeSpecs\",\"values\",\"location\",\"componentName\",\"element\",\"debugID\",\"typeSpecName\",\"hasOwnProperty\",\"error\",\"ex\",\"Error\",\"message\",\"componentStackInfo\",\"getStackAddendumByID\",\"getCurrentStackAddendum\"]\n}\n"]