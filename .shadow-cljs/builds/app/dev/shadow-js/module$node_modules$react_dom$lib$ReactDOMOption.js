["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/ReactDOMOption.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$ReactDOMOption=function(global,process,require,module,exports,shadow$shims){function flattenChildren(children){var content=\"\";React.Children.forEach(children,function(child){null!=child&&(\"string\"===typeof child||\"number\"===typeof child?content+=child:didWarnInvalidOptionChildren||(didWarnInvalidOptionChildren=!0,warning(!1,\"Only strings and numbers are supported as \\x3coption\\x3e children.\")))});return content}var _assign=require(\"module$node_modules$object_assign$index\"),\nReact=require(\"module$node_modules$react$lib$React\"),ReactDOMComponentTree=require(\"module$node_modules$react_dom$lib$ReactDOMComponentTree\"),ReactDOMSelect=require(\"module$node_modules$react_dom$lib$ReactDOMSelect\"),warning=require(\"module$node_modules$fbjs$lib$warning\"),didWarnInvalidOptionChildren=!1;module.exports={mountWrapper:function(inst,props,hostParent){warning(null==props.selected,\"Use the `defaultValue` or `value` props on \\x3cselect\\x3e instead of setting `selected` on \\x3coption\\x3e.\");\nvar selectValue=null;null!=hostParent&&(\"optgroup\"===hostParent._tag&&(hostParent=hostParent._hostParent),null!=hostParent&&\"select\"===hostParent._tag&&(selectValue=ReactDOMSelect.getSelectValueContext(hostParent)));hostParent=null;if(null!=selectValue)if(props=null!=props.value?props.value+\"\":flattenChildren(props.children),hostParent=!1,Array.isArray(selectValue))for(var i=0;i<selectValue.length;i++){if(\"\"+selectValue[i]===props){hostParent=!0;break}}else hostParent=\"\"+selectValue===props;inst._wrapperState=\n{selected:hostParent}},postMountWrapper:function(inst){var props=inst._currentElement.props;null!=props.value&&ReactDOMComponentTree.getNodeFromInstance(inst).setAttribute(\"value\",props.value)},getHostProps:function(inst,props){var hostProps=_assign({selected:void 0,children:void 0},props);null!=inst._wrapperState.selected&&(hostProps.selected=inst._wrapperState.selected);if(inst=flattenChildren(props.children))hostProps.children=inst;return hostProps}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$ReactDOMOption\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar React = require('react/lib/React');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar warning = require('fbjs/lib/warning');\nvar didWarnInvalidOptionChildren = false;\n\nfunction flattenChildren(children) {\n  var content = '';\n\n  // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n    if (typeof child === 'string' || typeof child === 'number') {\n      content += child;\n    } else if (!didWarnInvalidOptionChildren) {\n      didWarnInvalidOptionChildren = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\n    }\n  });\n\n  return content;\n}\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, hostParent) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\n    }\n\n    // Look up whether this option is 'selected'\n    var selectValue = null;\n    if (hostParent != null) {\n      var selectParent = hostParent;\n\n      if (selectParent._tag === 'optgroup') {\n        selectParent = selectParent._hostParent;\n      }\n\n      if (selectParent != null && selectParent._tag === 'select') {\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);\n      }\n    }\n\n    // If the value is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      var value;\n      if (props.value != null) {\n        value = props.value + '';\n      } else {\n        value = flattenChildren(props.children);\n      }\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  postMountWrapper: function (inst) {\n    // value=\"\" should make a value attribute (#6219)\n    var props = inst._currentElement.props;\n    if (props.value != null) {\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n      node.setAttribute('value', props.value);\n    }\n  },\n\n  getHostProps: function (inst, props) {\n    var hostProps = _assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      hostProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = flattenChildren(props.children);\n\n    if (content) {\n      hostProps.children = content;\n    }\n\n    return hostProps;\n  }\n\n};\n\nmodule.exports = ReactDOMOption;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$lib$React","~$module$node_modules$object_assign$index","~$shadow.js","~$module$node_modules$react_dom$lib$ReactDOMSelect","~$module$node_modules$react_dom$lib$ReactDOMComponentTree","~$module$node_modules$fbjs$lib$warning"]],"~:properties",["^5",["selected","getHostProps","children","_wrapperState","postMountWrapper","mountWrapper"]],"~:compiled-at",1635270336840,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$ReactDOMOption.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-dom/lib/ReactDOMOption.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$ReactDOMOption\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar React = require('react/lib/React');\\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\\nvar ReactDOMSelect = require('./ReactDOMSelect');\\n\\nvar warning = require('fbjs/lib/warning');\\nvar didWarnInvalidOptionChildren = false;\\n\\nfunction flattenChildren(children) {\\n  var content = '';\\n\\n  // Flatten children and warn if they aren't strings or numbers;\\n  // invalid types are ignored.\\n  React.Children.forEach(children, function (child) {\\n    if (child == null) {\\n      return;\\n    }\\n    if (typeof child === 'string' || typeof child === 'number') {\\n      content += child;\\n    } else if (!didWarnInvalidOptionChildren) {\\n      didWarnInvalidOptionChildren = true;\\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\\n    }\\n  });\\n\\n  return content;\\n}\\n\\n/**\\n * Implements an <option> host component that warns when `selected` is set.\\n */\\nvar ReactDOMOption = {\\n  mountWrapper: function (inst, props, hostParent) {\\n    // TODO (yungsters): Remove support for `selected` in <option>.\\n    if (process.env.NODE_ENV !== 'production') {\\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\\n    }\\n\\n    // Look up whether this option is 'selected'\\n    var selectValue = null;\\n    if (hostParent != null) {\\n      var selectParent = hostParent;\\n\\n      if (selectParent._tag === 'optgroup') {\\n        selectParent = selectParent._hostParent;\\n      }\\n\\n      if (selectParent != null && selectParent._tag === 'select') {\\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);\\n      }\\n    }\\n\\n    // If the value is null (e.g., no specified value or after initial mount)\\n    // or missing (e.g., for <datalist>), we don't change props.selected\\n    var selected = null;\\n    if (selectValue != null) {\\n      var value;\\n      if (props.value != null) {\\n        value = props.value + '';\\n      } else {\\n        value = flattenChildren(props.children);\\n      }\\n      selected = false;\\n      if (Array.isArray(selectValue)) {\\n        // multiple\\n        for (var i = 0; i < selectValue.length; i++) {\\n          if ('' + selectValue[i] === value) {\\n            selected = true;\\n            break;\\n          }\\n        }\\n      } else {\\n        selected = '' + selectValue === value;\\n      }\\n    }\\n\\n    inst._wrapperState = { selected: selected };\\n  },\\n\\n  postMountWrapper: function (inst) {\\n    // value=\\\"\\\" should make a value attribute (#6219)\\n    var props = inst._currentElement.props;\\n    if (props.value != null) {\\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);\\n      node.setAttribute('value', props.value);\\n    }\\n  },\\n\\n  getHostProps: function (inst, props) {\\n    var hostProps = _assign({ selected: undefined, children: undefined }, props);\\n\\n    // Read state only from initial mount because <select> updates value\\n    // manually; we need the initial state only for server rendering\\n    if (inst._wrapperState.selected != null) {\\n      hostProps.selected = inst._wrapperState.selected;\\n    }\\n\\n    var content = flattenChildren(props.children);\\n\\n    if (content) {\\n      hostProps.children = content;\\n    }\\n\\n    return hostProps;\\n  }\\n\\n};\\n\\nmodule.exports = ReactDOMOption;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"flattenChildren\",\"children\",\"content\",\"React\",\"Children\",\"forEach\",\"child\",\"didWarnInvalidOptionChildren\",\"warning\",\"_assign\",\"ReactDOMComponentTree\",\"ReactDOMSelect\",\"ReactDOMOption\",\"mountWrapper\",\"inst\",\"props\",\"hostParent\",\"selected\",\"selectValue\",\"selectParent\",\"_tag\",\"_hostParent\",\"getSelectValueContext\",\"value\",\"Array\",\"isArray\",\"i\",\"length\",\"_wrapperState\",\"postMountWrapper\",\"_currentElement\",\"getNodeFromInstance\",\"node\",\"setAttribute\",\"getHostProps\",\"hostProps\",\"undefined\"]\n}\n"]