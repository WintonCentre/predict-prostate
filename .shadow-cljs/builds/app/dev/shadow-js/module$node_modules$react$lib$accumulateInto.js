["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/accumulateInto.js"],"~:js","shadow$provide.module$node_modules$react$lib$accumulateInto=function(global,require,module,exports){require(\"module$node_modules$react$lib$reactProdInvariant\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\");module.exports=function(current,next){null==next?invariant(!1,\"accumulateInto(...): Accumulated items must not be null or undefined.\"):void 0;if(null==current)return next;if(Array.isArray(current)){if(Array.isArray(next))return current.push.apply(current,next),current;current.push(next);\nreturn current}return Array.isArray(next)?[current].concat(next):[current,next]}}","~:source","shadow$provide[\"module$node_modules$react$lib$accumulateInto\"] = function(global,require,module,exports) {\n/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (Array.isArray(current)) {\n    if (Array.isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (Array.isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react$lib$reactProdInvariant"]],"~:properties",["^5",[]],"~:compiled-at",1635250628379,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$accumulateInto.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAepFF,OAAA,CAAQ,kDAAR,CAErB,KAAIG,UAAYH,OAAA,CAAQ,wCAAR,CAyChBC,OAAOC,CAAAA,OAAP,CA1BAE,QAAuB,CAACC,OAAD,CAAUC,IAAV,CAAgB,CAC3B,IAAV,EAAEA,IAAF,CAA0DH,SAAA,CAAU,CAAA,CAAV,CAAiB,uEAAjB,CAA1D,CAA6K,IAAK,EAElL,IAAe,IAAf,EAAIE,OAAJ,CACE,MAAOC,KAKT,IAAIC,KAAMC,CAAAA,OAAN,CAAcH,OAAd,CAAJ,CAA4B,CAC1B,GAAIE,KAAMC,CAAAA,OAAN,CAAcF,IAAd,CAAJ,CAEE,MADAD,QAAQI,CAAAA,IAAKC,CAAAA,KAAb,CAAmBL,OAAnB,CAA4BC,IAA5B,CACOD,CAAAA,OAETA,QAAQI,CAAAA,IAAR,CAAaH,IAAb,CACA;MAAOD,QANmB,CAS5B,MAAIE,MAAMC,CAAAA,OAAN,CAAcF,IAAd,CAAJ,CAES,CAACD,OAAD,CAAUM,CAAAA,MAAV,CAAiBL,IAAjB,CAFT,CAKO,CAACD,OAAD,CAAUC,IAAV,CAvB8B,CAhCkE;\",\n\"sources\":[\"node_modules/react/lib/accumulateInto.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$accumulateInto\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2014-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule accumulateInto\\n * \\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\n/**\\n * Accumulates items that must not be null or undefined into the first one. This\\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\\n * API cleanness. Since `current` can be null before being passed in and not\\n * null after this function, make sure to assign it back to `current`:\\n *\\n * `a = accumulateInto(a, b);`\\n *\\n * This API should be sparingly used. Try `accumulate` for something cleaner.\\n *\\n * @return {*|array<*>} An accumulation of items.\\n */\\n\\nfunction accumulateInto(current, next) {\\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;\\n\\n  if (current == null) {\\n    return next;\\n  }\\n\\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\\n  // certain that x is an Array (x could be a string with concat method).\\n  if (Array.isArray(current)) {\\n    if (Array.isArray(next)) {\\n      current.push.apply(current, next);\\n      return current;\\n    }\\n    current.push(next);\\n    return current;\\n  }\\n\\n  if (Array.isArray(next)) {\\n    // A bit too dangerous to mutate `next`.\\n    return [current].concat(next);\\n  }\\n\\n  return [current, next];\\n}\\n\\nmodule.exports = accumulateInto;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"invariant\",\"accumulateInto\",\"current\",\"next\",\"Array\",\"isArray\",\"push\",\"apply\",\"concat\"]\n}\n"]