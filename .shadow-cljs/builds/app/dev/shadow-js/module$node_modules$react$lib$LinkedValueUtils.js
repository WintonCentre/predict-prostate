["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react/lib/LinkedValueUtils.js"],"~:js","shadow$provide.module$node_modules$react$lib$LinkedValueUtils=function(global,require,module,exports){function _assertSingleLink(inputProps){null!=inputProps.checkedLink&&null!=inputProps.valueLink?invariant(!1,\"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa.\"):void 0}function _assertValueLink(inputProps){_assertSingleLink(inputProps);null!=inputProps.value||null!=inputProps.onChange?invariant(!1,\"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink.\"):\nvoid 0}function _assertCheckedLink(inputProps){_assertSingleLink(inputProps);null!=inputProps.checked||null!=inputProps.onChange?invariant(!1,\"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink\"):void 0}require(\"module$node_modules$react$lib$reactProdInvariant\");global=require(\"module$node_modules$react$lib$ReactPropTypes\");var ReactPropTypeLocations=require(\"module$node_modules$react$lib$ReactPropTypeLocations\"),\nReactPropTypesSecret=require(\"module$node_modules$react$lib$ReactPropTypesSecret\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),warning=require(\"module$node_modules$fbjs$lib$warning\"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},propTypes={value:function(props,propName,componentName){return!props[propName]||hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled?null:Error(\"You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.\")},\nchecked:function(props,propName,componentName){return!props[propName]||props.onChange||props.readOnly||props.disabled?null:Error(\"You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.\")},onChange:global.func},loggedTypeFailures={};module.exports={checkPropTypes:function(tagName,props,owner){for(var propName in propTypes){if(propTypes.hasOwnProperty(propName))var error=\npropTypes[propName](props,propName,tagName,ReactPropTypeLocations.prop,null,ReactPropTypesSecret);if(error instanceof Error&&!(error.message in loggedTypeFailures)){loggedTypeFailures[error.message]=!0;var addendum;a:{if(owner&&(addendum=owner.getName())){addendum=\" Check the render method of `\"+addendum+\"`.\";break a}addendum=\"\"}warning(!1,\"Failed form propType: %s%s\",error.message,addendum)}}},getValue:function(inputProps){return inputProps.valueLink?(_assertValueLink(inputProps),inputProps.valueLink.value):\ninputProps.value},getChecked:function(inputProps){return inputProps.checkedLink?(_assertCheckedLink(inputProps),inputProps.checkedLink.value):inputProps.checked},executeOnChange:function(inputProps,event){if(inputProps.valueLink)return _assertValueLink(inputProps),inputProps.valueLink.requestChange(event.target.value);if(inputProps.checkedLink)return _assertCheckedLink(inputProps),inputProps.checkedLink.requestChange(event.target.checked);if(inputProps.onChange)return inputProps.onChange.call(void 0,\nevent)}}}","~:source","shadow$provide[\"module$node_modules$react$lib$LinkedValueUtils\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(inputProps) {\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;\n}\nfunction _assertValueLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\\'t want to use valueLink.') : _prodInvariant('88') : void 0;\n}\n\nfunction _assertCheckedLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\\'t want to use checkedLink') : _prodInvariant('89') : void 0;\n}\n\nvar propTypes = {\n  value: function (props, propName, componentName) {\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  checked: function (props, propName, componentName) {\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  onChange: ReactPropTypes.func\n};\n\nvar loggedTypeFailures = {};\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  checkPropTypes: function (tagName, props, owner) {\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);\n      }\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum(owner);\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;\n      }\n    }\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function (inputProps) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.value;\n    }\n    return inputProps.value;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function (inputProps) {\n    if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.value;\n    }\n    return inputProps.checked;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @param {SyntheticEvent} event change event to handle\n   */\n  executeOnChange: function (inputProps, event) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.requestChange(event.target.value);\n    } else if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.requestChange(event.target.checked);\n    } else if (inputProps.onChange) {\n      return inputProps.onChange.call(undefined, event);\n    }\n  }\n};\n\nmodule.exports = LinkedValueUtils;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$react$lib$reactProdInvariant","~$module$node_modules$react$lib$ReactPropTypes","~$module$node_modules$react$lib$ReactPropTypeLocations","~$module$node_modules$react$lib$ReactPropTypesSecret","~$module$node_modules$fbjs$lib$warning"]],"~:properties",["^5",["onChange","getChecked","getValue","value","checkPropTypes","executeOnChange","checked"]],"~:compiled-at",1635250628398,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react$lib$LinkedValueUtils.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react/lib/LinkedValueUtils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react$lib$LinkedValueUtils\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule LinkedValueUtils\\n */\\n\\n'use strict';\\n\\nvar _prodInvariant = require('./reactProdInvariant');\\n\\nvar ReactPropTypes = require('./ReactPropTypes');\\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\\n\\nvar invariant = require('fbjs/lib/invariant');\\nvar warning = require('fbjs/lib/warning');\\n\\nvar hasReadOnlyValue = {\\n  'button': true,\\n  'checkbox': true,\\n  'image': true,\\n  'hidden': true,\\n  'radio': true,\\n  'reset': true,\\n  'submit': true\\n};\\n\\nfunction _assertSingleLink(inputProps) {\\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\\\\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;\\n}\\nfunction _assertValueLink(inputProps) {\\n  _assertSingleLink(inputProps);\\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\\\\'t want to use valueLink.') : _prodInvariant('88') : void 0;\\n}\\n\\nfunction _assertCheckedLink(inputProps) {\\n  _assertSingleLink(inputProps);\\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\\\\'t want to use checkedLink') : _prodInvariant('89') : void 0;\\n}\\n\\nvar propTypes = {\\n  value: function (props, propName, componentName) {\\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\\n      return null;\\n    }\\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\\n  },\\n  checked: function (props, propName, componentName) {\\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\\n      return null;\\n    }\\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\\n  },\\n  onChange: ReactPropTypes.func\\n};\\n\\nvar loggedTypeFailures = {};\\nfunction getDeclarationErrorAddendum(owner) {\\n  if (owner) {\\n    var name = owner.getName();\\n    if (name) {\\n      return ' Check the render method of `' + name + '`.';\\n    }\\n  }\\n  return '';\\n}\\n\\n/**\\n * Provide a linked `value` attribute for controlled forms. You should not use\\n * this outside of the ReactDOM controlled form components.\\n */\\nvar LinkedValueUtils = {\\n  checkPropTypes: function (tagName, props, owner) {\\n    for (var propName in propTypes) {\\n      if (propTypes.hasOwnProperty(propName)) {\\n        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);\\n      }\\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\\n        // Only monitor this failure once because there tends to be a lot of the\\n        // same error.\\n        loggedTypeFailures[error.message] = true;\\n\\n        var addendum = getDeclarationErrorAddendum(owner);\\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;\\n      }\\n    }\\n  },\\n\\n  /**\\n   * @param {object} inputProps Props for form component\\n   * @return {*} current value of the input either from value prop or link.\\n   */\\n  getValue: function (inputProps) {\\n    if (inputProps.valueLink) {\\n      _assertValueLink(inputProps);\\n      return inputProps.valueLink.value;\\n    }\\n    return inputProps.value;\\n  },\\n\\n  /**\\n   * @param {object} inputProps Props for form component\\n   * @return {*} current checked status of the input either from checked prop\\n   *             or link.\\n   */\\n  getChecked: function (inputProps) {\\n    if (inputProps.checkedLink) {\\n      _assertCheckedLink(inputProps);\\n      return inputProps.checkedLink.value;\\n    }\\n    return inputProps.checked;\\n  },\\n\\n  /**\\n   * @param {object} inputProps Props for form component\\n   * @param {SyntheticEvent} event change event to handle\\n   */\\n  executeOnChange: function (inputProps, event) {\\n    if (inputProps.valueLink) {\\n      _assertValueLink(inputProps);\\n      return inputProps.valueLink.requestChange(event.target.value);\\n    } else if (inputProps.checkedLink) {\\n      _assertCheckedLink(inputProps);\\n      return inputProps.checkedLink.requestChange(event.target.checked);\\n    } else if (inputProps.onChange) {\\n      return inputProps.onChange.call(undefined, event);\\n    }\\n  }\\n};\\n\\nmodule.exports = LinkedValueUtils;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_assertSingleLink\",\"inputProps\",\"checkedLink\",\"valueLink\",\"invariant\",\"_assertValueLink\",\"value\",\"onChange\",\"_assertCheckedLink\",\"checked\",\"ReactPropTypes\",\"ReactPropTypeLocations\",\"ReactPropTypesSecret\",\"warning\",\"hasReadOnlyValue\",\"propTypes\",\"props\",\"propName\",\"componentName\",\"type\",\"readOnly\",\"disabled\",\"Error\",\"func\",\"loggedTypeFailures\",\"LinkedValueUtils\",\"checkPropTypes\",\"tagName\",\"owner\",\"hasOwnProperty\",\"error\",\"prop\",\"message\",\"addendum\",\"name\",\"getName\",\"getValue\",\"getChecked\",\"executeOnChange\",\"event\",\"requestChange\",\"target\",\"call\",\"undefined\"]\n}\n"]