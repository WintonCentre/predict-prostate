["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/setInnerHTML.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$setInnerHTML=function(global,process,require,module,exports,shadow$shims){global=require(\"module$node_modules$fbjs$lib$ExecutionEnvironment\");var DOMNamespaces=require(\"module$node_modules$react_dom$lib$DOMNamespaces\"),WHITESPACE_TEST=/^[ \\r\\n\\t\\f]/,NONVISIBLE_TEST=/<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/,reusableSVGContainer;require=require(\"module$node_modules$react_dom$lib$createMicrosoftUnsafeLocalFunction\")(function(node,html){if(node.namespaceURI!==\nDOMNamespaces.svg||\"innerHTML\"in node)node.innerHTML=html;else for(reusableSVGContainer=reusableSVGContainer||document.createElement(\"div\"),reusableSVGContainer.innerHTML=\"\\x3csvg\\x3e\"+html+\"\\x3c/svg\\x3e\",html=reusableSVGContainer.firstChild;html.firstChild;)node.appendChild(html.firstChild)});global.canUseDOM&&(global=document.createElement(\"div\"),global.innerHTML=\" \",\"\"===global.innerHTML&&(require=function(node,html){node.parentNode&&node.parentNode.replaceChild(node,node);WHITESPACE_TEST.test(html)||\n\"\\x3c\"===html[0]&&NONVISIBLE_TEST.test(html)?(node.innerHTML=String.fromCharCode(65279)+html,html=node.firstChild,1===html.data.length?node.removeChild(html):html.deleteData(0,1)):node.innerHTML=html}),global=null);module.exports=require}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$setInnerHTML\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar DOMNamespaces = require('./DOMNamespaces');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\n\n// SVG temp container for IE lacking innerHTML\nvar reusableSVGContainer;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\n  // IE does not have innerHTML for SVG nodes, so instead we inject the\n  // new markup in a temp node and then move the child nodes across into\n  // the target node\n  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {\n    reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';\n    var svgNode = reusableSVGContainer.firstChild;\n    while (svgNode.firstChild) {\n      node.appendChild(svgNode.firstChild);\n    }\n  } else {\n    node.innerHTML = html;\n  }\n});\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n  testElement = null;\n}\n\nmodule.exports = setInnerHTML;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$DOMNamespaces","~$shadow.js","~$module$node_modules$react_dom$lib$createMicrosoftUnsafeLocalFunction","~$module$node_modules$fbjs$lib$ExecutionEnvironment"]],"~:properties",["^5",["innerHTML"]],"~:compiled-at",1635270336829,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$setInnerHTML.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAa5HC,MAAAA,CAAuBJ,OAAA,CAAQ,mDAAR,CAC3B,KAAIK,cAAgBL,OAAA,CAAQ,iDAAR,CAApB,CAEIM,gBAAkB,cAFtB,CAGIC,gBAAkB,sDAHtB,CAQIC,oBAUAC,QAAAA,CAbqCT,OAAAU,CAAQ,sEAARA,CAatB,CAAmC,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,CAI1E,GAAID,IAAAE,aAAJ;AAA0BR,aAAAS,IAA1B,EAAiD,WAAjD,EAAgEH,KAAhE,CAQEA,IAAAI,UAAA,CAAiBH,IARnB,KAIE,KAHAJ,oBAEIQ,CAFmBR,oBAEnBQ,EAF2CC,QAAAC,cAAA,CAAuB,KAAvB,CAE3CF,CADJR,oBAAAO,UACIC,CAD6B,aAC7BA,CADuCJ,IACvCI,CAD8C,cAC9CA,CAAAA,IAAAA,CAAUR,oBAAAW,WACd,CAAOH,IAAAG,WAAP,CAAA,CACER,IAAAS,YAAA,CAAiBJ,IAAAG,WAAjB,CATsE,CAAzD,CAgBff,OAAAiB,UAAJ,GAOMC,MAuCJ,CAvCkBL,QAAAC,cAAA,CAAuB,KAAvB,CAuClB,CAtCAI,MAAAP,UAsCA,CAtCwB,GAsCxB,CArC8B,EAqC9B,GArCIO,MAAAP,UAqCJ,GApCEN,OAoCF,CApCiBA,QAAS,CAACE,IAAD,CAAOC,IAAP,CAAa,CAM/BD,IAAAY,WAAJ,EACEZ,IAAAY,WAAAC,aAAA,CAA6Bb,IAA7B,CAAmCA,IAAnC,CAOEL,gBAAAmB,KAAA,CAAqBb,IAArB,CAAJ;AAA8C,MAA9C,GAAkCA,IAAA,CAAK,CAAL,CAAlC,EAAqDL,eAAAkB,KAAA,CAAqBb,IAArB,CAArD,EAOED,IAAAI,UAKA,CALiBW,MAAAC,aAAA,CAAoB,KAApB,CAKjB,CAL+Cf,IAK/C,CADIgB,IACJ,CADejB,IAAAQ,WACf,CAA6B,CAA7B,GAAIS,IAAAC,KAAAC,OAAJ,CACEnB,IAAAoB,YAAA,CAAiBH,IAAjB,CADF,CAGEA,IAAAI,WAAA,CAAoB,CAApB,CAAuB,CAAvB,CAfJ,EAkBErB,IAAAI,UAlBF,CAkBmBH,IAhCgB,CAoCvC,EAAAU,MAAA,CAAc,IA9ChB,CAiDArB,OAAAC,QAAA,CAAiBO,OAjG+G;\",\n\"sources\":[\"node_modules/react-dom/lib/setInnerHTML.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$setInnerHTML\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n */\\n\\n'use strict';\\n\\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\\nvar DOMNamespaces = require('./DOMNamespaces');\\n\\nvar WHITESPACE_TEST = /^[ \\\\r\\\\n\\\\t\\\\f]/;\\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\\\r\\\\n\\\\t\\\\f\\\\/>]/;\\n\\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\\n\\n// SVG temp container for IE lacking innerHTML\\nvar reusableSVGContainer;\\n\\n/**\\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\\n * even in IE8.\\n *\\n * @param {DOMElement} node\\n * @param {string} html\\n * @internal\\n */\\nvar setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\\n  // IE does not have innerHTML for SVG nodes, so instead we inject the\\n  // new markup in a temp node and then move the child nodes across into\\n  // the target node\\n  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {\\n    reusableSVGContainer = reusableSVGContainer || document.createElement('div');\\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';\\n    var svgNode = reusableSVGContainer.firstChild;\\n    while (svgNode.firstChild) {\\n      node.appendChild(svgNode.firstChild);\\n    }\\n  } else {\\n    node.innerHTML = html;\\n  }\\n});\\n\\nif (ExecutionEnvironment.canUseDOM) {\\n  // IE8: When updating a just created node with innerHTML only leading\\n  // whitespace is removed. When updating an existing node with innerHTML\\n  // whitespace in root TextNodes is also collapsed.\\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\\n\\n  // Feature detection; only IE8 is known to behave improperly like this.\\n  var testElement = document.createElement('div');\\n  testElement.innerHTML = ' ';\\n  if (testElement.innerHTML === '') {\\n    setInnerHTML = function (node, html) {\\n      // Magic theory: IE8 supposedly differentiates between added and updated\\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\\n      // from worse whitespace behavior. Re-adding a node like this triggers\\n      // the initial and more favorable whitespace behavior.\\n      // TODO: What to do on a detached node?\\n      if (node.parentNode) {\\n        node.parentNode.replaceChild(node, node);\\n      }\\n\\n      // We also implement a workaround for non-visible tags disappearing into\\n      // thin air on IE8, this only happens if there is no visible text\\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\\n      // and simply check if any non-visible tags appear in the source.\\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\\n        // Recover leading whitespace by temporarily prepending any character.\\n        // \\\\uFEFF has the potential advantage of being zero-width/invisible.\\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\\n        // in hopes that this is preserved even if \\\"\\\\uFEFF\\\" is transformed to\\n        // the actual Unicode character (by Babel, for example).\\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\\n\\n        // deleteData leaves an empty `TextNode` which offsets the index of all\\n        // children. Definitely want to avoid this.\\n        var textNode = node.firstChild;\\n        if (textNode.data.length === 1) {\\n          node.removeChild(textNode);\\n        } else {\\n          textNode.deleteData(0, 1);\\n        }\\n      } else {\\n        node.innerHTML = html;\\n      }\\n    };\\n  }\\n  testElement = null;\\n}\\n\\nmodule.exports = setInnerHTML;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ExecutionEnvironment\",\"DOMNamespaces\",\"WHITESPACE_TEST\",\"NONVISIBLE_TEST\",\"reusableSVGContainer\",\"setInnerHTML\",\"createMicrosoftUnsafeLocalFunction\",\"node\",\"html\",\"namespaceURI\",\"svg\",\"innerHTML\",\"svgNode\",\"document\",\"createElement\",\"firstChild\",\"appendChild\",\"canUseDOM\",\"testElement\",\"parentNode\",\"replaceChild\",\"test\",\"String\",\"fromCharCode\",\"textNode\",\"data\",\"length\",\"removeChild\",\"deleteData\"]\n}\n"]