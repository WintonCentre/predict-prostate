["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dom/lib/ReactRef.js"],"~:js","shadow$provide.module$node_modules$react_dom$lib$ReactRef=function(global,process,require,module,exports,shadow$shims){var ReactOwner=require(\"module$node_modules$react_dom$lib$ReactOwner\");module.exports={attachRefs:function(instance,element){if(null!==element&&\"object\"===typeof element){var ref=element.ref;null!=ref&&(element=element._owner,\"function\"===typeof ref?ref(instance.getPublicInstance()):ReactOwner.addComponentAsRefTo(instance,ref,element))}},shouldUpdateRefs:function(prevElement,nextElement){var prevRef=\nnull,prevOwner=null;null!==prevElement&&\"object\"===typeof prevElement&&(prevRef=prevElement.ref,prevOwner=prevElement._owner);var nextOwner=prevElement=null;null!==nextElement&&\"object\"===typeof nextElement&&(prevElement=nextElement.ref,nextOwner=nextElement._owner);return prevRef!==prevElement||\"string\"===typeof prevElement&&nextOwner!==prevOwner},detachRefs:function(instance,element){if(null!==element&&\"object\"===typeof element){var ref=element.ref;null!=ref&&(element=element._owner,\"function\"===\ntypeof ref?ref(null):ReactOwner.removeComponentAsRefFrom(instance,ref,element))}}}}","~:source","shadow$provide[\"module$node_modules$react_dom$lib$ReactRef\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevRef = null;\n  var prevOwner = null;\n  if (prevElement !== null && typeof prevElement === 'object') {\n    prevRef = prevElement.ref;\n    prevOwner = prevElement._owner;\n  }\n\n  var nextRef = null;\n  var nextOwner = null;\n  if (nextElement !== null && typeof nextElement === 'object') {\n    nextRef = nextElement.ref;\n    nextOwner = nextElement._owner;\n  }\n\n  return prevRef !== nextRef ||\n  // If owner changes but we have an unchanged function ref, don't update refs\n  typeof nextRef === 'string' && nextOwner !== prevOwner;\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$lib$ReactOwner","~$shadow.js"]],"~:properties",["^5",["attachRefs","detachRefs","shouldUpdateRefs"]],"~:compiled-at",1635270336819,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dom$lib$ReactRef.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAc5H,IAAIC,WAAaJ,OAAA,CAAQ,8CAAR,CA0EjBC,OAAAC,QAAA,CAxEeG,CAoBN,WAAaC,QAAS,CAACC,QAAD,CAAWC,OAAX,CAAoB,CACjD,GAAgB,IAAhB,GAAIA,OAAJ,EAA2C,QAA3C,GAAwB,MAAOA,QAA/B,CAAA,CAGA,IAAIC,IAAMD,OAAAC,IACC,KAAX,EAAIA,GAAJ,GAC2BC,OAvB3B,CAuB2BF,OAAAE,OAvB3B,CAAmB,UAAnB,GAAI,MAuBQD,IAvBZ,CAuBYA,GAtBV,CAsBeF,QAtBXI,kBAAA,EAAJ,CADF,CAIEP,UAAAQ,oBAAA,CAmBeL,QAnBf,CAmBUE,GAnBV,CAA+CI,OAA/C,CAkBF,CAJA,CADiD,CApBpCR,CA8BN,iBAAmBS,QAAS,CAACC,WAAD,CAAcC,WAAd,CAA2B,CAa9D,IAAIC;AAAU,IAAd,CACIC,UAAY,IACI,KAApB,GAAIH,WAAJ,EAAmD,QAAnD,GAA4B,MAAOA,YAAnC,GACEE,OACA,CADUF,WAAAN,IACV,CAAAS,SAAA,CAAYH,WAAAL,OAFd,CAMA,KAAIS,UADAC,WACAD,CADU,IAEM,KAApB,GAAIH,WAAJ,EAAmD,QAAnD,GAA4B,MAAOA,YAAnC,GACEI,WACA,CADUJ,WAAAP,IACV,CAAAU,SAAA,CAAYH,WAAAN,OAFd,CAKA,OAAOO,QAAP,GAAmBG,WAAnB,EAEmB,QAFnB,GAEA,MAAOA,YAFP,EAE+BD,SAF/B,GAE6CD,SA7BiB,CA9BjDb,CA8DN,WAAagB,QAAS,CAACd,QAAD,CAAWC,OAAX,CAAoB,CACjD,GAAgB,IAAhB,GAAIA,OAAJ,EAA2C,QAA3C,GAAwB,MAAOA,QAA/B,CAAA,CAGA,IAAIC,IAAMD,OAAAC,IACC,KAAX,EAAIA,GAAJ,GAC2BC,OAxD3B,CAwD2BF,OAAAE,OAxD3B,CAAmB,UAAnB;AAAI,MAwDQD,IAxDZ,CAwDYA,GAvDV,CAAI,IAAJ,CADF,CAIEL,UAAAkB,yBAAA,CAoDef,QApDf,CAoDUE,GApDV,CAAoDI,OAApD,CAmDF,CAJA,CADiD,CA9DpCR,CAhB6G;\",\n\"sources\":[\"node_modules/react-dom/lib/ReactRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dom$lib$ReactRef\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * \\n */\\n\\n'use strict';\\n\\nvar ReactOwner = require('./ReactOwner');\\n\\nvar ReactRef = {};\\n\\nfunction attachRef(ref, component, owner) {\\n  if (typeof ref === 'function') {\\n    ref(component.getPublicInstance());\\n  } else {\\n    // Legacy ref\\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\\n  }\\n}\\n\\nfunction detachRef(ref, component, owner) {\\n  if (typeof ref === 'function') {\\n    ref(null);\\n  } else {\\n    // Legacy ref\\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\\n  }\\n}\\n\\nReactRef.attachRefs = function (instance, element) {\\n  if (element === null || typeof element !== 'object') {\\n    return;\\n  }\\n  var ref = element.ref;\\n  if (ref != null) {\\n    attachRef(ref, instance, element._owner);\\n  }\\n};\\n\\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\\n  // If either the owner or a `ref` has changed, make sure the newest owner\\n  // has stored a reference to `this`, and the previous owner (if different)\\n  // has forgotten the reference to `this`. We use the element instead\\n  // of the public this.props because the post processing cannot determine\\n  // a ref. The ref conceptually lives on the element.\\n\\n  // TODO: Should this even be possible? The owner cannot change because\\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\\n  // if you swap the keys of but not the refs. Reconsider where this check\\n  // is made. It probably belongs where the key checking and\\n  // instantiateReactComponent is done.\\n\\n  var prevRef = null;\\n  var prevOwner = null;\\n  if (prevElement !== null && typeof prevElement === 'object') {\\n    prevRef = prevElement.ref;\\n    prevOwner = prevElement._owner;\\n  }\\n\\n  var nextRef = null;\\n  var nextOwner = null;\\n  if (nextElement !== null && typeof nextElement === 'object') {\\n    nextRef = nextElement.ref;\\n    nextOwner = nextElement._owner;\\n  }\\n\\n  return prevRef !== nextRef ||\\n  // If owner changes but we have an unchanged function ref, don't update refs\\n  typeof nextRef === 'string' && nextOwner !== prevOwner;\\n};\\n\\nReactRef.detachRefs = function (instance, element) {\\n  if (element === null || typeof element !== 'object') {\\n    return;\\n  }\\n  var ref = element.ref;\\n  if (ref != null) {\\n    detachRef(ref, instance, element._owner);\\n  }\\n};\\n\\nmodule.exports = ReactRef;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"ReactOwner\",\"ReactRef\",\"ReactRef.attachRefs\",\"instance\",\"element\",\"ref\",\"_owner\",\"getPublicInstance\",\"addComponentAsRefTo\",\"owner\",\"ReactRef.shouldUpdateRefs\",\"prevElement\",\"nextElement\",\"prevRef\",\"prevOwner\",\"nextOwner\",\"nextRef\",\"ReactRef.detachRefs\",\"removeComponentAsRefFrom\"]\n}\n"]