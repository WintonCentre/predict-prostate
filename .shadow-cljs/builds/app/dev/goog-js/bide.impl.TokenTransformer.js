["^ ","~:resource-id",["~:shadow.build.classpath/resource","bide/impl/TokenTransformer.js"],"~:js","goog.provide(\"bide.impl.TokenTransformer\");\ngoog.require(\"goog.history.Html5History\");\ngoog.scope(function() {\n  bide.impl.TokenTransformer = function() {\n  };\n  bide.impl.TokenTransformer.prototype.retrieveToken = function(pathPrefix, location) {\n    return location.pathname.substr(pathPrefix.length) + location.search;\n  };\n  bide.impl.TokenTransformer.prototype.createUrl = function(token, pathPrefix, location) {\n    return pathPrefix + token;\n  };\n});\n","~:source","/**\n * TokenTransformer\n *\n * @author Paul Anderson <paul@andersonpaul.com>, 2018\n * @license BSD License <https://opensource.org/licenses/BSD-2-Clause>\n */\n\ngoog.provide('bide.impl.TokenTransformer');\n\ngoog.require('goog.history.Html5History');\n\ngoog.scope(function() {\n  /**\n   * A goog.history.Html5History.TokenTransformer implementation that\n   * includes the query string in the token.\n   * \n   * The implementation of token<->url transforms in\n   * `goog.history.Html5History`, when useFragment is false and no custom\n   * transformer is supplied, assumes that a token is equivalent to\n   * `window.location.pathname` minus any configured path prefix. Since\n   * bide allows constructing urls that include a query string, we want\n   * to be able to store those as tokens.\n   * \n   * Addresses funcool/bide#15.\n   * \n   * @constructor\n   * @implements {goog.history.Html5History.TokenTransformer}\n   */\n  bide.impl.TokenTransformer = function () {};\n\n  /**\n   * Retrieves a history token given the path prefix and\n   * `window.location` object.\n   *\n   * @param {string} pathPrefix The path prefix to use when storing token\n   *     in a path; always begin with a slash.\n   * @param {Location} location The `window.location` object.\n   *     Treat this object as read-only.\n   * @return {string} token The history token.\n   */\n  bide.impl.TokenTransformer.prototype.retrieveToken = function(pathPrefix, location) {\n    return location.pathname.substr(pathPrefix.length) + location.search;\n  };\n\n  /**\n   * Creates a URL to be pushed into HTML5 history stack when storing\n   * token without using hash fragment.\n   *\n   * @param {string} token The history token.\n   * @param {string} pathPrefix The path prefix to use when storing token\n   *     in a path; always begin with a slash.\n   * @param {Location} location The `window.location` object.\n   *     Treat this object as read-only.\n   * @return {string} url The complete URL string from path onwards\n   *     (without {@code protocol://host:port} part); must begin with a\n   *     slash.\n   */\n  bide.impl.TokenTransformer.prototype.createUrl = function(token, pathPrefix, location) {\n    return pathPrefix + token;\n  };\n});","~:compiled-at",1635324223856,"~:source-map-json","{\n\"version\":3,\n\"file\":\"bide.impl.TokenTransformer.js\",\n\"lineCount\":13,\n\"mappings\":\"AAOAA,IAAA,CAAKC,OAAL,CAAa,4BAAb,CAAA;AAEAD,IAAA,CAAKE,OAAL,CAAa,2BAAb,CAAA;AAEAF,IAAA,CAAKG,KAAL,CAAW,QAAQ,EAAG;AAiBpBC,MAAA,CAAKC,IAAL,CAAUC,gBAAV,GAA6BC,QAAS,EAAG;GAAzC;AAYAH,MAAA,CAAKC,IAAL,CAAUC,gBAAV,CAA2BE,SAA3B,CAAqCC,aAArC,GAAqDC,QAAQ,CAACC,UAAD,EAAaC,QAAb,CAAuB;AAClF,WAAOA,QAAA,CAASC,QAAT,CAAkBC,MAAlB,CAAyBH,UAAzB,CAAoCI,MAApC,CAAP,GAAqDH,QAArD,CAA8DI,MAA9D;AADkF,GAApF;AAiBAZ,MAAA,CAAKC,IAAL,CAAUC,gBAAV,CAA2BE,SAA3B,CAAqCS,SAArC,GAAiDC,QAAQ,CAACC,KAAD,EAAQR,UAAR,EAAoBC,QAApB,CAA8B;AACrF,WAAOD,UAAP,GAAoBQ,KAApB;AADqF,GAAvF;AA9CoB,CAAtB,CAAA;;\",\n\"sources\":[\"bide/impl/TokenTransformer.js\"],\n\"sourcesContent\":[\"/**\\n * TokenTransformer\\n *\\n * @author Paul Anderson <paul@andersonpaul.com>, 2018\\n * @license BSD License <https://opensource.org/licenses/BSD-2-Clause>\\n */\\n\\ngoog.provide('bide.impl.TokenTransformer');\\n\\ngoog.require('goog.history.Html5History');\\n\\ngoog.scope(function() {\\n  /**\\n   * A goog.history.Html5History.TokenTransformer implementation that\\n   * includes the query string in the token.\\n   * \\n   * The implementation of token<->url transforms in\\n   * `goog.history.Html5History`, when useFragment is false and no custom\\n   * transformer is supplied, assumes that a token is equivalent to\\n   * `window.location.pathname` minus any configured path prefix. Since\\n   * bide allows constructing urls that include a query string, we want\\n   * to be able to store those as tokens.\\n   * \\n   * Addresses funcool/bide#15.\\n   * \\n   * @constructor\\n   * @implements {goog.history.Html5History.TokenTransformer}\\n   */\\n  bide.impl.TokenTransformer = function () {};\\n\\n  /**\\n   * Retrieves a history token given the path prefix and\\n   * `window.location` object.\\n   *\\n   * @param {string} pathPrefix The path prefix to use when storing token\\n   *     in a path; always begin with a slash.\\n   * @param {Location} location The `window.location` object.\\n   *     Treat this object as read-only.\\n   * @return {string} token The history token.\\n   */\\n  bide.impl.TokenTransformer.prototype.retrieveToken = function(pathPrefix, location) {\\n    return location.pathname.substr(pathPrefix.length) + location.search;\\n  };\\n\\n  /**\\n   * Creates a URL to be pushed into HTML5 history stack when storing\\n   * token without using hash fragment.\\n   *\\n   * @param {string} token The history token.\\n   * @param {string} pathPrefix The path prefix to use when storing token\\n   *     in a path; always begin with a slash.\\n   * @param {Location} location The `window.location` object.\\n   *     Treat this object as read-only.\\n   * @return {string} url The complete URL string from path onwards\\n   *     (without {@code protocol://host:port} part); must begin with a\\n   *     slash.\\n   */\\n  bide.impl.TokenTransformer.prototype.createUrl = function(token, pathPrefix, location) {\\n    return pathPrefix + token;\\n  };\\n});\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"scope\",\"bide\",\"impl\",\"TokenTransformer\",\"bide.impl.TokenTransformer\",\"prototype\",\"retrieveToken\",\"bide.impl.TokenTransformer.prototype.retrieveToken\",\"pathPrefix\",\"location\",\"pathname\",\"substr\",\"length\",\"search\",\"createUrl\",\"bide.impl.TokenTransformer.prototype.createUrl\",\"token\"]\n}\n"]