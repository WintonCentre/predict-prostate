{"version":3,"sources":["tongue/core.cljc"],"mappings":"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","names":["tongue.core/inst-formatter","tongue.inst/formatter","tongue.core/format-inst-iso","G__42532","G__42533","tongue.core/number-formatter","tongue.number/formatter","tongue.core/parse-long","s","js/parseInt","js/tongue","js/tongue.core","js/tongue.core.tags-cache","tongue.core/tags-cache","cljs.core/volatile!","tongue.core/tags","locale","or__4212__auto__","fexpr__42541","cljs.core/deref","tags","subtags","clojure.string.split","cljs.core/name","last-tag","temp__5755__auto__","subtag","cljs.core/first","tag","cljs.core/next","cljs.core.conj","cljs.core.keyword","cljs.core.assoc","tongue.core/lookup-template-for-locale","dicts","key","temp__5757__auto__","cljs.core.get","tongue.core/lookup-template","tongue.core/escape-re-subst","str","clojure.string/replace","tongue.core/format-argument","x","formatter","cljs.core/str","cljs.core/inst?","var_args","G__42614","tongue.core/translate","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq42607","G__42608","G__42610","G__42611","G__42612","self__4805__auto__","t","cljs.core/ifn?","cljs.core/map?","p__42619","vec__42620","cljs.core.nth","_","k","rest","args","cljs.core/cons","cljs.core.apply","p__42624","vec__42625","n","idx","arg","tongue.core/append-ns","ns","segment","G__42638","tongue.core/build-dict","js/Error","dict","tongue.core.build_dict","cljs.core/reduce-kv","aggr","value","cljs.core._EQ_","cljs.core/namespace","cljs.core.merge","tongue.core/build-dicts","acc","lang","tongue.core/build-translate","compiled-dicts","tongue.core.translate"],"sourcesContent":["(ns tongue.core\n  (:require\n    [clojure.string :as str]\n    [tongue.inst :as inst]\n    [tongue.number :as number]\n    [tongue.macro :as macro]\n    #?(:clj [clojure.future :refer :all])\n    #?(:clj [clojure.spec.alpha :as spec])))\n\n\n(def inst-formatter inst/formatter)\n\n\n(def format-inst-iso (inst-formatter \"{year}-{month-numeric-padded}-{day-padded}T{hour24-padded}:{minutes-padded}:{seconds-padded}\" {}))\n\n\n(def number-formatter number/formatter)\n\n\n(defn- parse-long [s]\n  #?(:cljs (js/parseInt s)\n     :clj  (Long/parseLong s)))\n\n\n(defonce ^:private tags-cache (volatile! {}))\n\n\n(defn- tags\n  \":az-Arab-IR => (:az-Arab-IR :az-Arab :az), cached\"\n  [locale]\n  (or (@tags-cache locale)\n      (let [tags (loop [subtags  (str/split (name locale) #\"-\")\n                        last-tag nil\n                        tags     ()]\n                   (if-some [subtag (first subtags)]\n                     (let [tag (str last-tag (when last-tag \"-\") subtag)]\n                       (recur (next subtags) tag (conj tags (keyword tag))))\n                     tags))]\n        (vswap! tags-cache assoc locale tags)\n        tags)))\n\n\n(defn- lookup-template-for-locale [dicts locale key]\n  (when locale\n    (loop [tags (tags locale)]\n      (when-some [tag (first tags)]\n        (or (get (get dicts tag) key)\n            (recur (next tags)))))))\n\n\n(defn- lookup-template [dicts locale key]\n  (or (lookup-template-for-locale dicts locale key)\n      (lookup-template-for-locale dicts (:tongue/fallback dicts) key)\n      (str \"{Missing key \" key \"}\")))\n\n\n(defn- escape-re-subst [str]\n  #?(:clj (java.util.regex.Matcher/quoteReplacement str)\n     :cljs (str/replace str #\"\\$\" \"$$$$\")))\n\n\n(defn- format-argument [dicts locale x]\n  (cond\n    (number? x) (let [formatter (or (lookup-template-for-locale dicts locale :tongue/format-number)\n                                    str)]\n                  (formatter x))\n    (inst? x)   (let [formatter (or (lookup-template-for-locale dicts locale :tongue/format-inst)\n                                    format-inst-iso)]\n                  (formatter x))\n    :else       (str x)))\n\n\n(macro/with-spec\n  (spec/def ::locale simple-keyword?)\n  (spec/def ::key keyword?))\n\n\n(defn- translate\n  ([dicts locale key]\n    (macro/with-spec\n      (spec/assert ::locale locale)\n      (spec/assert ::key key))\n    (let [t (lookup-template dicts locale key)]\n      (if (ifn? t) (t) t)))\n  ([dicts locale key x]\n    (macro/with-spec\n      (spec/assert ::locale locale)\n      (spec/assert ::key key))\n    (let [t (lookup-template dicts locale key)\n          s (if (ifn? t) (t x) t)]\n      (if (map? x)\n        (str/replace s #\"\\{(\\w+)\\}\"\n                     (fn [[_ k]]\n                       (format-argument dicts locale (get x (keyword k)))))\n        (str/replace s #\"\\{1\\}\"\n                     (escape-re-subst (format-argument dicts locale x))))))\n  ([dicts locale key x & rest]\n    (macro/with-spec\n      (spec/assert ::locale locale)\n      (spec/assert ::key key))\n    (let [args (cons x rest)\n          t    (lookup-template dicts locale key)\n          s    (if (ifn? t) (apply t x rest) t)]\n      (str/replace s #\"\\{(\\d+)\\}\"\n                   (fn [[_ n]]\n                     (let [idx (parse-long n)\n                           arg (nth args (dec idx)\n                                    (str \"{Missing index \" idx \"}\"))]\n                       (format-argument dicts locale arg)))))))\n\n\n(defn- append-ns [ns segment]\n  (str (when ns (str ns \".\"))\n       segment))\n\n\n(defn- build-dict\n  \"Collapses nested maps into namespaced keywords:\n   { :ns { :key 1 }} => { :ns/key 1 }\n   { :animal { :flying { :bird 420 }}} => { :animal.flying/bird 420 }\"\n  ([dict] (build-dict nil dict))\n  ([ns dict]\n    (reduce-kv\n      (fn [aggr key value]\n        (cond\n          (= \"tongue\" (namespace key))\n          (do\n            (assert (nil? ns) \":tongue/... keys can only be specified at top level\")\n            (assoc aggr key value))\n\n          (map? value)\n          (merge aggr (build-dict (append-ns ns (name key)) value))\n\n          :else\n          (assoc aggr (keyword (or ns (namespace key)) (name key)) value)))\n      {} dict)))\n\n\n(defn- build-dicts [dicts]\n  (reduce-kv\n    (fn [acc lang dict]\n      (assoc acc lang (if (map? dict) (build-dict dict) dict)))\n    {} dicts))\n\n\n(macro/with-spec\n  (spec/def ::template (spec/or :str string?\n                                :fn ifn?))\n\n  (spec/def :tongue/format-number ifn?)\n  (spec/def :tongue/format-inst ifn?)\n\n  (spec/def ::dict (spec/and\n                     (spec/keys :opt [:tongue/format-number :tongue/format-inst])\n                     (spec/map-of keyword? (spec/or :plain  ::template\n                                                    :nested (spec/map-of keyword? ::template)))))\n\n  (spec/def :tongue/fallback keyword?)\n  (spec/def ::dicts (spec/and\n                      (spec/keys :opt [:tongue/fallback])\n                      (spec/conformer #(dissoc % :tongue/fallback))\n                      (spec/map-of keyword? ::dict))))\n\n\n(defn build-translate\n  \"Given dicts, builds translate function closed over these dicts:\n\n       (build-translate dicts) => ( [locale key & args] => string )\"\n  [dicts]\n  (macro/with-spec\n    (spec/assert ::dicts dicts))\n  (let [compiled-dicts (build-dicts dicts)]\n    (fn\n      ([locale key]   (translate compiled-dicts locale key))\n      ([locale key x] (translate compiled-dicts locale key x))\n      ([locale key x & args]\n        (apply translate compiled-dicts locale key x args)))))\n"]}