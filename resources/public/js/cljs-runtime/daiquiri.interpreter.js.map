{"version":3,"sources":["daiquiri/interpreter.cljs"],"mappings":"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","names":["daiquiri.interpreter/create-element","type","attrs","children","js/React","daiquiri.interpreter/component-attributes","x","daiquiri.util/camel-case-keys*","m","seq__40857","cljs.core/seq","chunk__40858","count__40859","i__40860","vec__40872","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__40876","cljs.core/first","cljs.core/next","k","v","goog.object/set","cljs.core/name","daiquiri.interpreter/element-attributes","js-attrs","cljs.core/clj->js","daiquiri.util/html-to-dom-attrs","class","cljs.core/array?","clojure.string.join","js/rum.core.mark_sync_update","clojure.string/blank?","daiquiri.interpreter/interpret-seq","cljs.core.reduce","ret","daiquiri.interpreter/interpret","daiquiri.interpreter/element","element","vec__40885","content","daiquiri.normalize/element","p__40889","vec__40890","seq__40891","first__40892","daiquiri.interpreter/fragment","_","vec__40893","cljs.core/map?","cljs.core.into","js/React.Fragment","p__40897","vec__40899","seq__40900","first__40901","daiquiri.interpreter/interop","component","vec__40902","daiquiri.interpreter/interpret-vec","daiquiri.util/fragment?","cljs.core/keyword-identical?","daiquiri.util/element?","cljs.core/vector?","cljs.core/seq?"],"sourcesContent":["(ns daiquiri.interpreter\n  (:require [clojure.string :as str]\n            [daiquiri.normalize :as normalize]\n            [daiquiri.util :as util]\n            [cljsjs.react]\n            [goog.object :as gobj]))\n\n(defn ^js/React.Element create-element\n  \"Create a React element. Returns a JavaScript object when running\n  under ClojureScript, and a om.dom.Element record in Clojure.\"\n  [type attrs children]\n  (.apply (.-createElement js/React) nil (.concat #js [type attrs] children)))\n\n(defn component-attributes [attrs]\n  (let [x (util/camel-case-keys* attrs)]\n    (let [m (js-obj)]\n      (doseq [[k v] x]\n        (gobj/set m (name k) v))\n      m)))\n\n(defn element-attributes [attrs]\n  (when-let [js-attrs (clj->js (util/html-to-dom-attrs attrs))]\n    (let [class (.-className js-attrs)\n          class (if (array? class) (str/join \" \" class) class)]\n      (when (.-onChange js-attrs)\n        ;; Wrapping on-change handler to work around async rendering queue\n        ;; that causes jumping caret and lost characters in input fields\n        (set! (.-onChange js-attrs) (js/rum.core.mark_sync_update (.-onChange js-attrs))))\n      (if (str/blank? class)\n        (js-delete js-attrs \"className\")\n        (set! (.-className js-attrs) class))\n      js-attrs)))\n\n(declare interpret)\n\n(defn- ^array interpret-seq\n  \"Eagerly interpret the seq `x` as HTML elements.\"\n  [x]\n  (reduce\n   (fn [^array ret x]\n     (.push ret (interpret x))\n     ret)\n   #js []\n   x))\n\n(defn element\n  \"Render an element vector as a HTML element.\"\n  [element]\n  (let [[type attrs content] (normalize/element element)]\n    (create-element type\n                    (element-attributes attrs)\n                    (interpret-seq content))))\n\n(defn fragment [[_ attrs & children]]\n  (let [[attrs children] (if (map? attrs)\n                           [(component-attributes attrs) (interpret-seq children)]\n                           [nil (interpret-seq (into [attrs] children))])]\n    (create-element js/React.Fragment attrs children)))\n\n(defn interop [[_ component attrs & children]]\n  (let [[attrs children] (if (map? attrs)\n                           [(component-attributes attrs) (interpret-seq children)]\n                           [nil (interpret-seq (into [attrs] children))])]\n    (create-element component attrs children)))\n\n(defn- interpret-vec\n  \"Interpret the vector `x` as an HTML element or a the children of an\n  element.\"\n  [x]\n  (cond\n    (util/fragment? x) (fragment x)\n    (keyword-identical? :> (nth x 0 nil)) (interop x)\n    (util/element? x) (element x)\n    :else (interpret-seq x)))\n\n(defn interpret [v]\n  (cond\n    (vector? v) (interpret-vec v)\n    (seq? v) (interpret-seq v)\n    :else v))\n"]}