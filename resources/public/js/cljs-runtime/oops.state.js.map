{"version":3,"sources":["oops/state.cljs"],"mappings":";AAOA,AAGA,AACA,AACA,AACA,AACA,AACA,AAIA,iCAAA,jCAAMA;AAAN,AACE;;AAEF,2BAAA,3BAAMC,8DAAeC,cAAcC,gBAAgBC;AAAnD,AACE,uDAAA,/CAAOF,cACAC,gBACAC,uBAEA,AAACJ,iCACD;;AAET,+BAAA,/BAAMK;AAAN,AACE;AACA,IAAMC,wBAAsB,CAAgBC,qCAAgB;AAA5D,AACED;;AAEJ,kCAAA,lCAAME;AAAN,AACE;AACA,IAAMJ,mBAAiB,CAAgBG,qCAAgB;AAAvD,AACE;AACAH;;AAEJ,iCAAA,jCAAMK;AAAN,AACE;AACA,IAAMN,kBAAgB,CAAgBI,qCAAgB;AAAtD,AACE;AACAJ;;AAEJ,2CAAA,3CAAMO,8FAA0BC;AAAhC,AACE;AACA;AACA,IAAMC,mBAAiB,CAAgBL,qCAAgB;AAAvD,AACE;AACA,AAAOK,sBAAiBD;;AACxBC;;AAEJ,0BAAA,1BAAMC;AAAN,AACE;AACA,IAAMD,mBAAiB,CAAgBL,qCAAgB;AAAvD,AACE;AACAK;;AAEJ,8BAAA,9BAAME;AAAN,AACE;AACA,sCAAA,/BAAO,AAACD;;AAEV,sCAAA,tCAAME;AAAN,AACE;AACA,QAAgBR,qCAAgB;;AAElC,4CAAA,5CAAMS,gGAA2BC;AAAjC,AACE;AACA,QAAMV,qCAAgB,OAAqCU;;AAE7D,uCAAA,vCAAeC;AAAf,AACE;AACA,IAAMC,wBAAgB,CAAgBZ,qCAAgB;AAAtD,AACE;AACAY;;AAEJ,uCAAA,vCAAMC;AAAN,AACE;AACA,oDAAA,5CAAMb,qCAAgB;;AAExB,0CAAA,1CAAMc,4FAA8BC,IAAIC;AAAxC,AACE,GAAI,AAACC;AACH,OAACC,6BAAgB,AAAChB,iCAAqBa,IAAIC;;AAC3C,YAAAG,MAAWJ","names":["oops.state/make-empty-key-path","oops.state/prepare-state","target-object","call-site-error","console-reporter","oops.state/get-target-object","current-target-object","oops.state/*runtime-state*","oops.state/get-console-reporter","oops.state/get-call-site-error","oops.state/add-key-to-current-path!","key","current-key-path","oops.state/get-key-path","oops.state/get-key-path-str","oops.state/get-last-access-modifier","oops.state/set-last-access-modifier!","mode","oops.state/was-error-reported?","error-reported?","oops.state/mark-error-reported!","oops.state/prepare-error-from-call-site","msg","data","oops.config/throw-errors-from-macro-call-sites?","oops.helpers/repurpose-error","js/Error"],"sourcesContent":["(ns oops.state\n  \"Here we gather runtime state. For performance/code-gen reasons we keep everything under one JS array.\"\n  (:require-macros [oops.debug :refer [debug-assert]]\n                   [oops.constants :as constants])\n  (:require [oops.helpers :refer [repurpose-error unchecked-aget]]\n            [oops.config :as config]))\n\n(def ^:dynamic *runtime-state*)\n\n; state is a javascript array with following slots:\n(debug-assert (= (constants/target-object-idx) 0))\n(debug-assert (= (constants/call-site-error-idx) 1))\n(debug-assert (= (constants/console-reporter-idx) 2))\n(debug-assert (= (constants/error-reported-idx) 3))\n(debug-assert (= (constants/key-path-idx) 4))\n(debug-assert (= (constants/last-access-modifier-idx) 5))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn make-empty-key-path []\n  (array))\n\n(defn prepare-state [target-object call-site-error console-reporter]\n  (array target-object\n         call-site-error\n         console-reporter\n         false\n         (make-empty-key-path)\n         (constants/get-dot-access)))\n\n(defn get-target-object []\n  (debug-assert *runtime-state*)\n  (let [current-target-object (unchecked-aget *runtime-state* (constants/target-object-idx))]\n    current-target-object))\n\n(defn get-console-reporter []\n  (debug-assert *runtime-state*)\n  (let [console-reporter (unchecked-aget *runtime-state* (constants/console-reporter-idx))]\n    (debug-assert (fn? console-reporter))\n    console-reporter))\n\n(defn get-call-site-error []\n  (debug-assert *runtime-state*)\n  (let [call-site-error (unchecked-aget *runtime-state* (constants/call-site-error-idx))]\n    (debug-assert (instance? js/Error call-site-error))\n    call-site-error))\n\n(defn add-key-to-current-path! [key]\n  (debug-assert (string? key))\n  (debug-assert *runtime-state*)\n  (let [current-key-path (unchecked-aget *runtime-state* (constants/key-path-idx))]\n    (debug-assert (array? current-key-path))\n    (.push current-key-path key)\n    current-key-path))\n\n(defn get-key-path []\n  (debug-assert *runtime-state*)\n  (let [current-key-path (unchecked-aget *runtime-state* (constants/key-path-idx))]\n    (debug-assert (array? current-key-path))\n    current-key-path))\n\n(defn get-key-path-str []\n  (debug-assert *runtime-state*)\n  (.join (get-key-path) \".\"))\n\n(defn get-last-access-modifier []\n  (debug-assert *runtime-state*)\n  (unchecked-aget *runtime-state* (constants/last-access-modifier-idx)))\n\n(defn set-last-access-modifier! [mode]\n  (debug-assert *runtime-state*)\n  (aset *runtime-state* (constants/last-access-modifier-idx) mode))\n\n(defn ^boolean was-error-reported? []\n  (debug-assert *runtime-state*)\n  (let [error-reported? (unchecked-aget *runtime-state* (constants/error-reported-idx))]\n    (debug-assert (boolean? error-reported?))\n    error-reported?))\n\n(defn mark-error-reported! []\n  (debug-assert *runtime-state*)\n  (aset *runtime-state* (constants/error-reported-idx) true))\n\n(defn prepare-error-from-call-site [msg data]\n  (if (config/throw-errors-from-macro-call-sites?)\n    (repurpose-error (get-call-site-error) msg data)\n    (js/Error. msg)))                                                                                                         ; this is a fail-safe option for people with repurpose-error-related troubles, we don't attach data in this case\n"]}