{"version":3,"sources":["predict_prostate/state/run_time.cljs"],"mappings":"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","names":["predict-prostate.state.run-time/event-bus","pubsub.feeds/create-feed","predict-prostate.state.run-time/model","predict-prostate.state.run-time/unknown","predict-prostate.state.run-time/N","predict-prostate.state.run-time/make-topic","topic-key","pubsub.feeds/->Topic","js/predict-prostate","js/predict-prostate.state","js/predict-prostate.state.run-time","js/predict-prostate.state.run-time.rtdb","predict-prostate.state.run-time/rtdb","cljs.core.atom","js/predict-prostate.state.run-time.estimates","predict-prostate.state.run-time/estimates","js/predict-prostate.state.run-time.media-cursor","predict-prostate.state.run-time/media-cursor","rum.core/cursor","js/predict-prostate.state.run-time.media-change","predict-prostate.state.run-time/media-change","js/predict-prostate.state.run-time.hide-warning-cursor","predict-prostate.state.run-time/hide-warning-cursor","js/predict-prostate.state.run-time.hide-warning-change","predict-prostate.state.run-time/hide-warning-change","js/predict-prostate.state.run-time.show-uncertainty-cursor","predict-prostate.state.run-time/show-uncertainty-cursor","js/predict-prostate.state.run-time.show-uncertainty-change","predict-prostate.state.run-time/show-uncertainty-change","js/predict-prostate.state.run-time.route","predict-prostate.state.run-time/route","js/predict-prostate.state.run-time.route-change","predict-prostate.state.run-time/route-change","js/predict-prostate.state.run-time.help-header-cursor","predict-prostate.state.run-time/help-header-cursor","js/predict-prostate.state.run-time.help-header-change","predict-prostate.state.run-time/help-header-change","js/predict-prostate.state.run-time.help-content-cursor","predict-prostate.state.run-time/help-content-cursor","js/predict-prostate.state.run-time.help-content-change","predict-prostate.state.run-time/help-content-change","js/predict-prostate.state.run-time.help-key-cursor","predict-prostate.state.run-time/help-key-cursor","js/predict-prostate.state.run-time.help-key-change","predict-prostate.state.run-time/help-key-change","js/predict-prostate.state.run-time.settings-cursor","predict-prostate.state.run-time/settings-cursor","js/predict-prostate.state.run-time.settings-change","predict-prostate.state.run-time/settings-change","js/predict-prostate.state.run-time.print-cursor","predict-prostate.state.run-time/print-cursor","js/predict-prostate.state.run-time.print-change","predict-prostate.state.run-time/print-change","js/predict-prostate.state.run-time.help-cursor","predict-prostate.state.run-time/help-cursor","js/predict-prostate.state.run-time.help-change","predict-prostate.state.run-time/help-change","js/predict-prostate.state.run-time.on-screen-inputs-cursor","predict-prostate.state.run-time/on-screen-inputs-cursor","js/predict-prostate.state.run-time.on-screen-treatments-cursor","predict-prostate.state.run-time/on-screen-treatments-cursor","predict-prostate.state.run-time/ost","js/predict-prostate.state.run-time.results-change","predict-prostate.state.run-time/results-change","js/predict-prostate.state.run-time.results-cursor","predict-prostate.state.run-time/results-cursor","js/predict-prostate.state.run-time.active-results-pane","predict-prostate.state.run-time/active-results-pane","js/predict-prostate.state.run-time.active-results-change","predict-prostate.state.run-time/active-results-change","js/predict-prostate.state.run-time.mockup-cursor","predict-prostate.state.run-time/mockup-cursor","js/predict-prostate.state.run-time.mockup-change","predict-prostate.state.run-time/mockup-change","js/predict-prostate.state.run-time.force-recalculation","predict-prostate.state.run-time/force-recalculation","predict-prostate.state.run-time/input-cursors","cljs.core/deref","cljs.core.get_in","predict-prostate.state.run-time/input-cursor","key","predict-prostate.state.run-time/input-changes","predict-prostate.state.run-time/input-change","predict-prostate.state.run-time/input-label","predict-prostate.state.run-time/input-default","predict-prostate.state.run-time/input-widget","predict-prostate.state.run-time/input-access","predict-prostate.state.run-time/input-map","cljs.core.into","cljs.core.map","p__43451","vec__43452","cljs.core.nth","k","v","cljs.core.filter","p__43455","vec__43456","_","fexpr__43459","clojure.set.union","predict-prostate.state.run-time/year-selected","predict-prostate.state.run-time/error?","cljs.core._EQ_","clojure.string.index_of","predict-prostate.state.run-time/error-by-key?","predict-prostate.state.run-time/recalculate-model?","input-map","cljs.core/seq","cljs.core/every?","and__4115__auto__"],"sourcesContent":["(ns predict-prostate.state.run-time\n  (:require\n    [rum.core :as rum]\n    [clojure.string :refer [index-of]]\n    [clojure.pprint :refer [cl-format]]\n    [clojure.set :refer [union]]\n    ;[predict-prostate.state.config :refer [event-bus]]\n    [pubsub.feeds :refer [->Topic create-feed]]\n    ))\n\n\n(def event-bus (create-feed))\n\n\n(def model \"prostate-release\")\n(def unknown \"Unknown\")\n(def N 15)\n\n(defn make-topic\n  \"Make a new topic on which to report events\"\n  [topic-key]\n  (->Topic topic-key event-bus))\n\n\n\"When plotting adjuvant treatments, we start from a baseline of surgery only, adding treatments and hopefully improving\nsurvival, up to the projected survival of prostate-cancer-free men \"\n(defonce rtdb\n         (atom {\n\n                ;; Plot style\n                :plot-style              nil\n\n                :recalculate-error-state 0\n\n                :active-results-pane     \"charts\"\n                :active-mockup           \"Mockup 1\"         ;used for adverse effects mockups\n                :incomplete              true\n\n                ;; The set of widgets\n                :on-screen-inputs        #{}\n                :on-screen-treatments    #{}\n\n                :show-uncertainty        :no\n\n                ;; model results.\n                ;; These should be non-nil when all inputs are complete.\n                ;; Result data structure can be dependent on model\n                :results                 []\n\n                ;; active route\n                :route                   [:home nil nil]\n\n                ;; help\n                :help-key                nil\n                :help-header             \"Help header\"\n                :help-content            \"Help content\"\n\n                ;; settings modal initially not shown\n                :help-visible            false\n                :settings-visible        false\n\n                ;; The state of the tool left-column accordion\n                :hide-warning            false\n                :test                    \"test\"\n                :media                   :screen\n                }))\n\n(defonce estimates (atom nil))\n\n\n(defonce media-cursor (rum/cursor rtdb :media))\n(defonce media-change (make-topic :media-change))\n\n;(defonce histology-cursor (rum/cursor rtdb :histology))\n;(defonce plot-style-cursor (rum/cursor rtdb :plot-style))\n\n(defonce hide-warning-cursor (rum/cursor rtdb :hide-warning))\n(defonce hide-warning-change (make-topic :hide-warning-change))\n\n(defonce show-uncertainty-cursor (rum/cursor rtdb :show-uncertainty))\n(defonce show-uncertainty-change (make-topic :show-uncertainty-change))\n\n(defonce route (rum/cursor rtdb :route))\n(defonce route-change (make-topic :route-change))\n\n(defonce help-header-cursor (rum/cursor rtdb :help-header))\n(defonce help-header-change (make-topic :help-header-change))\n\n(defonce help-content-cursor (rum/cursor rtdb :help-content))\n(defonce help-content-change (make-topic :help-content-change))\n\n(defonce help-key-cursor (rum/cursor rtdb :help-key))\n(defonce help-key-change (make-topic :help-key-change))\n\n(defonce settings-cursor (rum/cursor rtdb :settings-visible))\n(defonce settings-change (make-topic :settings-change))\n\n(defonce print-cursor (rum/cursor rtdb :print-visible))\n(defonce print-change (make-topic :print-change))\n\n(defonce help-cursor (rum/cursor rtdb :settings-visible))\n(defonce help-change (make-topic :settings-change))\n\n;; input keys that are currently on-screen\n(defonce on-screen-inputs-cursor (rum/cursor rtdb :on-screen-inputs))\n\n;; ref to a set containing active treatment keys (like :hormone)\n(defonce on-screen-treatments-cursor (rum/cursor rtdb :on-screen-treatments))\n\n; for REPL use\n(def ost on-screen-treatments-cursor)\n\n(defonce results-change (make-topic :results))\n(defonce results-cursor (rum/cursor rtdb :results))\n\n\n#_(defonce treatment-selection-cursor (rum/derived-atom [treatments-visible-cursor results-cursor] ::treatment-selection\n                                                        (fn [a b] (and a b))))\n\n(defonce active-results-pane (rum/cursor rtdb :active-results-pane))\n(defonce active-results-change (make-topic :active-results-pane))\n\n(defonce mockup-cursor (rum/cursor rtdb :active-mockup))\n(defonce mockup-change (make-topic :active-mockup))\n\n(defonce force-recalculation (make-topic :force-recalculation))\n\n\n;;;\n;; Input keys\n;;;\n(defn input-cursors []\n  (get-in @rtdb [:input-config :cursor]))\n\n;; and define an access function ...for cursors\n(defn input-cursor [key]\n  (get-in @rtdb [:input-config :cursor key]))\n\n;; ...and for mutators\n(defn input-changes []\n  (get-in @rtdb [:input-config :change]))\n\n(defn input-change [key]\n  (get-in @rtdb [:input-config :change key]))\n\n(defn input-label [key]\n  (get-in @rtdb [:input-config :label key]))\n\n(defn input-default [key]\n  (get-in @rtdb [:input-config :default key]))\n\n(defn input-widget [key]\n  (get-in @rtdb [:input-config :widget key]))\n\n(defn input-access [key]\n  (get-in @rtdb [:input-config :access key]))\n\n(defn input-map\n  \"This is the map of values that we feed into the model.\n  Keys are unqualified (i.e. they don't refer to the selected treatment option).\"\n  []\n  (into {}\n        (map (fn [[k v]] [k @v])\n             (filter (fn [[k _]]\n                       ((union @on-screen-inputs-cursor @on-screen-treatments-cursor) k)) (input-cursors)))))\n\n\n(defn year-selected []\n  \"return a cursor containing the selected year\"\n  (input-cursor :result-year))\n\n\n(defn error? [v]\n  (or (nil? v) (= v \"\") (and (string? v) (some? (index-of v \":\")))))\n\n(defn error-by-key? [k]\n  (error? @(input-cursor k)))\n\n\n(defn recalculate-model?\n  \"return true if the model can be calculated, else nil.\n  im is the result of calling input-map\"\n  [input-map]\n  (and (seq @on-screen-inputs-cursor)\n       (every? (fn [k] (and (input-map k) (not (error-by-key? k)))) @on-screen-inputs-cursor))\n  )\n\n\n;;;\n;; Treatment keys - which depend on input keys\n;;;\n(comment                                                    ;; -- tests\n\n\n  (input-cursors)\n  ; A map of all possible input cursors installed in input-config\n\n  (input-changes)\n  ; A map of input mutation channels. Each one references a publication topic.\n\n  @on-screen-inputs-cursor\n  ; inputs which appear on screen\n  ; #{:age :size :her2-status :mode :ki67-status :nodes :grade :er-status :micromets}\n\n  @on-screen-treatments-cursor\n  ; A set! (It could be ordered to save n needing graphable-treatment)\n  ; => #{:chemo :horm :tra}\n\n  (input-map)\n  ; This is the map of values that we feed into the model.\n  ; Keys are unqualified (i.e. they don't refer to the selected treatment option)\n  ; Values are however sensitive to the treatment option setting.\n  ;=> {:tra nil, :age 40, :size 2, :her2-status :yes, :mode :symptomatic, :ki67-status :yes, :nodes 2, :grade 2, :horm nil, :er-status :yes, :chemo nil, :micromets :no}\n\n  ;; show all inputs\n  (into {} (map (fn [[k v]] [k @v]) (input-cursors)))\n  ; => {:post-meno nil, :chemo nil, :tra nil, :age 40, :opt-picker-1 nil, :tra nil, :size 2, :performance nil, :radio nil, :horm nil, :her2-status :yes, :tra nil, :pr-status nil, :mode :symptomatic, :opt-picker-0 nil, :tra nil, :heart-dose nil, :type nil, :ethnicity nil, :radio nil, :ki67-status :yes, :size nil, :oncotype nil, :surgery nil, :chemo nil, :lung-dose nil, :nodes 2, :bis nil, :grade 2, :weight nil, :bmi nil, :bis nil, :heart-dose nil, :horm nil, :horm nil, :side nil, :chemo nil, :er-status :yes, :chemo nil, :micromets :no, :lung-dose nil, :smoking nil, :horm nil,:height nil, :neo :no}\n\n\n  @results-cursor\n  ([5 {:bcSpecSur 0.9769091120924175, :cumOverallSurOL 0.9692325692973538, :cumOverallSurHormo 0.007321510374584478, :cumOverallSurChemo 0, :cumOverallSurCandH 0.007321510374584478, :cumOverallSurCHT 0.012019282569459833}] [10 {:bcSpecSur 0.9407891636797882, :cumOverallSurOL 0.9192541233440501, :cumOverallSurHormo 0.018478310249836996, :cumOverallSurChemo 0, :cumOverallSurCandH 0.018478310249836996, :cumOverallSurCHT 0.030465967535812846}] [20 {:bcSpecSur 0.8760500103304053, :cumOverallSurOL 0.8104345849686604, :cumOverallSurHormo 0.037282221638997734, :cumOverallSurChemo 0, :cumOverallSurCandH 0.037282221638997734, :cumOverallSurCHT 0.0620689089391925}])\n\n  )"]}