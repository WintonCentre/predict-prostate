{"version":3,"sources":["predict_prostate/components/select.cljs"],"mappings":";AAMA,8CAAA,2CAAA,zFAAKA,uJAAwB,WAAKC;AAAL,AACE,IAAMC,cAAM,AAACC,gBAAM,AAAA,wFAAWF;IACxBG,WAAG,AAACC,EAAK,CAAA,mHAAA,/GAAS,AAACC,eAAK,AAAA,kFAAMJ;IAC9BK,gBAAQ,AAAA,6FAAYL;AAF1B,AAGE,YAAA,SAAA,rBAAKE;AAAL,AAAkB,IAAAI,WAAS,mEAAA,jEAAI,6CAAA,7CAACC,gDAAK,AAAML,sBAAS,AAAMA;AAAxC,AAAA,kGAAAI,oCAAAA,9HAACD,8CAAAA,wDAAAA;;;AACnB,4CAAA,5CAAe,kBAAA,lBAAWH;;AAC1B,sBAAA,tBAAeA;;AACjBH;GAP/B,qEAQ6B,WAAKA;AAAL,AACE,IAAMC,cAAM,AAACC,gBAAM,AAAA,wFAAWF;IACxBG,WAAG,AAACC,EAAK,CAAA,mHAAA,/GAAS,AAACC,eAAK,AAAA,kFAAMJ;AADpC,AAEE,aAAA,bAAME;;AACN,sBAAA,tBAAeA;;AACjBH;;AAG/B,4CAAA,AAAAS,oBAAAC,oBAAA,WAAAC,/FAAUU,wGAAiFM;AAA3F,AAAA,IAAAf,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAgDW;YAAhD,AAAAT,4CAAAF,eAAA,nEAAoDY;iBAApD,AAAAV,4CAAAF,eAAA,xEAA0Da;gBAA1D,AAAAX,4CAAAF,eAAA,vEAAqEc;IAArEX,KAAA,AAAAD,4CAAAF,eAAA;YAAA,AAAAE,4CAAAF,eAAA,nEAAmFX;AAAnF,AAAA,AAAA,OAAAe,6BAAA,MAAA,KAAA,CAAA,iBAAAC,aASS,uBAAA,AAAA,mFAAA,yDAAA,2CAAA,sEAAA,lQAAMM,8OAAkB,AAAClB,eAAKkB,qEAAiB,CAAA,4DAAqBE,8BACzD,AAACG,oDAAY,WAAKC,IAAIC;AAAT,AACE,GAAI,AAACC,wBAAQD;AACX,IAAAE,aAAmBF;gBAAnB,AAAAG,4CAAAD,WAAA,IAAA,vEAAOR;WAAP,AAAAS,4CAAAD,WAAA,IAAA,lEAAaE;AAAb,AAAA,0FAAA,uDAAA,2CAAA,wDAAA,JACiBL,0DAAW,AAACxB,eAAKmB,mBAAQU;;AAF5C,0FAAA,uDAAA,2CAAA,oDAGiBL,YAAKC;;iBALhD,dAKuDH;AAdhE,AAAA,OAAAX,6BAAA,MAAA,EAAA,AAAAE,qBAAAD,aAAA,AAAAE,wCAAAF,YAAA,MAAA,EAAA,AAAAC,qBAAAD,aAAA,KAAA,CAAA,AAAAG,+BAAAH;;GAAA,wJAAA,rEAAmBlB,4CAASuB","names":["predict-prostate.components.select/picknmix","state","props","cljs.core/first","sp","js/$","cljs.core/name","handler","G__45851","cljs.core._EQ_","rum.core/lazy-build","rum.core/build-defc","p__45863","map__45864","cljs.core/--destructure-map","cljs.core.get","as","daiquiri.core/create-element","attrs45875","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.interpreter/interpret","predict-prostate.components.select/picker","rum.core/static","key","value","class-name","on-change","menu","cljs.core.map_indexed","idx","opt","cljs.core/vector?","vec__45878","cljs.core.nth","text"],"sourcesContent":["(ns predict-prostate.components.select\n  (:require [rum.core :as rum]))\n\n;;\n;; This requires jQuery to work\n;;\n(def picknmix {:did-mount    (fn [state]\n                               (let [props (first (:rum/args state))\n                                     sp (js/$ (str \"#\" (name (:key props)) \".selectpicker\"))\n                                     handler (:on-change props)]\n                                 (.on sp \"change\" #(handler (if (= \"\" (.val sp)) nil (.val sp))))\n                                 (.selectpicker (.addClass sp \"col-md-11\") \"setStyle\")\n                                 (.selectpicker sp \"show\"))\n                               state)\n               :will-unmount (fn [state]\n                               (let [props (first (:rum/args state))\n                                     sp (js/$ (str \"#\" (name (:key props)) \".selectpicker\"))]\n                                 (.off sp \"change\")\n                                 (.selectpicker sp \"destroy\"))\n                               state)\n               })\n\n(rum/defc picker < picknmix rum/static [{:keys [key value class-name on-change :as props]} menu]\n\n  ;;\n  ;; Cannot add {:value value into the following without causing a react error.\n  ;; So it may be tricky to restore selected value from the database if we ever need to.\n  ;;\n  ;; doubly nested divs needed for error-state CSS. Do not remove !!!\n  ;;\n  [:div [:div\n         (when key [:select {:id (name key) :class-name (str \"selectpicker \" class-name)}\n                    (map-indexed (fn [idx opt]\n                                   (if (vector? opt)\n                                     (let [[value text] opt]\n                                       [:option {:key idx :value (name value)} text])\n                                     [:option {:key idx} opt])) menu)\n                    ])]])\n"]}