{"version":3,"sources":["predict_prostate/components/select.cljs"],"mappings":";AAWA,AAAA,AAAA,AAAKA,AAAwB,AAAKC;AAAL,AACE,AAAMC,AAAM,AAACC,AAAM,AAAA,AAAWF;AACxBG,AAAG,AAAAC,AAAK,AAAA,AAAA,AAAS,AAACE,AAAK,AAAA,AAAML;AAA1B,AAAA,AAAAG,AAAAA,AAACC,AAAAA,AAAAA;;AACJE,AAAQ,AAAA,AAAYN;AAF1B,AAGE,AAAA,AAAA,AAAKE;AAAL,AAAkB,AAAAK,AAAS,AAAA,AAAI,AAAA,AAACC,AAAK,AAAMN,AAAS,AAAMA;AAAxC,AAAA,AAAAK,AAAAA,AAACD,AAAAA,AAAAA;;;AACnB,AAAA,AAAe,AAAA,AAAWJ;;AAC1B,AAAA,AAAeA;;AACjBH;AAP/B,AAQ6B,AAAKA;AAAL,AACE,AAAMC,AAAM,AAACC,AAAM,AAAA,AAAWF;AACxBG,AAAG,AAAAO,AAAK,AAAA,AAAA,AAAS,AAACJ,AAAK,AAAA,AAAML;AAA1B,AAAA,AAAAS,AAAAA,AAACL,AAAAA,AAAAA;;AADV,AAEE,AAAA,AAAMF;;AACN,AAAA,AAAeA;;AACjBH;;AAG/B,AAAA,AAAAW,AAAA,AAAAC,AAAUY,AAAiFM;AAA3F,AAAA,AAAAjB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAgDa;AAAhD,AAAAT,AAAAJ,AAAA,AAAoDc;AAApD,AAAAV,AAAAJ,AAAA,AAA0De;AAA1D,AAAAX,AAAAJ,AAAA,AAAqEgB;AAArEX,AAAA,AAAAD,AAAAJ,AAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAmFZ;AAAnF,AAAA,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAAC,AASS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMM,AAAkB,AAACpB,AAAKoB,AAAiB,AAAA,AAAqBE,AACzD,AAACG,AAAY,AAAKC,AAAIC;AAAT,AACE,AAAI,AAACC,AAAQD;AACX,AAAAE,AAAmBF;AAAnB,AAAAG,AAAAD,AAAA,AAAA,AAAOR;AAAP,AAAAS,AAAAD,AAAA,AAAA,AAAaE;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AACiBL,AAAW,AAAC1B,AAAKqB,AAAQU;;AAF5C,AAAA,AAAA,AAAA,AAGiBL,AAAKC;;AALhD,AAKuDH;AAdhE,AAAA,AAAAf,AAAAI,AAAA,AAAA,AAAA,AAAAE,AAAAD,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA,AAAA,AAAAG,AAAAH;;AAAA,AAAA,AAAmBrB,AAAS0B","names":["predict-prostate.components.select/picknmix","state","props","cljs.core/first","sp","G__33777","interop.jsx/jq$","cljs.core/name","handler","G__33778","cljs.core._EQ_","G__33783","rum.core/build-defc","p__33791","map__33792","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","as","js/React.createElement","attrs33795","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","predict-prostate.components.select/picker","rum.core/static","key","value","class-name","on-change","menu","cljs.core.map_indexed","idx","opt","cljs.core/vector?","vec__33804","cljs.core.nth","text"],"sourcesContent":["(ns predict-prostate.components.select\n  (:require [rum.core :as rum]\n            [predict-prostate.state.run-time :refer [input-cursor input-change]]\n            [pubsub.feeds :refer [publish]]\n            [clojure.pprint :refer [cl-format]]\n            [interop.jsx :refer [jq$]]\n            ))\n\n;;\n;; This requires jQuery to work\n;;\n(def picknmix {:did-mount    (fn [state]\n                               (let [props (first (:rum/args state))\n                                     sp (jq$ (str \"#\" (name (:key props)) \".selectpicker\"))\n                                     handler (:on-change props)]\n                                 (.on sp \"change\" #(handler (if (= \"\" (.val sp)) nil (.val sp))))\n                                 (.selectpicker (.addClass sp \"col-md-11\") \"setStyle\")\n                                 (.selectpicker sp \"show\"))\n                               state)\n               :will-unmount (fn [state]\n                               (let [props (first (:rum/args state))\n                                     sp (jq$ (str \"#\" (name (:key props)) \".selectpicker\"))]\n                                 (.off sp \"change\")\n                                 (.selectpicker sp \"destroy\"))\n                               state)\n               })\n\n(rum/defc picker < picknmix rum/static [{:keys [key value class-name on-change :as props]} menu]\n\n  ;;\n  ;; Cannot add {:value value into the following without causing a react error.\n  ;; So it may be tricky to restore selected value from the database if we ever need to.\n  ;;\n  ;; doubly nested divs needed for error-state CSS. Do not remove !!!\n  ;;\n  [:div [:div\n         (when key [:select {:id (name key) :class-name (str \"selectpicker \" class-name)}\n                    (map-indexed (fn [idx opt]\n                                   (if (vector? opt)\n                                     (let [[value text] opt]\n                                       [:option {:key idx :value (name value)} text])\n                                     [:option {:key idx} opt])) menu)\n                    ])]])\n"]}