{"version":3,"sources":["ajax/url.cljc"],"mappings":";AAwDA,AAAA,AAAOA,AAAYC;AAAnB,AACE,AAAI,AAAAC,AAAUD;AAAK,AAACE,AAAKF;;AAAKA;;;AAEhC,AAAeG,AAEDC;AAEd,AAAA,AAAAC,AAAOG;AAAP,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA+BG;AAA/B,AAAAF,AAAAD,AAAA,AAAA,AAAiCI;AAAjC,AACO,AAAA,AAAK,AAACX,AAAWU,AAAO,AAACN,AAAAA,AAAAA,AAAaO,AAAAA;;AAE7C,AAAA,AAAOC,AAAsBC,AAAeH,AAAEC;AAA9C,AAAA,AACK,AAACE,AAAAA,AAAAA,AAAeH,AAAAA,AAAGC;;AAExB,AAAA,AAAOG,AAAsBC;AAA7B,AACI,AAAMF,AAAe,AAAAG,AAAM,AAAAE,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAA;;;AAANF,AAAA,AAAA,AAAAA,AAAAd,AAAA,AAAAc,AAAA;AAAA,AAAA,AAAAA;AAAA;AACY,AAAKN;AAAL,AAAA;;;;AADZ;AAEa,AAAKA;AAAL,AAAA;;;;AAFb;AAGeS;;;;AAHf,AAAA,AAAAF,AAAA,AAAA,AAAAD;;;;AAArB,AAII,AAACI,AAAQR,AAAqBC;;AAGtC;;;;;;;AAAA,AAAAQ,AAAOE,AAMJC,AAAkBC;AANrB,AAAA,AAAAH,AAAAD;AAAA,AAAAb,AAAAc,AAAA,AAAA,AAM6BrB;AAN7B,AAAAO,AAAAc,AAAA,AAAA,AAMiCI;AANjC,AAOI,AAAMC,AAAG,AAAC3B,AAAWC;AACf2B,AAAQ,AAAIH,AACA,AAAIxB,AACA,AAAA,AAAA,AAAKwB,AAAWE,AAChBF,AACJE;AACZE,AAAQ,AAACT,AAAQG,AAAyBC,AAAkBI;AANlE,AAOI,AACI,AAASF;AADb,AAAA,AAEME,AAAQF;;AAFd,AAII,AAAAxB,AAAUwB;AAJd,AAAA,AAKME,AAAQ,AAACzB,AAAKuB;;AALpB,AAOI,AAACI,AAAKJ;AACN,AAACK,AAAOF,AAAQ,AAACG,AAAIN;;AARzB,AAUI,AAAI,AAACO,AAAYP,AAAO,AAACQ,AAAKR;AACzB,AAACM,AAAIN,AACL,AAACS,AAAYX,AACb,AAACO,AAAOF;;AAbjB,AAAA,AAAA,AAeYD,AAAQF;;;;;;;AAE5B;;;;;;AAAA,AAAMU,AAKHrB,AAAasB;AALhB,AAMcA,AACL,AAAA,AAAA,AAAA,AAACd,AAAyB,AAACT,AAAqBC,AAChD,AAACuB,AAAI7B,AACL,AAAA,AAAC8B;;AAEV,AAAA;;;AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAzB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMyB;AAAN,AAEM,AAAA,AAACO;;;AAFP,AAAA,AAAA,AAAAN,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAGY7B;AAHZ,AAAA,AAAA,AAAA,AAAA,AAIW,AAACmC,AAAiB,AAAC9B,AAAQgB,AAAcrB;;;AAJpD,AAAA,AAAA,AAAM2B;;AAAN","names":["ajax.url/key-encode","key","cljs.core/Keyword","cljs.core/name","ajax.url/value-encode","js/encodeURIComponent","p__31854","vec__31855","cljs.core.nth","ajax.url/key-value-pair-to-str","k","v","ajax.url/vec-key-transform-fn","vec-key-encode","ajax.url/to-vec-key-transform","vec-strategy","G__31858","js/Error","or__4126__auto__","cljs.core/identity","cljs.core.partial","p__31859","vec__31860","ajax.url/param-to-key-value-pairs","vec-key-transform","prefix","value","k1","new-key","recurse","cljs.core/map?","cljs.core.mapcat","cljs.core/seq","cljs.core/sequential?","cljs.core/set?","cljs.core.map_indexed","ajax.url/params-to-str","params","cljs.core.map","clojure.string.join","var_args","G__31864","ajax.url/url-request-format","p__31867","map__31868","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","ajax.url.url_request_format","ajax.util/to-utf8-writer"],"sourcesContent":["(ns ajax.url\n\n\"At first blush, it's pretty bizarre that an entire file is devoted to one  \n function, namely params-to-str, which just takes a map and converts it to\n a querystring. However, it turns out that people sometimes want to encode\n fairly complex maps and the behaviour in the presence of vectors/arrays\n is controversial.\n\n The basic question is: what {:a [1 2]} be encoded as? The correct answer\n as far as ring is concerned is a=1&a=2. This is also true of most Java\n implementations, ASP.NET, Angular, Haskell and even old-school ASP. This \n is called vec-strategy :java in the code. Rails and PHP, however, \n prefer a[]=1&a[]=2, which has an obvious implementation in a dynamic \n language. This is called vec-strategy :rails. Finally, there's what \n cljs-ajax (mistakenly) did between versions 0.4.0 and 0.6.x: \n a[0]=1&a[2]=1, which is called vec-strategy :indexed. This is retained \n mostly for people who need to keep compatibility with the previous behaviour.\n\n None of these are the \\\"correct answer\\\": the HTTP standards are\n silent on the subject, so you're left with what your server accepts, and\n different servers have different conventions. Worse, if you send the\n wrong convention it gets misinterpreted. Send strategy :rails to a :java\n server and you get { \\\"a[]\\\" [1 2]}. Worse, send strategy :java to a :rails\n server and you get { \\\"a\\\" 2 }. So it's important to know what your server's\n convention is.\n\n The situation for maps is simpler, pretty much everyone encodes\n {:a {:b 1}} as \\\"a[b]=1\\\". That is, assuming they process it at all.\n The HTTP spec is similarly silent on this and your server may get your\n language's equivalent of { \\\"a[b]\\\" 1 }. In cases like this, you have two\n choices 1) write your own server-side decoder or 2) don't ever send\n nested maps.\n\n If you ever wanted to consider exactly how bad the effect of supporting\n a wide range of use cases, consider that this was the original code:\n\n (defn params-to-str [params]\n    (if params\n        (-> params      \n            clj->js\n            structs/Map.\n            query-data/createFromMap\n            .toString)))\n\n This code remains completely correct for at least 90% of actual users\n of cljs-ajax. Now we have ~50 SLOCs achieving much the same result.\n\"\n\n#? (:clj  (:require\n            [ajax.util :as u]\n            [clojure.string :as str])\n    :cljs (:require\n            [clojure.string :as str]\n            [ajax.util :as u])))\n\n\n(defn- key-encode [key]\n  (if (keyword? key) (name key) key))\n\n(def ^:private value-encode ; why doesn't def- exist?\n    #? (:clj (fn value-encode [u] (java.net.URLEncoder/encode (str u) \"UTF-8\"))\n        :cljs js/encodeURIComponent))\n\n(defn- key-value-pair-to-str [[k v]] \n       (str (key-encode k) \"=\" (value-encode v)))\n\n(defn- vec-key-transform-fn [vec-key-encode k v]\n    [(vec-key-encode k) v])\n\n(defn- to-vec-key-transform [vec-strategy]\n    (let [vec-key-encode (case (or vec-strategy :java)\n                               :java (fn [k] nil) ; no subscript\n                               :rails (fn [k] \"\") ; [] subscript\n                               :indexed identity)] ; [1] subscript\n        (partial vec-key-transform-fn vec-key-encode)))\n\n\n(defn- param-to-key-value-pairs \n  \"Takes a parameter and turns it into a sequence of key-value pairs suitable\n     for passing to `key-value-pair-to-str`. Since we can have nested maps and\n     vectors, we need a vec-key-transform function and the current query key\n     prefix as well as the key and value to be analysed. Ultimately, this \n     function walks the structure and flattens it.\"\n  [vec-key-transform prefix [key value]]\n    (let [k1 (key-encode key)\n          new-key (if prefix \n                      (if key \n                          (str prefix \"[\" k1 \"]\")\n                          prefix)\n                      k1)\n          recurse (partial param-to-key-value-pairs vec-key-transform new-key)]\n        (cond \n            (string? value) ; string is sequential so we have to handle it separately\n            [[new-key value]]  ; (\"a\" 1) should be [\"a\" 1]\n\n            (keyword? value)\n            [[new-key (name value)]] ; (:a 1) should be [\"a\" 1]\n\n            (map? value)\n            (mapcat recurse (seq value)) ; {:b {:a 1}} should be [\"b[a]\" 1]\n\n            (or (sequential? value) (set? value)) ; behaviour depends on vec-key-transform\n            (->> (seq value)\n                 (map-indexed vec-key-transform)\n                 (mapcat recurse))\n\n            :else [[new-key value]])))\n\n(defn params-to-str \n   \"vec-strategy is one of :rails (a[]=3&a[]=4)\n                           :java (a=3&a=4) (this is the correct behaviour and the default)\n                           :indexed (a[3]=1&a[4]=1)\n     params is an arbitrary clojure map\"\n  [vec-strategy params]\n    (->> [nil params]\n         (param-to-key-value-pairs (to-vec-key-transform vec-strategy) nil)\n         (map key-value-pair-to-str)\n         (str/join \"&\")))\n\n(defn url-request-format\n  \"The request format for simple POST and GET.\"\n  ([] (url-request-format {})) \n  ([{:keys [vec-strategy]}]\n   {:write (u/to-utf8-writer (partial params-to-str vec-strategy))\n    :content-type \"application/x-www-form-urlencoded; charset=utf-8\"}))\n"]}