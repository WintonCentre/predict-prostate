{"version":3,"sources":["sablono/util.cljc"],"mappings":"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","names":["sablono.util/*base-url*","sablono$util$ToString$to_str$dyn","x__4428__auto__","m__4429__auto__","sablono.util/to-str","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","sablono.util/ToString","x","sablono$util$ToURI$to_uri$dyn","sablono.util/to-uri","sablono.util/ToURI","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sablono.util/as-str","seq40199","self__4724__auto__","cljs.core/seq","xs","clojure.string.join","cljs.core.map","sablono.util/camel-case","k","cljs.core/Keyword","cljs.core/Symbol","vec__40203","seq__40204","first__40205","cljs.core/first","cljs.core/next","first-word","words","cljs.core/name","cljs.core/empty?","cljs.core._EQ_","clojure.string/capitalize","cljs.core.conj","cljs.core.keyword","sablono.util/camel-case-keys","m","cljs.core/map?","cljs.core.into","p__40206","vec__40207","cljs.core.nth","v","G__40210","cljs.core.update","sablono.util/element?","cljs.core/vector?","sablono.util/html-to-dom-attrs","attrs","clojure.set/rename-keys","sablono.util/join-classes","classes","cljs.core.comp","cljs.core.mapcat","cljs.core.remove","cljs.core/nil?","sablono.util/react-fn","type","cljs.core/contains?","cljs.core/PROTOCOL_SENTINEL","goog.object/set","js/goog.Uri","or__4126__auto__","cljs.core/not","cljs.core/re-matches","base","cljs.core.subs","_"],"sourcesContent":["(ns sablono.util\n  #?(:cljs (:import goog.Uri))\n  (:require [clojure.set :refer [rename-keys]]\n            [clojure.string :as str]))\n\n(def ^:dynamic *base-url* nil)\n\n(defprotocol ToString\n  (to-str [x] \"Convert a value into a string.\"))\n\n(defprotocol ToURI\n  (to-uri [x] \"Convert a value into a URI.\"))\n\n(defn as-str\n  \"Converts its arguments into a string using to-str.\"\n  [& xs]\n  (str/join (map to-str xs)))\n\n(defn camel-case\n  \"Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv.\"\n  [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (.split (name k) \"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map str/capitalize words)\n            (conj first-word)\n            str/join\n            keyword)))\n    k))\n\n(defn camel-case-keys\n  \"Recursively transforms all map keys into camel case.\"\n  [m]\n  (if (map? m)\n    (let [m (into {}\n                  (map (fn [[k v]] [(camel-case k) v]))\n                  m)]\n      (cond-> m\n        (map? (:style m))\n        (update :style camel-case-keys)))\n    m))\n\n(defn element?\n  \"Return true if `x` is an HTML element. True when `x` is a vector\n  and the first element is a keyword, e.g. `[:div]` or `[:div [:span \\\"x\\\"]`.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))))\n\n(defn html-to-dom-attrs\n  \"Converts all HTML attributes to their DOM equivalents.\"\n  [attrs]\n  (rename-keys (camel-case-keys attrs)\n               {:class :className\n                :for :htmlFor}))\n\n(defn join-classes\n  \"Join the `classes` with a whitespace.\"\n  [classes]\n  (->> classes\n       (into [] (comp\n                 (mapcat (fn [x] (if (string? x) [x] (seq x))))\n                 (remove nil?)))\n       (str/join \" \")))\n\n(defn react-fn\n  \"Return the symbol of a fn that build a React element. \"\n  [type]\n  (if (contains? #{:input :select :textarea} (keyword type))\n    'sablono.interpreter/create-element\n    'js/React.createElement))\n\n#?(:cljs\n   (extend-protocol ToString\n     cljs.core.Keyword\n     (to-str [x]\n       (name x))\n     goog.Uri\n     (to-str [x]\n       (if (or (. x (hasDomain))\n               (nil? (. x (getPath)))\n               (not (re-matches #\"^/.*\" (. x (getPath)))))\n         (str x)\n         (let [base (str *base-url*)]\n           (if (re-matches #\".*/$\" base)\n             (str (subs base 0 (dec (count base))) x)\n             (str base x)))))\n     nil\n     (to-str [_]\n       \"\")\n     number\n     (to-str [x]\n       (str x))\n     default\n     (to-str [x]\n       (str x))))\n\n#?(:cljs\n   (extend-protocol ToURI\n     Uri\n     (to-uri [x] x)\n     default\n     (to-uri [x] (Uri. (str x)))))\n"]}