{"version":3,"sources":["predict_prostate/shadow.cljs"],"mappings":";AAaA,AAACA;AAGD,GAAA,QAAAC,6CAAAC,oDAAAC;AAAA;AAAA,AAAA,AAASC,0CAAgB,AAACC;;AAG1B,AAAKC,kCAAQ,mDAAA,nDAACC;AACd,AAAKC,mCAAS,mDAAA,nDAACD;AACf,AAAKE,sCAAY,mDAAA,nDAACF;AAElB,+BAAA,/BAAMG;AAAN,AAGE,AAACC,eAAU,CAACC,iEAAAA,mEAAAA,6CAAM,oBAAA,pBAACC;;AAInB,GAAIC;AACF,AACE,yGAAA,zGAACC,6IAA4C,kCAAA,jCAAKC;;AAClD,OAACC,+CAAsBR,oCAAYH,gCAAQE,iCAAS,kCAAA,jCAAKQ,yDAAwBE;;AACnF,AACE,yGAAA,zGAACH,yIAAwCI;;AACzC,OAASC,2FAAeD;;;AAG9B,oCAAA,pCAAME;AAAN,AAEE,AAACV,eAAU,CAACW,sEAAAA,wEAAAA,kDAAW,oBAAA,pBAACT;;AACxB,yGAAA,zGAACE,6IAA4C,kCAAA,jCAAKC;;AAClD,OAACC,+CAAsBR,oCAAYH,gCAAQE,iCAAS,kCAAA,jCAAKQ,yDAAwBE","names":["cljs.core/enable-console-print!","js/predict-prostate","js/predict-prostate.shadow","js/predict-prostate.shadow.once-only-guard","predict-prostate.shadow/once-only-guard","predict-prostate.state.mutations/mutator","predict-prostate.shadow/ok-chan","cljs.core.async.chan","predict-prostate.shadow/err-chan","predict-prostate.shadow/static-chan","predict-prostate.shadow/main","rum.core/mount","predict-prostate.pages.root/root","goog.dom/getElement","translations.config/predict-edit","cljs.core.println","translations.tranny-api/base-url","translations.tongue-base/load-all-translations","predict-prostate.state.run-time/t-state-cursor","translations.config/live-dictionary-url","predict-prostate.state.run-time/t-state-change","predict-prostate.shadow/edit-main","predict-prostate.pages.root/edit-root"],"sourcesContent":["(ns predict-prostate.shadow\n  (:require [rum.core :as rum]\n            [cljs.core.async :refer [chan]]\n            [goog.dom :as gdom]\n            [predict-prostate.state.mutations :refer [mutator]]\n            [predict-prostate.state.run-time :refer [t-state-change t-state-cursor]]\n            [translations.config :refer [live-dictionary-url predict-edit]]\n            [predict-prostate.pages.root :refer [root edit-root]]\n            [pubsub.feeds :refer [publish]]\n            [translations.tongue-base :refer [load-all-translations]]\n            [translations.tranny-api :refer [base-url]]\n            ))\n\n(enable-console-print!)\n\n;;;; Start the mutator!\n(defonce once-only-guard (mutator))\n\n; Global channels for response handling on startup\n(def ok-chan (chan 0))\n(def err-chan (chan 0))\n(def static-chan (chan 0))                                  ; It may be safe to re-use ok-chan here\n\n(defn main []\n  ;; conditionally start the app based on whether the #main-app-area\n  ;; node is on the page\n  (rum/mount (root) (gdom/getElement \"app\"))\n\n  ;(println \"predict-edit\" predict-edit (str base-url \"upserts/all\"))\n  ; retain both options here as lein-fighweel uses the main entry for editing as well as for production\n  (if predict-edit\n    (do\n      (println \"edit: loading translations from: \" (str base-url \"upserts/all\"))\n      (load-all-translations static-chan ok-chan err-chan (str base-url \"upserts/all\") t-state-cursor))\n    (do\n      (println \"prod: publish t-state-change \" live-dictionary-url)\n      (publish t-state-change live-dictionary-url)))\n  )          ; will call load-translation*\n\n(defn edit-main []\n  ;; Start the editor in a shadow build\n  (rum/mount (edit-root) (gdom/getElement \"app\"))\n  (println \"edit: loading translations from: \" (str base-url \"upserts/all\"))\n  (load-all-translations static-chan ok-chan err-chan (str base-url \"upserts/all\") t-state-cursor))          ; will call load-translation*"]}