{"version":3,"sources":["predict_prostate/state/mutations.cljs"],"mappings":"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","names":["predict-prostate.state.mutations/clear-inputs","seq__33791","cljs.core/seq","chunk__33794","count__33795","i__33796","vec__33834","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33847","cljs.core/first","cljs.core/next","key","topic","predict-prostate.state.run-time/input-changes","cljs.core._EQ_","map__33839","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__33850","plot-style","predict-prostate.state.localStorage/get-settings!","fexpr__33841","fexpr__33852","cljs.core/reset!","predict-prostate.state.run-time/input-cursor","predict-prostate.state.localStorage/put-settings!","pubsub.feeds/publish","fexpr__33843","fexpr__33853","predict-prostate.state.run-time/results-change","predict-prostate.state.mutations/log","old","new","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","predict-prostate.state.mutations/subscribe-to","p__33863","vec__33864","seq33859","G__33860","G__33861","self__4723__auto__","change","cursor","silent","p1__33854#","p2__33855#","pubsub.feeds/subscribe","cljs.core/deref","p__33870","map__33871","predict-prostate.state.mutations/clip","value","min","max","predict-prostate.state.mutations/str-to-num","s","js/parseFloat","predict-prostate.state.mutations/num-to-str","n","js/isNaN","predict-prostate.state.mutations/mutator","seq__33879","chunk__33880","count__33881","i__33882","vec__33916","vec__33933","vec__33919","vec__33938","bad","clojure.string.split","bci","bct","x__4214__auto__","y__4215__auto__","x__4217__auto__","y__4218__auto__","vec__33923","vec__33943","cljs.core/not","or__4126__auto__","fexpr__33929","fexpr__33947","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","predict_prostate.models.runner.recalculate_model","predict-prostate.state.run-time/input-map","predict-prostate.state.run-time/N","predict-prostate.state.run-time/force-recalculation","_","predict_prostate.state.mutations.subscribe_to","predict-prostate.state.run-time/media-change","predict-prostate.state.run-time/media-cursor","predict-prostate.state.run-time/active-results-change","predict-prostate.state.run-time/active-results-pane","predict-prostate.state.run-time/mockup-change","predict-prostate.state.run-time/mockup-cursor","predict-prostate.state.run-time/hide-warning-change","predict-prostate.state.run-time/hide-warning-cursor","predict-prostate.state.run-time/show-uncertainty-change","predict-prostate.state.run-time/show-uncertainty-cursor","results","predict-prostate.state.run-time/results-cursor","predict-prostate.state.run-time/help-key-change","help-key","predict-prostate.state.run-time/help-key-cursor","interop.jsx/jq$","predict-prostate.state.run-time/settings-change","predict-prostate.state.run-time/settings-cursor","predict-prostate.state.run-time/print-change","val","predict-prostate.state.run-time/print-cursor","js/$","predict-prostate.state.run-time/route-change","p__33963","vec__33965","page","param1","param2","rvec","predict-prostate.state.run-time/route","bide.core.navigate_BANG_","predict-prostate.router/router","js/location","predict-prostate.router/use-hash-fragment"],"sourcesContent":["(ns predict-prostate.state.mutations\n  (:require [predict-prostate.state.run-time :refer [N      ; the number of years in the model\n                                                     model\n                                                     input-cursor\n                                                     input-change\n                                                     input-changes\n                                                     input-default\n                                                     active-results-pane\n                                                     active-results-change\n                                                     mockup-cursor\n                                                     mockup-change\n                                                     results-cursor\n                                                     results-change\n                                                     input-map\n                                                     help-key-cursor\n                                                     help-key-change\n                                                     settings-cursor\n                                                     settings-change\n                                                     media-cursor\n                                                     media-change\n                                                     print-cursor\n                                                     print-change\n                                                     route\n                                                     route-change\n                                                     hide-warning-change\n                                                     hide-warning-cursor\n                                                     show-uncertainty-change\n                                                     show-uncertainty-cursor\n                                                     force-recalculation\n                                                     ]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.state.localStorage :refer [get-settings! put-settings!]]\n            [predict-prostate.models.runner :refer [recalculate-model]]\n            [pubsub.feeds :refer [publish subscribe]]\n            [clojure.core.async :refer [timeout <!]]\n            [cljs.reader :refer [read-string]]\n            [clojure.string :refer [split]]\n            [bide.core :as r]\n            [predict-prostate.router :refer [router use-hash-fragment]]\n            [interop.jsx :refer [jq$]]\n    #_[predict-prostate.results.util :refer [clip]]\n            )\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(set! *warn-on-infer* false)\n\n(defn clear-inputs []\n  (doseq [[key topic] (input-changes)\n          :when key\n          :when topic]\n\n    \"restore saved settings\"\n    (cond\n\n      (= key :plot-style)\n      (let [{:keys [plot-style]} (get-settings! {:plot-style :line2})]\n        (if (#{:area1 :line2} plot-style)\n          (reset! (input-cursor :plot-style) plot-style)\n          (do\n            (put-settings! {:plot-style :line2})\n            (reset! (input-cursor :plot-style) :line2))\n          ))\n\n      :else\n      (publish topic (if (#{:age :psa} key) \"\" nil))))\n  (publish results-change nil)\n  )\n\n\n(defn log [topic old new]\n  ;(println \"Mutate: \" topic \" \" old \" -> \" new)\n  )\n\n(defn subscribe-to [change cursor & [silent]]\n  (subscribe change\n             #(do (when-not silent (log %1 @cursor %2))\n                  (reset! cursor %2))))\n\n(defn clip [{:keys [value min max]}]\n  (if (>= value min)\n    (if (<= value max)\n      value\n      max)\n    min))\n\n;;\n;; Numeric values are always stored in state as strings, but processed as numerics\n;;\n(defn str-to-num [s] (js/parseFloat s))\n(comment\n  (str-to-num \"3.5\")                                        ;=> 3.5\n  (str-to-num 3.5)                                          ;=> 3.5\n  )\n\n(defn num-to-str [n] (if (js/isNaN n) nil (str n)))\n\n\n(defn mutator []\n\n  (doseq [[key change] (input-changes)]\n    (when change\n      (subscribe change\n                 (fn [topic value]\n\n                   (log topic @(input-cursor key) value)\n\n                   (cond\n\n                     (= :biopsy-cores-taken key)\n                     (let [[value bad] (split value \":\")\n                           bci (str-to-num  @(input-cursor :biopsy-cores-involved))\n                           bct (str-to-num  @(input-cursor :biopsy-cores-taken))]\n                       ;(println \"t value = \" (if (string? value) \"str \" \"num \") value)\n                       ;(println \"t taken = \" (if (string? bct) \"str \" \"num \") bct)\n                       ;(println \"t involved = \" (if (string? bci) \"str \" \"num \") bci)\n                       ;(println \"t bad = \" bad)\n                       (when-not (js/isNaN bci)\n                         (reset! (input-cursor :biopsy-cores-involved) (num-to-str (max 1 (min bci (str-to-num value))))))\n                       (reset! (input-cursor :biopsy-cores-taken) (str value (when bad \":\") bad)))\n\n                     (= :biopsy-cores-involved key)\n                     (let [[value bad] (split value \":\")\n                           bci (str-to-num  @(input-cursor :biopsy-cores-involved))\n                           bct (str-to-num  @(input-cursor :biopsy-cores-taken))]\n                       ;(println \"i value = \" (if (string? value) \"str \" \"num \") value)\n                       ;(println \"i taken = \" (if (string? bct) \"str \" \"num \") bct)\n                       ;(println \"i involved = \" (if (string? bci) \"str \" \"num \") bci)\n                       ;(println \"i bad = \" bad)\n                       (when (not (js/isNaN bct))\n                         (reset! (input-cursor :biopsy-cores-involved)\n                                 (str value (if (or (neg? value) bad)\n                                              (str \":\" value)\n                                              \"\")))))\n\n                     (= key :hist-scale)\n                     (do\n                       (reset! (input-cursor :hist-scale) value)\n                       (put-settings! {:hist-scale value})\n\n                       ; copy the value from the old scale to the newly selected scale\n                       (if (= value :gleason)\n                         (reset! (input-cursor :gleason) @(input-cursor :grade-group))\n                         (reset! (input-cursor :grade-group) @(input-cursor :gleason)))\n                       )\n\n                     (#{:gleason :grade-group} key)\n                     (do\n                       (reset! (input-cursor :gleason) value)\n                       (reset! (input-cursor :grade-group) value))\n\n                     (= key :h-admissions)\n                     (do\n                       (reset! (input-cursor :h-admissions) value)\n                       (if (= value 0)\n                         (reset! (input-cursor :charlson-comorbidity) nil)))\n\n                     (= key :plot-style)\n                     (do\n                       (reset! (input-cursor :plot-style) value)\n                       (put-settings! {:plot-style value}))\n\n                     :else\n                     (reset! (input-cursor key) (if (nil? value)\n                                                  (get-input-default input-groups key)\n                                                  value))\n\n                     )\n\n                   ;; This and the following subscribe are the only spots where we recalculate the model, and we delay it until\n                   ;; any changes to the on-screen-inputs have been rendered.\n                   (recalculate-model (input-map) N)))))\n\n  (subscribe force-recalculation\n             (fn [_ _]\n               (recalculate-model (input-map) N)))\n\n  ;; various\n  (subscribe-to media-change media-cursor false)\n\n  (subscribe-to active-results-change active-results-pane true)\n  (subscribe-to mockup-change mockup-cursor true)\n\n  ; (subscribe-to help-key-change help-key-cursor true)\n  (subscribe-to hide-warning-change hide-warning-cursor true)\n  (subscribe-to show-uncertainty-change show-uncertainty-cursor true)\n\n  (subscribe results-change\n             (fn [_ results]\n               (reset! results-cursor results)))\n\n  (subscribe help-key-change\n             (fn [_ help-key]\n               (reset! help-key-cursor help-key)\n               (if help-key\n                 (.modal (jq$ \"#topModal\") \"show\")\n                 (.modal (jq$ \"#topModal\") \"hide\"))))\n\n  (subscribe settings-change\n             (fn [_ help-key]\n               (reset! settings-cursor help-key)\n               (if help-key\n                 (.modal (jq$ \"#settingsModal\") \"show\")\n                 (.modal (jq$ \"#settingsModal\") \"hide\"))))\n\n\n  (subscribe print-change\n             (fn [_ val]\n               (reset! print-cursor val)\n               (.modal (js/$ \"#printModal\") \"show\"))\n             )\n\n  (subscribe route-change\n             (fn [_ [page param1 param2 :as rvec]]\n               (reset! route rvec)\n               (r/navigate! router page param1 param2)\n               (when (= page :home) (set! (.-href js/location) (if (use-hash-fragment) \"/#\" \"/\")))\n               ))\n\n  ;; Now clear all values to nil/default\n  (clear-inputs))\n\n(comment\n\n  (publish route-change [:home nil nil])\n  (publish route-change [:tool nil nil])\n\n  (get-input-default input-groups :neo)\n\n  (count (.querySelectorAll js/document \".has-error\"))\n\n  (count (.querySelectorAll js/document \"[data-key]\"))\n  )\n\n\n(comment\n  ; lazy-seq example:\n\n  (declare helper)\n\n  (defn even? [n]\n    (lazy-seq\n      (if (zero? n)\n        [true]\n        (cons n (helper (dec n))))))\n\n  (defn helper [n]\n    (lazy-seq\n      (if (zero? n)\n        [false]\n        (cons n (even? (dec n))))))\n  )\n"]}