{"version":3,"sources":["predict_prostate/state/mutations.cljs"],"mappings":"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","names":["predict-prostate.state.mutations/paq","js/window","var_args","G__76879","predict-prostate.state.mutations/matomo-track","js/Error","category","action","tracked-name","cljs.core/name","value","predict-prostate.state.mutations/reload-lang","cljs.core.partial","predict-prostate.state.mutations/switch-lang","predict-prostate.state.mutations/clear-inputs","seq__76894","cljs.core/seq","chunk__76897","count__76898","i__76899","vec__76950","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__76962","cljs.core/first","cljs.core/next","key","topic","predict-prostate.state.run-time/input-changes","cljs.core._EQ_","map__76955","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__76965","plot-style","predict-prostate.state.localStorage/get-settings!","fexpr__76957","fexpr__76967","cljs.core/reset!","predict-prostate.state.run-time/input-cursor","predict-prostate.state.localStorage/put-settings!","pubsub.feeds/publish","fexpr__76959","fexpr__76969","predict-prostate.state.run-time/results-change","predict-prostate.state.mutations/log","old","new","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","predict-prostate.state.mutations/subscribe-to","p__76997","vec__76998","seq76981","G__76982","G__76983","self__4723__auto__","change","cursor","silent","p1__76979#","p2__76980#","pubsub.feeds/subscribe","cljs.core/deref","p__77002","map__77003","predict-prostate.state.mutations/clip","min","max","predict-prostate.state.mutations/str-to-num","s","js/parseFloat","predict-prostate.state.mutations/num-to-str","n","js/isNaN","predict-prostate.state.mutations/mutator","seq__77007","chunk__77008","count__77009","i__77010","vec__77100","vec__77110","vec__77103","vec__77113","bad","clojure.string.split","bci","bct","x__4214__auto__","y__4215__auto__","x__4217__auto__","y__4218__auto__","vec__77106","vec__77116","cljs.core/not","or__4126__auto__","fexpr__77109","fexpr__77119","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","predict_prostate.models.runner.recalculate_model","predict-prostate.state.run-time/input-map","predict-prostate.state.run-time/N","predict-prostate.state.run-time/force-recalculation","_","predict_prostate.state.mutations.subscribe_to","predict-prostate.state.run-time/media-change","predict-prostate.state.run-time/media-cursor","predict-prostate.state.run-time/active-results-change","predict-prostate.state.run-time/active-results-pane","predict-prostate.state.run-time/mockup-change","predict-prostate.state.run-time/mockup-cursor","predict-prostate.state.run-time/hide-warning-change","predict-prostate.state.run-time/hide-warning-cursor","predict-prostate.state.run-time/show-uncertainty-change","predict-prostate.state.run-time/show-uncertainty-cursor","results","predict-prostate.state.run-time/results-cursor","predict-prostate.state.run-time/help-key-change","help-key","predict-prostate.state.run-time/help-key-cursor","js/$","predict-prostate.state.run-time/settings-change","predict-prostate.state.run-time/settings-cursor","predict-prostate.state.run-time/print-change","val","predict-prostate.state.run-time/print-cursor","predict-prostate.state.run-time/route-change","p__77120","vec__77121","page","param1","param2","rvec","predict-prostate.state.run-time/route","bide.core.navigate_BANG_","predict-prostate.router/router","js/location","predict-prostate.router/use-hash-fragment","predict-prostate.state.run-time/language-change","lang","old-lang","predict-prostate.state.run-time/t-state-cursor","cljs.core.swap_BANG_","translations.tongue-base/process-dict-op","cljs.core.not_EQ_","predict-prostate.state.config/rtl-languages","predict-prostate.state.run-time/t-state-change","url","new-lang","translations.tongue-base/load-translations*","translations.tongue-base/handle-dictionary","predict-prostate.state.run-time/edit-change","arg","text","fexpr__77124","predict-prostate.state.run-time/ttt-cursor","predict-prostate.state.run-time/edit-cursor","cljs.core/assoc","cljs.core/vector?","cljs.core/second","predict-prostate.state.run-time/new-text-change","p__77125","vec__77126","new-text","predict-prostate.state.run-time/new-text-cursor","predict-prostate.state.run-time/text-change","p__77129","vec__77130","edit-key","translations.tranny_api.upload_translation","predict-prostate.state.run-time/add-language-modal","predict-prostate.state.run-time/add-language","p__77133","vec__77134","cljs.core/update","cljs.core/conj","cljs.core.keyword"],"sourcesContent":["(ns predict-prostate.state.mutations\n  (:require [predict-prostate.state.run-time :refer [N      ; the number of years in the model\n                                                     model\n                                                     input-cursor\n                                                     input-change\n                                                     input-changes\n                                                     input-default\n                                                     active-results-pane\n                                                     active-results-change\n                                                     mockup-cursor\n                                                     mockup-change\n                                                     results-cursor\n                                                     results-change\n                                                     input-map\n                                                     help-key-cursor\n                                                     help-key-change\n                                                     settings-cursor\n                                                     settings-change\n                                                     media-cursor\n                                                     media-change\n                                                     print-cursor\n                                                     print-change\n                                                     route\n                                                     route-change\n                                                     hide-warning-change\n                                                     hide-warning-cursor\n                                                     show-uncertainty-change\n                                                     show-uncertainty-cursor\n                                                     force-recalculation\n                                                     language-change\n                                                     t-state-change\n                                                     edit-change\n                                                     new-text-change\n                                                     text-change\n                                                     add-language-modal\n                                                     add-language\n                                                     t-state-cursor\n                                                     new-text-cursor\n                                                     edit-cursor\n                                                     ttt-cursor\n                                                     ]]\n            [predict-prostate.state.config :refer [input-groups get-input-default rtl-languages]]\n            [predict-prostate.state.localStorage :refer [get-settings! put-settings!]]\n            [predict-prostate.models.runner :refer [recalculate-model]]\n            [pubsub.feeds :refer [publish subscribe]]\n            [clojure.core.async :refer [timeout <!]]\n            [cljs.reader :refer [read-string]]\n            [clojure.string :refer [split]]\n            [bide.core :as r]\n            [translations.tongue-base :refer [load-translations* handle-dictionary process-dict-op]]\n            [translations.tranny-api :refer [upload-translation]]\n            [predict-prostate.router :refer [router use-hash-fragment]]\n            \n            #_[predict-prostate.results.util :refer [clip]])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(def paq (.-_paq js/window))\n\n(defn matomo-track\n  \"Send an event to matemo. \"\n  ([category action tracked-name]\n   (.push paq #js [\"trackEvent\"\n                   (name category)\n                   (name action)\n                   (name tracked-name)]))\n  ([category action tracked-name value]\n   (.push paq #js [\"trackEvent\"\n                   (name category)\n                   (name action)\n                   (name tracked-name)\n                   value])))\n\n(def reload-lang (partial matomo-track \"Language\" \"RELOAD-LANG\"))\n(def switch-lang (partial matomo-track \"Language\" \"SWITCH-LANG\"))\n\n(defn clear-inputs []\n  (doseq [[key topic] (input-changes)\n          :when key\n          :when topic]\n\n    \"restore saved settings\"\n    (cond\n\n      (= key :plot-style)\n      (let [{:keys [plot-style]} (get-settings! {:plot-style :line2})]\n        (if (#{:area1 :line2} plot-style)\n          (reset! (input-cursor :plot-style) plot-style)\n          (do\n            (put-settings! {:plot-style :line2})\n            (reset! (input-cursor :plot-style) :line2))\n          ))\n\n      :else\n      (publish topic (if (#{:age :psa} key) \"\" nil))))\n  (publish results-change nil)\n  )\n\n\n(defn log [topic old new]\n  ;(println \"Mutate: \" topic \" \" old \" -> \" new)\n  )\n\n(defn subscribe-to [change cursor & [silent]]\n  (subscribe change\n             #(do (when-not silent (log %1 @cursor %2))\n                  (reset! cursor %2))))\n\n(defn clip [{:keys [value min max]}]\n  (if (>= value min)\n    (if (<= value max)\n      value\n      max)\n    min))\n\n;;\n;; Numeric values are always stored in state as strings, but processed as numerics\n;;\n(defn str-to-num [s] (js/parseFloat s))\n(comment\n  (str-to-num \"3.5\")                                        ;=> 3.5\n  (str-to-num 3.5)                                          ;=> 3.5\n  )\n\n(defn num-to-str [n] (if (js/isNaN n) nil (str n)))\n\n\n(defn mutator []\n\n  (doseq [[key change] (input-changes)]\n    (when change\n      (subscribe change\n                 (fn [topic value]\n\n                   (log topic @(input-cursor key) value)\n\n                   (cond\n\n                     (= :biopsy-cores-taken key)\n                     (let [[value bad] (split value \":\")\n                           bci (str-to-num  @(input-cursor :biopsy-cores-involved))\n                           bct (str-to-num  @(input-cursor :biopsy-cores-taken))]\n                       ;(println \"t value = \" (if (string? value) \"str \" \"num \") value)\n                       ;(println \"t taken = \" (if (string? bct) \"str \" \"num \") bct)\n                       ;(println \"t involved = \" (if (string? bci) \"str \" \"num \") bci)\n                       ;(println \"t bad = \" bad)\n                       (when-not (js/isNaN bci)\n                         (reset! (input-cursor :biopsy-cores-involved) (num-to-str (max 1 (min bci (str-to-num value))))))\n                       (reset! (input-cursor :biopsy-cores-taken) (str value (when bad \":\") bad)))\n\n                     (= :biopsy-cores-involved key)\n                     (let [[value bad] (split value \":\")\n                           bci (str-to-num  @(input-cursor :biopsy-cores-involved))\n                           bct (str-to-num  @(input-cursor :biopsy-cores-taken))]\n                       ;(println \"i value = \" (if (string? value) \"str \" \"num \") value)\n                       ;(println \"i taken = \" (if (string? bct) \"str \" \"num \") bct)\n                       ;(println \"i involved = \" (if (string? bci) \"str \" \"num \") bci)\n                       ;(println \"i bad = \" bad)\n                       (when (not (js/isNaN bct))\n                         (reset! (input-cursor :biopsy-cores-involved)\n                                 (str value (if (or (neg? value) bad)\n                                              (str \":\" value)\n                                              \"\")))))\n\n                     (= key :hist-scale)\n                     (do\n                       (reset! (input-cursor :hist-scale) value)\n                       (put-settings! {:hist-scale value})\n\n                       ; copy the value from the old scale to the newly selected scale\n                       (if (= value :gleason)\n                         (reset! (input-cursor :gleason) @(input-cursor :grade-group))\n                         (reset! (input-cursor :grade-group) @(input-cursor :gleason)))\n                       )\n\n                     (#{:gleason :grade-group} key)\n                     (do\n                       (reset! (input-cursor :gleason) value)\n                       (reset! (input-cursor :grade-group) value))\n\n                     (= key :h-admissions)\n                     (do\n                       (reset! (input-cursor :h-admissions) value)\n                       (if (= value 0)\n                         (reset! (input-cursor :charlson-comorbidity) nil)))\n\n                     (= key :plot-style)\n                     (do\n                       (reset! (input-cursor :plot-style) value)\n                       (put-settings! {:plot-style value}))\n\n                     :else\n                     (reset! (input-cursor key) (if (nil? value)\n                                                  (get-input-default input-groups key)\n                                                  value))\n\n                     )\n\n                   ;; This and the following subscribe are the only spots where we recalculate the model, and we delay it until\n                   ;; any changes to the on-screen-inputs have been rendered.\n                   (recalculate-model (input-map) N)))))\n\n  (subscribe force-recalculation\n             (fn [_ _]\n               (recalculate-model (input-map) N)))\n\n  ;; various\n  (subscribe-to media-change media-cursor false)\n\n  (subscribe-to active-results-change active-results-pane true)\n  (subscribe-to mockup-change mockup-cursor true)\n\n  ; (subscribe-to help-key-change help-key-cursor true)\n  (subscribe-to hide-warning-change hide-warning-cursor true)\n  (subscribe-to show-uncertainty-change show-uncertainty-cursor true)\n\n  (subscribe results-change\n             (fn [_ results]\n               (reset! results-cursor results)))\n\n  (subscribe help-key-change\n             (fn [_ help-key]\n               (reset! help-key-cursor help-key)\n               (if help-key\n                 (.modal (js/$ \"#topModal\") \"show\")\n                 (.modal (js/$ \"#topModal\") \"hide\"))))\n\n  (subscribe settings-change\n             (fn [_ help-key]\n               (reset! settings-cursor help-key)\n               (if help-key\n                 (.modal (js/$ \"#settingsModal\") \"show\")\n                 (.modal (js/$ \"#settingsModal\") \"hide\"))))\n\n\n  (subscribe print-change\n             (fn [_ val]\n               (reset! print-cursor val)\n               (.modal (js/$ \"#printModal\") \"show\"))\n             )\n\n  (subscribe route-change\n             (fn [_ [page param1 param2 :as rvec]]\n               (reset! route rvec)\n               (r/navigate! router page param1 param2)\n               (when (= page :home) (set! (.-href js/location) (if (use-hash-fragment) \"/#\" \"/\")))\n               ))\n  \n  (subscribe language-change\n             (fn [_ lang]\n               (let [old-lang (:lang @t-state-cursor)]\n                 (swap! t-state-cursor process-dict-op [:switch lang])\n                 (when (not= old-lang lang)\n                   ;(println \"TRACK* language-change to \" lang)\n                   (switch-lang (name lang))\n                   (put-settings! {:lang lang})\n                   (.attr (js/$ \"html\") \"dir\" (if (rtl-languages lang) \"rtl\" \"ltr\"))))))\n\n(subscribe t-state-change\n           (fn [_ url]\n             (let [new-lang (:lang (get-settings! {:lang :en}))]\n                 ;(println \"TRACK language reload into \" new-lang)\n               (reload-lang (name new-lang)))\n             (load-translations* url (partial handle-dictionary t-state-cursor))))\n\n(subscribe edit-change\n           (fn [_ arg]\n             (let [text (@ttt-cursor arg)]\n               (swap! edit-cursor assoc\n                      :edit-arg arg\n                      :edit-key (if (and (vector? arg) (> (count arg) 0)) (first arg) arg)\n                      :text (if (and (vector? arg) (> (count arg) 1))\n                              (second arg)\n                              text))\n               (.modal (js/$ \"#editorModal\") \"show\")\n                 ;(println \"edit-change: state=\" @edit-cursor)\n               )))\n\n(subscribe new-text-change\n    ; update the :edit text (We don't need edit-key because that is a property of the editor panel at this point\n           (fn [_ [_ new-text]]\n             (reset! new-text-cursor new-text)))\n\n(subscribe text-change\n    ; the text-change event saves the [edit-key new-text] with an upsert in the active language dictionary and also\n    ; POSTS the upsert to the data base\n           (fn [_ [edit-key new-text]]\n             (let [lang (:lang @t-state-cursor)]\n               #_(println \"text-change: lang \" lang \"key\" edit-key \"text\" new-text \" is blank? \" (= \"\" new-text))\n               (swap! t-state-cursor process-dict-op [:upsert (:lang @t-state-cursor) {edit-key new-text}])\n               (reset! new-text-cursor nil)\n               (upload-translation edit-key (name lang) new-text))))\n\n(subscribe add-language-modal\n           (fn [_]\n               ;(println \"add-language-modal\")\n             (.modal (js/$ \"#newLanguageModal\") \"show\")))\n\n(subscribe add-language\n           (fn [_ [new-lang]]\n             (when (= 2 (count new-lang))\n               (swap! t-state-cursor update :languages conj (keyword new-lang)))))\n\n  ;; Now clear all values to nil/default\n  (clear-inputs))\n\n(comment\n\n  (publish route-change [:home nil nil])\n  (publish route-change [:tool nil nil])\n\n  (get-input-default input-groups :neo)\n\n  (count (.querySelectorAll js/document \".has-error\"))\n\n  (count (.querySelectorAll js/document \"[data-key]\"))\n  )\n\n\n(comment\n  ; lazy-seq example:\n\n  (declare helper)\n\n  (defn even? [n]\n    (lazy-seq\n      (if (zero? n)\n        [true]\n        (cons n (helper (dec n))))))\n\n  (defn helper [n]\n    (lazy-seq\n      (if (zero? n)\n        [false]\n        (cons n (even? (dec n))))))\n  )\n"]}