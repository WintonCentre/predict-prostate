{"version":3,"sources":["predict_prostate/state/mutations.cljs"],"mappings":"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","names":["predict-prostate.state.mutations/paq","js/window","var_args","G__33458","predict-prostate.state.mutations/matomo-track","js/Error","category","action","tracked-name","cljs.core/name","value","predict-prostate.state.mutations/reload-lang","cljs.core.partial","predict-prostate.state.mutations/switch-lang","predict-prostate.state.mutations/clear-inputs","seq__33459","cljs.core/seq","chunk__33462","count__33463","i__33464","vec__33499","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33506","cljs.core/first","cljs.core/next","key","topic","predict-prostate.state.run-time/input-changes","cljs.core._EQ_","map__33502","cljs.core/--destructure-map","cljs.core.get","map__33509","plot-style","predict-prostate.state.localStorage/get-settings!","fexpr__33503","fexpr__33510","cljs.core/reset!","predict-prostate.state.run-time/input-cursor","predict-prostate.state.localStorage/put-settings!","pubsub.feeds/publish","fexpr__33505","fexpr__33511","predict-prostate.state.run-time/results-change","predict-prostate.state.mutations/log","old","new","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","predict-prostate.state.mutations/subscribe-to","p__33550","vec__33551","seq33535","G__33543","G__33544","self__4805__auto__","change","cursor","silent","p1__33520#","p2__33521#","pubsub.feeds/subscribe","cljs.core/deref","p__33558","map__33560","predict-prostate.state.mutations/clip","min","max","predict-prostate.state.mutations/str-to-num","s","js/parseFloat","predict-prostate.state.mutations/num-to-str","n","js/isNaN","predict-prostate.state.mutations/mutator","seq__33582","chunk__33583","count__33584","i__33585","vec__33632","vec__33673","vec__33638","vec__33677","bad","clojure.string.split","bci","bct","x__4295__auto__","y__4296__auto__","x__4298__auto__","y__4299__auto__","vec__33648","vec__33681","cljs.core/not","or__4212__auto__","fexpr__33667","fexpr__33691","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","predict_prostate.models.runner.recalculate_model","predict-prostate.state.run-time/input-map","predict-prostate.state.run-time/N","predict-prostate.state.run-time/force-recalculation","_","predict_prostate.state.mutations.subscribe_to","predict-prostate.state.run-time/media-change","predict-prostate.state.run-time/media-cursor","predict-prostate.state.run-time/active-results-change","predict-prostate.state.run-time/active-results-pane","predict-prostate.state.run-time/mockup-change","predict-prostate.state.run-time/mockup-cursor","predict-prostate.state.run-time/hide-warning-change","predict-prostate.state.run-time/hide-warning-cursor","predict-prostate.state.run-time/show-uncertainty-change","predict-prostate.state.run-time/show-uncertainty-cursor","results","predict-prostate.state.run-time/results-cursor","predict-prostate.state.run-time/help-key-change","help-key","predict-prostate.state.run-time/help-key-cursor","js/$","predict-prostate.state.run-time/settings-change","predict-prostate.state.run-time/settings-cursor","predict-prostate.state.run-time/print-change","val","predict-prostate.state.run-time/print-cursor","predict-prostate.state.run-time/route-change","p__33696","vec__33697","page","param1","param2","rvec","predict-prostate.state.run-time/route","bide.core.navigate_BANG_","predict-prostate.router/router","js/location","predict-prostate.router/use-hash-fragment","predict-prostate.state.run-time/language-change","lang","old-lang","predict-prostate.state.run-time/t-state-cursor","cljs.core.swap_BANG_","translations.tongue-base/process-dict-op","cljs.core.not_EQ_","predict-prostate.state.config/rtl-languages","predict-prostate.state.run-time/t-state-change","url","new-lang","translations.tongue-base/load-translations*","translations.tongue-base/handle-dictionary","predict-prostate.state.run-time/edit-change","arg","text","fexpr__33700","predict-prostate.state.run-time/ttt-cursor","predict-prostate.state.run-time/edit-cursor","cljs.core/assoc","cljs.core/vector?","cljs.core/second","predict-prostate.state.run-time/new-text-change","p__33701","vec__33702","new-text","predict-prostate.state.run-time/new-text-cursor","predict-prostate.state.run-time/text-change","p__33705","vec__33706","edit-key","translations.tranny_api.upload_translation","predict-prostate.state.run-time/add-language-modal","predict-prostate.state.run-time/add-language","p__33709","vec__33710","cljs.core/update","cljs.core/conj","cljs.core.keyword"],"sourcesContent":["(ns predict-prostate.state.mutations\n  (:require [predict-prostate.state.run-time :refer [N      ; the number of years in the model\n                                                     input-cursor\n                                                     input-changes\n                                                     active-results-pane\n                                                     active-results-change\n                                                     mockup-cursor\n                                                     mockup-change\n                                                     results-cursor\n                                                     results-change\n                                                     input-map\n                                                     help-key-cursor\n                                                     help-key-change\n                                                     settings-cursor\n                                                     settings-change\n                                                     media-cursor\n                                                     media-change\n                                                     print-cursor\n                                                     print-change\n                                                     route\n                                                     route-change\n                                                     hide-warning-change\n                                                     hide-warning-cursor\n                                                     show-uncertainty-change\n                                                     show-uncertainty-cursor\n                                                     force-recalculation\n                                                     language-change\n                                                     t-state-change\n                                                     edit-change\n                                                     new-text-change\n                                                     text-change\n                                                     add-language-modal\n                                                     add-language\n                                                     t-state-cursor\n                                                     new-text-cursor\n                                                     edit-cursor\n                                                     ttt-cursor]]\n            [predict-prostate.state.config :refer [input-groups get-input-default rtl-languages]]\n            [predict-prostate.state.localStorage :refer [get-settings! put-settings!]]\n            [predict-prostate.models.runner :refer [recalculate-model]]\n            [pubsub.feeds :refer [publish subscribe]]\n            [clojure.string :refer [split]]\n            [bide.core :as r]\n            [translations.tongue-base :refer [load-translations* handle-dictionary process-dict-op]]\n            [translations.tranny-api :refer [upload-translation]]\n            [predict-prostate.router :refer [router use-hash-fragment]]))\n\n(def paq (.-_paq js/window))\n\n(defn matomo-track\n  \"Send an event to matemo. \"\n  ([category action tracked-name]\n   (.push paq #js [\"trackEvent\"\n                   (name category)\n                   (name action)\n                   (name tracked-name)]))\n  ([category action tracked-name value]\n   (.push paq #js [\"trackEvent\"\n                   (name category)\n                   (name action)\n                   (name tracked-name)\n                   value])))\n\n(def reload-lang (partial matomo-track \"Language\" \"RELOAD-LANG\"))\n(def switch-lang (partial matomo-track \"Language\" \"SWITCH-LANG\"))\n\n(defn clear-inputs []\n  (doseq [[key topic] (input-changes)\n          :when key\n          :when topic]\n\n    \"restore saved settings\"\n    (cond\n\n      (= key :plot-style)\n      (let [{:keys [plot-style]} (get-settings! {:plot-style :line2})]\n        (if (#{:area1 :line2} plot-style)\n          (reset! (input-cursor :plot-style) plot-style)\n          (do\n            (put-settings! {:plot-style :line2})\n            (reset! (input-cursor :plot-style) :line2))\n          ))\n\n      :else\n      (publish topic (if (#{:age :psa} key) \"\" nil))))\n  (publish results-change nil)\n  )\n\n\n(defn log [topic old new]\n  ;(println \"Mutate: \" topic \" \" old \" -> \" new)\n  )\n\n(defn subscribe-to [change cursor & [silent]]\n  (subscribe change\n             #(do (when-not silent (log %1 @cursor %2))\n                  (reset! cursor %2))))\n\n(defn clip [{:keys [value min max]}]\n  (if (>= value min)\n    (if (<= value max)\n      value\n      max)\n    min))\n\n;;\n;; Numeric values are always stored in state as strings, but processed as numerics\n;;\n(defn str-to-num [s] (js/parseFloat s))\n(comment\n  (str-to-num \"3.5\")                                        ;=> 3.5\n  (str-to-num 3.5)                                          ;=> 3.5\n  )\n\n(defn num-to-str [n] (if (js/isNaN n) nil (str n)))\n\n\n(defn mutator []\n\n  (doseq [[key change] (input-changes)]\n    (when change\n      (subscribe change\n                 (fn [topic value]\n\n                   (log topic @(input-cursor key) value)\n\n                   (cond\n\n                     (= :biopsy-cores-taken key)\n                     (let [[value bad] (split value \":\")\n                           bci (str-to-num  @(input-cursor :biopsy-cores-involved))\n                           bct (str-to-num  @(input-cursor :biopsy-cores-taken))]\n                       ;(println \"t value = \" (if (string? value) \"str \" \"num \") value)\n                       ;(println \"t taken = \" (if (string? bct) \"str \" \"num \") bct)\n                       ;(println \"t involved = \" (if (string? bci) \"str \" \"num \") bci)\n                       ;(println \"t bad = \" bad)\n                       (when-not (js/isNaN bci)\n                         (reset! (input-cursor :biopsy-cores-involved) (num-to-str (max 1 (min bci (str-to-num value))))))\n                       (reset! (input-cursor :biopsy-cores-taken) (str value (when bad \":\") bad)))\n\n                     (= :biopsy-cores-involved key)\n                     (let [[value bad] (split value \":\")\n                           bci (str-to-num  @(input-cursor :biopsy-cores-involved))\n                           bct (str-to-num  @(input-cursor :biopsy-cores-taken))]\n                       ;(println \"i value = \" (if (string? value) \"str \" \"num \") value)\n                       ;(println \"i taken = \" (if (string? bct) \"str \" \"num \") bct)\n                       ;(println \"i involved = \" (if (string? bci) \"str \" \"num \") bci)\n                       ;(println \"i bad = \" bad)\n                       (when (not (js/isNaN bct))\n                         (reset! (input-cursor :biopsy-cores-involved)\n                                 (str value (if (or (neg? value) bad)\n                                              (str \":\" value)\n                                              \"\")))))\n\n                     (= key :hist-scale)\n                     (do\n                       (reset! (input-cursor :hist-scale) value)\n                       (put-settings! {:hist-scale value})\n\n                       ; copy the value from the old scale to the newly selected scale\n                       (if (= value :gleason)\n                         (reset! (input-cursor :gleason) @(input-cursor :grade-group))\n                         (reset! (input-cursor :grade-group) @(input-cursor :gleason)))\n                       )\n\n                     (#{:gleason :grade-group} key)\n                     (do\n                       (reset! (input-cursor :gleason) value)\n                       (reset! (input-cursor :grade-group) value))\n\n                     (= key :h-admissions)\n                     (do\n                       (reset! (input-cursor :h-admissions) value)\n                       (if (= value 0)\n                         (reset! (input-cursor :charlson-comorbidity) nil)))\n\n                     (= key :plot-style)\n                     (do\n                       (reset! (input-cursor :plot-style) value)\n                       (put-settings! {:plot-style value}))\n\n                     :else\n                     (reset! (input-cursor key) (if (nil? value)\n                                                  (get-input-default input-groups key)\n                                                  value))\n\n                     )\n\n                   ;; This and the following subscribe are the only spots where we recalculate the model, and we delay it until\n                   ;; any changes to the on-screen-inputs have been rendered.\n                   (recalculate-model (input-map) N)))))\n\n  (subscribe force-recalculation\n             (fn [_ _]\n               (recalculate-model (input-map) N)))\n\n  ;; various\n  (subscribe-to media-change media-cursor false)\n\n  (subscribe-to active-results-change active-results-pane true)\n  (subscribe-to mockup-change mockup-cursor true)\n\n  ; (subscribe-to help-key-change help-key-cursor true)\n  (subscribe-to hide-warning-change hide-warning-cursor true)\n  (subscribe-to show-uncertainty-change show-uncertainty-cursor true)\n\n  (subscribe results-change\n             (fn [_ results]\n               (reset! results-cursor results)))\n\n  (subscribe help-key-change\n             (fn [_ help-key]\n               (reset! help-key-cursor help-key)\n               (if help-key\n                 (.modal (js/$ \"#topModal\") \"show\")\n                 (.modal (js/$ \"#topModal\") \"hide\"))))\n\n  (subscribe settings-change\n             (fn [_ help-key]\n               (reset! settings-cursor help-key)\n               (if help-key\n                 (.modal (js/$ \"#settingsModal\") \"show\")\n                 (.modal (js/$ \"#settingsModal\") \"hide\"))))\n\n\n  (subscribe print-change\n             (fn [_ val]\n               (reset! print-cursor val)\n               (.modal (js/$ \"#printModal\") \"show\"))\n             )\n\n  (subscribe route-change\n             (fn [_ [page param1 param2 :as rvec]]\n               (reset! route rvec)\n               (r/navigate! router page param1 param2)\n               (when (= page :home) (set! (.-href js/location) (if (use-hash-fragment) \"/#\" \"/\")))\n               ))\n  \n  (subscribe language-change\n             (fn [_ lang]\n               (let [old-lang (:lang @t-state-cursor)]\n                 (swap! t-state-cursor process-dict-op [:switch lang])\n                 (when (not= old-lang lang)\n                   ;(println \"TRACK* language-change to \" lang)\n                   (switch-lang (name lang))\n                   (put-settings! {:lang lang})\n                   (.attr (js/$ \"html\") \"dir\" (if (rtl-languages lang) \"rtl\" \"ltr\"))))))\n\n(subscribe t-state-change\n           (fn [_ url]\n             (let [new-lang (:lang (get-settings! {:lang :en}))]\n                 ;(println \"TRACK language reload into \" new-lang)\n               (reload-lang (name new-lang)))\n             (load-translations* url (partial handle-dictionary t-state-cursor))))\n\n(subscribe edit-change\n           (fn [_ arg]\n             (let [text (@ttt-cursor arg)]\n               (swap! edit-cursor assoc\n                      :edit-arg arg\n                      :edit-key (if (and (vector? arg) (> (count arg) 0)) (first arg) arg)\n                      :text (if (and (vector? arg) (> (count arg) 1))\n                              (second arg)\n                              text))\n               (.modal (js/$ \"#editorModal\") \"show\")\n                 ;(println \"edit-change: state=\" @edit-cursor)\n               )))\n\n(subscribe new-text-change\n    ; update the :edit text (We don't need edit-key because that is a property of the editor panel at this point\n           (fn [_ [_ new-text]]\n             (reset! new-text-cursor new-text)))\n\n(subscribe text-change\n    ; the text-change event saves the [edit-key new-text] with an upsert in the active language dictionary and also\n    ; POSTS the upsert to the data base\n           (fn [_ [edit-key new-text]]\n             (let [lang (:lang @t-state-cursor)]\n               #_(println \"text-change: lang \" lang \"key\" edit-key \"text\" new-text \" is blank? \" (= \"\" new-text))\n               (swap! t-state-cursor process-dict-op [:upsert (:lang @t-state-cursor) {edit-key new-text}])\n               (reset! new-text-cursor nil)\n               (upload-translation edit-key (name lang) new-text))))\n\n(subscribe add-language-modal\n           (fn [_]\n               ;(println \"add-language-modal\")\n             (.modal (js/$ \"#newLanguageModal\") \"show\")))\n\n(subscribe add-language\n           (fn [_ [new-lang]]\n             (when (= 2 (count new-lang))\n               (swap! t-state-cursor update :languages conj (keyword new-lang)))))\n\n  ;; Now clear all values to nil/default\n  (clear-inputs))\n\n(comment\n\n  (publish route-change [:home nil nil])\n  (publish route-change [:tool nil nil])\n\n  (get-input-default input-groups :neo)\n\n  (count (.querySelectorAll js/document \".has-error\"))\n\n  (count (.querySelectorAll js/document \"[data-key]\"))\n  )\n\n\n(comment\n  ; lazy-seq example:\n\n  (declare helper)\n\n  (defn even? [n]\n    (lazy-seq\n      (if (zero? n)\n        [true]\n        (cons n (helper (dec n))))))\n\n  (defn helper [n]\n    (lazy-seq\n      (if (zero? n)\n        [false]\n        (cons n (even? (dec n))))))\n  )\n"]}