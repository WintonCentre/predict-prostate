{"version":3,"sources":["sablono/normalize.cljc"],"mappings":"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","names":["sablono.normalize/compact-map","m","cljs.core.into","cljs.core.remove","p__40191","vec__40192","cljs.core.nth","_","v","cljs.core/empty?","sablono.normalize/class-name","x","cljs.core/Keyword","cljs.core/name","sablono.normalize/map-lookup?","cljs.core/list?","cljs.core/first","sablono.normalize/class","class","cljs.core/Symbol","cljs.core.map","cljs.core/set?","cljs.core/sequential?","p1__40196#","cljs.core/every?","cljs.core.mapv","sablono.normalize/attributes","attrs","G__40215","cljs.core.update_in","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sablono.normalize/merge-with-class","seq40219","self__4724__auto__","cljs.core/seq","maps","classes","cljs.core.mapcat","G__40256","cljs.core.reduce","cljs.core/into","cljs.core.assoc","cljs.core/vec","sablono.normalize/strip-css","s","clojure.string/replace","sablono.normalize/match-tag","vec__40294","matches","cljs.core/re-seq","tag-name","names","cljs.core.ex_info","G__40298","fexpr__40297","cljs.core/ffirst","cljs.core/rest","p1__40292#","cljs.core/some","cljs.core._EQ_","cljs.core.comp","p1__40293#","cljs.core.filter","sablono.normalize/children","cljs.core/List","sablono.util/element?","cljs.core/count","G__40306","cljs.core/nil?","sablono.normalize/attrs?","cljs.core/map?","p__40315","vec__40319","seq__40320","first__40321","cljs.core/next","sablono.normalize/element","tag","content","vec__40336","id","tag-attrs","map-attrs","sablono.normalize.merge_with_class"],"sourcesContent":["(ns sablono.normalize\n  (:refer-clojure :exclude [class])\n  (:require #?(:clj [om.next.protocols :as p])\n            #?(:clj [om.dom :as dom])\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [sablono.util :as util]))\n\n(defn compact-map\n  \"Removes all map entries where the value of the entry is empty.\"\n  [m]\n  (when m\n    (into {}\n          (remove (fn [[_ v]] (empty? v)))\n          m)))\n\n(defn class-name\n  [x]\n  (cond\n    (string? x) x\n    (keyword? x) (name x)\n    :else x))\n\n(defn map-lookup?\n  \"Returns true if `x` is a map lookup form, otherwise false.\"\n  [x]\n  (and (list? x) (keyword? (first x))))\n\n(defn class\n  \"Normalize `class` into a vector of classes.\"\n  [class]\n  (cond\n    (nil? class)\n    nil\n\n    (map-lookup? class)\n    [class]\n\n    (list? class)\n    (if (symbol? (first class))\n      [class]\n      (map class-name class))\n\n    (symbol? class)\n    [class]\n\n    (string? class)\n    [class]\n\n    (keyword? class)\n    [(class-name class)]\n\n    (and (or (set? class)\n             (sequential? class))\n         (every? #(or (keyword? %)\n                      (string? %))\n                 class))\n    (mapv class-name class)\n\n    (and (or (set? class)\n             (sequential? class)))\n    (mapv class-name class)\n\n    :else class))\n\n(defn attributes\n  \"Normalize the `attrs` of an element.\"\n  [attrs]\n  (cond-> attrs\n    (:class attrs)\n    (update-in [:class] class)))\n\n(defn merge-with-class\n  \"Like clojure.core/merge but concatenate :class entries.\"\n  [& maps]\n  (let [maps (map attributes maps)\n        classes (mapcat :class maps)]\n    (when (seq maps)\n      (cond-> (reduce into {} maps)\n        (not (empty? classes))\n        (assoc :class (vec classes))))))\n\n(defn strip-css\n  \"Strip the # and . characters from the beginning of `s`.\"\n  [s]\n  (when s\n    (str/replace s #\"^[.#]\" \"\")))\n\n(defn match-tag\n  \"Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes.\"\n  [s]\n  (let [matches (re-seq #\"[#.]?[^#.]+\" (name s))\n        [tag-name names]\n        (cond (empty? matches)\n              (throw (ex-info (str \"Can't match CSS tag: \" s) {:tag s}))\n\n              (#{\\# \\.} (ffirst matches)) ;; shorthand for div\n              [\"div\" matches]\n\n              :default\n              [(first matches) (rest matches)])]\n    [tag-name\n     (strip-css (some #(when (= \\# (first %1)) %1)  names))\n     (into []\n           (comp (filter #(= \\. (first %1))) (map strip-css))\n           names)]))\n\n(defn children\n  \"Normalize the children of a HTML element.\"\n  [x]\n  (->> (cond\n         (nil? x)\n         '()\n         (string? x)\n         (list x)\n\n         (util/element? x)\n         (list x)\n         (and (list? x) (symbol? (first x)))\n         (list x)\n\n         (list? x)\n         x\n\n         (and (sequential? x)\n              (= (count x) 1)\n              (sequential? (first x))\n              (not (string? (first x)))\n              (not (util/element? (first x))))\n         (children (first x))\n\n         (sequential? x)\n         x\n\n         :else (list x))\n       (remove nil?)))\n\n(defn- attrs?\n  \"Returns true if `x` are the attributes of an HTML element,\n  otherwise false.\"\n  [x]\n  (and (map? x)\n       ;; Server rendered Om.next components are also maps. They\n       ;; should NOT be treated as HTML element attributes.\n       #?(:clj (and (not (instance? om.dom.Element x))\n                    (not (instance? om.next.protocols.IReactComponent x))\n                    (not (satisfies? p/IReactComponent x))))))\n\n(defn element\n  \"Ensure an element vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when-not (or (keyword? tag)\n                (symbol? tag)\n                (string? tag))\n    (throw (ex-info (str tag \" is not a valid element name.\") {:tag tag :content content})))\n  (let [[tag id class] (match-tag tag)\n        tag-attrs (compact-map {:id id :class class})\n        map-attrs (first content)]\n    (if (attrs? map-attrs)\n      [tag\n       (merge-with-class tag-attrs map-attrs)\n       (children (next content))]\n      [tag\n       (attributes tag-attrs)\n       (children content)])))\n"]}