{"version":3,"sources":["sablono/interpreter.cljc"],"mappings":"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","names":["sablono$interpreter$IInterpreter$interpret$dyn","x__4428__auto__","m__4429__auto__","sablono.interpreter/interpret","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","sablono.interpreter/IInterpreter","this","sablono.interpreter/update-state","component","next-props","property","value","on-change","goog.object/getValueByKeys","next-state","goog.object/extend","goog.object/set","sablono.interpreter/wrap-form-element","element","ctor","props","state","js/goog.bind","goog.object/get","js/React.Component","js/goog.inherits","x40424","event","temp__5735__auto__","handler","new-props","state-value","element-value","js/ReactDOM.findDOMNode","cljs.core.not_EQ_","js/React.createElement","sablono.interpreter/lazy-load-wrappers","sablono.interpreter/wrapped-textarea","sablono.interpreter/wrapped-input","sablono.interpreter/wrapped-checked","sablono.interpreter/wrapped-select","sablono.interpreter/controlled-input?","type","cljs.core/object?","G__40463","sablono.interpreter/element-class","G__40494","G__40496","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sablono.interpreter/create-element","seq40509","G__40510","cljs.core/first","cljs.core/next","G__40511","self__4723__auto__","children","cljs.core.apply","sablono.interpreter/attributes","attrs","js-attrs","cljs.core/clj->js","sablono.util/html-to-dom-attrs","class","cljs.core/array?","clojure.string.join","clojure.string/blank?","sablono.interpreter/interpret-seq","x","cljs.core.into","cljs.core.map","sablono.interpreter/element","vec__40528","cljs.core.nth","content","sablono.normalize/element","sablono.interpreter/interpret-vec","sablono.util/element?","cljs.core/PROTOCOL_SENTINEL","cljs.core/ChunkedCons","cljs.core/ChunkedSeq","cljs.core/Cons","cljs.core/LazySeq","cljs.core/List","cljs.core/Subvec","cljs.core/PersistentVector"],"sourcesContent":["(ns sablono.interpreter\n  (:require #?(:clj [om.dom :as dom])\n            #?(:cljs [goog.object :as object])\n            [clojure.string :as str]\n            [clojure.string :refer [blank? join]]\n            [sablono.normalize :as normalize]\n            [sablono.util :as util]))\n\n(defprotocol IInterpreter\n  (interpret [this] \"Interpret a Clojure data structure as a React fn call.\"))\n\n#?(:cljs (defn update-state\n           \"Updates the state of the wrapped input element.\"\n           [component next-props property value]\n           (let [on-change (object/getValueByKeys component \"state\" \"onChange\")\n                 next-state #js {}]\n             (object/extend next-state next-props #js {:onChange on-change})\n             (object/set next-state property value)\n             (.setState component next-state))))\n\n;; A hack to force input elements to always update itself immediately,\n;; without waiting for requestAnimationFrame.\n\n#?(:cljs\n   (defn wrap-form-element [element property]\n     (let [ctor (fn [props]\n                  (this-as this\n                    (set! (.-state this)\n                          (let [state #js {}]\n                            (->> #js {:onChange (goog.bind (object/get this \"onChange\") this)}\n                                 (object/extend state props))\n                            state))\n                    (.call js/React.Component this props)))]\n       (set! (.-displayName ctor) (str \"wrapped-\" element))\n       (goog.inherits ctor js/React.Component)\n       (specify! (.-prototype ctor)\n         Object\n         (onChange [this event]\n           (when-let [handler (.-onChange (.-props this))]\n             (handler event)\n             (update-state\n              this (.-props this) property\n              (object/getValueByKeys event \"target\" property))))\n\n         (componentWillReceiveProps [this new-props]\n           (let [state-value (object/getValueByKeys this \"state\" property)\n                 element-value (object/get (js/ReactDOM.findDOMNode this) property)]\n             ;; On IE, onChange event might come after actual value of\n             ;; an element have changed. We detect this and render\n             ;; element as-is, hoping that next onChange will\n             ;; eventually come and bring our modifications anyways.\n             ;; Ignoring this causes skipped letters in controlled\n             ;; components\n             ;; https://github.com/facebook/react/issues/7027\n             ;; https://github.com/reagent-project/reagent/issues/253\n             ;; https://github.com/tonsky/rum/issues/86\n             ;; TODO: Find a better solution, since this conflicts\n             ;; with controlled/uncontrolled inputs.\n             ;; https://github.com/r0man/sablono/issues/148\n             (if (not= state-value element-value)\n               (update-state this new-props property element-value)\n               (update-state this new-props property (object/get new-props property)))))\n\n         (render [this]\n           (js/React.createElement element (.-state this))))\n       ctor)))\n\n#?(:cljs (def wrapped-input))\n#?(:cljs (def wrapped-checked))\n#?(:cljs (def wrapped-select))\n#?(:cljs (def wrapped-textarea))\n\n#?(:cljs (defn lazy-load-wrappers []\n           (when-not wrapped-textarea\n             (set! wrapped-input (wrap-form-element \"input\" \"value\"))\n             (set! wrapped-checked (wrap-form-element \"input\" \"checked\"))\n             (set! wrapped-select (wrap-form-element \"select\" \"value\"))\n             (set! wrapped-textarea (wrap-form-element \"textarea\" \"value\")))))\n\n(defn ^boolean controlled-input?\n  \"Returns true if `type` and `props` are used a controlled input,\n  otherwise false.\"\n  [type props]\n  #?(:cljs (and (object? props)\n                (case type\n                  \"input\"\n                  (or (exists? (.-checked props))\n                      (exists? (.-value props)))\n                  \"select\"\n                  (exists? (.-value props))\n                  \"textarea\"\n                  (exists? (.-value props))\n                  false))))\n\n#?(:cljs\n   (defn element-class\n     \"Returns either `type` or a wrapped element for controlled\n     inputs.\"\n     [type props]\n     (if (controlled-input? type props)\n       (do (lazy-load-wrappers)\n           (case type\n             \"input\"\n             (case (and (object? props) (.-type props))\n               \"radio\" wrapped-checked\n               \"checkbox\" wrapped-checked\n               wrapped-input)\n             \"select\" wrapped-select\n             \"textarea\" wrapped-textarea\n             type))\n       type)))\n\n(defn create-element\n  \"Create a React element. Returns a JavaScript object when running\n  under ClojureScript, and a om.dom.Element record in Clojure.\"\n  [type props & children]\n  #?(:clj (dom/element\n           {:attrs props\n            :children children\n            :react-key nil\n            :tag type})\n     :cljs (apply js/React.createElement (element-class type props) props children)))\n\n(defn attributes [attrs]\n  #?(:clj (-> (util/html-to-dom-attrs attrs)\n              (update :className #(some->> % (str/join \" \"))))\n     :cljs (when-let [js-attrs (clj->js (util/html-to-dom-attrs attrs))]\n             (let [class (.-className js-attrs)\n                   class (if (array? class) (join \" \" class) class)]\n               (if (blank? class)\n                 (js-delete js-attrs \"className\")\n                 (set! (.-className js-attrs) class))\n               js-attrs))))\n\n(defn- interpret-seq\n  \"Eagerly interpret the seq `x` as HTML elements.\"\n  [x]\n  (into [] (map interpret) x))\n\n(defn element\n  \"Render an element vector as a HTML element.\"\n  [element]\n  (let [[type attrs content] (normalize/element element)]\n    (apply create-element type\n           (attributes attrs)\n           (interpret-seq content))))\n\n(defn- interpret-vec\n  \"Interpret the vector `x` as an HTML element or a the children of an\n  element.\"\n  [x]\n  (if (util/element? x)\n    (element x)\n    (interpret-seq x)))\n\n(extend-protocol IInterpreter\n\n  #?(:clj clojure.lang.ChunkedCons\n     :cljs cljs.core.ChunkedCons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentVector$ChunkedSeq\n     :cljs cljs.core.ChunkedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.Cons\n     :cljs cljs.core.Cons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.LazySeq\n     :cljs cljs.core.LazySeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentList\n     :cljs cljs.core.List)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.IndexedSeq\n     :cljs cljs.core.IndexedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.APersistentVector$SubVector\n     :cljs cljs.core.Subvec)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj Object :cljs default)\n  (interpret [this]\n    this)\n\n  nil\n  (interpret [this]\n    nil))\n"]}