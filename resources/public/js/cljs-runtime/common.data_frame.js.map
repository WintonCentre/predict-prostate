{"version":3,"sources":["common/data_frame.cljs"],"mappings":";AAcA,+BAAA,/BAAMA,sEAAYC;AAAlB,AACE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;SAAN,AAAAD,4CAAAD,WAAA,IAAA,hEAAQG;AAAR,AAAA,0FAAcD,EAAE,AAACE,4CAAIN,EAAEK;;;AAEzB,AAKA;;;;gCAAA,hCAAME,wEAGHP;AAHH,AAIE,kBAAAQ;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAL,4CAAAM,WAAA,IAAA,/DAAML;SAAN,AAAAD,4CAAAM,WAAA,IAAA,hEAAQJ;AAAR,AACE,IAAMK,IAAE,AAACC,gDAAQX,EAAEI;AAAnB,AAAA,0FACGA,EAAE,AAACQ,oDAAYF,EAAEL;;;AAExB,AAOA,8BAAA,sCAAAQ,pEAAME;AAAN,AAAA,IAAAD,aAAAD;QAAA,AAAAV,4CAAAW,WAAA,IAAA,/DACIV;SADJ,AAAAD,4CAAAW,WAAA,IAAA,hEACMT;AADN,AAAA,0FAEGD,EAAE,AAACY,mDAAWC,iBAAEZ;;AAEnB,AAKA,+BAAA,/BAAMa,sEACHC;AADH,AAEE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAjB,4CAAAkB,WAAA,IAAA,/DAAMjB;SAAN,AAAAD,4CAAAkB,WAAA,IAAA,hEAAQhB;AAAR,AAAA,0FACGD,EAAE,AAACE,4CAAI,WAAAgB;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAnB,4CAAAoB,WAAA,IAAA,/DAAMC;QAAN,AAAArB,4CAAAoB,WAAA,IAAA,/DAAQE;AAAR,AAAY,QAAGA,IAAED;GAAI,kDAAA,IAAA,tDAACE,0DAAc,AAACC,eAAKR,QAAQd;;;AAE9D,AAQA,gCAAA,hCAAMuB,wEAAa5B;AAAnB,AACE,kBAAA6B;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAA5B,4CAAA2B,WAAA,IAAA;SAAA,AAAA3B,4CAAA4B,WAAA,IAAA,hEAAOE;UAAP,AAAA9B,4CAAA4B,WAAA,IAAA,jEAAUG;IAAVF,aAAA,AAAA7B,4CAAA2B,WAAA,IAAA;SAAA,AAAA3B,4CAAA6B,WAAA,IAAA,hEAAgBG;UAAhB,AAAAhC,4CAAA6B,WAAA,IAAA,jEAAmBI;AAAnB,AAAA,0FAA2BH,GAAG,AAAC3B,4CAAIN,EAAEkC,IAAIE;;;AAE3C,AAKA","names":["common.data-frame/cell-apply","f","p__43926","vec__43927","cljs.core.nth","k","vs","cljs.core.map","common.data-frame/cell-update","p__43932","vec__43934","g","cljs.core.partial","cljs.core.map_indexed","p__43940","vec__43941","common.data-frame/cell-sums","cljs.core.reductions","cljs.core/+","common.data-frame/cell-diffs","initial","p__43948","vec__43949","p__43953","vec__43954","a","b","cljs.core.partition","cljs.core/cons","common.data-frame/cell-binary","p__43963","vec__43964","vec__43967","vec__43970","k1","vs1","k2","vs2"],"sourcesContent":["(ns common.data-frame)\n\n;;\n;; Implement a set of transducers which operate on data-frames. In this context a data-frame\n;; is a rectangular table of data in columns where each column is identified by a keyword.\n;;\n;; Example 1:\n;; (def df {:a [1 2 3] :b [4 5 6] :c [7 8 9] :d [10 11 12]})\n;;\n;; Example 2:\n;; A spreadsheet with keywords for column names\n;;\n\n\n(defn cell-apply [f]\n  (fn [[k vs]] [k (map f vs)]))\n\n(comment\n  (into {} (map (cell-apply inc)) {:a (range 10) :b (range 5 15)})\n  ;=> {:a (1 2 3 4 5 6 7 8 9 10), :b (6 7 8 9 10 11 12 13 14 15)}\n  )\n\n(defn cell-update \n  \"Update a cell at position k index with old value to a new value\n  given by (f k index old)\"\n  [f]\n  (fn [[k vs]]\n    (let [g (partial f k)]                                  ;(fn [index old] (f k index old))\n      [k (map-indexed g vs)])))\n\n(comment\n  (into {}\n    (map (cell-update (fn [k index old] (str k \"-\" index \"-\" old))))\n    {:a [1 2 3] :b [4 5 6]})\n  ;=> {:a (\":a-0-1\" \":a-1-2\" \":a-2-3\"), :b (\":b-0-4\" \":b-1-5\" \":b-2-6\")}\n  )\n\n(defn cell-sums\n  [[k vs]]\n  [k (reductions + vs)])\n\n(comment\n  (into {} (map cell-sums) '([:a [1 2 3]] [:b [4 5 6]] [:c [7 8 9]] [:d [10 11 12]]))\n  ;=> {:a (1 3 6), :b (4 9 15), :c (7 15 24), :d (10 21 33)}\n  )\n\n(defn cell-diffs\n  [initial]\n  (fn [[k vs]]\n    [k (map (fn [[a b]] (- b a)) (partition 2 1 (cons initial vs)))]))\n\n(comment\n  (into {} (map (cell-diffs 0)) '([:a [0 1 2 3]] [:b [1 6 5 4]] [:c [3 3 3 4]] [:d [0 -1 -2]]))\n  ;=> {:a (0 1 1 1), :b (1 5 -1 -1), :c (3 0 0 1), :d (0 -1 -1)}\n\n  (into {} (map (cell-diffs 1)) '([:a [0 1 2 3]] [:b [1 6 5 4]] [:c [3 3 3 4]] [:d [0 -1 -2]]))\n  ;=> {:a (-1 1 1 1), :b (0 5 -1 -1), :c (2 0 0 1), :d (-1 -1 -1)}\n  )\n\n(defn cell-binary [f]\n  (fn [[[k1 vs1] [k2 vs2]]] [k1 (map f vs1 vs2)]))\n\n(comment\n  (into {} (map (cell-binary +)) [[[:a (range 10)] [:b (range 5 15)]] [[:a (range 5 15)] [:b (range 10)]]])\n  )\n\n\n(comment\n\n  ;; compose transducers\n  (def xf (comp\n            (map (cell-apply inc))\n            (map cell-sums)\n            (map (cell-diffs 0))\n            (map (cell-apply dec))\n            ))\n  (into {} xf {:a (range 10) :b (range 5 15)})\n  ; {:a (0 1 2 3 4 5 6 7 8 9), :b (5 6 7 8 9 10 11 12 13 14)}\n\n  (def a (transduce xf conj {:a (range 10) :b (range 5 15)}))\n  (def r (eduction xf {:a (range 10) :b (range 5 15)}))\n\n  ;; The mapping transducer (mapping f) is equivalent to (map f)\n  ;; https://stackoverflow.com/questions/32822207/eduction-vs-transducer-composition\n  (defn mapping\n    ([f]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n          (rf result (f input)))))))\n\n  ;; experimenting with eduction\n\n  )\n\n"]}