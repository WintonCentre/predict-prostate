{"version":3,"sources":["predict_prostate/pages/root.cljs"],"mappings":";AAcA,AAAA,AAAMA;AAAN,AACE,AAAA,AAASC;;AAGX,AAAA,AAAMC;AAAN,AACE,AAAA,AAASD;;AAKX,AAAA,AAAME;AAAN,AACE,AAAA,AAACC,AAAmBC,AAA0BL;;AAC9C,AAAA,AAACI,AAAmBC,AAAyBH;;AAE/C,AAAA,AAAA,AAAKI,AAAwB,AAAKC;AAAL,AAEE,AAAA,AAAAC,AAAQ,AAAcH;AACpB,AAAI,AAAoB,AAAA,AAAaA;AACnC,AAACF;;AACD,AAAMM,AAAI,AAAA,AAAaJ;AAAvB,AACE,AAAA,AAAAK,AAAcD;AAAd,AAAmB,AAAI,AAAAC,AAAA,AAACC;AAAgC,AAACX;;AAAc,AAACE;;;;;AAC5E,AAACC;;;AAEHI;;AAE/B;;;AAAA,AAAAK,AAAA,AAAUS,AAEPE;AAFH,AAAA,AAAA,AAAAV,AAG0B,AAACc,AAAUC;AAHrC,AAAAd,AAAAD,AAAA,AAAA,AAGSW;AAHT,AAAAV,AAAAD,AAAA,AAAA,AAGcY;AAHd,AAAAX,AAAAD,AAAA,AAAA,AAGgBY;AAHhBZ,AAGsBa;AACdG,AAAK,AAAA,AAAO,AAACF,AAAUG;AAJ/B,AAAA,AAAAf,AAMK,AAAAgB,AAAMP;AAANO,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACQ,AAACG,AAAAA,AAAAA,AAAKX,AAAAA;;;AADd;AAES,AAACY,AAAAA,AAAAA,AAAMZ,AAAAA,AAAKG,AAAAA;;;AAFrB;AAGQ,AAACU,AAAAA,AAAAA,AAAKb,AAAAA;;;AAHd;AAIW,AAACc,AAAAA,AAAAA,AAAQd,AAAAA,AAAKG,AAAAA;;;AAJzB;AAKS,AAACY,AAAAA,AAAAA,AAAMf,AAAAA,AAAKG,AAAAA;;;AALrB;AAOa,AAACa,AAAAA,AAAAA,AAAUC,AAAAA;;;;AAPxB,AAAA,AAAAP,AAAA,AAAA,AAAAF;;;;AANL,AAAA,AAAAf,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAAH,AAAA,AAAAI,AAAAJ,AAAA,AAAA,AAAA,AAAAG,AAAAH,AAAA,AAAA,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAkBO,AAAahB;AAiB/B;;;AAAA,AAAAM,AAAA,AAAU6B;AAAV,AAAA,AAAA,AAAArB,AAGE,AAACC,AAAAA,AAAAA,AAAMmB,AAAAA;AAHT,AAAA;AAKA;;;AAAA,AAAA5B,AAAA,AAAU8B;AAAV,AAAA,AAAA,AAAAtB,AAGE,AAACC,AAAAA,AAAAA,AAAMsB,AAAAA;AAHT,AAAA","names":["predict-prostate.pages.root/before-print","predict-prostate.state.run-time/media-change","predict-prostate.pages.root/after-print","predict-prostate.pages.root/before-after-print","js/goog.object.set","js/window","predict-prostate.pages.root/media-watch","state","cljs.core/not","mql","p1__185439#","js/goog.object.get","rum.core/build-defc","vec__185441","cljs.core.nth","attrs185440","cljs.core.apply","js/React.createElement","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","predict-prostate.pages.root/root*","rum.core/reactive","ttt*","page","_","rt","rum.core/react","predict-prostate.state.run-time/route","lang","predict-prostate.state.run-time/t-state-cursor","G__185444","cljs.core/Keyword","js/Error","predict-prostate.pages.home/home","predict-prostate.pages.about/about","predict-prostate.pages.tool/tool","predict-prostate.pages.contact/contact","predict-prostate.pages.legal/legal","predict-prostate.pages.not-found/not-found","translations.root/ttt","predict-prostate.pages.root/root","predict-prostate.pages.root/edit-root","translations.root/ttt-edit"],"sourcesContent":["(ns predict-prostate.pages.root\n  (:require                                                 ;[org.martinklepsch.derivatives :refer [rum-derivatives]]\n   [rum.core :as rum]\n   [predict-prostate.state.run-time :refer [rtdb route media-change media-cursor t-state-cursor]]\n   [predict-prostate.pages.home :refer [home]]\n   [predict-prostate.pages.about :refer [about]]\n   [predict-prostate.pages.legal :refer [legal]]\n   [predict-prostate.pages.contact :refer [contact]]\n   [predict-prostate.pages.tool :refer [tool]]\n   [predict-prostate.pages.not-found :refer [not-found]]\n   [pubsub.feeds :refer [->Topic publish subscribe unsubscribe]]\n   [translations.root :refer [ttt ttt-edit]]\n   ))\n\n(defn before-print []\n  (publish media-change :print)\n  )\n\n(defn after-print []\n  (publish media-change :screen)\n  )\n\n;see https://www.tjvantoll.com/2012/06/15/detecting-print-requests-with-javascript/\n\n(defn before-after-print []\n  (js/goog.object.set js/window \"onbeforeprint\" before-print)\n  (js/goog.object.set js/window \"onafterprint\" after-print))\n\n(def media-watch {:did-mount (fn [state]\n                               ; chrome matchMedia is dodgy, and we detect it through its addEventListener prototype\n                               (if-not (.-oldBrowser js/window)\n                                 (if (.-addEventListener (.matchMedia js/window \"print\"))\n                                   (before-after-print)     ; chrome\n                                   (let [mql (.matchMedia js/window \"print\")]\n                                     (.addListener mql #(if (js/goog.object.get % \"matches\") (before-print) (after-print))))) ; firefox\n                                 (before-after-print)\n                                 )\n                               state)})\n\n(rum/defc root* < rum/reactive media-watch                   ;(rum-derivatives drv-spec)\n                 \"Root of site. All components are within this tree\"\n  [ttt*]\n  (let [[page _ _ :as rt] (rum/react route)\n        lang (:lang (rum/react t-state-cursor))]\n    [:div\n     (case page\n       :home (home ttt*) #_(home)\n       :about (about ttt* rt) #_(about rt)\n       :tool (tool ttt*)\n       :contact (contact ttt* rt) #_(contact rt)\n       :legal (legal ttt* rt) #_(legal rt)\n\n       :not-found (not-found ttt) ;; commented out in predict3...\n       ;[:div \"404\"]\n       )]))\n\n(rum/defc root                                              ;< rum/reactive media-watch\n  \"Root of site. All components are within this tree\"\n  []\n  (root* ttt))\n\n(rum/defc edit-root                                         ;< rum/reactive media-watch\n  \"Root of the translation editor site. All components are within this tree\"\n  []\n  (root* ttt-edit))\n\n\n\n;; (comment\n;;   (ns predict-prostate.pages.root\n;;     (:require                                               ;[org.martinklepsch.derivatives :refer [rum-derivatives]]\n;;       [rum.core :as rum]\n;;       [predict-prostate.state.run-time :refer [rtdb route]]\n;;       [predict-prostate.pages.home :refer [home]]\n;;       [predict-prostate.pages.about :refer [about]]\n;;       [predict-prostate.pages.patient :refer [patient]]\n;;       [predict-prostate.pages.clinician :refer [clinician]]\n;;       [predict-prostate.pages.tool :refer [tool]]\n;;       ;       [predict-prostate.pages.news :refer [news]]\n;;       [predict-prostate.pages.not-found :refer [not-found]]\n;;       ))\n\n\n;;   (rum/defc root < rum/reactive                             ;(rum-derivatives drv-spec)\n;;                    \"Root of site. All components are within this tree\"\n;;     []\n;;     (let [[page params query] (rum/react route)]\n;;       [:div\n;;        (case page\n;;          :home (home)\n;;          :about (about)\n;;          :patient (patient)\n;;          :clinician (clinician)\n;;          :tool (tool)\n;;          :not-found (not-found)\n;;          [:div \"404\"]\n;;          )])))\n\n"]}