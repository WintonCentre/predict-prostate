{"version":3,"sources":["predict_prostate/components/bs3_modal.cljs"],"mappings":"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","names":["predict-prostate.components.bs3-modal/some-text?","text","rum.core/build-defc","js/React.createElement","attrs166933","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","sablono.interpreter/create-element","predict-prostate.components.bs3-modal/editor-modal","rum.core/reactive","edit-m","rum.core/react","predict-prostate.state.run-time/edit-cursor","edit-key","old-text","new-text","submit","temp__5733__auto__","new-text*","predict-prostate.state.run-time/text-change","js/$","G__166956","fexpr__166955","predict-prostate.state.run-time/ttt-cursor","e","predict-prostate.state.run-time/new-text-change","rum.core/build-defcs","predict-prostate.components.bs3-modal/new-language-modal","rum.core.local","state","new-lang-ref","new-lang","cljs.core._EQ_","cljs.core/count","predict-prostate.state.run-time/add-language","cljs.core/reset!","vec__166971","seq__166972","cljs.core/seq","first__166973","cljs.core/first","cljs.core/next","attrs166978","attrs166977","predict-prostate.components.bs3-modal/top-modal","ttt","help-key","predict-prostate.state.run-time/help-key-cursor","help","predict_prostate.content_reader.section","help-header","help-content","help-text","cljs.core.into","cljs.core/cons","predict-prostate.state.run-time/help-key-change","predict-prostate.components.bs3-modal/cancel-or-print","js/print","G__166981","G__166982","graphics.simple-icons/icon","attrs166988","attrs166989","attrs166990","predict-prostate.components.bs3-modal/print-modal","and__4115__auto__","predict-prostate.state.run-time/print-cursor","predict-prostate.state.run-time/results-cursor","rum.core/with-key","predict-prostate.results.printable/results-in-print","predict-prostate.components.bs3-modal/settings-modal","predict-prostate.state.run-time/settings-change","predict-prostate.state.run-time/input-widget"],"sourcesContent":["(ns predict-prostate.components.bs3-modal\n  (:require [rum.core :as rum]\n            [predict-prostate.content-reader :refer [section]]\n            [predict-prostate.state.run-time :refer [help-key-cursor help-key-change settings-change input-widget settings-cursor print-cursor results-cursor edit-cursor text-change ttt-cursor new-text-change add-language]]\n            [predict-prostate.results.printable :refer [results-in-print]]\n            [pubsub.feeds :refer [publish]]\n            ;[interop.jsx :refer [jq$ jq$call]]\n            [graphics.simple-icons :as simple]))\n\n;; (defn hide\n;;   [element-id]\n;;   (jq$call element-id \"modal\" \"hide\"))\n\n(defn some-text?\n  [text]\n  (when (and (some? text) true #_(not= \"\" (str/trim text)))\n    text))\n\n(rum/defc editor-modal < rum/reactive                       ;(rum/local \"no text yet\" ::text-buffer)\n  []\n  (let [edit-m (rum/react edit-cursor)\n        edit-key (:edit-key edit-m)\n        old-text (:text edit-m)\n        new-text (:new-text edit-m)\n        submit (fn []\n                 (if-let [new-text* (some-text? new-text)]\n                   (publish text-change [edit-key new-text*])\n                   old-text)\n                 (.modal (js/$ \"#editorModal\") \"hide\"))]\n\n    [:#editorModal.modal.fade {:role        \"dialog\"\n                               :tab-index   -1\n                               :aria-hidden \"true\"}\n     [:.modal-dialog\n      [:.modal-content\n       [:.modal-header\n        [:button.close {:type                    \"button \"\n                        :on-click                submit\n                        :aria-hidden             true\n                        :dangerouslySetInnerHTML {:__html \"&times;\"}}]\n        [:h4.modal-title (str edit-key)]]\n       [:.modal-body\n        [:h5 \"English text\"]\n        old-text\n        [:hr]\n        [:h5 \"Last translation\"]\n        ((rum/react ttt-cursor) [edit-key])\n        [:hr]\n        [:h5 \"New translation\"]\n        [:textarea {:style     {:width \"100%\" :height \"100%\"}\n                    :value     (if (nil? new-text) (if (nil? old-text) \"\" old-text) new-text)\n                    :on-change (fn [e] (publish new-text-change [edit-key (.. e -currentTarget -value)]))}]]\n       [:.modal-footer\n        [:button.btn.btn-default {:type     \"button\"\n                                  :on-click submit}\n         \"Close\"]]]]]))\n\n(rum/defcs new-language-modal < rum/reactive (rum/local \"\" ::new-lang)\n  [state]\n  (let [new-lang-ref (::new-lang state)\n        new-lang (rum/react new-lang-ref)\n        submit #(when (= 2 (count new-lang))\n                  ;(println \"new language is\" new-lang (string? @new-lang-ref))\n                  (publish add-language [new-lang])\n                  (.modal (js/$ \"#newLanguageModal\") \"hide\"))]\n    [:#newLanguageModal.modal.fade {:role        \"dialog\"\n                                    :tab-index   -1\n                                    :aria-hidden \"true\"\n                                    ;:z-index 10000\n                                    }\n     [:.modal-dialog\n      [:.modal-content\n       [:.modal-header\n        [:button.close {:type                    \"button \"\n                        :on-click                submit\n                        :aria-hidden             true\n                        :dangerouslySetInnerHTML {:__html \"&times;\"}}]\n        [:h4.modal-title \"Add a new language\"]]\n       [:.modal-body\n        [:h5 \"Enter new language code: \"]\n        [:input {:value     new-lang\n                 :on-change (fn [e] (reset! new-lang-ref (.. e -currentTarget -value)))}]\n        [:p {:style {:color \"#bbb\"}} \"Use the 2-character ISO 639-1 code\"]]\n       [:.modal-footer\n        [:button.btn.btn-default {:type     \"button\"\n                                  :on-click #(.modal (js/$ \"#newLanguageModal\") \"hide\")}\n         \"Cancel\"]\n        [:button.btn.btn-default {:type     \"button\"\n                                  :on-click submit}\n         \"OK\"]]]]]))\n\n\n(rum/defc top-modal < rum/reactive\n                      \"Note that we are assuming the _single_ modal dialog is mounted on #topModal since we\n                      are using jQuery to locate it.\"\n  [ttt]\n  (let [help-key (rum/react help-key-cursor)\n        help (section ttt help-key)\n        [help-header & help-content] (if (seq help)\n                                       help\n                                       [\"help header\" [:p {:style {:color \"red\"}} \"add content for \" help-key]])\n        help-text (into [] (cons :div help-content))\n        ]\n\n    [:#topModal.modal.fade {:role        \"dialog\"\n                            ;:tabIndex -1\n                            :aria-hidden \"true\"}\n     [:.modal-dialog\n      [:.modal-content\n       [:.modal-header\n        [:button.close {:type                    \"button \"\n                        :on-click                #(publish help-key-change nil) ; #(hide \"#topModal\")\n                        :aria-hidden             true\n                        :dangerouslySetInnerHTML {:__html \"&times;\"}}]\n        [:h4.modal-title help-header]]\n       [:.modal-body help-text]\n       [:.modal-footer\n        [:button.btn.btn-default {:type     \"button\"\n                                  :on-click #(publish help-key-change nil) ;#(hide \"#topModal\")\n                                  }\n         \"Close\"]]]]]))\n\n\n\n(rum/defc cancel-or-print []\n  [:div.pull-right\n   [:button.btn.btn-default {:type \"button\"\n                             :on-click #(do\n                                          (.modal (js/$ \"#printModal\") \"hide\"))\n                             }\n    \"Cancel\"]\n   \" \"\n   [:button.btn.btn-primary {:type     \"button\"\n                             :on-click #(do (.modal (js/$ \"printModal\") \"hide\")\n                                            (js/print))\n                             }\n\n    (simple/icon {:family :fa} \"print\") \" Print\"]]\n  )\n\n\n(rum/defc print-modal < rum/reactive\n                        \"Note that we are assuming the _single_ modal dialog is mounted on #topModal since we\n                        are using jQuery to locate it.\"\n  [ttt]\n  [:div\n   [:#printModal.modal.fade {:role        \"dialog\"\n                             :tab-index   -1\n                             :aria-hidden \"true\"}\n    [:.modal-dialog.screen-only\n     [:.modal-content\n      [:.modal-header (cancel-or-print)]\n      [:.modal-body (when (and (rum/react print-cursor) (rum/react results-cursor))\n                      [:div\n                       (rum/with-key (results-in-print ttt) 2)])]\n      [:.modal-footer (cancel-or-print)]]]]\n   [:.print-only {::style {:margin \"0 20px\"}} (when (and (rum/react print-cursor) (rum/react results-cursor)) (results-in-print ttt))]])\n\n\n\n(rum/defc settings-modal < rum/reactive\n                           \"Note that we are assuming the _single_ modal dialog is mounted on #topModal since we\n                           are using jQuery to locate it.\"\n  []\n  [:#settingsModal.modal.fade {:role        \"dialog\"\n                               ;:tabIndex -1\n                               :aria-hidden \"true\"}\n   [:.modal-dialog\n    [:.modal-content\n     [:.modal-header\n      [:button.close {:type                    \"button \"\n                      :on-click                #(publish settings-change nil) ;(hide \"#settingsModal\")\n                      :aria-hidden             true\n                      :dangerouslySetInnerHTML {:__html \"&times;\"}}]\n      [:h4.modal-title \"Settings\"]]\n     [:.modal-body\n\n      [:p \"Choose a plot style for treatment benefit\"]\n      (input-widget :plot-style)\n\n      [:.modal-footer\n       [:button.btn.btn-default {:type     \"button\"\n                                 :on-click #(publish settings-change nil) ; #(hide \"#settingsModal\")\n                                 }\n        \"Close\"]]]]]])\n"]}