{"version":3,"sources":["wc_rum_lib/numeric_input.cljs"],"mappings":"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","names":["cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","wc-rum-lib.numeric-input/style","wc-rum-lib.numeric-input/error?","value","or__4212__auto__","cljs.core._EQ_","js/isNaN","wc-rum-lib.numeric-input/str-to-num","s","js/parseFloat","wc-rum-lib.numeric-input/epsilon","wc-rum-lib.numeric-input/near-integer?","n","js/Math.abs","js/Math.round","wc-rum-lib.numeric-input/trim-trailing-zero","temp__5751__auto__","vec__46972","cljs.core.nth","m","m1","cljs.core/re-matches","wc-rum-lib.numeric-input/at-precision","precision","js/Math.ceil","js/floor","js/Number","var_args","G__46976","wc-rum-lib.numeric-input/num-to-str","js/Error","wc_rum_lib.numeric_input.num_to_str","js/Math.floor","wc-rum-lib.numeric-input/validate-input","nmin","nmax","step","cljs.core/deref","cljs.core/fn?","val-1","val-2","val-3","wc-rum-lib.numeric-input/handle-inc","onChange","v","G__46993","wc-rum-lib.numeric-input/handle-typed-input","e","G__46999","wc-rum-lib.numeric-input/update-value","rum.core/build-defcs","p__47024","map__47029","cljs.core/--destructure-map","cljs.core.get","js/React.createElement","wc-rum-lib.numeric-input/inc-dec-button","rum.core/static","rum.core/reactive","state","cursor","increment","min","max","props","rum.core/react","rum.core/build-defc","p__47036","map__47037","vec__47038","p1__47035#","attrs47041","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/create-element","sablono.interpreter/interpret","wc-rum-lib.numeric-input/numeric-input","key","input-ref","error-color","color","good","bad","clojure.string.split","mutate","key-code","fexpr__47042","G__47043","cljs.core.assoc","G__47044","G__47045"],"sourcesContent":["(ns wc-rum-lib.numeric-input\n  (:refer-clojure :exclude [max min])\n  (:require [rum.core :as rum]\n            [clojure.string :refer [split trim starts-with?]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            #_[hashp.core]\n            ))\n\n(defstyle style\n  [\".numeric-input\" {:width      \"130px\"\n                     :tab-index  1\n                     :selectable true}\n   [\".incdec\"\n    [\".right\" {:border-top-right-radius    \"10px\"\n               :border-bottom-right-radius \"10px\"\n               :width                      \"36px\"}]\n    [\".left\" {:border-top-left-radius    \"10px\"\n              :border-bottom-left-radius \"10px\"\n              :width                     \"36px\"}]]])\n\n\n(defn error? [value] (or (nil? value) (= \"\" value) (js/isNaN value)))\n\n;;\n;; Numeric values are always stored in state as strings, but processed as numerics\n;;\n(defn str-to-num\n  \"convert str to num or to ##NaN if not possible\"\n  [s]\n  (js/parseFloat s))\n(comment\n  (str-to-num \"3.5\")                                        ;=> 3.5\n  (str-to-num 3.5)                                          ;=> 3.5\n  )\n\n(def epsilon 1e-8)\n\n(defn near-integer? [n]\n  (< (js/Math.abs (- n (js/Math.round n))) epsilon))\n\n(defn trim-trailing-zero [s]\n  (if-let [[m m1] (re-matches #\"(.*\\.\\d)\\d+\" s)]\n    m1 s))\n\n(defn at-precision [n precision]\n  (cond\n    (= 0 precision)\n    ; display as integer\n    (str (js/Math.ceil n))\n\n    (= 3 precision)\n    ; flexible display up to 3dp\n    (if (near-integer? n)\n      (str (js/floor n))\n      (-> n\n        (.toPrecision (js/Number. 3))\n        (trim-trailing-zero)))\n\n    (= 2 precision)\n    ; display with 2dp always\n    (.toFixed (js/Number. n) 2)\n\n    (= 1 precision)\n    ; display with 1dp always\n    (.toFixed (js/Number. n) 1)\n    )\n  )\n\n(defn num-to-str\n  ([n]\n   ; default to integer\n   (num-to-str n 0))\n  ([n precision]\n   (if (string? n)\n     (do\n       ;(println n \" returning unchanged string\")\n       n)\n     (if (js/isNaN n)\n       \"\"\n       (if (near-integer? n)\n         (str (js/Math.floor n))\n         (if precision\n           (do\n             ;(println \"num-to-str precision \" n precision)\n             (at-precision n precision))\n           (at-precision n 0))\n         #_(-> n\n             (.toPrecision (js/Number. 3))\n             (trim-trailing-zero)))))))\n\n; this can be global as there is only one input under focus at any one time\n;(def timer (atom nil))\n\n\n(comment\n  (validate-input \"\" 25 95 1) \" :0\"\n  (validate-input nil 25 95 1) \" :0\"\n  (validate-input ##NaN 25 95 1) \" :0\"\n  (validate-input \" \" 25 95 1) \" :0\"\n  (validate-input \"3\" 25 95 1) \"4:4\"\n  (validate-input \"8\" 25 95 1) \"9:9\"\n  (validate-input 8 25 95 1) \"9:9\"\n  (validate-input \":0\" 25 95 1) \" :0\"\n  (validate-input \" :0\" 25 95 1) \" :0\"\n  (validate-input \"4:4\" 25 95 1) \"5:5\"\n  (validate-input \"5:5\" 25 95 1) \"6:6\"\n  (validate-input \"24:24\" 25 95 1) 25\n  (validate-input \"96\" 25 95 1) \"97:97\"\n  (validate-input \"-1\" 25 95 1) \"0:0\"\n  (validate-input \"-2\" 25 95 1) \"-1:-1\"\n  )\n\n\n\n#_(defn validate-typed-input [value nmin nmax step]\n  (let [value (str-to-num value)\n        nmin (if (fn? nmin) @(nmin) nmin)\n        nmax (if (fn? nmax) @(nmax) nmax)                   ;(if (keyword? nmax) @(input-cursor nmax) nmax)\n        val-1 (if (js/isNaN value)                          ; is value blank? (Note: (= (str-to-num \"\") (str-to-num nil) ##NaN)\n                (if (pos? step)                             ; is it an increment?\n                  (dec nmin)                                ; yes - go to one less than minimum (we'll increment later)\n                  (if (neg? step)                           ; is it a decrement?\n                    (inc nmax)                              ; yes - got to one more than maximum (we'll decrement later)\n                    nmin                                    ; no ; TODO???\n                    ))\n                value)\n        val-2 val-1                                         ;(+ step val-1)                                ; do the increment\n        val-3 (if (< val-2 nmin)                            ; is it too small?\n                (str (num-to-str val-2) \":\" val-2)          ; yes\n                (if (> val-2 nmax)                          ; no; is it too big?\n                  (str (num-to-str val-2) \":\" val-2)        ; yes, return good and bad values, in colon separated string\n                  val-2))]                                  ; no\n    ;(println \"(validate \" value nmin nmax step \") = \" val-3)\n    #_(when (or (= val-3 35))\n      (js/alert (str \"tv \" value \" v1 \" val-1 \" v2 \" val-2 \" v3 \" val-3))) ; no\n    (if (js/isNaN value)                                    ; Case when user has deleted value using backspace.\n      \" :0\"                                                 ; and there is no input there.\n      val-3                                                 ; Otherwise return\n      )\n    ))\n\n#_(defn validate-button [value nmin nmax step]\n  (let [value (str-to-num value)\n        nmin (if (fn? nmin) @(nmin) nmin)\n        nmax (if (fn? nmax) @(nmax) nmax)                   ;(if (keyword? nmax) @(input-cursor nmax) nmax)\n        val-1 (if (js/isNaN value)                          ; is value blank?\n                (if (pos? step)                             ; is it an increment?\n                  (dec nmin)                                ; yes - go to one less than minimum (we'll increment later)\n                  (if (neg? step)                           ; is it a decrement?\n                    (inc nmax)                              ; yes - got to one more than maximum (we'll decrement later)\n                    nmin                                    ; no - todo: This inserts nmin into val-1\n                    ))\n                value)\n        val-2 (+ step val-1)                                ; do the increment\n\n        val-3 (if (< val-2 nmin)                            ; is it too small?\n                (str (num-to-str val-2) \":\" val-2)          ; yes\n                (if (> val-2 nmax)                          ; no; is it too big?\n                  (str (num-to-str val-2) \":\" val-2)        ; yes, return good and bad values, in colon separated string\n                  val-2))\n        ]\n    #_(when (or (= val-3 35))\n      (js/alert (str \"bv \" value \" v1 \" val-1 \" v2 \" val-2 \" v3 \" val-3))) ; no\n    (if (js/isNaN value)                                    ; Case when user has deleted value using backspace.\n      \" :0\"                                                 ; and there is no input there.\n      val-3                                                 ; Otherwise return\n      )))\n\n(defn validate-input [value nmin nmax step]\n  #_(js/console.log \"in value \" value)\n  #_(js/console.log \"nmin \" nmin)\n  #_(js/console.log \"nmax \" nmax)\n  #_(js/console.log \"step \" step)\n  (let [value (str-to-num value)\n        nmin (if (fn? nmin) @(nmin) nmin)\n        nmax (if (fn? nmax) @(nmax) nmax)                   ;(if (keyword? nmax) @(input-cursor nmax) nmax)\n        val-1 (if (js/isNaN value)                          ; is value blank?\n                (if (pos? step)                             ; is it an increment?\n                  (dec nmin)                                ; yes - go to one less than minimum (we'll increment later)\n                  (if (neg? step)                           ; is it a decrement?\n                    (inc nmax)                              ; yes - got to one more than maximum (we'll decrement later)\n                    nmin                                    ; no - check: This inserts nmin into val-1\n                    ))\n                value)\n        val-2 (+ step val-1)                                ; do the increment\n\n        val-3 (if (< val-2 nmin)                            ; is it too small?\n                (str (num-to-str val-2) \":\" val-2)          ; yes\n                (if (> val-2 nmax)                          ; no; is it too big?\n                  (str (num-to-str val-2) \":\" val-2)        ; yes, return good and bad values, in colon separated string\n                  val-2))\n        ]\n    #_(js/console.log \"out-value \" value)\n    (if (js/isNaN value)                                    ; Case when user has deleted value using backspace.\n      \" :0\"                                                 ; and there is no input there.\n      val-3                                                 ; Otherwise return\n      )))\n\n(defn handle-inc [value onChange nmin nmax precision step]\n  (let [v (validate-input value nmin nmax step)]\n    ;(js/console.log \"onChange \" v)\n    (onChange (num-to-str v #_(if (= v \" :0\") nmin v) precision))))\n\n\n(defn handle-typed-input [nmin nmax precision onChange e]\n  (let [value (.. (-> e .-target) -value)]\n    ;(.log js/console \"t:\" value)\n    (if (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" value)               ; todo: should this be d+ rather than d*?\n      (onChange (num-to-str (validate-input (str-to-num value) nmin nmax 0) precision))\n      (onChange \"\"))                                        ; todo: should this be nil or ##NaN?\n    ))\n(comment\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"6\")                       ;\"6\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"\")                        ;\"\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"0.7\")                        ;\"0.7\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \".7\")                        ;\".7\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"7.\")                        ;\"7.\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"a\")                       nil\n  )\n\n(defn update-value [value nmin nmax precision step onChange]\n  (handle-inc value onChange nmin nmax precision step))\n\n(rum/defcs inc-dec-button < rum/static rum/reactive         ;(rum/local nil ::timer)\n  [state\n   {:keys [cursor increment onChange min max nmin nmax precision]\n    :as   props}]\n  (let [value (str-to-num (rum/react cursor))]\n    [:span {:class-name \"incdec\"}\n     [:button {:class-name  (str (if (pos? increment) \"right\" \"left\") \" btn btn-default \")\n               :aria-hidden \"true\"\n               :disabled    (if (pos? increment)\n                              (if (>= value (str-to-num (if (fn? max) (rum/react (max)) max))) \"disabled\" nil)\n                              (if (<= value nmin) \"disabled\" nil))\n               :tab-index   -1\n               :on-click    #(update-value @cursor nmin nmax precision increment onChange)}\n      (if (pos? increment) \"+\" \"\u2013\")]]))\n\n\n\n(rum/defc numeric-input < rum/static rum/reactive           ;echo-update\n  [{:keys [key input-ref onChange min max error-color color precision] :or {error-color \"red\" color \"black\"} :as props}]\n\n   (let [[good bad] (split (rum/react input-ref) #\":\")\n        value (str-to-num good)\n        nmin (str-to-num (if (fn? min) (rum/react (min)) min))\n        nmax (str-to-num (if (fn? max) (rum/react (max)) max))\n         ;_ (js/console.log \"store \" (rum/react input-ref))\n\n        mutate (fn [e]\n                 #_(js/console.log \"nativeEvent \" e)\n                 #_(js/console.log \"inputType \" (.. e -nativeEvent -inputType))\n                 (handle-typed-input\n                   min\n                   max\n                   precision\n                   onChange e))]\n\n    [:div {:class       \"numeric-input\"\n           :style       {:min-width      \"100px\"\n                         :tab-index  1\n                         :selectable true}\n           :on-key-down #(let [key-code (.. % -nativeEvent -code)]\n                           (when (#{\"ArrowUp\" \"ArrowDown\"} key-code)\n                             (.preventDefault %))\n                           (update-value value nmin nmax precision\n                             (cond\n                               (= \"ArrowUp\" key-code) 1\n                               (= \"ArrowDown\" key-code) -1\n                               :else 0)\n                             onChange))}\n     [:.button-group\n      (inc-dec-button (assoc props :nmin nmin :nmax nmax :precision precision :increment -1 :cursor input-ref))\n      [:input\n       {:type      \"text\"\n        :value     good\n        :id        key\n        :on-click  mutate\n        :on-change mutate\n        :style     {:width            \"58px\" :height \"36px\" :font-size \"14px\"\n                    :border-top       \"2px solid #ddd\"\n                    :border-left      \"2px solid #ddd\"\n                    :background-color (if (js/isNaN value) \"#fff\" \"#CCEEF8\")\n                    :color            (if (nil? bad) color error-color)\n                    :padding          \"0 0 4px 0\"\n                    :text-align       \"center\"\n                    #_#_:font-weight \"bold\"}\n        }]\n      (inc-dec-button (assoc props :nmin nmin :nmax nmax :precision precision :increment 1 :cursor input-ref))\n      ]]\n\n    ))\n"]}