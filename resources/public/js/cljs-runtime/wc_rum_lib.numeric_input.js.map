{"version":3,"sources":["wc_rum_lib/numeric_input.cljs"],"mappings":"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","names":["cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","wc-rum-lib.numeric-input/style","wc-rum-lib.numeric-input/error?","value","or__4126__auto__","cljs.core._EQ_","js/isNaN","wc-rum-lib.numeric-input/str-to-num","s","js/parseFloat","wc-rum-lib.numeric-input/epsilon","wc-rum-lib.numeric-input/near-integer?","n","js/Math.abs","js/Math.round","wc-rum-lib.numeric-input/trim-trailing-zero","temp__5733__auto__","vec__48951","cljs.core.nth","m","m1","cljs.core/re-matches","wc-rum-lib.numeric-input/at-precision","precision","js/Math.ceil","js/floor","js/Number","var_args","G__48966","wc-rum-lib.numeric-input/num-to-str","js/Error","wc_rum_lib.numeric_input.num_to_str","js/Math.floor","wc-rum-lib.numeric-input/validate-input","nmin","nmax","step","cljs.core/deref","cljs.core/fn?","val-1","val-2","val-3","wc-rum-lib.numeric-input/handle-inc","onChange","v","G__48977","wc-rum-lib.numeric-input/handle-typed-input","e","G__48978","wc-rum-lib.numeric-input/update-value","rum.core/build-defcs","p__48985","map__48986","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","js/React.createElement","wc-rum-lib.numeric-input/inc-dec-button","rum.core/static","rum.core/reactive","state","cursor","increment","min","max","props","rum.core/react","rum.core/build-defc","p__48995","map__48997","vec__49000","p1__48991#","attrs49003","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/create-element","sablono.interpreter/interpret","wc-rum-lib.numeric-input/numeric-input","key","input-ref","error-color","color","good","bad","clojure.string.split","mutate","key-code","fexpr__49005","G__49006","cljs.core.assoc","G__49008","G__49010"],"sourcesContent":["(ns wc-rum-lib.numeric-input\n  (:refer-clojure :exclude [max min])\n  (:require [rum.core :as rum]\n            [clojure.string :refer [split trim starts-with?]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            #_[hashp.core]\n            ))\n\n(defstyle style\n  [\".numeric-input\" {:width      \"130px\"\n                     :tab-index  1\n                     :selectable true}\n   [\".incdec\"\n    [\".right\" {:border-top-right-radius    \"10px\"\n               :border-bottom-right-radius \"10px\"\n               :width                      \"36px\"}]\n    [\".left\" {:border-top-left-radius    \"10px\"\n              :border-bottom-left-radius \"10px\"\n              :width                     \"36px\"}]]])\n\n\n(defn error? [value] (or (nil? value) (= \"\" value) (js/isNaN value)))\n\n;;\n;; Numeric values are always stored in state as strings, but processed as numerics\n;;\n(defn str-to-num\n  \"convert str to num or to ##NaN if not possible\"\n  [s]\n  (js/parseFloat s))\n(comment\n  (str-to-num \"3.5\")                                        ;=> 3.5\n  (str-to-num 3.5)                                          ;=> 3.5\n  )\n\n(def epsilon 1e-8)\n\n(defn near-integer? [n]\n  (< (js/Math.abs (- n (js/Math.round n))) epsilon))\n\n(defn trim-trailing-zero [s]\n  (if-let [[m m1] (re-matches #\"(.*\\.\\d)\\d+\" s)]\n    m1 s))\n\n(defn at-precision [n precision]\n  (cond\n    (= 0 precision)\n    ; display as integer\n    (str (js/Math.ceil n))\n\n    (= 3 precision)\n    ; flexible display up to 3dp\n    (if (near-integer? n)\n      (str (js/floor n))\n      (-> n\n        (.toPrecision (js/Number. 3))\n        (trim-trailing-zero)))\n\n    (= 2 precision)\n    ; display with 2dp always\n    (.toFixed (js/Number. n) 2)\n\n    (= 1 precision)\n    ; display with 1dp always\n    (.toFixed (js/Number. n) 1)\n    )\n  )\n\n(defn num-to-str\n  ([n]\n   ; default to integer\n   (num-to-str n 0))\n  ([n precision]\n   (if (string? n)\n     (do\n       ;(println n \" returning unchanged string\")\n       n)\n     (if (js/isNaN n)\n       \"\"\n       (if (near-integer? n)\n         (str (js/Math.floor n))\n         (if precision\n           (do\n             ;(println \"num-to-str precision \" n precision)\n             (at-precision n precision))\n           (at-precision n 0))\n         #_(-> n\n             (.toPrecision (js/Number. 3))\n             (trim-trailing-zero)))))))\n\n; this can be global as there is only one input under focus at any one time\n;(def timer (atom nil))\n\n\n(comment\n  (validate-input \"\" 25 95 1) \" :0\"\n  (validate-input nil 25 95 1) \" :0\"\n  (validate-input ##NaN 25 95 1) \" :0\"\n  (validate-input \" \" 25 95 1) \" :0\"\n  (validate-input \"3\" 25 95 1) \"4:4\"\n  (validate-input \"8\" 25 95 1) \"9:9\"\n  (validate-input 8 25 95 1) \"9:9\"\n  (validate-input \":0\" 25 95 1) \" :0\"\n  (validate-input \" :0\" 25 95 1) \" :0\"\n  (validate-input \"4:4\" 25 95 1) \"5:5\"\n  (validate-input \"5:5\" 25 95 1) \"6:6\"\n  (validate-input \"24:24\" 25 95 1) 25\n  (validate-input \"96\" 25 95 1) \"97:97\"\n  (validate-input \"-1\" 25 95 1) \"0:0\"\n  (validate-input \"-2\" 25 95 1) \"-1:-1\"\n  )\n\n\n\n#_(defn validate-typed-input [value nmin nmax step]\n  (let [value (str-to-num value)\n        nmin (if (fn? nmin) @(nmin) nmin)\n        nmax (if (fn? nmax) @(nmax) nmax)                   ;(if (keyword? nmax) @(input-cursor nmax) nmax)\n        val-1 (if (js/isNaN value)                          ; is value blank? (Note: (= (str-to-num \"\") (str-to-num nil) ##NaN)\n                (if (pos? step)                             ; is it an increment?\n                  (dec nmin)                                ; yes - go to one less than minimum (we'll increment later)\n                  (if (neg? step)                           ; is it a decrement?\n                    (inc nmax)                              ; yes - got to one more than maximum (we'll decrement later)\n                    nmin                                    ; no ; TODO???\n                    ))\n                value)\n        val-2 val-1                                         ;(+ step val-1)                                ; do the increment\n        val-3 (if (< val-2 nmin)                            ; is it too small?\n                (str (num-to-str val-2) \":\" val-2)          ; yes\n                (if (> val-2 nmax)                          ; no; is it too big?\n                  (str (num-to-str val-2) \":\" val-2)        ; yes, return good and bad values, in colon separated string\n                  val-2))]                                  ; no\n    ;(println \"(validate \" value nmin nmax step \") = \" val-3)\n    #_(when (or (= val-3 35))\n      (js/alert (str \"tv \" value \" v1 \" val-1 \" v2 \" val-2 \" v3 \" val-3))) ; no\n    (if (js/isNaN value)                                    ; Case when user has deleted value using backspace.\n      \" :0\"                                                 ; and there is no input there.\n      val-3                                                 ; Otherwise return\n      )\n    ))\n\n#_(defn validate-button [value nmin nmax step]\n  (let [value (str-to-num value)\n        nmin (if (fn? nmin) @(nmin) nmin)\n        nmax (if (fn? nmax) @(nmax) nmax)                   ;(if (keyword? nmax) @(input-cursor nmax) nmax)\n        val-1 (if (js/isNaN value)                          ; is value blank?\n                (if (pos? step)                             ; is it an increment?\n                  (dec nmin)                                ; yes - go to one less than minimum (we'll increment later)\n                  (if (neg? step)                           ; is it a decrement?\n                    (inc nmax)                              ; yes - got to one more than maximum (we'll decrement later)\n                    nmin                                    ; no - todo: This inserts nmin into val-1\n                    ))\n                value)\n        val-2 (+ step val-1)                                ; do the increment\n\n        val-3 (if (< val-2 nmin)                            ; is it too small?\n                (str (num-to-str val-2) \":\" val-2)          ; yes\n                (if (> val-2 nmax)                          ; no; is it too big?\n                  (str (num-to-str val-2) \":\" val-2)        ; yes, return good and bad values, in colon separated string\n                  val-2))\n        ]\n    #_(when (or (= val-3 35))\n      (js/alert (str \"bv \" value \" v1 \" val-1 \" v2 \" val-2 \" v3 \" val-3))) ; no\n    (if (js/isNaN value)                                    ; Case when user has deleted value using backspace.\n      \" :0\"                                                 ; and there is no input there.\n      val-3                                                 ; Otherwise return\n      )))\n\n(defn validate-input [value nmin nmax step]\n  #_(js/console.log \"in value \" value)\n  #_(js/console.log \"nmin \" nmin)\n  #_(js/console.log \"nmax \" nmax)\n  #_(js/console.log \"step \" step)\n  (let [value (str-to-num value)\n        nmin (if (fn? nmin) @(nmin) nmin)\n        nmax (if (fn? nmax) @(nmax) nmax)                   ;(if (keyword? nmax) @(input-cursor nmax) nmax)\n        val-1 (if (js/isNaN value)                          ; is value blank?\n                (if (pos? step)                             ; is it an increment?\n                  (dec nmin)                                ; yes - go to one less than minimum (we'll increment later)\n                  (if (neg? step)                           ; is it a decrement?\n                    (inc nmax)                              ; yes - got to one more than maximum (we'll decrement later)\n                    nmin                                    ; no - check: This inserts nmin into val-1\n                    ))\n                value)\n        val-2 (+ step val-1)                                ; do the increment\n\n        val-3 (if (< val-2 nmin)                            ; is it too small?\n                (str (num-to-str val-2) \":\" val-2)          ; yes\n                (if (> val-2 nmax)                          ; no; is it too big?\n                  (str (num-to-str val-2) \":\" val-2)        ; yes, return good and bad values, in colon separated string\n                  val-2))\n        ]\n    #_(js/console.log \"out-value \" value)\n    (if (js/isNaN value)                                    ; Case when user has deleted value using backspace.\n      \" :0\"                                                 ; and there is no input there.\n      val-3                                                 ; Otherwise return\n      )))\n\n(defn handle-inc [value onChange nmin nmax precision step]\n  (let [v (validate-input value nmin nmax step)]\n    ;(js/console.log \"onChange \" v)\n    (onChange (num-to-str v #_(if (= v \" :0\") nmin v) precision))))\n\n\n(defn handle-typed-input [nmin nmax precision onChange e]\n  (let [value (.. (-> e .-target) -value)]\n    ;(.log js/console \"t:\" value)\n    (if (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" value)               ; todo: should this be d+ rather than d*?\n      (onChange (num-to-str (validate-input (str-to-num value) nmin nmax 0) precision))\n      (onChange \"\"))                                        ; todo: should this be nil or ##NaN?\n    ))\n(comment\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"6\")                       ;\"6\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"\")                        ;\"\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"0.7\")                        ;\"0.7\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \".7\")                        ;\".7\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"7.\")                        ;\"7.\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"a\")                       nil\n  )\n\n(defn update-value [value nmin nmax precision step onChange]\n  (handle-inc value onChange nmin nmax precision step))\n\n(rum/defcs inc-dec-button < rum/static rum/reactive         ;(rum/local nil ::timer)\n  [state\n   {:keys [cursor increment onChange min max nmin nmax precision]\n    :as   props}]\n  (let [value (str-to-num (rum/react cursor))]\n    [:span {:class-name \"incdec\"}\n     [:button {:class-name  (str (if (pos? increment) \"right\" \"left\") \" btn btn-default \")\n               :aria-hidden \"true\"\n               :disabled    (if (pos? increment)\n                              (if (>= value (str-to-num (if (fn? max) (rum/react (max)) max))) \"disabled\" nil)\n                              (if (<= value nmin) \"disabled\" nil))\n               :tab-index   -1\n               :on-click    #(update-value @cursor nmin nmax precision increment onChange)}\n      (if (pos? increment) \"+\" \"\u2013\")]]))\n\n\n\n(rum/defc numeric-input < rum/static rum/reactive           ;echo-update\n  [{:keys [key input-ref onChange min max error-color color precision] :or {error-color \"red\" color \"black\"} :as props}]\n\n   (let [[good bad] (split (rum/react input-ref) #\":\")\n        value (str-to-num good)\n        nmin (str-to-num (if (fn? min) (rum/react (min)) min))\n        nmax (str-to-num (if (fn? max) (rum/react (max)) max))\n         ;_ (js/console.log \"store \" (rum/react input-ref))\n\n        mutate (fn [e]\n                 #_(js/console.log \"nativeEvent \" e)\n                 #_(js/console.log \"inputType \" (.. e -nativeEvent -inputType))\n                 (handle-typed-input\n                   min\n                   max\n                   precision\n                   onChange e))]\n\n    [:div {:class       \"numeric-input\"\n           :style       {:min-width      \"100px\"\n                         :tab-index  1\n                         :selectable true}\n           :on-key-down #(let [key-code (.. % -nativeEvent -code)]\n                           (when (#{\"ArrowUp\" \"ArrowDown\"} key-code)\n                             (.preventDefault %))\n                           (update-value value nmin nmax precision\n                             (cond\n                               (= \"ArrowUp\" key-code) 1\n                               (= \"ArrowDown\" key-code) -1\n                               :else 0)\n                             onChange))}\n     [:.button-group\n      (inc-dec-button (assoc props :nmin nmin :nmax nmax :precision precision :increment -1 :cursor input-ref))\n      [:input\n       {:type      \"text\"\n        :value     good\n        :id        key\n        :on-click  mutate\n        :on-change mutate\n        :style     {:width            \"58px\" :height \"36px\" :font-size \"14px\"\n                    :border-top       \"2px solid #ddd\"\n                    :border-left      \"2px solid #ddd\"\n                    :background-color (if (js/isNaN value) \"#fff\" \"#CCEEF8\")\n                    :color            (if (nil? bad) color error-color)\n                    :padding          \"0 0 4px 0\"\n                    :text-align       \"center\"\n                    #_#_:font-weight \"bold\"}\n        }]\n      (inc-dec-button (assoc props :nmin nmin :nmax nmax :precision precision :increment 1 :cursor input-ref))\n      ]]\n\n    ))\n"]}