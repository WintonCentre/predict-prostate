{"version":3,"sources":["svg/scales.cljs"],"mappings":"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","names":["svg$scales$IScale$i__GT_o$dyn","x__4428__auto__","m__4429__auto__","svg.scales/i->o","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","svg$scales$IScale$o__GT_i$dyn","svg.scales/o->i","svg$scales$IScale$in$dyn","svg.scales/in","svg$scales$IScale$out$dyn","svg.scales/out","svg$scales$IScale$ticks$dyn","svg.scales/ticks","svg$scales$IScale$tick_format_specifier$dyn","svg.scales/tick-format-specifier","svg.scales/IScale","_","svg.scales/e10","Math/sqrt","svg.scales/e5","svg.scales/e2","svg.scales/tick-step","start","stop","preferred-count","step0","Math/abs","x__4214__auto__","y__4215__auto__","step1","Math/pow","Math/floor","Math/log","Math/LN10","error","step","svg.scales/preferred-ticks","cljs.core.range","Math/ceil","svg.scales/numeric-format-specifier","scale","abs-in","cljs.core.map","abs-step","cljs.core.apply","cljs.core.conj","cljs.core/max","svg.scales/unit-format-specifier","unit","svg.scales/percent-format-specifier","svg.scales/scale-ticks","a-scale","tick-count","this__4380__auto__","k__4381__auto__","this__4382__auto__","k48349","else__4383__auto__","G__48392","cljs.core/Keyword","in","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__48393","vec__48394","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__48348","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this48350","other48351","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__48397","cljs.core/keyword-identical?","expr__48398","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","svg.scales/Identity","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__48352","extmap__4419__auto__","G__48400","cljs.core/record?","svg.scales/->Identity","svg.scales/map->Identity","this","cljs.core/identity","p__48401","p__48402","vec__48403","vec__48406","svg.scales/linear","x1","x2","y1","y2","x","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","svg.scales/linear-nice","p__48431","p__48432","vec__48433","vec__48436","seq48429","G__48430","cljs.core/first","cljs.core/next","self__4723__auto__","input","p-count","n","cljs.core/not","or__4126__auto__","js/isNaN","svg.scales/nice-identity","svg.scales.linear_nice","k48457","G__48465","out","p__48466","vec__48467","G__48456","this48458","other48459","pred__48470","expr__48471","svg.scales/Linear","G__48464","G__48473","svg.scales/->Linear","svg.scales/map->Linear","svg.scales/nice-linear"],"sourcesContent":["(ns svg.scales)\n\n(defprotocol IScale\n  (i->o [_])\n  (o->i [_])\n  (in [_])\n  (out [_])\n  (ticks [_])\n  (tick-format-specifier [_])\n  )\n\n(def e10 (Math/sqrt 50))\n(def e5 (Math/sqrt 10))\n(def e2 (Math/sqrt 2))\n\n(defn tick-step [start stop preferred-count]\n  (let [step0 (/ (Math/abs (- stop start)) (max 0 preferred-count))\n        step1 (Math/pow 10 (Math/floor (/ (Math/log step0) Math/LN10)))\n        error (/ step0 step1)\n        step (cond\n               (>= error e10) (* 10 step1)\n               (>= error e5) (* 5 step1)\n               (>= error e2) (* 2 step1)\n               :else step1)]\n    (if (< stop start) (- step) step)))\n\n(defn preferred-ticks [start stop preferred-count]\n  (let [step (tick-step start stop preferred-count)]\n    (range\n      (* (Math/ceil (/ start step)) step)\n      (+ (* (Math/floor (/ stop step)) step) (/ step 2))\n      step)))\n\n(defn numeric-format-specifier [scale]\n  \"Provide a default format specifier for numeric scales\"\n  (let [abs-in (map Math/abs (:in scale))\n        abs-step (Math/abs (apply tick-step (conj (:in scale) (:tick-count scale))))]\n    (cond\n      (< abs-step 0.00001)\n      \"~(~3,1e~)\"\n      (> (apply max abs-in) 99999)\n      \"~(~,1e~)\"\n      (>= abs-step 1)\n      \"~d\"\n      (>= abs-step 0.1)\n      \"~1$\"\n      (>= abs-step 0.01)\n      \"~$\"\n      (>= abs-step 0.001)\n      \"~3$\"\n      (>= abs-step 0.0001)\n      \"~0,4f\"\n      :else\n      \"~0,5f\")))\n\n(defn unit-format-specifier [unit scale]\n  \"Provide a default format specifier for numeric scales with a unit\"\n  (str (numeric-format-specifier scale) unit))\n\n(defn percent-format-specifier [scale]\n  \"Provide a default format specifier for percentage scales\"\n  (unit-format-specifier \"%\" scale))\n\n(defn- scale-ticks [a-scale tick-count]\n  (apply preferred-ticks (conj (:in a-scale) tick-count)))\n\n(defrecord Identity [in tick-count]\n  IScale\n  (i->o [this] identity)\n  (o->i [this] identity)\n  (in [this] (:in this))\n  (out [this] (:in this))\n  (ticks [this] (scale-ticks this tick-count))\n  (tick-format-specifier [this] (numeric-format-specifier this)))\n\n(defn- linear [[x1 x2] [y1 y2]] (fn [x] (+ y1 (* (/ (- x x1) (- x2 x1)) (- y2 y1)))))\n\n(defn- linear-nice [[start stop :as input] & [p-count]]\n  \"Return a nice domain given a range and preferred interval count \"\n  (let [n (if (nil? p-count) 10 p-count)\n        step (tick-step start stop n)]\n    (if (not (or (js/isNaN step) (nil? step)))\n\n      (let [step (tick-step (* (Math/floor (/ start step)) step)\n                            (* (Math/ceil (/ stop step)) step)\n                            n)]\n        [(* (Math/floor (/ start step)) step)\n         (* (Math/ceil (/ stop step)) step)])\n\n      input)))\n\n(defn nice-identity [in tick-count]\n  (->Identity (linear-nice in tick-count) tick-count))\n\n(defrecord Linear [in out tick-count]\n  IScale\n  (i->o [this] (linear (:in this) (:out this)))\n  (o->i [this] (linear (:out this) (:in this)))\n  (in [this] (:in this))\n  (out [this] (:out this))\n  (ticks [this] (scale-ticks this tick-count))\n  (tick-format-specifier [this] (numeric-format-specifier this)))\n\n(defn nice-linear [in out tick-count]\n  (->Linear (linear-nice in tick-count) out tick-count))\n\n(comment\n\n  (def lin (->Linear [0 100] [0 10] 10))\n  ((i->o lin) 50)\n  ((i->o lin) 200)\n  (in lin)\n  )"]}