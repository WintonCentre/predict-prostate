{"version":3,"sources":["predict_prostate/components/helpful_form_groups.cljs"],"mappings":";AAWA,AAAA,AAAAA,AAAA,AAAAC,AAAUU,AAAqFQ;AAA/F,AAAA,AAAAjB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAwFgB;AAAxF,AAAAZ,AAAAJ,AAAA,AAA2DY;AAA3D,AAAAR,AAAAJ,AAAA,AAAiEa;AAAjE,AAAAT,AAAAJ,AAAA,AAAqEc;AAArE,AAAAV,AAAAJ,AAAA,AAA2Ee;AAA3E,AAAA,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AACgBM,AAAcA,AACd,AAAA,AAAkB,AAAA,AAAA,AAAIC,AAQlC,AAAA,AAAMC,AAAQ,AAAAG,AAAA,AAAA,AAA6BH;AAA7B,AAAA,AAAAG,AAAAA,AAACC,AAAAA,AAAAA;AAVnB,AAAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAUI,AAK8B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACa,AAEM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAACC,AAAE,AAACC,AAAU,AAACC,AAAaV,AACzC,AAACW,AAAKX,AAC/B,AAACY,AAAIb,AAAO,AAACA,AAAAA,AAAAA,AAAOA,AAWPK;AA9BtB,AAAA,AAA0BP,AAAWC;AAmCrC,AAAA,AAAAb,AAAA,AAAA4B,AAAUE;AAAV,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAAA,AAA2EX;AAA3E,AAAAZ,AAAAuB,AAAA,AAA4Df;AAA5D,AAAAR,AAAAuB,AAAA,AAAkEd;AAAlE,AAAA,AAAA,AAAAN,AACE,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAyB,AAACE,AAAYnB,AACbA,AACA,AAAA,AAAID,AAAM,AAAA,AAAA,AAACqB,AAAQ,AAACC,AAAWtB,AAC/B,AAACuB,AAAO,AAACb,AAAU,AAACC,AAAaV;AAH1DkB,AAIe,AAACK,AAAavB;AAJ7B,AAAA,AAAAiB,AAAAC,AAAAD,AAAAC,AAACtB,AAAAA,AAAAA;;AADH,AAAA,AAAuBE,AAAakB","names":["rum.core/build-defc","p__159827","map__159828","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","sablono.interpreter/attributes","predict-prostate.components.helpful-form-groups/helpful-input","rum.core/static","rum.core/reactive","label","key","error","help-id","props","children","G__159835","predict-prostate.components.button/small-help-button","cljs.core.merge","cljs.core._EQ_","rum.core/react","predict-prostate.state.run-time/input-cursor","cljs.core/name","cljs.core/fn?","p__159836","map__159837","predict-prostate.components.helpful-form-groups/form-entry","predict-prostate.mixins/active-monitor","G__159839","G__159840","predict-prostate.state.run-time/input-label","clojure.string/replace","clojure.string/lower-case","predict-prostate.state.run-time/error?","predict-prostate.state.run-time/input-widget"],"sourcesContent":["(ns predict-prostate.components.helpful-form-groups\n  (:require [clojure.string :as str :refer [replace lower-case index-of]]\n            [rum.core :as rum]\n            [predict-prostate.components.select :refer [picker]]\n            [predict-prostate.state.run-time :refer [input-cursor input-change input-widget input-label error? error-by-key?]]\n            [predict-prostate.mixins :refer [active-monitor]]\n            [predict-prostate.components.button :refer [small-help-button]]\n    ;[predict-prostate.results.util :refer [error? error-by-key?]]\n            [pubsub.feeds :refer [publish]]\n            ))\n\n(rum/defc helpful-input < rum/static rum/reactive [{:keys [label key error help-id] :as props} children]\n  [:div {:key   key :data-key key\n         :class (str \"form-group\" (if error \" has-error\" \"\"))\n         :style {:vertical-align \"top\"\n                 :width          \"100%\"\n                 :display        \"inline-block\"}}\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :width          \"30px\"\n                  :vertical-align \"middle\"}}\n    (when help-id (small-help-button {:help-id help-id}))]\n\n   [:div {:style {:display        \"inline-block\"\n                  :vertical-align \"middle\"\n                  :width          \"100px\"}}\n    [:label.control-label {:style (merge {:textAlign \"left\"\n                                          :padding   \"1px 5px\"}\n                                         (when (= (rum/react (input-cursor key)) :disabled) {:color \"#CCC\"}))\n                           :for   (name key)}\n     (if (fn? label) (label) label)]]\n\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :text-align     \"left\"\n                  :width          \"auto\"                    ;\"calc(100% - 150px)\"\n                  :vertical-align \"middle\"\n                  }}\n    [:div {:style {:padding-left   0\n                   :display        \"inline-block\"\n                   :vertical-align \"middle\"\n                   }} children]]])\n\n; todo: remove label parameters and use (input-label key) instead\n; This allows us to use different widgets and different labels in different models\n\n(rum/defc form-entry < rum/reactive active-monitor [{:keys [label key] :as props}]\n  (helpful-input {:label   (input-label key)                ;label\n                  :key     key\n                  :help-id (if label (replace (lower-case label) \" \" \"-\"))\n                  :error   (error? (rum/react (input-cursor key)))}\n                 (input-widget key)))\n\n\n\n"]}