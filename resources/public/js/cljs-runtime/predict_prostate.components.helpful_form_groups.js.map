{"version":3,"sources":["predict_prostate/components/helpful_form_groups.cljs"],"mappings":";AAaA,gEAAA,AAAAA,oBAAA,WAAAC,/FAAUQ,wGAAyFS;AAAnG,AAAA,IAAAhB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAA4Fe;UAA5F,AAAAb,4CAAAF,eAAA,jEAA2DU;YAA3D,AAAAR,4CAAAF,eAAA,nEAA+DW;UAA/D,AAAAT,4CAAAF,eAAA,jEAAqEY;YAArE,AAAAV,4CAAAF,eAAA,nEAAyEa;cAAzE,AAAAX,4CAAAF,eAAA,rEAA+Ec;AAA/E,AAAA,AAAA,OAAAX,oBAAA,MAAA,wCAAA,mBAAA,gBAAA,mBAAA,+BAAA,AAAAC,0BAAA,gKAAA,AAAAD,oBAAA,MAAA,WAAA,aAAA,8BAAA,iBAAA,yBAAA,aAAA,AAAAE,rbACgBO,iBAAcA,gNACd,CAAA,aAAkB,yBAAA,aAAA,pBAAIC,kNAQlC,2BAAA,TAAMC,SAAQ,iBAAAG,WAAA,2CAAA,4DAA6BH;AAA7B,AAAA,gLAAAG,2EAAAA,nPAACC,qFAAAA,+FAAAA;aAVnB,AAAAf,oBAAA,MAAA,WAAA,aAAA,iCAAA,mBAAA,YAAA,AAAAA,oBAAA,QAAA,WAAA,AAAAG,ioBAAA,kDAAA,AAAAD,mGAAA,AAAAF,oBAAA,MAAA,WAAA,aAAA,8BAAA,qBAAA,iBAAA,yBAAA,aAAA,AAAAA,oBAAA,MAAA,WAAA,iBAAA,gBAAA,iCAAA,aAAA,AAAAE,vsCAUI,gMAK8B,uGAAA,2CAAA,+DAAA,OAAA,2DAAA,nRAACc,qSAEM,iLAAA,AAAA,2CAAA,uDAAA,eAAA,hSAAM,+GAAA,/GAACC,6CAAE,AAACC,eAAU,AAACC,6CAAaV,8OACzC,AAACW,eAAKX,qCACnC,gDAAA,hDAACY,4CAAWd,WAAWE,IAAID,wTAWVK;GA9BtB,8HAAA,3CAA0BR,iBAAWC;AAmCrC,6DAAA,AAAAX,oBAAA,WAAA2B,5FAAUE;AAAV,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAzB,4BAAAyB;UAAA,AAAAxB,4CAAAwB,eAAA,jEAA4DhB;YAA5D,AAAAR,4CAAAwB,eAAA,nEAAgEf;UAAhE,AAAAT,4CAAAwB,eAAA,jEAAsEd;AAAtE,AAAA,AAAA,OAAAP,8BACE,iBAAAwB,WAAA,2CAAA,0IAAA,wGAAA,wDAAA,4JAAA,nZAAyB,kBAAInB,KAAIA,IAAI,AAACW,eAAUU,oGACvB,AAACC,4CAAYpB,yDACbA,gEACA,0FAAA,xEAAID,OAAM,wDAAA,IAAA,5DAACsB,uBAAQ,AAACC,0BAAWvB,6EAC/B,AAACwB,6CAAO,AAACd,eAAU,AAACC,6CAAaV;IAJ1DkB,WAKe,AAACM,iDAAc1B,IAAIE;AALlC,AAAA,kMAAAiB,SAAAC,oFAAAD,SAAAC,hSAACvB,8FAAAA,iHAAAA;;GADH,oJAAA,jEAAuBE,kBAAamB","names":["rum.core/build-defc","p__47130","map__47131","cljs.core/--destructure-map","cljs.core.get","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","sablono.interpreter/attributes","predict-prostate.components.helpful-form-groups/helpful-input","rum.core/static","rum.core/reactive","ttt","label","key","error","help-id","props","children","G__47132","predict-prostate.components.button/small-help-button","cljs.core.merge","cljs.core._EQ_","rum.core/react","predict-prostate.state.run-time/input-cursor","cljs.core/name","predict-prostate.components.util/widget-ttt","p__47133","map__47134","predict-prostate.components.helpful-form-groups/form-entry","predict-prostate.mixins/active-monitor","G__47135","G__47136","predict-prostate.state.run-time/ttt-cursor","predict-prostate.state.run-time/input-label","clojure.string/replace","clojure.string/lower-case","predict-prostate.state.run-time/error?","predict-prostate.state.load-config/render-widget"],"sourcesContent":["(ns predict-prostate.components.helpful-form-groups\n  (:require [clojure.string :as str :refer [replace lower-case index-of]]\n            [rum.core :as rum]\n            [predict-prostate.components.select :refer [picker]]\n            [predict-prostate.state.run-time :refer [input-cursor input-change input-widget input-label error? error-by-key? ttt-cursor]]\n            [predict-prostate.mixins :refer [active-monitor]]\n            [predict-prostate.components.button :refer [small-help-button]]\n            [predict-prostate.components.util :refer [widget-ttt]]\n            [predict-prostate.state.load-config :refer [render-widget]]\n    ;[predict-prostate.results.util :refer [error? error-by-key?]]\n            [pubsub.feeds :refer [publish]]\n            ))\n\n(rum/defc helpful-input < rum/static rum/reactive [{:keys [ttt label key error help-id] :as props} children]\n  [:div {:key   key :data-key key\n         :class (str \"form-group\" (if error \" has-error\" \"\"))\n         :style {:vertical-align \"top\"\n                 :width          \"100%\"\n                 :display        \"inline-block\"}}\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :width          \"30px\"\n                  :vertical-align \"middle\"}}\n    (when help-id (small-help-button {:help-id help-id}))]\n\n   [:div {:style {:display        \"inline-block\"\n                  :vertical-align \"middle\"\n                  :width          \"100px\"}}\n    [:label.control-label {:style (merge {:textAlign \"left\"\n                                          :padding   \"1px 5px\"}\n                                         (when (= (rum/react (input-cursor key)) :disabled) {:color \"#CCC\"}))\n                           :for   (name key)}\n     (widget-ttt ttt \"help\" key label) #_(if (fn? label) (label) label)]]\n\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :text-align     \"left\"\n                  :width          \"auto\"                    ;\"calc(100% - 150px)\"\n                  :vertical-align \"middle\"\n                  }}\n    [:div {:style {:padding-left   0\n                   :display        \"inline-block\"\n                   :vertical-align \"middle\"\n                   }} children]]])\n\n; todo: remove label parameters and use (input-label key) instead\n; This allows us to use different widgets and different labels in different models\n\n(rum/defc form-entry < rum/reactive active-monitor [{:keys [ttt label key]}]\n  (helpful-input {:ttt     (if ttt ttt (rum/react ttt-cursor))\n                  :label   (input-label key)                ;label\n                  :key     key\n                  :help-id (if label (replace (lower-case label) \" \" \"-\"))\n                  :error   (error? (rum/react (input-cursor key)))}\n                 (render-widget ttt key) #_(input-widget key)))\n\n\n\n"]}