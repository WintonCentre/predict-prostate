{"version":3,"sources":["predict_prostate/components/helpful_form_groups.cljs"],"mappings":";AAaA,gEAAA,AAAAA,oBAAAC,oBAAA,WAAAC,nHAAUQ,4HAAyFS;AAAnG,AAAA,IAAAhB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAA4Fe;UAA5F,AAAAb,4CAAAF,eAAA,jEAA2DU;YAA3D,AAAAR,4CAAAF,eAAA,nEAA+DW;UAA/D,AAAAT,4CAAAF,eAAA,jEAAqEY;YAArE,AAAAV,4CAAAF,eAAA,nEAAyEa;cAAzE,AAAAX,4CAAAF,eAAA,rEAA+Ec;AAA/E,AAAA,AAAA,OAAAX,6BAAA,MAAA,kCAAA,iBAAA,cAAA,iBAAA,4BAAA,AAAAC,2BAAA,+JAAA,CAAA,AAAAD,6BAAA,MAAA,SAAA,WAAA,4BAAA,eAAA,uBAAA,WAAA,CAAA,2BAAA,6KAAA,QAAA,AAAAA,6BAAA,MAAA,SAAA,WAAA,+BAAA,iBAAA,UAAA,CAAA,AAAAA,6BAAA,QAAA,SAAA,AAAAE,stBAAA,+CAAA,CAAA,AAAAC,sGAAA,AAAAH,6BAAA,MAAA,SAAA,WAAA,4BAAA,mBAAA,eAAA,uBAAA,WAAA,CAAA,AAAAA,6BAAA,MAAA,SAAA,eAAA,cAAA,+BAAA,WAAA,CAAA,AAAAG,/4DACgBM,eAAcA,sMACd,CAAA,aAAkB,yBAAA,aAAA,pBAAIC,oMAQ5BC,SAAQ,qDAAA,2CAAA,hGAACG,4JAA4BH,iOAKb,uGAAA,2CAAA,+DAAA,OAAA,2DAAA,UAAA,iEAAA,9VAACI,mXAGM,iLAAA,AAAA,2CAAA,uDAAA,eAAA,hSAAM,+GAAA,/GAACC,6CAAE,AAACC,eAAU,AAACC,6CAAaT,0OACzC,AAACU,eAAKV,sCACnC,gDAAA,hDAACW,4CAAWb,WAAWE,IAAID,uTAWVK;GA/BtB,8HAAA,3CAA0BR,iBAAWC;AAoCrC,6DAAA,AAAAZ,oBAAAC,oBAAA,WAAA0B,hHAAUE;AAAV,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAxB,4BAAAwB;UAAA,AAAAvB,4CAAAuB,eAAA,jEAA4Df;YAA5D,AAAAR,4CAAAuB,eAAA,nEAAgEd;UAAhE,AAAAT,4CAAAuB,eAAA,jEAAsEb;AAAtE,AAAA,AACE,qEAAA,2CAAA,0IAAA,wGAAA,wDAAA,4JAAA,/iBAACL,4JAAwB,kBAAIG,KAAIA,IAAI,AAACU,eAAUQ,oGACvB,AAACC,4CAAYjB,yDACbA,gEACA,0FAAA,xEAAID,OAAM,wDAAA,IAAA,5DAACmB,uBAAQ,AAACC,0BAAWpB,6EAC/B,AAACqB,6CAAO,AAACZ,eAAU,AAACC,6CAAaT,eAC3C,AAACqB,iDAAcvB,IAAIE;GANpC,oJAAA,jEAAuBH,kBAAakB","names":["rum.core/lazy-build","rum.core/build-defc","p__43445","map__43446","cljs.core/--destructure-map","cljs.core.get","daiquiri.core/create-element","daiquiri.util/join-classes","daiquiri.interpreter/element-attributes","daiquiri.interpreter/interpret","predict-prostate.components.helpful-form-groups/helpful-input","rum.core/static","rum.core/reactive","ttt","label","key","error","help-id","props","children","predict-prostate.components.button/small-help-button","cljs.core.merge","cljs.core._EQ_","rum.core/react","predict-prostate.state.run-time/input-cursor","cljs.core/name","predict-prostate.components.util/widget-ttt","p__43494","map__43495","predict-prostate.components.helpful-form-groups/form-entry","predict-prostate.mixins/active-monitor","predict-prostate.state.run-time/ttt-cursor","predict-prostate.state.run-time/input-label","clojure.string/replace","clojure.string/lower-case","predict-prostate.state.run-time/error?","predict-prostate.state.load-config/render-widget"],"sourcesContent":["(ns predict-prostate.components.helpful-form-groups\n  (:require [clojure.string :as str :refer [replace lower-case index-of]]\n            [rum.core :as rum]\n            [predict-prostate.components.select :refer [picker]]\n            [predict-prostate.state.run-time :refer [input-cursor input-change input-widget input-label error? error-by-key? ttt-cursor]]\n            [predict-prostate.mixins :refer [active-monitor]]\n            [predict-prostate.components.button :refer [small-help-button]]\n            [predict-prostate.components.util :refer [widget-ttt]]\n            [predict-prostate.state.load-config :refer [render-widget]]\n    ;[predict-prostate.results.util :refer [error? error-by-key?]]\n            [pubsub.feeds :refer [publish]]\n            ))\n\n(rum/defc helpful-input < rum/static rum/reactive [{:keys [ttt label key error help-id] :as props} children]\n  [:div {:key   key :data-key key\n         :class (str \"form-group\" (if error \" has-error\" \"\"))\n         :style {:vertical-align \"top\"\n                 :width          \"100%\"\n                 :display        \"inline-block\"}}\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :width          \"30px\"\n                  :vertical-align \"middle\"}}\n    (when help-id (small-help-button {:help-id help-id}))]\n\n   [:div {:style {:display        \"inline-block\"\n                  :vertical-align \"middle\"\n                  :width          \"100px\"}}\n    [:label.control-label {:style (merge {:textAlign \"left\"\n                                          :padding   \"1px 5px\"\n                                          :word-break \"break-word\"}\n                                         (when (= (rum/react (input-cursor key)) :disabled) {:color \"#CCC\"}))\n                           :for   (name key)}\n     (widget-ttt ttt \"help\" key label) #_(if (fn? label) (label) label)]]\n\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :text-align     \"left\"\n                  :width          \"auto\"                    ;\"calc(100% - 150px)\"\n                  :vertical-align \"middle\"\n                  }}\n    [:div {:style {:padding-left   0\n                   :display        \"inline-block\"\n                   :vertical-align \"middle\"\n                   }} children]]])\n\n; todo: remove label parameters and use (input-label key) instead\n; This allows us to use different widgets and different labels in different models\n\n(rum/defc form-entry < rum/reactive active-monitor [{:keys [ttt label key]}]\n  (helpful-input {:ttt     (if ttt ttt (rum/react ttt-cursor))\n                  :label   (input-label key)                ;label\n                  :key     key\n                  :help-id (if label (replace (lower-case label) \" \" \"-\"))\n                  :error   (error? (rum/react (input-cursor key)))}\n                 (render-widget ttt key) #_(input-widget key)))\n\n\n\n"]}