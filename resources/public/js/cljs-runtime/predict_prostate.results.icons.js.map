{"version":3,"sources":["predict_prostate/results/icons.cljs"],"mappings":"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","names":["predict-prostate.results.icons/round","js/Math.round","predict-prostate.results.icons/br-deaths-fill","predict-prostate.results.icons/oth-deaths-fill","predict-prostate.results.icons/set-default","key","state","default","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","predict-prostate.results.icons/color-picker","fill-counts","cum-counts","n","cljs.core.get_in","rum.core/lazy-build","rum.core/build-defc","js/Error","daiquiri.core/create-element","cljs.core.into_array","iter__4611__auto__","s__48065","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4607__auto__","s__48067","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__48069","cljs.core/chunk-buffer","i__48068","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48066","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4608__auto__","cljs.core.concat","iter__48064","predict-prostate.results.icons/placed-icons","cljs.core._EQ_","cljs.core.reduce","cljs.core/+","cljs.core.mapv","cljs.core/second","cljs.core.into","cljs.core.reductions","y","cljs.core.range","x","style","shape","predict-prostate.components.primitives/pic","predict-prostate.components.primitives/pic-dead","rum.core/with-key","predict-prostate.results.icons/add-s","predict-prostate.results.icons/plural","s","p","predict-prostate.results.icons/extract-data","results","radical?","p1__48137#","p2__48139#","one-sum","radical-survival","cljs.core.map","conservative-survival","p1__48141#","p2__48142#","p1__48143#","p__48172","map__48174","cljs.core/--destructure-map","cljs.core.get","daiquiri.interpreter/interpret","attrs48251","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","predict-prostate.results.icons/results-in-icons*","rum.core/reactive","printable","ttt","rum.core/react","predict-prostate.state.run-time/input-cursor","data","predict-prostate.state.run-time/results-cursor","years","cs","G__48179","cljs.core.nth","rs","G__48180","benefit","pc-deaths","G__48183","npc-deaths","predict-prostate.results.util/fill","render-year","year","predict-prostate.components.primitives/open-icon","G__48189","G__48191","G__48195","G__48197","predict-prostate.components.primitives/dead-icon","G__48200","G__48201","G__48204","G__48205","G__48210","G__48213","G__48217","G__48220","G__48229","G__48230","G__48241","G__48242","G__48257","predict-prostate.components.button/year-picker","G__48263","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.icons\n  (:require [rum.core :as rum]\n            [predict-prostate.results.util :refer [fill]]\n            [predict-prostate.state.run-time :refer [input-cursor results-cursor input-widget input-change]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.components.button :refer [horiz-radio-button-group year-picker]]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.components.primitives :refer [pic pic-dead open-icon dead-icon]]\n            [pubsub.feeds :refer [publish]]\n            ))\n\n(def round js/Math.round)\n\n(def br-deaths-fill \"#fcc\")\n(def oth-deaths-fill \"#888\")\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Use this on tab switching if something has to go back to default.\"\n  {:did-mount (fn [state]\n                (let [default (get-input-default input-groups key)]\n                  (publish (input-change key) default))\n                state)})\n\n(defn color-picker [fill-counts cum-counts n]\n  {:fill   (cond\n             (< n (cum-counts 0)) (get-in fill-counts [0 0])\n             (< n (cum-counts 1)) (get-in fill-counts [1 0])\n             (< n (cum-counts 2)) (get-in fill-counts [2 0])\n             :else (get-in fill-counts [3 0]))\n   :filled (< n (cum-counts 1))})\n\n(rum/defc placed-icons\n  \"Place a square of icons with these colours and counts.\n  Fill-counts looks like: [[#0000aa 82] [#00afef 3] [#fcc 3] [#888 12]].\n  Counts should sum to 100.\"\n  [fill-counts]\n  {:pre [(= 100 (reduce + (mapv second fill-counts)))]}\n\n  ;(println \"fill-counts\" fill-counts)\n  (let [cum-counts (into [] (reductions + (mapv second fill-counts)))]\n\n    [:div\n     (for [y (range 10)\n           x (range 10)\n           :let [n (+ x (* 10 y))\n                 style (color-picker fill-counts cum-counts n)\n                 shape (if (:filled style) pic pic-dead)]]\n\n       (rum/with-key\n         (shape {:fill (:fill style) :x x :y y}) n))]))\n\n(defn add-s [n]\n  (if (= n 1) \"\" \"s\"))\n\n(defn plural [n s p]\n  (if (<= n 1) s p))\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [results radical?]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 \"Overall Survival\"\n     :subtitle-over         \"for men with prostate cancer, 5 and 10 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n     ;:dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; dotted orange\n\n     :dotted-orange         (map #(* 100 %) (get-in results [:conservative :NPC-survival])) ; dotted orange\n     }\n    ))\n\n\n(rum/defc results-in-icons* < rum/reactive\n  [{:keys [printable ttt]}]\n\n  (let [radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        years (rum/react (input-cursor :result-year))\n        cs (round (nth (:conservative-survival data) years))\n        rs (if radical? (round (nth (:radical-survival data) years)) 0)\n        benefit (if radical? (- rs cs) 0)\n        pc-deaths (round (- (nth (:dotted-orange data) years) cs benefit))\n        npc-deaths (- 100 pc-deaths benefit cs)\n        fill-counts [[(fill 2) cs] [(fill 1) benefit] [br-deaths-fill pc-deaths] [oth-deaths-fill npc-deaths]]\n\n        render-year (fn [year data]\n                      [:.row {:style {:clear \"both\"}}\n\n                       [:.col-sm-7 {:style {:position \"relative\"\n                                            :display \"inline-block\"\n                                            :clear \"both\"\n                                            :pointer-events \"none\"\n                                            :height 260 :top -260\n                                            #_#_#_#_:height 260 :top -260\n                                            }}\n                        (placed-icons fill-counts)]\n\n                       [:.col-md-4.col-md-offset-1.screen-only {:style {:padding-top \"35px\" :position \"relative\"}}\n                        ; legend\n\n                        (when (pos? npc-deaths)\n                          [:p {:style {:font-size \"14px\"}} (open-icon oth-deaths-fill) \" \" npc-deaths \" \" (plural npc-deaths (ttt [:icons/leg-1s \"death due to other causes\"]) (ttt [:icons/leg-1p \"deaths due to other causes\"]))])\n                        (when (pos? pc-deaths)\n                          [:p {:style {:font-size \"14px\"}} (open-icon br-deaths-fill) \" \" pc-deaths \" \" (plural pc-deaths (ttt [:icons/leg-2s \"prostate cancer related death\"]) (ttt [:icons/leg-2p \"prostate cancer related deaths\"]))])\n                        (when (pos? benefit)\n                          [:p {:style {:font-size \"14px\"}} (dead-icon (fill 1)) \" \" benefit \" \" (plural benefit (ttt [:icons/leg-3s \"extra survivor due to radical treatment\"]) (ttt [:icons/leg-3p \"extra survivors due to radical treatment\"]))])\n                        [:p {:style {:font-size \"14px\"}} (dead-icon (fill 2)) \" \" cs \" \" (plural cs (ttt [:icons/leg-4s \"survivor with initial conservative management\"]) (ttt [:icons/leg-4p \"survivors with initial conservative management\"]))]\n                        [:div {:style {:clear \"both\"}}]]\n\n\n                       [:.col-sm-6.print-only {:style {:top \"55px\" :position \"absolute\" :left 260}}\n                        ; legend\n                        [:div {:style {:display \"inline-block\"}}]\n                        (when (pos? npc-deaths)\n                          [:p  (open-icon oth-deaths-fill) \" \" npc-deaths \" \" (plural npc-deaths (ttt [:icons/leg-1s \"death due to other causes\"]) (ttt [:icons/leg-1p \"deaths due to other causes\"]))])\n                        (when (pos? pc-deaths)\n                          [:p  (open-icon br-deaths-fill) \" \" pc-deaths \" \" (plural pc-deaths (ttt [:icons/leg-2s \"prostate cancer related death\"]) (ttt [:icons/leg-2p \"prostate cancer related deaths\"]))])\n                        (when (pos? benefit)\n                          [:p  (dead-icon (fill 1)) \" \" benefit \" \" (plural benefit (ttt [:icons/leg-3s \"extra survivor due to radical treatment\"]) (ttt [:icons/leg-3p \"extra survivors due to radical treatment\"]))])\n                        [:p  (dead-icon (fill 2)) \" \" cs \" \" (plural cs (ttt [:icons/leg-4s \"survivor with initial conservative management\"]) (ttt [:icons/leg-4p \"survivors with initial conservative management\"]))]\n                        [:div {:style {:clear \"both\"}}]]])]\n\n    [:div\n     [:div\n      [:.row {:style {:position \"relative\"}}\n       [:.col-xs-12.screen-only\n        {:style {:margin-top \"15px\" :font-size 16}} (ttt [:icons/out-text1 \"This display shows the outcomes for 100 men. These results are based on the inputs and treatments you selected\"]) \" \"\n        [:span.screen-only (year-picker ttt)]\n        [:span.print-only {:style {:font-size 12}} years]\n        \" \" (ttt [:icons/out-text2 \"years after diagnosis\"])\n        ]\n       [:.col-xs-12\n        (render-year years data)]\n       ]]\n     [:div {:style {:clear \"both\"}} \" \"]]))\n\n"]}