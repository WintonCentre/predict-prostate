{"version":3,"sources":["predict_prostate/results/icons.cljs"],"mappings":"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","names":["predict-prostate.results.icons/round","js/Math.round","predict-prostate.results.icons/br-deaths-fill","predict-prostate.results.icons/oth-deaths-fill","predict-prostate.results.icons/set-default","key","state","default","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","predict-prostate.results.icons/color-picker","fill-counts","cum-counts","n","cljs.core.get_in","rum.core/build-defc","js/Error","js/React.createElement","cljs.core.into_array","iter__4529__auto__","s__182776","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__182778","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__182780","cljs.core/chunk-buffer","i__182779","cljs.core/-nth","cljs.core/chunk-append","sablono.interpreter/interpret","cljs.core/chunk-cons","cljs.core/chunk","iter__182777","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__182775","predict-prostate.results.icons/placed-icons","cljs.core._EQ_","cljs.core.reduce","cljs.core/+","cljs.core.mapv","cljs.core/second","cljs.core.into","cljs.core.reductions","y","cljs.core.range","x","style","shape","predict-prostate.components.primitives/pic","predict-prostate.components.primitives/pic-dead","rum.core/with-key","G__182801","G__182815","predict-prostate.results.icons/add-s","predict-prostate.results.icons/plural","s","p","predict-prostate.results.icons/extract-data","results","radical?","p1__182825#","p2__182826#","one-sum","radical-survival","cljs.core.map","conservative-survival","p1__182828#","p2__182829#","p1__182830#","p__182847","map__182850","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","attrs182919","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","attrs182918","predict-prostate.results.icons/results-in-icons*","rum.core/reactive","printable","ttt","rum.core/react","predict-prostate.state.run-time/input-cursor","data","predict-prostate.state.run-time/results-cursor","years","cs","G__182857","cljs.core.nth","rs","G__182860","benefit","pc-deaths","G__182861","npc-deaths","predict-prostate.results.util/fill","render-year","year","predict-prostate.components.primitives/open-icon","G__182867","G__182868","G__182871","G__182872","G__182874","predict-prostate.components.primitives/dead-icon","G__182875","G__182877","G__182878","G__182880","G__182882","G__182889","G__182891","G__182894","G__182895","G__182897","G__182899","G__182900","G__182901","G__182902","G__182903","G__182920","predict-prostate.components.button/year-picker","G__182923","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.icons\n  (:require [rum.core :as rum]\n            [predict-prostate.results.util :refer [fill]]\n            [predict-prostate.state.run-time :refer [input-cursor results-cursor input-widget input-change]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.components.button :refer [horiz-radio-button-group year-picker]]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.components.primitives :refer [pic pic-dead open-icon dead-icon]]\n            [pubsub.feeds :refer [publish]]\n            ))\n\n(def round js/Math.round)\n\n(def br-deaths-fill \"#fcc\")\n(def oth-deaths-fill \"#888\")\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Use this on tab switching if something has to go back to default.\"\n  {:did-mount (fn [state]\n                (let [default (get-input-default input-groups key)]\n                  (publish (input-change key) default))\n                state)})\n\n(defn color-picker [fill-counts cum-counts n]\n  {:fill   (cond\n             (< n (cum-counts 0)) (get-in fill-counts [0 0])\n             (< n (cum-counts 1)) (get-in fill-counts [1 0])\n             (< n (cum-counts 2)) (get-in fill-counts [2 0])\n             :else (get-in fill-counts [3 0]))\n   :filled (< n (cum-counts 1))})\n\n(rum/defc placed-icons\n  \"Place a square of icons with these colours and counts.\n  Fill-counts looks like: [[#0000aa 82] [#00afef 3] [#fcc 3] [#888 12]].\n  Counts should sum to 100.\"\n  [fill-counts]\n  {:pre [(= 100 (reduce + (mapv second fill-counts)))]}\n\n  ;(println \"fill-counts\" fill-counts)\n  (let [cum-counts (into [] (reductions + (mapv second fill-counts)))]\n\n    [:div\n     (for [y (range 10)\n           x (range 10)\n           :let [n (+ x (* 10 y))\n                 style (color-picker fill-counts cum-counts n)\n                 shape (if (:filled style) pic pic-dead)]]\n\n       (rum/with-key\n         (shape {:fill (:fill style) :x x :y y}) n))]))\n\n(defn add-s [n]\n  (if (= n 1) \"\" \"s\"))\n\n(defn plural [n s p]\n  (if (= n 1) s p))\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [results radical?]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 \"Overall Survival\"\n     :subtitle-over         \"for men with prostate cancer, 5 and 10 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n     ;:dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; dotted orange\n\n     :dotted-orange         (map #(* 100 %) (get-in results [:conservative :NPC-survival])) ; dotted orange\n     }\n    ))\n\n\n(rum/defc results-in-icons* < rum/reactive\n  [{:keys [printable ttt]}]\n\n  (let [radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        years (rum/react (input-cursor :result-year))\n        cs (round (nth (:conservative-survival data) years))\n        rs (if radical? (round (nth (:radical-survival data) years)) 0)\n        benefit (if radical? (- rs cs) 0)\n        pc-deaths (round (- (nth (:dotted-orange data) years) cs benefit))\n        npc-deaths (- 100 pc-deaths benefit cs)\n        fill-counts [[(fill 2) cs] [(fill 1) benefit] [br-deaths-fill pc-deaths] [oth-deaths-fill npc-deaths]]\n\n        render-year (fn [year data]\n                      [:.row {:style {:clear \"both\"}}\n\n                       [:.col-sm-7 {:style {:position \"relative\"\n                                            :display \"inline-block\"\n                                            :clear \"both\"\n                                            :pointer-events \"none\"\n                                            :height 260 :top -260\n                                            #_#_#_#_:height 260 :top -260\n                                            }}\n                        (placed-icons fill-counts)]\n\n                       [:.col-md-4.col-md-offset-1.screen-only {:style {:padding-top \"35px\" :position \"relative\"}}\n                        ; legend\n\n                        (when (pos? npc-deaths)\n                          [:p {:style {:font-size \"14px\"}} (open-icon oth-deaths-fill) \" \" npc-deaths \" \" (plural npc-deaths (ttt [:icons/leg-1s \"death due to other causes\"]) (ttt [:icons/leg-1p \"deaths due to other causes\"]))])\n                        (when (pos? pc-deaths)\n                          [:p {:style {:font-size \"14px\"}} (open-icon br-deaths-fill) \" \" pc-deaths \" \" (plural pc-deaths (ttt [:icons/leg-2s \"prostate cancer related death\"]) (ttt [:icons/leg-2p \"prostate cancer related deaths\"]))])\n                        (when (pos? benefit)\n                          [:p {:style {:font-size \"14px\"}} (dead-icon (fill 1)) \" \" benefit \" \" (plural benefit (ttt [:icons/leg-3s \"extra survivor due to radical treatment\"]) (ttt [:icons/leg-3p \"extra survivors due to radical treatment\"]))])\n                        [:p {:style {:font-size \"14px\"}} (dead-icon (fill 2)) \" \" cs \" \" (plural cs (ttt [:icons/leg-4s \"survivor with initial conservative management\"]) (ttt [:icons/leg-4p \"survivors with initial conservative management\"]))]\n                        [:div {:style {:clear \"both\"}}]]\n\n\n                       [:.col-sm-6.print-only {:style {:top \"55px\" :position \"absolute\" :left 260}}\n                        ; legend\n                        [:div {:style {:display \"inline-block\"}}]\n                        (when (pos? npc-deaths)\n                          [:p  (open-icon oth-deaths-fill) \" \" npc-deaths \" \" (plural npc-deaths (ttt [:icons/leg-1s \"death due to other causes\"]) (ttt [:icons/leg-1p \"deaths due to other causes\"]))])\n                        (when (pos? pc-deaths)\n                          [:p  (open-icon br-deaths-fill) \" \" pc-deaths \" \" (plural pc-deaths (ttt [:icons/leg-2s \"prostate cancer related death\"]) (ttt [:icons/leg-2p \"prostate cancer related deaths\"]))])\n                        (when (pos? benefit)\n                          [:p  (dead-icon (fill 1)) \" \" benefit \" \" (plural benefit (ttt [:icons/leg-3s \"extra survivor due to radical treatment\"]) (ttt [:icons/leg-3p \"extra survivors due to radical treatment\"]))])\n                        [:p  (dead-icon (fill 2)) \" \" cs \" \" (plural cs (ttt [:icons/leg-4s \"survivor with initial conservative management\"]) (ttt [:icons/leg-4p \"survivors with initial conservative management\"]))]\n                        [:div {:style {:clear \"both\"}}]]])]\n\n    [:div\n     [:div\n      [:.row {:style {:position \"relative\"}}\n       [:.col-xs-12.screen-only\n        {:style {:margin-top \"15px\" :font-size 16}} (ttt [:icons/out-text1 \"This display shows the outcomes for 100 men. These results are based on the inputs and treatments you selected\"]) \" \"\n        [:span.screen-only (year-picker ttt)]\n        [:span.print-only {:style {:font-size 12}} years]\n        \" \" (ttt [:icons/out-text2 \"years after diagnosis\"])\n        ]\n       [:.col-xs-12\n        (render-year years data)]\n       ]]\n     [:div {:style {:clear \"both\"}} \" \"]]))\n\n"]}