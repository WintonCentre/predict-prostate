{"version":3,"sources":["oops/messages.cljs"],"mappings":"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","names":["oops.messages/post-process-message","msg","js/oops","js/oops.messages","js/oops.messages.runtime-message","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__48784","cljs.core/MultiFn","cljs.core.symbol","oops.messages/runtime-message","type","_","_type","info","map__48787","cljs.core/--destructure-map","flavor","path","cljs.core/empty?","map__48871","soft?","fn","goog/typeOf","map__48872","key","cljs.core._EQ_","map__48873","frozen?","map__48874","map__48875"],"sourcesContent":["(ns oops.messages\n  \"A subsystem for printing runtime warnings and errors.\"\n  (:require-macros [oops.messages]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic post-process-message [msg]\n  (str (oops.messages/gen-oops-message-prefix) \", \" msg))\n\n; -- runtime error/warning messages -----------------------------------------------------------------------------------------\n\n(defmulti runtime-message (fn [type & _] type))\n\n(defmethod runtime-message :unexpected-object-value [_type info]\n  (let [{:keys [flavor path]} info]\n    (post-process-message (str \"Unexpected object value (\" flavor \")\"\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :expected-function-value [_type info]\n  (let [{:keys [soft? path fn]} info]\n    (post-process-message (str \"Expected a function\"\n                               (when soft? (str \" or nil\"))\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))\n                               \", got <\" (goog/typeOf fn) \"> instead\"))))\n\n(defmethod runtime-message :missing-object-key [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Missing expected object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :object-key-not-writable [_type info]\n  (let [{:keys [key path frozen?]} info]\n    (post-process-message (str \"Object key '\" key \"' is not writable\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               (when frozen? (str \" because the object is frozen\"))))))\n\n(defmethod runtime-message :object-is-sealed [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is sealed\"))))\n\n(defmethod runtime-message :object-is-frozen [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is frozen\"))))\n\n(defmethod runtime-message :invalid-selector [_type]\n  (post-process-message \"Invalid selector\"))\n\n(defmethod runtime-message :unexpected-empty-selector [_type]\n  (post-process-message (str \"Unexpected empty selector\")))\n\n(defmethod runtime-message :unexpected-punching-selector [_type]\n  (post-process-message (str \"Unexpected punching selector (\\\"!\\\" makes sense only with oset!)\")))\n\n(defmethod runtime-message :unexpected-soft-selector [_type]\n  (post-process-message (str \"Unexpected soft selector (\\\"?\\\" does not make sense with oset!)\")))\n"]}