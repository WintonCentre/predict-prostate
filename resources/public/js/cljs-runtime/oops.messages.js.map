{"version":3,"sources":["oops/messages.cljs"],"mappings":"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","names":["oops.messages/post-process-message","msg","js/oops","js/oops.messages","js/oops.messages.runtime-message","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__44406","cljs.core/MultiFn","cljs.core.symbol","oops.messages/runtime-message","type","_","_type","info","map__44408","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","flavor","path","cljs.core/empty?","map__44411","soft?","fn","goog/typeOf","map__44419","key","cljs.core._EQ_","map__44429","frozen?","map__44440","map__44453"],"sourcesContent":["(ns oops.messages\n  \"A subsystem for printing runtime warnings and errors.\"\n  (:require-macros [oops.messages]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic post-process-message [msg]\n  (str (oops.messages/gen-oops-message-prefix) \", \" msg))\n\n; -- runtime error/warning messages -----------------------------------------------------------------------------------------\n\n(defmulti runtime-message (fn [type & _] type))\n\n(defmethod runtime-message :unexpected-object-value [_type info]\n  (let [{:keys [flavor path]} info]\n    (post-process-message (str \"Unexpected object value (\" flavor \")\"\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :expected-function-value [_type info]\n  (let [{:keys [soft? path fn]} info]\n    (post-process-message (str \"Expected a function\"\n                               (when soft? (str \" or nil\"))\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))\n                               \", got <\" (goog/typeOf fn) \"> instead\"))))\n\n(defmethod runtime-message :missing-object-key [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Missing expected object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :object-key-not-writable [_type info]\n  (let [{:keys [key path frozen?]} info]\n    (post-process-message (str \"Object key '\" key \"' is not writable\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               (when frozen? (str \" because the object is frozen\"))))))\n\n(defmethod runtime-message :object-is-sealed [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is sealed\"))))\n\n(defmethod runtime-message :object-is-frozen [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is frozen\"))))\n\n(defmethod runtime-message :invalid-selector [_type]\n  (post-process-message \"Invalid selector\"))\n\n(defmethod runtime-message :unexpected-empty-selector [_type]\n  (post-process-message (str \"Unexpected empty selector\")))\n\n(defmethod runtime-message :unexpected-punching-selector [_type]\n  (post-process-message (str \"Unexpected punching selector (\\\"!\\\" makes sense only with oset!)\")))\n\n(defmethod runtime-message :unexpected-soft-selector [_type]\n  (post-process-message (str \"Unexpected soft selector (\\\"?\\\" does not make sense with oset!)\")))\n"]}