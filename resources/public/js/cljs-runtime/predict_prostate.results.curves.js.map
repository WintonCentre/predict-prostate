{"version":3,"sources":["predict_prostate/results/curves.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.results.curves/styles","predict-prostate.results.curves/as-point-series","plot-layers","cljs.core.into","iter__4529__auto__","s__33362","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__33364","cljs.core/chunk-buffer","i__33363","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33361","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","time-series","cljs.core.map_indexed","i","v","rum.core/build-defc","p__33371","map__33372","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","js/React.createElement","attrs33380","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","predict-prostate.results.curves/line-plot","X","Y","scale","point-series","line-style","point","x","y","cljs.core.merge","p1__33368#","cljs.core.map","p__33382","map__33386","predict-prostate.results.curves/area-plot","area-style","base","clojure.string.join","p1__33381#","cljs.core/last","p__33398","map__33399","predict-prostate.results.curves/plot","plot-style","data","radical?","pred__33403","expr__33404","cljs.core/=","G__33407","G__33408","G__33409","cljs.core.nth","predict-prostate.results.util/treatment-fills","G__33411","G__33412","G__33413","G__33414","G__33415","G__33416","predict-prostate.results.util/dashed-stroke","G__33417","G__33418","G__33419","predict-prostate.results.util/fills-by-style*","G__33421","G__33422","G__33423","G__33424","G__33425","G__33426","G__33427","G__33428","G__33429","G__33431","G__33432","G__33433","p__33438","map__33439","predict-prostate.results.curves/curves-container","outer","margin","inner","padding","width","height","svg.scales/->Identity","predict-prostate.state.run-time/N","x-ticks","svg.scales/ticks","y-ticks","svg.scales/i->o","svg.scales/out","G__33444","svg.axis/axisBottom","G__33445","svg.axis/axisLeft","svg.scales/tick-format-specifier","rum.core/with-key","G__33446","G__33447","G__33448","G__33449","k","x_k","cljs.core/mod","cljs.core.range","y_k","cljs.core/odd?","attrs33455","predict-prostate.results.curves/curves","rum.core/reactive","rum.core/static","rum.core.local","G__33456","G__33457","G__33458","G__33459","svg.space/space","rum.core/react","predict-prostate.state.run-time/input-cursor","predict-prostate.results.curves/benefit","tk","G__33467","predict-prostate.results.curves/some-benefit?","treatment-key","p__33470","map__33471","attrs33475","predict-prostate.results.curves/legend-item","label","extra-style","icon","predict-prostate.results.curves/legend","G__33480","predict-prostate.components.primitives/dead-icon","predict-prostate.results.util/fill","G__33485","predict-prostate.results.curves/legend2","G__33486","pred__33487","expr__33488","js/Error","G__33490","G__33491","G__33497","G__33498","G__33499","G__33503","G__33505","G__33522","G__33524","predict-prostate.results.curves/extract-data","results","p1__33527#","p2__33528#","one-sum","radical-survival","cljs.core.get_in","conservative-survival","p1__33529#","rum.core/build-defcs","p__33543","map__33544","predict-prostate.results.curves/results-in-curves","predict-prostate.mixins/sizing-mixin","state","printable","side-by-side","or__4126__auto__","cljs.core._EQ_","predict-prostate.state.run-time/results-cursor","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.curves\n  (:require [clojure.string :as str]\n            [rum.core :as rum]\n            [predict-prostate.results.util :refer [fill treatment-fills dashed-stroke fills-by-style*]]\n            [predict-prostate.state.run-time :refer [N results-cursor input-cursor on-screen-treatments-cursor]]\n            [predict-prostate.components.primitives :refer [dead-icon]]\n            [predict-prostate.mixins :refer [sizing-mixin]]\n            [pubsub.feeds :refer [publish]]\n            [svg.space :refer [space]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [svg.axis :refer [axisBottom axisTop axisLeft axisRight]]\n            [svg.scales :refer [->Identity nice-linear i->o o->i in out ticks tick-format-specifier]]\n            [svg.mixins :refer [patch-svg-attrs]]\n            [goog.object :as gobj :refer [getValueByKeys]]\n            ))\n\n\n(enable-console-print!)\n\n(defstyle styles\n  [\".outer\" {:fill   \"none\"\n             :stroke \"none\"}]\n  [\".inner\" {:fill             \"#fff\"\n             :stroke           \"#000\"\n             :stroke-opacity   0\n             :stroke-width     0.5\n             :stroke-dasharray \"3, 4\"}]\n  [\".annotation\" {\n                  :font-size \"14pt\"\n                  }]\n  [\".arrow\" {\n             :stroke       \"#000\"\n             :stroke-width \"1.5px\"\n             }])\n\n\n(defn as-point-series [plot-layers]\n  \"Convert a vector of data-layers of time-series y-values to a vector of time-series of [x y] points.\"\n  (into [] (for [time-series plot-layers]\n             (into [] (map-indexed (fn [i v] [i v]) time-series)))))\n\n(rum/defc line-plot [{:keys [X Y] :as scale} point-series line-style]\n  \"X and Y are the x-axis and y-axis scale functions.\n  Data should look something like this:\n  [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587]]\"\n\n  (let [point (fn [x y] (str (X x) \" \" (Y y)))]\n    [:g\n     [:polyline (merge {:points (map #(apply point %) point-series)} line-style)]]))\n\n(rum/defc area-plot\n  \"scale contains the x-axis and y-axis scale functions.\n  Point series should look something like this:\n  [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587]]\n  Baseline is the \"\n  ([scale point-series area-style]\n   (area-plot scale point-series area-style 0))\n  ([{:keys [X Y]} point-series area-style base]\n   (when (seq point-series)\n     (let [point (fn [x y] (str (X x) \" \" (Y y)))]\n       [:g\n        [:polygon (merge {:points (str/join \", \" [(str/join \", \" (map #(apply point %) point-series))\n                                                  (str/join \", \" [(point (first (last point-series)) base)\n                                                                  (point (first (first point-series)) base)])])}\n                    area-style)]]))))\n\n(rum/defc plot [{:keys [X Y] :as scale} plot-style data radical?]\n  \"X and Y are the x-axis and y-axis scale functions.\n  Data should look something like this:\n  ([[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 99.93906220645762]  ... [9 98.75403990843078]  [10 98.5298358866154] ])\"\n\n  (condp = plot-style\n    :area1\n    [:g\n     ;(map-indexed #(rum/with-key (area-plot scale (nth data %1) {:fill (treatment-fills %1)}) (str \"a\" %1)) area-data)\n     (area-plot scale (nth data 1) {:fill (treatment-fills 1)})\n     (area-plot scale (nth data 0) {:fill (treatment-fills 0)})\n     (line-plot scale (nth data 2) {:fill \"none\" :stroke dashed-stroke :strokeDasharray \"8,8\" :strokeWidth 5 :strokeLinecap \"round\"})\n     ]\n\n    :line2\n    [:g\n     ; light blue fill\n     (when radical? (area-plot scale (nth data 2) {:fill (:radical-above (:line2 fills-by-style*))}))\n\n     ; light blue fill\n     (when radical? (area-plot scale (nth data 1) {:fill (:radical (:line2 fills-by-style*))}))\n\n     ; dotted orange\n     (line-plot scale (nth data 2) {:fill \"none\" :stroke dashed-stroke :strokeDasharray \"8,8\" :strokeWidth 5 :strokeLinecap \"round\"})\n\n     ; dark blue conservative\n     (area-plot scale (nth data 0) {:fill (treatment-fills 0)})\n\n     ; dark blue line\n     (line-plot scale (nth data 1) {:fill \"none\" :stroke (treatment-fills 0) :strokeWidth 2 :strokeLinecap \"round\"})\n\n     ]\n\n\n\n    [:text (str \"bad plot-style\" plot-style)]\n    ))\n\n\n(rum/defc curves-container [{:keys [outer margin inner padding width height x y]} plot-style data radical?]\n  (let [inner (if (nil? inner) {:width  (- (:width outer) (:left margin) (:right margin))\n                                :height (- (:height outer) (:top margin) (:bottom margin))}\n                               inner)\n        width (if (nil? width) (- (:width inner) (:left padding) (:right padding)) width)\n        height (if (nil? height) (- (:height inner) (:top padding) (:bottom padding)) height)\n        x (if (nil? x) (->Identity [0 width] N) x)\n        x-ticks (ticks x)                                   ;(if (nil? x-ticks) (ticks 0 width 10) x-ticks)\n        y (if (nil? y) (->Identity [0 height] 10) y)\n        y-ticks (ticks y)                                   ;(if (nil? y-ticks) (ticks 0 height 5) y-ticks)\n        X (i->o x)\n        Y (i->o y)\n        ]\n\n    [:div {:style {:margin      \"0 auto\"\n                   :width       \"100%\"\n                   :height      0\n                   :padding-top \"100%\"\n                   :position    \"relative\"\n                   }}\n     [:svg {:style    {:position \"absolute\"\n                       :top      0\n                       :left     0\n                       }\n            :view-box (str \" 0 0 \" (:width outer) \" \" (:height outer))}\n\n      [:g {:key       0\n           :transform (str \"translate(\" (:left margin) \", \" (:top margin) \")\")}\n\n       [:rect {:key        1\n               :class-name (:outer styles)\n               :width      (:width inner)\n               :height     (:height inner)}]\n\n       ;;\n       ;; define the coordinate system\n       ;;\n       [:g {:key       2\n            :transform (str \"translate(\" (:left padding) \",\" (:top padding) \")\")}\n        [:rect {:key        1\n                :class-name (:inner styles)\n                :width      width\n                :height     height}]\n\n        ;; axes on all edges\n        [:g {:key       \"bottom\"\n             ;:class-name \".xaxis\"\n             :transform (str \"translate(0,\" (+ (first (out y)) 10) \")\")}\n         (axisBottom {:scale x :ticks x-ticks})]\n\n        [:g {:key       \"left\"\n             :transform (str \"translate(\" (- (first (out x)) 10) \",0)\")}\n         (axisLeft {:scale y :ticks y-ticks :format-specifier (str (tick-format-specifier y) \"%\")})]\n\n\n        [:g {:key       \"y-title\"\n             :transform (str \"translate(-62 0) rotate(-90 \" (X 0) \" \" (Y 0) \")\")}\n         [:text {:key        \"note\"\n                 :class-name (:annotation styles)\n                 :x          (X 1)\n                 :y          (Y 0)}\n          \"Percentage of men surviving\"]]\n\n        [:g {:key \"x-title\" :transform (str \"translate(0 50)\")}\n         [:text {:key        \"note\"\n                 :class-name (:annotation styles)\n                 :x          (X 2.5)\n                 :y          (Y 0)}\n          \"Years after diagnosis\"]]\n\n        (rum/with-key (plot {:X X :Y Y} plot-style (as-point-series data) radical?) \"plot\")\n\n        ; Add grid overlay\n        (map-indexed (fn [k x_k] [:line {:key              (str \"x\" x_k)\n                                         :x1               (X x_k)\n                                         :x2               (X x_k)\n                                         :y1               (Y 0)\n                                         :y2               (Y 100)\n                                         :stroke           \"#fff\"\n                                         :stroke-opacity   0.5\n                                         :stroke-width     1\n                                         :stroke-dasharray (if (zero? (mod (inc k) 5)) \"5 5\" \"2 10\")}])\n          (range 1 N))\n\n        (map-indexed (fn [k y_k] [:line {:key              (str \"y\" y_k)\n                                         :x1               (X 0)\n                                         :x2               (X N)\n                                         :y1               (Y y_k)\n                                         :y2               (Y y_k)\n                                         :stroke           \"#fff\"\n                                         :stroke-opacity   0.5\n                                         :stroke-width     1\n                                         :stroke-dasharray (if (odd? k) \"5 5\" \"2 10\")}])\n          (range 10 100 10))]\n\n       ]]]))\n\n(rum/defc curves < rum/reactive rum/static (rum/local [] ::data)\n  [data]\n  (let [margin {:top 10 :right 10 :bottom 0 :left 0}\n        padding {:top 20 :right 0 :bottom 60 :left 80}\n        outer {:width 400 :height 400}]\n    [:div (curves-container\n            (space outer margin padding [0 N] 3 [0 100] 5)\n            (rum/react (input-cursor :plot-style))\n            data\n            (pos? (rum/react (input-cursor :primary-rx)))\n            )]))\n\n(defn benefit [data tk]\n  (tk (nth data 10)))\n\n(defn some-benefit? [data treatment-key] (pos? (benefit data treatment-key)))\n\n(rum/defc legend-item\n  [{:keys [label extra-style icon]}]\n  [:div\n   [:div {:key   3\n          :style (merge {:width          \"50px\"\n                         :display        \"inline-block\"\n                         ;:margin-top     \"15px\"\n                         :vertical-align \"top\"\n                         :text-align     \"right\"}\n                   extra-style)}\n    (when icon icon)]\n   [:div {:key   4\n          :style {:display     \"inline-block\"\n                  :margin-left \"10px\"\n                  :width       \"calc(100% - 60px)\"}}\n    [:p label]]])\n\n(rum/defc legend < rum/reactive [data]\n  [:div {:width \"100%\"}\n   [:div {:style {:border-top     (str \"4px dashed \" dashed-stroke)\n                  :width          \"50px\"\n                  :display        \"inline-block\"\n                  :margin-top     \"15px\"\n                  :vertical-align \"top\"}}]\n   [:div {:style {:display     \"inline-block\"\n                  :margin-left \"10px\"\n                  :width       \"calc(100% - 60px)\"}}\n    [:p \" Survival excluding deaths from prostate cancer\"]]\n   (when (pos? (rum/react (input-cursor :primary-rx)))\n     [:p (dead-icon (fill 1)) \" Estimated survival with radical treatment\"])\n\n   [:div\n    [:div {:key   3\n           :style {:width          \"50px\"\n                   :display        \"inline-block\"\n                   :margin-top     \"15px\"\n                   :vertical-align \"top\"\n                   :text-align     \"right\"}}\n     (dead-icon (treatment-fills 0))]\n    [:div {:key   4\n           :style {:display     \"inline-block\"\n                   :margin-left \"10px\"\n                   :width       \"calc(100% - 60px)\"}}\n     [:p \" Conservative management\"]]]\n\n   ])\n\n(rum/defc legend2 < rum/reactive [plot-style radical?]\n  [:div {:width \"100%\"}\n   (legend-item {:label       \"Survival excluding deaths from prostate cancer\"\n                 :extra-style {:border-top (str \"5px dashed \" dashed-stroke)\n                               :margin-top 9}\n                 :icon        nil})\n\n   (when radical?\n     (condp = plot-style\n       :area1\n       (legend-item {:label       \"Estimated survival with radical treatment\"\n                     :extra-style nil\n                     :icon        (dead-icon (treatment-fills 1))})\n\n       :line2\n       [:div\n\n        (legend-item {:label       \"Potential range of treatment benefit above estimate\"\n                      :extra-style nil\n                      :icon        (dead-icon (:radical-above (plot-style fills-by-style*)))})\n        (legend-item {:label       \"Estimated survival with radical treatment\"\n                      :extra-style {:border-top (str \"3px solid \" (treatment-fills 0))\n                                    :margin-top 9}\n                      :icon        nil})\n        (legend-item {:label       \"Potential range of treatment benefit below estimate\"\n                      :extra-style nil\n                      :icon        (dead-icon (:radical (plot-style fills-by-style*)))})]))\n\n   (legend-item {:label \"Initial conservative management\"\n                 :icon  (dead-icon (treatment-fills 0))})\n\n   ])\n\n(defn extract-data [results radical?]\n  \"extract plot data from the model run. Include radical treatment if radical?\"\n  (let [;years (range 0 11)\n        one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (when radical? (map one-sum\n                                          (get-in results [:radical :pred-PC-cum])\n                                          (get-in results [:radical :pred-NPC-cum])))\n        conservative-survival (map one-sum\n                                (get-in results [:conservative :pred-PC-cum])\n                                (get-in results [:conservative :pred-NPC-cum]))]\n    [conservative-survival                                  ; 0 conservative\n     (when radical? radical-survival)                       ; 1 radical\n     ;(map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; 2 dotted orange\n     (map #(* 100 %) (get-in results [:conservative :NPC-survival]))\n     ]))\n\n\n(rum/defcs results-in-curves < rum/static rum/reactive sizing-mixin [state {:keys [printable]}]\n  (let [width (rum/react (:width state))\n        side-by-side (or printable (> width 600))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        plot-style (rum/react (input-cursor :plot-style))\n        ;point-series (as-point-series data)\n        ]\n    [:div {:style {:position \"relative\"}}\n\n     [:p {:style {:margin-top \"15px\"}}\n      \"This graph shows the percentage of men surviving up to \" N \" years. These results are based on the inputs and treatment you selected\"]\n\n\n     [:div {:style {:width   (if side-by-side \"70%\" \"100%\")\n                    :max-width 350\n                    :display \"inline-block\"}}\n      [:div {:style {:padding \"15px 40px 0px 0px\"}} (curves data)]]\n     [:div {:style {:padding-top    \"30px\"\n                    :vertical-align \"top\"\n                    :width          (if side-by-side \"30%\" \"100%\")\n                    :display        \"inline-block\"}}\n      (legend2 plot-style radical?)\n      ]]))"]}