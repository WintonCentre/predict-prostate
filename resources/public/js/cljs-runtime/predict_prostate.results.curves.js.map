{"version":3,"sources":["predict_prostate/results/curves.cljs"],"mappings":";AAcA,AAACA;AAED,AAAA,yCAAA,2CAAA,uDAAA,kBAAA,wDAAA,kBAAA,iEAAA,uBAAA,uDAAA,tXAAUI;;AAAV,AAAAH,4CAAA,AAAAC,8CAAAC,gBAAA,mCAAA,mFAAA,mFAAA,mBAAA,2CAAA,oDAAA,OAAA,yDAAA,uBAAA,mFAAA,mBAAA,2CAAA,oDAAA,OAAA,yDAAA,OAAA,0EAAA,IAAA,oEAAA,IAAA,6EAAA,uBAAA,mFAAA,wBAAA,2CAAA,gEAAA,uBAAA,mFAAA,mBAAA,2CAAA,yDAAA,OAAA,oEAAA,iCAAA,kCAAA;AAiBA,kDAAA,lDAAME,4GAAiBC;AAAvB,AAAA;AAEE,oDAAA,7CAACC,8EAAQ,iBAAAC,qBAAA,wEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAw5EwC,AAAAwM,sBAAA7M;IAx5ExCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,kBAAA,AAAAK,eAAAN,gBAAAK,7CAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SACE,6CAAA,7CAACV,8EAAQ,AAACuB,oDAAY;kBAAKC,EAAEC;AAAP,AAAA,0FAAWD,EAAEC;;CAAIH;;AADzC,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,8DAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,kBAAA,AAAAS,gBAAAjB,9BAAMoB;AAAN,AAAA,OAAAF,eACE,6CAAA,7CAACpB,8EAAQ,AAACuB,oDAAY;kBAAKC,EAAEC;AAAP,AAAA,0FAAWD,EAAEC;;eADrC,AAAAR,8DAAA,AAAAI,eAAAnB,3FACyCoB;;;AADzC;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAkBF;;;AAG7B,4CAAA,AAAA2B,oBAAA,WAAAC,3EAAUS,oFAAmCI,aAAaC;AAA1D,AAAA,IAAAb,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAsCW;QAAtC,AAAAT,4CAAAF,eAAA,/DAA6BS;QAA7B,AAAAP,4CAAAF,eAAA,/DAA+BU;AAA/B,AAAA,AAAA;AAAA,IAKQI,QAAM,WAAKC,EAAEC;AAAP,AAAU,6IAAA,zFAAK,CAACP,kCAAAA,qCAAAA,LAAEM,iBAAAA,qDAAO,CAACL,kCAAAA,qCAAAA,LAAEM,iBAAAA;;AAL1C,AAAA,OAAAb,oBAAA,IAAA,KAAA,iBAAAC,aAOgB,uGAAA,2CAAA,lJAACa,4MAAe,4CAAA,WAAAC,vDAACC;AAAD,AAAM,2DAAAD,pDAACnD,8CAAM+C;GAASF,sBAAeC;AAPrE,AAAA,OAAA9C,8CAAAoC,oBAAA,WAAA,EAAA,AAAAE,qBAAAD,aAAA,AAAAE,+BAAAF,YAAA,MAAA,EAAA,AAAAC,qBAAAD,aAAA,KAAA,mFAAA,AAAAG,8BAAAH;;GAAA,KAAA;AASA;;;;;;4CAAA,AAAAN,oBAAA,hEAAUwB;;6BAKNX,MAAMC,aAAaW;AALvB,AAAA,AAAA,OAAAhB,8BAMG,iLAAA,yFAAA,zQAACe,0EAAAA,6GAAAA,rCAAUX,yFAAAA,nFAAMC,yFAAAA,5EAAaW,yFAAAA;;6BANjCH,SAOkBR,aAAaW,WAAWC;AAP1C,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAApB,4BAAAoB;QAAA,AAAAnB,4CAAAmB,eAAA,/DAOYZ;QAPZ,AAAAP,4CAAAmB,eAAA,/DAOcX;AAPd,AAAA,AAAA,OAAAH,8BAQG,+BAAA,7BAAM,AAAC9B,cAAImC,eACT,iBAAME,QAAM,WAAKC,EAAEC;AAAP,AAAU,6IAAA,zFAAK,CAACP,kCAAAA,qCAAAA,LAAEM,iBAAAA,qDAAO,CAACL,kCAAAA,qCAAAA,LAAEM,iBAAAA;;AAAxC,AAAA,0FAAA,+CAAA,mFAAA,0DAEa,uGAAA,2CAAA,lJAACC,4MAAe,kDAAA,KAAA,vDAACQ,0IAAe,kDAAA,lDAACA,uDAAc,4CAAA,WAAAC,vDAACP;AAAD,AAAM,2DAAAO,pDAAC3D,8CAAM+C;GAASF,eACrC,kDAAA,KAAA,vDAACa,0IAAe,AAACX,MAAM,AAACvB,gBAAM,AAACoC,eAAKf,eAAeY,MACnC,AAACV,MAAM,AAACvB,gBAAM,AAACA,gBAAMqB,eAAeY,gCAClFD;KANjB;;oBARHH,SAOkBR,aAAaW,WAAWC;;;6BAP1CJ,SAOkBR,aAAaW;;6BAP/BH,SAOkBR,aAAaW,WAAWC;;;;;;;;CAP1C,KAAA;AAgBA,uCAAA,AAAA1B,oBAAA,WAAA8B,tEAAUE,+EAA8BC,WAAWC,KAAKC;AAAxD,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAA5B,4BAAA4B;YAAAA,RAAiClB;QAAjC,AAAAT,4CAAA2B,eAAA,/DAAwBpB;QAAxB,AAAAP,4CAAA2B,eAAA,/DAA0BnB;AAA1B,AAAA,AAAA;AAAA,OAAAH,8BASE,iBAAA2B,cAAOE;IAAPD,cAASJ;AAAT,AAAA,oBAAA,CAAAG,4CAAAA,0CAAA,uDAAAC,eAAAD,sBAAA,uDAAAC;AAAA,0FAAA,+CAIG,iBAAAE,WAAW1B;IAAX2B,WAAiB,iDAAA,jDAACE,4CAAIR;IAAtBO,WAAA,2CAAA,oDAAqC,8CAAA,9CAACE;AAAtC,AAAA,0JAAAJ,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAACjB,0EAAAA,sGAAAA;KACD,iBAAAoB,WAAW/B;IAAXgC,WAAiB,iDAAA,jDAACH,4CAAIR;IAAtBY,WAAA,2CAAA,oDAAqC,8CAAA,9CAACH;AAAtC,AAAA,0JAAAC,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAACtB,0EAAAA,sGAAAA;KACD,iBAAAuB,WAAWlC;IAAXmC,WAAiB,iDAAA,jDAACN,4CAAIR;IAAtBe,WAAA,2CAAA,oDAAA,OAAA,qGAAA,2EAAA,MAAA,oEAAA,IAAA,wEAAA,7QAAoDC;AAApD,AAAA,0JAAAH,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAACvC,0EAAAA,sGAAAA;;;AANJ,oBAAA,CAAA0B,4CAAAA,0CAAA,wDAAAC,eAAAD,sBAAA,wDAAAC;AAAA,0FAAA,+CAYG,kCAAA,hBAAMF,gBAAS,iBAAAgB,WAAWtC;IAAXuC,WAAiB,iDAAA,jDAACV,4CAAIR;IAAtBmB,WAAA,2CAAA,oDAAqC,AAAA,qGAAgB,AAAA,sFAAQC;AAA7D,AAAA,0JAAAH,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAAC7B,0EAAAA,sGAAAA;KAAhB,MAGA,kCAAA,hBAAMW,gBAAS,iBAAAoB,WAAW1C;IAAX2C,WAAiB,iDAAA,jDAACd,4CAAIR;IAAtBuB,WAAA,2CAAA,oDAAqC,AAAA,yFAAU,AAAA,sFAAQH;AAAvD,AAAA,0JAAAC,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAACjC,0EAAAA,sGAAAA;KAAhB,MAGA,iBAAAkC,WAAW7C;IAAX8C,WAAiB,iDAAA,jDAACjB,4CAAIR;IAAtB0B,WAAA,2CAAA,oDAAA,OAAA,qGAAA,2EAAA,MAAA,oEAAA,IAAA,wEAAA,7QAAoDV;AAApD,AAAA,0JAAAQ,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAAClD,0EAAAA,sGAAAA;KAGD,iBAAAmD,WAAWhD;IAAXiD,WAAiB,iDAAA,jDAACpB,4CAAIR;IAAtB6B,WAAA,2CAAA,oDAAqC,8CAAA,9CAACpB;AAAtC,AAAA,0JAAAkB,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAACvC,0EAAAA,sGAAAA;KAGD,iBAAAwC,WAAWnD;IAAXoD,WAAiB,iDAAA,jDAACvB,4CAAIR;IAAtBgC,WAAA,2CAAA,oDAAA,OAAA,4GAAA,oEAAA,IAAA,wEAAA,nMAAoD,8CAAA,9CAACvB;AAArD,AAAA,0JAAAqB,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAACxD,0EAAAA,sGAAAA;;;AAxBJ,0FAAA,sDA8BS,CAAA,6DAAsBuB;;;;GAvCjC,KAAA;AA2CA,mDAAA,AAAAjC,oBAAA,WAAAmE,lFAAUE,2FAAwFpC,WAAWC,KAAKC;AAAlH,AAAA,IAAAiC,aAAAD;IAAAC,iBAAA,AAAAjE,4BAAAiE;QAAA,AAAAhE,4CAAAgE,eAAA,/DAA4EnD;YAA5E,AAAAb,4CAAAgE,eAAA,nEAAoCE;cAApC,AAAAlE,4CAAAgE,eAAA,rEAAwFS;aAAxF,AAAAzE,4CAAAgE,eAAA,pEAAqEO;aAArE,AAAAvE,4CAAAgE,eAAA,pEAA0CG;QAA1C,AAAAnE,4CAAAgE,eAAA,/DAA8ElD;cAA9E,AAAAd,4CAAAgE,eAAA,rEAAgFQ;YAAhF,AAAAxE,4CAAAgE,eAAA,nEAA+DM;YAA/D,AAAAtE,4CAAAgE,eAAA,nEAAiDI;cAAjD,AAAApE,4CAAAgE,eAAA,rEAAuDK;AAAvD,AAAA,AAAA,IACQD,YAAM,mBAAA,2CAAA,mVAAA,/YAAI,UAAA,TAAMA,kHAAgB,CAAA,CAAG,AAAA,qFAAQF,SAAO,AAAA,mFAAOC,WAAQ,AAAA,qFAAQA,kEACzC,CAAA,CAAG,AAAA,uFAASD,SAAO,AAAA,kFAAMC,WAAQ,AAAA,wFAASA,iBACnDC;IACvBE,YAAM,EAAI,UAAA,TAAMA,gBAAO,CAAA,CAAG,AAAA,qFAAQF,aAAO,AAAA,mFAAOC,YAAS,AAAA,qFAAQA,UAAUC;IAC3EC,aAAO,EAAI,WAAA,VAAMA,iBAAQ,CAAA,CAAG,AAAA,uFAASH,aAAO,AAAA,kFAAMC,YAAS,AAAA,wFAASA,UAAUE;IAC9E1D,QAAE,EAAI,MAAA,LAAMA,YAAG,yBAAA,mFAAA,5GAAC6D,gHAAcJ,kBAAOK,mCAAG9D;IACxC+D,UAAQ,AAACC,iBAAMhE;IACfC,QAAE,EAAI,MAAA,LAAMA,YAAG,yBAAA,mFAAA,uBAAA,nIAAC4D,gHAAcH,yBAAYzD;IAC1CgE,UAAQ,AAACD,iBAAM/D;IACfP,IAAE,AAACwE,mBAAKlE;IACRL,IAAE,AAACuE,mBAAKjE;AAXhB,AAAA,OAAAb,oBAAA,MAAA,WAAA,YAAA,mBAAA,kBAAA,mBAAA,oBAAA,eAAA,AAAAA,oBAAA,MAAA,WAAA,cAAA,mBAAA,aAAA,+TAAA,AAAAA,oBAAA,IAAA,SAAA,oUAAA,AAAAA,oBAAA,OAAA,SAAA,yWAAA,AAAAA,oBAAA,IAAA,SAAA,qUAAA,AAAAA,oBAAA,OAAA,SAAA,6LAAA,AAAAA,oBAAA,IAAA,SAAA,oJAAA,AAAAI,3xDAwBsB,CAAA,iJAAA,7FAAa,AAAA,qFAAQ6D,wDAAW,AAAA,uFAASA,uEAGzC,CAAA,qJAAA,4IAAA,xOAAkB,AAAA,mFAAOC,0DAAa,AAAA,kFAAMA,+EAGvC,AAAA,qFAAQpG,kDACR,AAAA,qFAAQqG,sBACR,AAAA,uFAASA,iEAMb,CAAA,sJAAA,4IAAA,zOAAkB,AAAA,mFAAOC,0DAAa,AAAA,kFAAMA,gFAEvC,AAAA,sFAAQtG,kDACRuG,qBACAC,sEAKJ,CAAA,4GAAA,jDAAoB,0CAAA,zCAAG,AAAClF,gBAAM,AAAC2F,eAAIlE,+DAClD,iBAAAmE,WAAA,2CAAA,6DAAA,NAAoBpE,6DAAS+D;AAA7B,AAAA,8GAAAK,0CAAAA,hJAACC,oDAAAA,8DAAAA;OAhDV,AAAAjF,oBAAA,IAAA,SAAA,kJAAA,AAAAI,7HAmDwB,CAAA,0GAAA,jDAAkB,0CAAA,zCAAG,AAAChB,gBAAM,AAAC2F,eAAInE,iEAChD,iBAAAsE,WAAA,2CAAA,6DAAA,+DAAA,rEAAkBrE,6DAASgE,qFAA0B,sFAAA,zCAAK,AAACO,iCAAsBvE;AAAjF,AAAA,0GAAAqE,wCAAAA,1IAACC,kDAAAA,4DAAAA;OApDV,AAAAnF,oBAAA,IAAA,SAAA,8VAAA,AAAAA,oBAAA,OAAA,SAAA,kWAAA,AAAAI,yCAAA,AAAAJ,oBAAA,IAAA,SAAA,4CAAA,AAAAA,oBAAA,OAAA,SAAA,kWAAA,AAAAI,yCAAA,AAAAA,jvCAwDwB,CAAA,wKAAA,6IAAA,1OAAoC,mEAAA,mBAAA,rFAACE,kCAAAA,uCAAAA,mEAAS,mEAAA,mBAAA,rFAACC,kCAAAA,uCAAAA,4FAE1C,AAAA,+FAAazC,8CACb,mEAAA,mBAAA,rFAACwC,kCAAAA,uCAAAA,wBACD,mEAAA,mBAAA,rFAACC,kCAAAA,uCAAAA,kDACpBiE,oEAE6B,6EAEV,AAAA,+FAAa1G,8CACb,mEAAA,mBAAA,rFAACwC,kCAAAA,uCAAAA,wBACD,mEAAA,mBAAA,rFAACC,kCAAAA,uCAAAA,kDACpBgE,yCAEF,AAACc,kBAAa,iBAAAC,WAAA,2CAAA,iDAAA,FAAUhF,iDAAKC;IAAfgF,WAAkB3D;IAAlB4D,WAA6B,AAACzH,gDAAgB8D;IAA9C4D,WAAoD3D;AAApD,AAAA,gJAAAwD,SAAAC,SAAAC,SAAAC,2DAAAH,SAAAC,SAAAC,SAAAC,zPAAC9D,qEAAAA,0GAAAA;cAtEvB,AAAAvB,TAsEQ,uCAGA,AAACZ,oDAAY,WAAKkG,EAAEC;AAAP,AAAA,0FAAA,oDAAA,wCAAA,6EAAA,yDAAA,oDAAA,0EAAA,gDAAA,oEAAA,kDAAA,iDAAA,4GAAA,uEAAA,gGAAA,hKAAsC,CAAA,gDAASA,mHACT,CAACrF,kCAAAA,uCAAAA,PAAEqF,mBAAAA,sGACH,CAACrF,kCAAAA,uCAAAA,PAAEqF,mBAAAA,lXACH,mEAAA,mBAAA,rFAACpF,kCAAAA,uCAAAA,kHACD,mEAAA,qBAAA,vFAACA,kCAAAA,yCAAAA,3YAID,0CAAA,MAAA,9CAAI,kCAAA,jCAAO,wBAAA,xBAACqF,cAAI,KAAA,JAAKF;0FAjFhF,AAAAtF,vFAkFU,8CAAA,9CAACyF,kDAAQnB,mEAEX,AAAClF,oDAAY,WAAKkG,EAAEI;AAAP,AAAA,0FAAA,oDAAA,wCAAA,6EAAA,yDAAA,oDAAA,0EAAA,gDAAA,oEAAA,kDAAA,iDAAA,6FAAA,uEAAA,gGAAA,hKAAsC,CAAA,gDAASA,mHACT,mEAAA,mBAAA,rFAACxF,kCAAAA,uCAAAA,8GACD,CAACA,kCAAAA,qEAAAA,rCAAEoE,iDAAAA,5YACH,CAACnE,kCAAAA,uCAAAA,PAAEuF,mBAAAA,sGACH,CAACvF,kCAAAA,uCAAAA,PAAEuF,mBAAAA,tYAIH,2BAAA,MAAA,/BAAI,AAACC,qBAAKL;GAC3D,8CAAA,KAAA,MAAA,zDAACG;GA7FX,KAAA;AAiGA,yCAAA,AAAAlG,oBAAA,7DAAUsG,wEACPpE,KAAKwE;AADR,AAAA,AAAA,aAAA,2CAAA,oDAAA,KAAA,uDAAA,KAAA,0DAAA,IAAA,qDAAA,5RAEQnC;cAFR,2CAAA,oDAAA,KAAA,uDAAA,IAAA,0DAAA,KAAA,qDAAA,7RAGQE;YAHR,2CAAA,uDAAA,MAAA,yDAAA,zKAIQH;cAJR,mFAAA,qEAAA,lKAKQO;cALR,mFAAA,mEAAA,hKAMQD;IACA+B,YAAK,AAACC,eAAUC;AAPxB,AAAA,IAAAR,aAUK,+IAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,gEAAA,uIAAA,vmBAAM,qFAAA,rFAACS,6CAAEC,wcAEN,CAACL,oCAAAA,6CAAAA,XAAI7B,yBAAAA;AAZb,AAAA,OAAA5G,8CAAAoC,oBAAA,MAAA,EAAA,AAAAE,qBAAA8F,aAAA,AAAA7F,+BAAA6F,YAAA,MAAA,EAAA,AAAA9F,qBAAA8F,aAAA,mFAAA,AAAA5F,8BAcK,iBAAAuG,WACC,yUAAA,wOAAA,jjBAACQ,qDAAM,qCAAA,mFAAA,8CAAA,IAAA,mFAAA,IAAA,cAAA,/QAACC,gBAAMnD,MAAMC,OAAOE,+FAAWM,kNACtB,CAAC4B,0CAAAA,mDAAAA,XAAK9B,+BAAAA,sHACN,CAAC8B,0CAAAA,mDAAAA,XAAK/B,+BAAAA;IAHvBqC,WAIC,AAACL,eAAU,6CAAA,7CAACc;IAJbR,WAKChF;IALDiF,WAMC,mIAAA,lIAAM,AAACP,eAAU,6CAAA,7CAACc;AANnB,AAAA,wKAAAV,SAAAC,SAAAC,SAAAC,uEAAAH,SAAAC,SAAAC,SAAAC,7RAAC9C,iFAAAA,sHAAAA;MAdN,AAAA5D,46BAAA,mFAAA,AAAAA,8BAAA4F,YAAA,AAAA5F,8BAcK,iBAAA2G,WACC,yUAAA,wOAAA,jjBAACI,qDAAM,qCAAA,mFAAA,8CAAA,IAAA,mFAAA,IAAA,cAAA,/QAACC,gBAAMnD,MAAMC,OAAOE,+FAAWM,kNACtB,CAAC4B,0CAAAA,mDAAAA,XAAK9B,+BAAAA,sHACN,CAAC8B,0CAAAA,mDAAAA,XAAK/B,+BAAAA,lyDAKvB,+IAAA,AAAA,mFAAA,mDAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,uDAAA,OAAA,iEAAA,SAAA,gEAAA,+IAAA,73BAAM,qFAAA,rFAACkC,6CAAEC,stBAGL,CAACL,oCAAAA,6CAAAA,XAAI9B,yBAAAA;IAXTyC,WAIC,AAACT,eAAU,6CAAA,7CAACc;IAJbJ,WAKCpF;IALDqF,WAMC,mIAAA,lIAAM,AAACX,eAAU,6CAAA,7CAACc;AANnB,AAAA,wKAAAN,SAAAC,SAAAC,SAAAC,uEAAAH,SAAAC,SAAAC,SAAAC,7RAAClD,iFAAAA,sHAAAA;MAdN,AAAA5D,8BAsBK,+IAAA,AAAA,mFAAA,mDAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,uDAAA,OAAA,iEAAA,SAAA,gEAAA,+IAAA,73BAAM,qFAAA,rFAACqG,6CAAEC,stBAGL,CAACL,oCAAAA,6CAAAA,XAAI9B,yBAAAA;GAzBd,gUAAA,7OAAmB2B,kBAAaC,iBAAW,6CAAA,iCAAA,9EAACC;AA6B5C,0CAAA,1CAAMkB,4FAASzF,KAAK0F;AAApB,AACE,IAAAC,WAAI,iDAAA,jDAACnF,4CAAIR;AAAT,AAAA,4EAAA2F,yBAAAA,7FAACD,mCAAAA,6CAAAA;;AAEH,sDAAA,tDAAME,oHAAe5F,KAAK6F;AAA1B,AAAyC,sEAAA,9DAAM,AAACJ,wCAAQzF,KAAK6F;;AAE7D,8CAAA,AAAA/H,oBAAA,WAAAgI,7EAAUG;AAAV,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAA9H,4BAAA8H;YAAA,AAAA7H,4CAAA6H,eAAA,nEACWG;kBADX,AAAAhI,4CAAA6H,eAAA,zEACiBI;WADjB,AAAAjI,4CAAA6H,eAAA,lEAC6BK;AAD7B,AAAA,AAAA,OAAAjI,oBAAA,MAAA,KAAA,AAAAA,oBAAA,MAAA,SAAA,cAAA,AAAAG,4eAAA,AAAAC,mEAAA,AAAAJ,oBAAA,MAAA,SAAA,cAAA,aAAA,8BAAA,iBAAA,wBAAA,iBAAA6H,tqBAIiB,uGAAA,2CAAA,uDAAA,OAAA,0DAAA,eAAA,wEAAA,MAAA,iEAAA,xaAAC/G,wbAKCkH,mDACf,wBAAA,KAAA,XAAMC,MAAKA,gLAKPF;AAfR,AAAA,OAAAnK,8CAAAoC,oBAAA,IAAA,EAAA,AAAAE,qBAAA2H,aAAA,AAAA1H,+BAAA0H,YAAA,MAAA,EAAA,AAAA3H,qBAAA2H,aAAA,KAAA,mFAAA,AAAAzH,8BAAAyH;;GAAA,KAAA;AAiBA,yCAAA,AAAAlI,oBAAA,7DAAUuI,wEAAuBrG;AAAjC,AAAA,AAAA,OAAA7B,oBAAA,MAAA,WAAA,SAAA,AAAAA,oBAAA,MAAA,WAAA,8FAAA,mBAAA,6BAAA,yBAAA,WAAA,AAAAA,oBAAA,MAAA,WAAA,aAAA,8BAAA,iBAAA,wBAAA,AAAAA,oBAAA,IAAA,KAAA,oDAAA,AAAAI,7WAEkC,CAAA,cAAmByC,4XASlD,2IAAA,AAAA,mFAAA,5NAAM,mIAAA,lIAAM,AAAC0D,eAAU,6CAAA,7CAACc,0PAClB,iBAAAc,WAAW,qIAAA,oDAAA,xLAACE,mEAAAA,wEAAAA;AAAZ,AAAA,wKAAAF,uEAAAA,vOAACC,iFAAAA,2FAAAA;iEAZV,AAAApI,oBAAA,MAAA,KAAA,AAAAA,oBAAA,MAAA,SAAA,cAAA,WAAA,mBAAA,6BAAA,yBAAA,oBAAA,YAAA,AAAAI,hQAWG,qDAAA,yOAUE,iBAAAkI,WAAW,8CAAA,9CAAChG;AAAZ,AAAA,wKAAAgG,uEAAAA,vOAACF,iFAAAA,2FAAAA;OArBN,AAAApI,oBAAA,MAAA,SAAA,cAAA,aAAA,8BAAA,iBAAA,wBAAA,AAAAA,oBAAA,IAAA,KAAA;GAAA,6GAAA,1BAAmBkG;AA8BnB,0CAAA,AAAAvG,oBAAA,9DAAU4I,yEAAwB3G,WAAWE,eAASuE;AAAtD,AAAA,AAAA,OAAArG,oBAAA,MAAA,WAAA,SAAA,AAAAI,8BAEG,iBAAAoI,WAAA,2CAAA,uDAA2B,iBAAAC,WAAA,mFAAA,iEAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACpC,oCAAAA,8CAAAA;KAA5B,oEAAA,2CAAA,sIAAA,gEAAA,YAAA,qDAAA,tMACwC,CAAA,cAAmBxD;AAD3D,AAAA,8JAAA2F,kEAAAA,xNAACV,4EAAAA,sFAAAA;MAFJ,AAAA1H,8BAOG,kCAAA,hBAAM0B,gBACJ,iBAAA4G,cAAOzG;IAAP0G,cAAS/G;AAAT,AAAA,oBAAA,CAAA8G,4CAAAA,0CAAA,uDAAAC,eAAAD,sBAAA,uDAAAC;AAEE,IAAAE,WAAA,2CAAA,uDAAwB,iBAAAC,WAAA,mFAAA,8DAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACzC,oCAAAA,8CAAAA;KAAzB,oEAAA,KAAA,qDAE2B,iBAAA0C,WAAW,8CAAA,9CAACzG;AAAZ,AAAA,wKAAAyG,uEAAAA,vOAACX,iFAAAA,2FAAAA;;AAF5B,AAAA,8JAAAS,kEAAAA,xNAACf,4EAAAA,sFAAAA;;AAFH,oBAAA,CAAAY,4CAAAA,0CAAA,wDAAAC,eAAAD,sBAAA,wDAAAC;AAAA,0FAAA,mDASG,iBAAAK,WAAA,2CAAA,uDAA2B,iBAAAC,WAAA,mFAAA,mEAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAAC5C,oCAAAA,8CAAAA;KAA5B,oEAAA,KAAA,qDAE2B,iBAAA6C,WAAW,AAAA,qGAAgB,CAACtH,2CAAAA,+FAAAA,tDAAWqB,2EAAAA;AAAvC,AAAA,wKAAAiG,uEAAAA,vOAACd,iFAAAA,2FAAAA;;AAF5B,AAAA,8JAAAY,kEAAAA,xNAAClB,4EAAAA,sFAAAA;KAGD,iBAAAqB,WAAA,2CAAA,uDAA2B,iBAAAC,WAAA,mFAAA,8DAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAAC/C,oCAAAA,8CAAAA;KAA5B,oEAAA,2CAAA,yLAAA,gEAAA,YAAA,qDAAA,zPACwC,CAAA,yDAAkB,8CAAA,9CAAC/D;AAD3D,AAAA,8JAAA6G,kEAAAA,xNAACrB,4EAAAA,sFAAAA;KAID,iBAAAuB,WAAA,2CAAA,uDAA2B,iBAAAC,WAAA,mFAAA,mEAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACjD,oCAAAA,8CAAAA;KAA5B,oEAAA,KAAA,qDAE2B,iBAAAkD,WAAW,AAAA,yFAAU,CAAC3H,2CAAAA,+FAAAA,tDAAWqB,2EAAAA;AAAjC,AAAA,wKAAAsG,uEAAAA,vOAACnB,iFAAAA,2FAAAA;;AAF5B,AAAA,8JAAAiB,kEAAAA,xNAACvB,4EAAAA,sFAAAA;;;AAhBJ,MAAA,KAAAc,MAAA,CAAA,mEAAAD;;;YARL,AAAAvI,PAOG,qCAqBA,iBAAAoJ,WAAA,2CAAA,uDAAqB,iBAAAC,WAAA,mFAAA,2DAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACpD,oCAAAA,8CAAAA;KAAtB,qDACqB,iBAAAqD,WAAW,8CAAA,9CAACpH;AAAZ,AAAA,wKAAAoH,uEAAAA,vOAACtB,iFAAAA,2FAAAA;;AADtB,AAAA,8JAAAoB,kEAAAA,xNAAC1B,4EAAAA,sFAAAA;;GA5BJ,6GAAA,1BAAoB5B;AAiCpB,+CAAA,/CAAMyD,sGAAcC,QAAQ9H;AAA5B,AAAA;AAEE,cAAA,WAAA+H,iBAAAC,tCACMC;AADN,AACe,QAAA,QAAO,CAAA,MAAK,CAAAF,mBAAAC;;IACrBE,mBAAiB,kCAAA,0lBAAA,1mBAAMlI,gBAAS,AAACd,4CAAI+I,QACH,uDAAA,mFAAA,2DAAA,rMAACE,+CAAOL,kOACR,uDAAA,mFAAA,2DAAA,rMAACK,+CAAOL;IAC1CM,wBAAsB,AAAClJ,4CAAI+I,QACH,uDAAA,mFAAA,sEAAA,hNAACE,+CAAOL,6OACR,uDAAA,mFAAA,sEAAA,hNAACK,+CAAOL;AAPtC,AAAA,0FAQGM,sBACA,kCAAA,iBAAA,jCAAMpI,gBAASkI,uBAEf,4CAAA,WAAAG,vDAACnJ;AAAD,AAAM,QAAA,QAAAmJ;GAAU,uDAAA,mFAAA,sEAAA,hNAACF,+CAAOL;;AAI7B,oDAAA,AAAAQ,qBAAA,iBAAAC,1FAAWE,oFAA0DE;AAArE,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAxK,4BAAAwK;gBAAA,AAAAvK,4CAAAuK,eAAA,vEAAmFI;UAAnF,AAAA3K,4CAAAuK,eAAA,jEAA6FjE;AAA7F,AAAA,AAAA,IACQhC,QAAM,AAACkC,eAAU,AAAA,qFAAQkE;IACzBE,eAAa,iBAAAC,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AAAc,gBAAA,RAAGvG;;;IAC9BvC,iBAAS,6CAAA,7CAAC2E,iDAAI,AAACF,eAAU,6CAAA,7CAACc;IAC1BxF,OAAK,AAAC8H,6CAAa,AAACpD,eAAUsE,gDAAgB/I;IAC9CF,aAAW,AAAC2E,eAAU,6CAAA,7CAACc;AAL/B,AAAA,OAAArH,oBAAA,MAAA,WAAA,cAAA,eAAA,AAAAA,oBAAA,IAAA,WAAA,eAAA,WAAA,AAAAI,8BAWM,iBAAA0K,WAAA,mFAAA,kEAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACzE,oCAAAA,8CAAAA;MAXP,IAAA,AAAAjG,iEAAA,IAAA,AAAAA,vCAWyFsE,qEAAM,iBAAAqG,WAAA,mFAAA,kEAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAAC1E,oCAAAA,8CAAAA;OAXhG,AAAArG,oBAAA,MAAA,WAAA,sEAAA,kBAAA,mBAAA,AAAAA,oBAAA,MAAA,WAAA,aAAA,wBAAA,AAAAI,sPAAA,AAAAJ,oBAAA,MAAA,WAAA,gBAAA,yBAAA,0EAAA,mBAAA,AAAAI,3kBAc6B,gCAAA,MAAA,pBAAIuK,sLAGmB,CAAC1E,uEAAAA,iFAAAA,ZAAOpE,6DAAAA,xDAAKwE,6DAAAA,uGAG7B,gCAAA,MAAA,pBAAIsE,yFAElC,CAACpC,wEAAAA,uGAAAA,jCAAQ3G,mFAAAA,xEAAWE,mFAAAA,pEAASuE,mFAAAA;GAtBnC,mKAAA,hFAA+BF,iBAAWD,kBAAasE","names":["cljs.core/enable-console-print!","cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.results.curves/styles","predict-prostate.results.curves/as-point-series","plot-layers","cljs.core.into","iter__4611__auto__","s__33842","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__33846","cljs.core/chunk-buffer","i__33845","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33841","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","time-series","cljs.core.map_indexed","i","v","rum.core/build-defc","p__33853","map__33854","cljs.core/--destructure-map","cljs.core.get","js/React.createElement","attrs33857","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","predict-prostate.results.curves/line-plot","X","Y","scale","point-series","line-style","point","x","y","cljs.core.merge","p1__33852#","cljs.core.map","p__33860","map__33861","predict-prostate.results.curves/area-plot","area-style","base","clojure.string.join","p1__33859#","cljs.core/last","p__33866","map__33867","predict-prostate.results.curves/plot","plot-style","data","radical?","pred__33868","expr__33869","cljs.core/=","G__33871","G__33872","G__33873","cljs.core.nth","predict-prostate.results.util/treatment-fills","G__33874","G__33875","G__33876","G__33877","G__33878","G__33879","predict-prostate.results.util/dashed-stroke","G__33880","G__33881","G__33882","predict-prostate.results.util/fills-by-style*","G__33883","G__33884","G__33885","G__33886","G__33887","G__33888","G__33889","G__33890","G__33891","G__33892","G__33893","G__33894","p__33895","map__33896","predict-prostate.results.curves/curves-container","outer","margin","inner","padding","width","height","x-title","y-title","svg.scales/->Identity","predict-prostate.state.run-time/N","x-ticks","svg.scales/ticks","y-ticks","svg.scales/i->o","svg.scales/out","G__33903","svg.axis/axisBottom","G__33905","svg.axis/axisLeft","svg.scales/tick-format-specifier","rum.core/with-key","G__33915","G__33916","G__33917","G__33918","k","x_k","cljs.core/mod","cljs.core.range","y_k","cljs.core/odd?","attrs33934","predict-prostate.results.curves/curves","rum.core/reactive","rum.core/static","rum.core.local","ttt","ttt*","rum.core/react","predict-prostate.state.run-time/ttt-cursor","cljs.core._EQ_","translations.config/translation-profile","G__33956","G__33957","G__33958","G__33959","G__33975","G__33976","G__33977","G__33978","cljs.core.assoc","svg.space/space","predict-prostate.state.run-time/input-cursor","predict-prostate.results.curves/benefit","tk","G__33986","predict-prostate.results.curves/some-benefit?","treatment-key","p__33989","map__33990","attrs33991","predict-prostate.results.curves/legend-item","label","extra-style","icon","predict-prostate.results.curves/legend","G__34029","predict-prostate.components.primitives/dead-icon","predict-prostate.results.util/fill","G__34034","predict-prostate.results.curves/legend2","G__34043","G__34045","pred__34048","expr__34049","js/Error","G__34052","G__34053","G__34054","G__34056","G__34057","G__34059","G__34061","G__34062","G__34063","G__34064","G__34065","G__34067","G__34068","G__34069","predict-prostate.results.curves/extract-data","results","p1__34070#","p2__34071#","one-sum","radical-survival","cljs.core.get_in","conservative-survival","p1__34072#","rum.core/build-defcs","p__34073","map__34074","predict-prostate.results.curves/results-in-curves","predict-prostate.mixins/sizing-mixin","state","printable","side-by-side","or__4212__auto__","predict-prostate.state.run-time/results-cursor","G__34075","G__34076","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.curves\n  (:require [clojure.string :as str]\n            [rum.core :as rum]\n            [predict-prostate.results.util :refer [fill treatment-fills dashed-stroke fills-by-style*]]\n            [predict-prostate.state.run-time :refer [N results-cursor input-cursor ttt-cursor]]\n            [predict-prostate.components.primitives :refer [dead-icon]]\n            [predict-prostate.mixins :refer [sizing-mixin]]\n            [svg.space :refer [space]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [svg.axis :refer [axisBottom axisLeft]]\n            [svg.scales :refer [->Identity i->o out ticks tick-format-specifier]]\n            [translations.config :refer [translation-profile]]))\n\n\n(enable-console-print!)\n\n(defstyle styles\n  [\".outer\" {:fill   \"none\"\n             :stroke \"none\"}]\n  [\".inner\" {:fill             \"#fff\"\n             :stroke           \"#000\"\n             :stroke-opacity   0\n             :stroke-width     0.5\n             :stroke-dasharray \"3, 4\"}]\n  [\".annotation\" {\n                  :font-size \"14pt\"\n                  }]\n  [\".arrow\" {\n             :stroke       \"#000\"\n             :stroke-width \"1.5px\"\n             }])\n\n\n(defn as-point-series [plot-layers]\n  \"Convert a vector of data-layers of time-series y-values to a vector of time-series of [x y] points.\"\n  (into [] (for [time-series plot-layers]\n             (into [] (map-indexed (fn [i v] [i v]) time-series)))))\n\n(rum/defc line-plot [{:keys [X Y] :as scale} point-series line-style]\n  \"X and Y are the x-axis and y-axis scale functions.\n  Data should look something like this:\n  [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587]]\"\n\n  (let [point (fn [x y] (str (X x) \" \" (Y y)))]\n    [:g\n     [:polyline (merge {:points (map #(apply point %) point-series)} line-style)]]))\n\n(rum/defc area-plot\n  \"scale contains the x-axis and y-axis scale functions.\n  Point series should look something like this:\n  [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587]]\n  Baseline is the \"\n  ([scale point-series area-style]\n   (area-plot scale point-series area-style 0))\n  ([{:keys [X Y]} point-series area-style base]\n   (when (seq point-series)\n     (let [point (fn [x y] (str (X x) \" \" (Y y)))]\n       [:g\n        [:polygon (merge {:points (str/join \", \" [(str/join \", \" (map #(apply point %) point-series))\n                                                  (str/join \", \" [(point (first (last point-series)) base)\n                                                                  (point (first (first point-series)) base)])])}\n                    area-style)]]))))\n\n(rum/defc plot [{:keys [X Y] :as scale} plot-style data radical?]\n  \"X and Y are the x-axis and y-axis scale functions.\n  Data should look something like this:\n  ([[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 99.93906220645762]  ... [9 98.75403990843078]  [10 98.5298358866154] ])\"\n\n  (condp = plot-style\n    :area1\n    [:g\n     ;(map-indexed #(rum/with-key (area-plot scale (nth data %1) {:fill (treatment-fills %1)}) (str \"a\" %1)) area-data)\n     (area-plot scale (nth data 1) {:fill (treatment-fills 1)})\n     (area-plot scale (nth data 0) {:fill (treatment-fills 0)})\n     (line-plot scale (nth data 2) {:fill \"none\" :stroke dashed-stroke :strokeDasharray \"8,8\" :strokeWidth 5 :strokeLinecap \"round\"})\n     ]\n\n    :line2\n    [:g\n     ; light blue fill\n     (when radical? (area-plot scale (nth data 2) {:fill (:radical-above (:line2 fills-by-style*))}))\n\n     ; light blue fill\n     (when radical? (area-plot scale (nth data 1) {:fill (:radical (:line2 fills-by-style*))}))\n\n     ; dotted orange\n     (line-plot scale (nth data 2) {:fill \"none\" :stroke dashed-stroke :strokeDasharray \"8,8\" :strokeWidth 5 :strokeLinecap \"round\"})\n\n     ; dark blue conservative\n     (area-plot scale (nth data 0) {:fill (treatment-fills 0)})\n\n     ; dark blue line\n     (line-plot scale (nth data 1) {:fill \"none\" :stroke (treatment-fills 0) :strokeWidth 2 :strokeLinecap \"round\"})\n\n     ]\n\n\n\n    [:text (str \"bad plot-style\" plot-style)]\n    ))\n\n\n(rum/defc curves-container [{:keys [outer margin inner padding width height x y x-title y-title]} plot-style data radical?]\n  (let [inner (if (nil? inner) {:width  (- (:width outer) (:left margin) (:right margin))\n                                :height (- (:height outer) (:top margin) (:bottom margin))}\n                               inner)\n        width (if (nil? width) (- (:width inner) (:left padding) (:right padding)) width)\n        height (if (nil? height) (- (:height inner) (:top padding) (:bottom padding)) height)\n        x (if (nil? x) (->Identity [0 width] N) x)\n        x-ticks (ticks x)                                   ;(if (nil? x-ticks) (ticks 0 width 10) x-ticks)\n        y (if (nil? y) (->Identity [0 height] 10) y)\n        y-ticks (ticks y)                                   ;(if (nil? y-ticks) (ticks 0 height 5) y-ticks)\n        X (i->o x)\n        Y (i->o y)\n        ]\n\n    [:div {:style {:margin      \"0 auto\"\n                   :width       \"100%\"\n                   :height      0\n                   :padding-top \"100%\"\n                   :position    \"relative\"\n                   }}\n     [:svg {:style    {:position \"absolute\"\n                       :top      0\n                       :left     0\n                       }\n            :view-box (str \" 0 0 \" (:width outer) \" \" (:height outer))}\n\n      [:g {:key       0\n           :transform (str \"translate(\" (:left margin) \", \" (:top margin) \")\")}\n\n       [:rect {:key        1\n               :class-name (:outer styles)\n               :width      (:width inner)\n               :height     (:height inner)}]\n\n       ;;\n       ;; define the coordinate system\n       ;;\n       [:g {:key       2\n            :transform (str \"translate(\" (:left padding) \",\" (:top padding) \")\")}\n        [:rect {:key        1\n                :class-name (:inner styles)\n                :width      width\n                :height     height}]\n\n        ;; axes on all edges\n        [:g {:key       \"bottom\"\n             ;:class-name \".xaxis\"\n             :transform (str \"translate(0,\" (+ (first (out y)) 10) \")\")}\n         (axisBottom {:scale x :ticks x-ticks})]\n\n        [:g {:key       \"left\"\n             :transform (str \"translate(\" (- (first (out x)) 10) \",0)\")}\n         (axisLeft {:scale y :ticks y-ticks :format-specifier (str (tick-format-specifier y) \"%\")})]\n\n\n        [:g {:key       \"y-title\"\n             :transform (str \"translate(-62 0) rotate(-90 \" (X 0) \" \" (Y 0) \")\")}\n         [:text {:key        \"note\"\n                 :class-name (:annotation styles)\n                 :x          (X 1)\n                 :y          (Y 0)}\n          y-title]]\n\n        [:g {:key \"x-title\" :transform (str \"translate(0 50)\")}\n         [:text {:key        \"note\"\n                 :class-name (:annotation styles)\n                 :x          (X 2.5)\n                 :y          (Y 0)}\n          x-title]]\n\n        (rum/with-key (plot {:X X :Y Y} plot-style (as-point-series data) radical?) \"plot\")\n\n        ; Add grid overlay\n        (map-indexed (fn [k x_k] [:line {:key              (str \"x\" x_k)\n                                         :x1               (X x_k)\n                                         :x2               (X x_k)\n                                         :y1               (Y 0)\n                                         :y2               (Y 100)\n                                         :stroke           \"#fff\"\n                                         :stroke-opacity   0.5\n                                         :stroke-width     1\n                                         :stroke-dasharray (if (zero? (mod (inc k) 5)) \"5 5\" \"2 10\")}])\n          (range 1 N))\n\n        (map-indexed (fn [k y_k] [:line {:key              (str \"y\" y_k)\n                                         :x1               (X 0)\n                                         :x2               (X N)\n                                         :y1               (Y y_k)\n                                         :y2               (Y y_k)\n                                         :stroke           \"#fff\"\n                                         :stroke-opacity   0.5\n                                         :stroke-width     1\n                                         :stroke-dasharray (if (odd? k) \"5 5\" \"2 10\")}])\n          (range 10 100 10))]\n\n       ]]]))\n\n(rum/defc curves < rum/reactive rum/static (rum/local [] ::data)\n  [data ttt]\n  (let [margin {:top 10 :right 10 :bottom 0 :left 0}\n        padding {:top 20 :right 0 :bottom 60 :left 80}\n        outer {:width 400 :height 400}\n        y-title [:curves/y-axis \"Percentage of men surviving\"]\n        x-title [:curves/x-axis \"Years after diagnosis\"]\n        ttt* (rum/react ttt-cursor)]\n    [:div\n\n     (when (= translation-profile :edit)\n       [:div {:style {:font-size 16}}\n        (ttt y-title)])\n\n     (curves-container\n      (assoc (space outer margin padding [0 N] 3 [0 100] 5)\n             :y-title (ttt* y-title)\n             :x-title (ttt* x-title))\n      (rum/react (input-cursor :plot-style))\n      data\n      (pos? (rum/react (input-cursor :primary-rx))))\n     \n     (when (= translation-profile :edit)\n       [:div\n        [:div {:style {:width \"100%\" :text-align \"center\" :font-size 16}}\n         (ttt x-title)]])\n     \n     ]))\n\n(defn benefit [data tk]\n  (tk (nth data 10)))\n\n(defn some-benefit? [data treatment-key] (pos? (benefit data treatment-key)))\n\n(rum/defc legend-item\n  [{:keys [label extra-style icon]}]\n  [:div\n   [:div {:key   3\n          :style (merge {:width          \"50px\"\n                         :display        \"inline-block\"\n                         ;:margin-top     \"15px\"\n                         :vertical-align \"top\"\n                         :text-align     \"right\"}\n                   extra-style)}\n    (when icon icon)]\n   [:div {:key   4\n          :style {:display     \"inline-block\"\n                  :margin-left \"10px\"\n                  :width       \"calc(100% - 60px)\"}}\n    [:p label]]])\n\n(rum/defc legend < rum/reactive [data]\n  [:div {:width \"100%\"}\n   [:div {:style {:border-top     (str \"4px dashed \" dashed-stroke)\n                  :width          \"50px\"\n                  :display        \"inline-block\"\n                  :margin-top     \"15px\"\n                  :vertical-align \"top\"}}]\n   [:div {:style {:display     \"inline-block\"\n                  :margin-left \"10px\"\n                  :width       \"calc(100% - 60px)\"}}\n    [:p \" Survival excluding deaths from prostate cancer\"]]\n   (when (pos? (rum/react (input-cursor :primary-rx)))\n     [:p (dead-icon (fill 1)) \" Estimated survival with radical treatment\"])\n\n   [:div\n    [:div {:key   3\n           :style {:width          \"50px\"\n                   :display        \"inline-block\"\n                   :margin-top     \"15px\"\n                   :vertical-align \"top\"\n                   :text-align     \"right\"}}\n     (dead-icon (treatment-fills 0))]\n    [:div {:key   4\n           :style {:display     \"inline-block\"\n                   :margin-left \"10px\"\n                   :width       \"calc(100% - 60px)\"}}\n     [:p \" Conservative management\"]]]\n\n   ])\n\n(rum/defc legend2 < rum/reactive [plot-style radical? ttt]\n  [:div {:width \"100%\"}\n   (legend-item {:label       (ttt [:lgd2/sedfpc \"Survival excluding deaths from prostate cancer\"])\n                 :extra-style {:border-top (str \"5px dashed \" dashed-stroke)\n                               :margin-top 9}\n                 :icon        nil})\n\n   (when radical?\n     (condp = plot-style\n       :area1\n       (legend-item {:label    (ttt [:lgd2/eswrt \"Estimated survival with radical treatment\"])\n                     :extra-style nil\n                     :icon        (dead-icon (treatment-fills 1))})\n\n       :line2\n       [:div\n\n        (legend-item {:label       (ttt [:lgd2/protbae \"Potential range of treatment benefit above estimate\"])\n                      :extra-style nil\n                      :icon        (dead-icon (:radical-above (plot-style fills-by-style*)))})\n        (legend-item {:label       (ttt [:lgd2/eswrt \"Estimated survival with radical treatment\"])\n                      :extra-style {:border-top (str \"3px solid \" (treatment-fills 0))\n                                    :margin-top 9}\n                      :icon        nil})\n        (legend-item {:label       (ttt [:lgd2/protbbe \"Potential range of treatment benefit below estimate\"])\n                      :extra-style nil\n                      :icon        (dead-icon (:radical (plot-style fills-by-style*)))})]))\n\n   (legend-item {:label (ttt [:lgd2/icm \"Initial conservative management\"])\n                 :icon  (dead-icon (treatment-fills 0))})\n\n   ])\n\n(defn extract-data [results radical?]\n  \"extract plot data from the model run. Include radical treatment if radical?\"\n  (let [;years (range 0 11)\n        one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (when radical? (map one-sum\n                                          (get-in results [:radical :pred-PC-cum])\n                                          (get-in results [:radical :pred-NPC-cum])))\n        conservative-survival (map one-sum\n                                (get-in results [:conservative :pred-PC-cum])\n                                (get-in results [:conservative :pred-NPC-cum]))]\n    [conservative-survival                                  ; 0 conservative\n     (when radical? radical-survival)                       ; 1 radical\n     ;(map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; 2 dotted orange\n     (map #(* 100 %) (get-in results [:conservative :NPC-survival]))\n     ]))\n\n\n(rum/defcs results-in-curves < rum/static rum/reactive sizing-mixin [state {:keys [printable ttt]}]\n  (let [width (rum/react (:width state))\n        side-by-side (or printable (> width 600))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        plot-style (rum/react (input-cursor :plot-style))\n        ;point-series (as-point-series data)\n        ]\n    [:div {:style {:position \"relative\"}}\n\n     [:p {:style {:margin-top \"15px\"}}\n      (ttt [:curves/text1 \"This graph shows the percentage of men surviving up to\"]) \" \" N \" \" (ttt [:curves/text2 \"years. These results are based on the inputs and treatment you selected\"])]\n\n\n     [:div {:style {:width   (if side-by-side \"70%\" \"100%\")\n                    :max-width 350\n                    :display \"inline-block\"}}\n      [:div {:style {:padding \"15px 40px 0px 0px\"}} (curves data ttt)]]\n     [:div {:style {:padding-top    \"30px\"\n                    :vertical-align \"top\"\n                    :width          (if side-by-side \"30%\" \"100%\")\n                    :display        \"inline-block\"}}\n      (legend2 plot-style radical? ttt)\n      ]]))"]}