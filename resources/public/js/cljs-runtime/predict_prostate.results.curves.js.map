{"version":3,"sources":["predict_prostate/results/curves.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.results.curves/styles","predict-prostate.results.curves/as-point-series","plot-layers","cljs.core.into","iter__4611__auto__","s__33027","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__33029","cljs.core/chunk-buffer","i__33028","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33026","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","time-series","cljs.core.map_indexed","i","v","rum.core/lazy-build","rum.core/build-defc","p__33036","map__33037","cljs.core/--destructure-map","cljs.core.get","daiquiri.core/create-element","attrs33054","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.interpreter/interpret","predict-prostate.results.curves/line-plot","X","Y","scale","point-series","line-style","point","x","y","cljs.core.merge","p1__33033#","cljs.core.map","p__33056","map__33057","attrs33070","predict-prostate.results.curves/area-plot","area-style","base","clojure.string.join","p1__33055#","cljs.core/last","p__33076","map__33077","pred__33078","expr__33079","attrs33075","predict-prostate.results.curves/plot","plot-style","data","radical?","cljs.core/=","cljs.core.nth","predict-prostate.results.util/treatment-fills","predict-prostate.results.util/dashed-stroke","predict-prostate.results.util/fills-by-style*","p__33081","map__33082","predict-prostate.results.curves/curves-container","outer","margin","inner","padding","width","height","x-title","y-title","svg.scales/->Identity","predict-prostate.state.run-time/N","x-ticks","svg.scales/ticks","y-ticks","svg.scales/i->o","svg.scales/out","svg.axis/axisBottom","svg.axis/axisLeft","svg.scales/tick-format-specifier","rum.core/with-key","k","x_k","cljs.core/mod","cljs.core.range","y_k","cljs.core/odd?","attrs33083","predict-prostate.results.curves/curves","rum.core/reactive","rum.core/static","rum.core.local","ttt","ttt*","rum.core/react","predict-prostate.state.run-time/ttt-cursor","cljs.core._EQ_","translations.config/translation-profile","cljs.core.assoc","svg.space/space","predict-prostate.state.run-time/input-cursor","predict-prostate.results.curves/benefit","tk","G__33088","predict-prostate.results.curves/some-benefit?","treatment-key","p__33089","map__33090","attrs33110","predict-prostate.results.curves/legend-item","label","extra-style","icon","predict-prostate.results.curves/legend","predict-prostate.components.primitives/dead-icon","predict-prostate.results.util/fill","pred__33158","expr__33159","js/Error","predict-prostate.results.curves/legend2","G__33155","G__33165","G__33169","G__33174","G__33176","G__33178","predict-prostate.results.curves/extract-data","results","p1__33179#","p2__33180#","one-sum","radical-survival","cljs.core.get_in","conservative-survival","p1__33181#","rum.core/build-defcs","p__33188","map__33189","predict-prostate.results.curves/results-in-curves","predict-prostate.mixins/sizing-mixin","state","printable","side-by-side","or__4212__auto__","predict-prostate.state.run-time/results-cursor","G__33191","G__33193","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.curves\n  (:require [clojure.string :as str]\n            [rum.core :as rum]\n            [predict-prostate.results.util :refer [fill treatment-fills dashed-stroke fills-by-style*]]\n            [predict-prostate.state.run-time :refer [N results-cursor input-cursor ttt-cursor]]\n            [predict-prostate.components.primitives :refer [dead-icon]]\n            [predict-prostate.mixins :refer [sizing-mixin]]\n            [svg.space :refer [space]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [svg.axis :refer [axisBottom axisLeft]]\n            [svg.scales :refer [->Identity i->o out ticks tick-format-specifier]]\n            [translations.config :refer [translation-profile]]))\n\n\n(enable-console-print!)\n\n(defstyle styles\n  [\".outer\" {:fill   \"none\"\n             :stroke \"none\"}]\n  [\".inner\" {:fill             \"#fff\"\n             :stroke           \"#000\"\n             :stroke-opacity   0\n             :stroke-width     0.5\n             :stroke-dasharray \"3, 4\"}]\n  [\".annotation\" {\n                  :font-size \"14pt\"\n                  }]\n  [\".arrow\" {\n             :stroke       \"#000\"\n             :stroke-width \"1.5px\"\n             }])\n\n\n(defn as-point-series [plot-layers]\n  \"Convert a vector of data-layers of time-series y-values to a vector of time-series of [x y] points.\"\n  (into [] (for [time-series plot-layers]\n             (into [] (map-indexed (fn [i v] [i v]) time-series)))))\n\n(rum/defc line-plot [{:keys [X Y] :as scale} point-series line-style]\n  \"X and Y are the x-axis and y-axis scale functions.\n  Data should look something like this:\n  [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587]]\"\n\n  (let [point (fn [x y] (str (X x) \" \" (Y y)))]\n    [:g\n     [:polyline (merge {:points (map #(apply point %) point-series)} line-style)]]))\n\n(rum/defc area-plot\n  \"scale contains the x-axis and y-axis scale functions.\n  Point series should look something like this:\n  [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587]]\n  Baseline is the \"\n  ([scale point-series area-style]\n   (area-plot scale point-series area-style 0))\n  ([{:keys [X Y]} point-series area-style base]\n   (when (seq point-series)\n     (let [point (fn [x y] (str (X x) \" \" (Y y)))]\n       [:g\n        [:polygon (merge {:points (str/join \", \" [(str/join \", \" (map #(apply point %) point-series))\n                                                  (str/join \", \" [(point (first (last point-series)) base)\n                                                                  (point (first (first point-series)) base)])])}\n                    area-style)]]))))\n\n(rum/defc plot [{:keys [X Y] :as scale} plot-style data radical?]\n  \"X and Y are the x-axis and y-axis scale functions.\n  Data should look something like this:\n  ([[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 98.89556593176486]  ... [9 64.83779488900586]  [10 60.8297996952587] ]\n   [[0 100]  [1 99.93906220645762]  ... [9 98.75403990843078]  [10 98.5298358866154] ])\"\n\n  (condp = plot-style\n    :area1\n    [:g\n     ;(map-indexed #(rum/with-key (area-plot scale (nth data %1) {:fill (treatment-fills %1)}) (str \"a\" %1)) area-data)\n     (area-plot scale (nth data 1) {:fill (treatment-fills 1)})\n     (area-plot scale (nth data 0) {:fill (treatment-fills 0)})\n     (line-plot scale (nth data 2) {:fill \"none\" :stroke dashed-stroke :strokeDasharray \"8,8\" :strokeWidth 5 :strokeLinecap \"round\"})\n     ]\n\n    :line2\n    [:g\n     ; light blue fill\n     (when radical? (area-plot scale (nth data 2) {:fill (:radical-above (:line2 fills-by-style*))}))\n\n     ; light blue fill\n     (when radical? (area-plot scale (nth data 1) {:fill (:radical (:line2 fills-by-style*))}))\n\n     ; dotted orange\n     (line-plot scale (nth data 2) {:fill \"none\" :stroke dashed-stroke :strokeDasharray \"8,8\" :strokeWidth 5 :strokeLinecap \"round\"})\n\n     ; dark blue conservative\n     (area-plot scale (nth data 0) {:fill (treatment-fills 0)})\n\n     ; dark blue line\n     (line-plot scale (nth data 1) {:fill \"none\" :stroke (treatment-fills 0) :strokeWidth 2 :strokeLinecap \"round\"})\n\n     ]\n\n\n\n    [:text (str \"bad plot-style\" plot-style)]\n    ))\n\n\n(rum/defc curves-container [{:keys [outer margin inner padding width height x y x-title y-title]} plot-style data radical?]\n  (let [inner (if (nil? inner) {:width  (- (:width outer) (:left margin) (:right margin))\n                                :height (- (:height outer) (:top margin) (:bottom margin))}\n                               inner)\n        width (if (nil? width) (- (:width inner) (:left padding) (:right padding)) width)\n        height (if (nil? height) (- (:height inner) (:top padding) (:bottom padding)) height)\n        x (if (nil? x) (->Identity [0 width] N) x)\n        x-ticks (ticks x)                                   ;(if (nil? x-ticks) (ticks 0 width 10) x-ticks)\n        y (if (nil? y) (->Identity [0 height] 10) y)\n        y-ticks (ticks y)                                   ;(if (nil? y-ticks) (ticks 0 height 5) y-ticks)\n        X (i->o x)\n        Y (i->o y)\n        ]\n\n    [:div {:style {:margin      \"0 auto\"\n                   :width       \"100%\"\n                   :height      0\n                   :padding-top \"100%\"\n                   :position    \"relative\"\n                   }}\n     [:svg {:style    {:position \"absolute\"\n                       :top      0\n                       :left     0\n                       }\n            :view-box (str \" 0 0 \" (:width outer) \" \" (:height outer))}\n\n      [:g {:key       0\n           :transform (str \"translate(\" (:left margin) \", \" (:top margin) \")\")}\n\n       [:rect {:key        1\n               :class-name (:outer styles)\n               :width      (:width inner)\n               :height     (:height inner)}]\n\n       ;;\n       ;; define the coordinate system\n       ;;\n       [:g {:key       2\n            :transform (str \"translate(\" (:left padding) \",\" (:top padding) \")\")}\n        [:rect {:key        1\n                :class-name (:inner styles)\n                :width      width\n                :height     height}]\n\n        ;; axes on all edges\n        [:g {:key       \"bottom\"\n             ;:class-name \".xaxis\"\n             :transform (str \"translate(0,\" (+ (first (out y)) 10) \")\")}\n         (axisBottom {:scale x :ticks x-ticks})]\n\n        [:g {:key       \"left\"\n             :transform (str \"translate(\" (- (first (out x)) 10) \",0)\")}\n         (axisLeft {:scale y :ticks y-ticks :format-specifier (str (tick-format-specifier y) \"%\")})]\n\n\n        [:g {:key       \"y-title\"\n             :transform (str \"translate(-62 0) rotate(-90 \" (X 0) \" \" (Y 0) \")\")}\n         [:text {:key        \"note\"\n                 :class-name (:annotation styles)\n                 :x          (X 1)\n                 :y          (Y 0)}\n          y-title]]\n\n        [:g {:key \"x-title\" :transform (str \"translate(0 50)\")}\n         [:text {:key        \"note\"\n                 :class-name (:annotation styles)\n                 :x          (X 2.5)\n                 :y          (Y 0)}\n          x-title]]\n\n        (rum/with-key (plot {:X X :Y Y} plot-style (as-point-series data) radical?) \"plot\")\n\n        ; Add grid overlay\n        (map-indexed (fn [k x_k] [:line {:key              (str \"x\" x_k)\n                                         :x1               (X x_k)\n                                         :x2               (X x_k)\n                                         :y1               (Y 0)\n                                         :y2               (Y 100)\n                                         :stroke           \"#fff\"\n                                         :stroke-opacity   0.5\n                                         :stroke-width     1\n                                         :stroke-dasharray (if (zero? (mod (inc k) 5)) \"5 5\" \"2 10\")}])\n          (range 1 N))\n\n        (map-indexed (fn [k y_k] [:line {:key              (str \"y\" y_k)\n                                         :x1               (X 0)\n                                         :x2               (X N)\n                                         :y1               (Y y_k)\n                                         :y2               (Y y_k)\n                                         :stroke           \"#fff\"\n                                         :stroke-opacity   0.5\n                                         :stroke-width     1\n                                         :stroke-dasharray (if (odd? k) \"5 5\" \"2 10\")}])\n          (range 10 100 10))]\n\n       ]]]))\n\n(rum/defc curves < rum/reactive rum/static (rum/local [] ::data)\n  [data ttt]\n  (let [margin {:top 10 :right 10 :bottom 0 :left 0}\n        padding {:top 20 :right 0 :bottom 60 :left 80}\n        outer {:width 400 :height 400}\n        y-title [:curves/y-axis \"Percentage of men surviving\"]\n        x-title [:curves/x-axis \"Years after diagnosis\"]\n        ttt* (rum/react ttt-cursor)]\n    [:div\n\n     (when (= translation-profile :edit)\n       [:div {:style {:font-size 16}}\n        (ttt y-title)])\n\n     (curves-container\n      (assoc (space outer margin padding [0 N] 3 [0 100] 5)\n             :y-title (ttt* y-title)\n             :x-title (ttt* x-title))\n      (rum/react (input-cursor :plot-style))\n      data\n      (pos? (rum/react (input-cursor :primary-rx))))\n     \n     (when (= translation-profile :edit)\n       [:div\n        [:div {:style {:width \"100%\" :text-align \"center\" :font-size 16}}\n         (ttt x-title)]])\n     \n     ]))\n\n(defn benefit [data tk]\n  (tk (nth data 10)))\n\n(defn some-benefit? [data treatment-key] (pos? (benefit data treatment-key)))\n\n(rum/defc legend-item\n  [{:keys [label extra-style icon]}]\n  [:div\n   [:div {:key   3\n          :style (merge {:width          \"50px\"\n                         :display        \"inline-block\"\n                         ;:margin-top     \"15px\"\n                         :vertical-align \"top\"\n                         :text-align     \"right\"}\n                   extra-style)}\n    (when icon icon)]\n   [:div {:key   4\n          :style {:display     \"inline-block\"\n                  :margin-left \"10px\"\n                  :width       \"calc(100% - 60px)\"}}\n    [:p label]]])\n\n(rum/defc legend < rum/reactive [data]\n  [:div {:width \"100%\"}\n   [:div {:style {:border-top     (str \"4px dashed \" dashed-stroke)\n                  :width          \"50px\"\n                  :display        \"inline-block\"\n                  :margin-top     \"15px\"\n                  :vertical-align \"top\"}}]\n   [:div {:style {:display     \"inline-block\"\n                  :margin-left \"10px\"\n                  :width       \"calc(100% - 60px)\"}}\n    [:p \" Survival excluding deaths from prostate cancer\"]]\n   (when (pos? (rum/react (input-cursor :primary-rx)))\n     [:p (dead-icon (fill 1)) \" Estimated survival with radical treatment\"])\n\n   [:div\n    [:div {:key   3\n           :style {:width          \"50px\"\n                   :display        \"inline-block\"\n                   :margin-top     \"15px\"\n                   :vertical-align \"top\"\n                   :text-align     \"right\"}}\n     (dead-icon (treatment-fills 0))]\n    [:div {:key   4\n           :style {:display     \"inline-block\"\n                   :margin-left \"10px\"\n                   :width       \"calc(100% - 60px)\"}}\n     [:p \" Conservative management\"]]]\n\n   ])\n\n(rum/defc legend2 < rum/reactive [plot-style radical? ttt]\n  [:div {:width \"100%\"}\n   (legend-item {:label       (ttt [:lgd2/sedfpc \"Survival excluding deaths from prostate cancer\"])\n                 :extra-style {:border-top (str \"5px dashed \" dashed-stroke)\n                               :margin-top 9}\n                 :icon        nil})\n\n   (when radical?\n     (condp = plot-style\n       :area1\n       (legend-item {:label    (ttt [:lgd2/eswrt \"Estimated survival with radical treatment\"])\n                     :extra-style nil\n                     :icon        (dead-icon (treatment-fills 1))})\n\n       :line2\n       [:div\n\n        (legend-item {:label       (ttt [:lgd2/protbae \"Potential range of treatment benefit above estimate\"])\n                      :extra-style nil\n                      :icon        (dead-icon (:radical-above (plot-style fills-by-style*)))})\n        (legend-item {:label       (ttt [:lgd2/eswrt \"Estimated survival with radical treatment\"])\n                      :extra-style {:border-top (str \"3px solid \" (treatment-fills 0))\n                                    :margin-top 9}\n                      :icon        nil})\n        (legend-item {:label       (ttt [:lgd2/protbbe \"Potential range of treatment benefit below estimate\"])\n                      :extra-style nil\n                      :icon        (dead-icon (:radical (plot-style fills-by-style*)))})]))\n\n   (legend-item {:label (ttt [:lgd2/icm \"Initial conservative management\"])\n                 :icon  (dead-icon (treatment-fills 0))})\n\n   ])\n\n(defn extract-data [results radical?]\n  \"extract plot data from the model run. Include radical treatment if radical?\"\n  (let [;years (range 0 11)\n        one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (when radical? (map one-sum\n                                          (get-in results [:radical :pred-PC-cum])\n                                          (get-in results [:radical :pred-NPC-cum])))\n        conservative-survival (map one-sum\n                                (get-in results [:conservative :pred-PC-cum])\n                                (get-in results [:conservative :pred-NPC-cum]))]\n    [conservative-survival                                  ; 0 conservative\n     (when radical? radical-survival)                       ; 1 radical\n     ;(map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; 2 dotted orange\n     (map #(* 100 %) (get-in results [:conservative :NPC-survival]))\n     ]))\n\n\n(rum/defcs results-in-curves < rum/static rum/reactive sizing-mixin [state {:keys [printable ttt]}]\n  (let [width (rum/react (:width state))\n        side-by-side (or printable (> width 600))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        plot-style (rum/react (input-cursor :plot-style))\n        ;point-series (as-point-series data)\n        ]\n    [:div {:style {:position \"relative\"}}\n\n     [:p {:style {:margin-top \"15px\"}}\n      (ttt [:curves/text1 \"This graph shows the percentage of men surviving up to\"]) \" \" N \" \" (ttt [:curves/text2 \"years. These results are based on the inputs and treatment you selected\"])]\n\n\n     [:div {:style {:width   (if side-by-side \"70%\" \"100%\")\n                    :max-width 350\n                    :display \"inline-block\"}}\n      [:div {:style {:padding \"15px 40px 0px 0px\"}} (curves data ttt)]]\n     [:div {:style {:padding-top    \"30px\"\n                    :vertical-align \"top\"\n                    :width          (if side-by-side \"30%\" \"100%\")\n                    :display        \"inline-block\"}}\n      (legend2 plot-style radical? ttt)\n      ]]))"]}