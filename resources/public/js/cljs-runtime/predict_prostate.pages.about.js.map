{"version":3,"sources":["predict_prostate/pages/about.cljs"],"mappings":"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","names":["predict-prostate.pages.about/page-components","predict-prostate.pages.about/save-offsets","state","cljs.core.println","vec__47764","cljs.core.nth","k","_","offsets","comp","dom-node","js/ReactDOM.findDOMNode","cljs.core.swap_BANG_","cljs.core/assoc","predict-prostate.pages.about/scroll-to-mixin","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","predict-prostate.pages.about/hr","daiquiri.interpreter/interpret","predict-prostate.pages.about/sectionc","rum.core/static","rum.core/reactive","ttt","rt","rum.core/react","predict-prostate.state.run-time/route","cljs.core/name","predict-prostate.content-reader/all-subsections","predict-prostate.pages.about/scroller","vec__47784","vec__47787","map__47790","cljs.core/--destructure-map","cljs.core.get","page","scroll-section","cljs.core.keyword","interop.utils/scrollTo","cljs.core/deref","rum.core/build-defcs","vec__47794","map__47797","vec__47798","seq__47799","cljs.core/seq","first__47800","cljs.core/first","cljs.core/next","predict-prostate.pages.about/about","rum.core.local","route","preamble","predict_prostate.content_reader.section","predict-prostate.layout.header/header","predict-prostate.layout.header/header-banner","sec","p1__47793#","p2__47792#","cljs.core.map_indexed","rum.core/with-key","predict-prostate.components.bs3-modal/editor-modal","predict-prostate.layout.header/footer-banner","predict-prostate.layout.header/footer"],"sourcesContent":["(ns predict-prostate.pages.about\n  (:require [rum.core :as rum]\n            [predict-prostate.components.button :refer [start-button]]\n            [predict-prostate.layout.header :refer [header header-banner footer footer-banner]]\n            [predict-prostate.content-reader :refer [section all-subsections]]\n            [predict-prostate.state.run-time :refer [route]]\n            [predict-prostate.results.util :refer [alison-blue-1 alison-blue-2 alison-blue-3 alison-pink]]\n            [graphics.simple-icons :refer [icon]]\n            [pubsub.feeds :refer [publish]]\n            [interop.utils :refer [scrollTo]]\n            [predict-prostate.components.bs3-modal :refer [editor-modal]]\n            ))\n\n(def page-components {:about [\"about\"]\n                      :overview  [\"overview\" \"whatpredictdoes\" \"whoisitfor\" \"howpredictworks\" \"whobuiltpredict\"]\n                      :technical [\"technical\" \"history\" \"preversions\" \"publications\"]\n                      })\n\n(defn save-offsets [state]\n  (println \"*save-offsets* args\" (:rum/args state))\n  (let [[k _ offsets] (:rum/args state)\n        comp (:rum/react-component state)\n        dom-node (js/ReactDOM.findDOMNode comp)]\n    (swap! offsets assoc k (.-offsetTop dom-node))\n    state))\n\n(def scroll-to-mixin {:did-mount save-offsets\n                      :did-update save-offsets})\n\n(rum/defc hr []\n  [:hr {:style {:color \"red\"}}])\n\n(rum/defc sectionc < scroll-to-mixin rum/static rum/reactive [k ttt offsets]\n  (let [rt (rum/react route)]\n    [:div {:id (name k)}\n     (all-subsections ttt (name k))]))\n\n(def scroller {:did-update (fn [state]\n                             (println \"*scroller* args\" (:rum/args state))\n                             (let [[_ [_ {page :page scroll-section :section}]] (:rum/args state)\n                                   scroll-section (keyword scroll-section)]\n                               (scrollTo (if scroll-section (get @(::offsets state) (name scroll-section)) 0))\n                               )\n                             state)})\n\n\n(rum/defcs about\n  \"Renders a (text) page given the bide parsed route containing a page, and optionally a section.\"\n  < (rum/local {} ::offsets) < rum/static scroller \n           [state ttt route]\n  (let [[_ {page :page scroll-section :section}] route\n        page (keyword page)\n        scroll-section (keyword scroll-section)\n        [_ & preamble] (section ttt \"tool-preamble\")]\n\n    [:.container-fluid\n     (header ttt)\n     (header-banner ttt \"about-preamble\")\n\n     [:#main-content.row {:tab-index -1}\n      [:.col-sm-10.col-sm-offset-1.col-lg-8.col-lg-offset-2 {:style {:min-height \"calc(100vh - 700px)\"}}\n       (when page\n         (let [sec (if scroll-section\n                     (map-indexed #(rum/with-key (sectionc %2 ttt (::offsets state)) %1) (page-components page))\n                     (all-subsections ttt (name page)))]        ; this is needed for FAQs\n           sec))]]\n     (editor-modal)\n     (footer-banner ttt)\n\n     #_(if scroll-section\n         (js/scroll #js {:left 0 :top (get @(::offsets state) (name scroll-section)) :behavior \"smooth\"})\n         (js/scroll #js {:left 0 :top 0 :behavior \"smooth\"}))\n\n     ;(scrollTo (if scroll-section (get @(::offsets state) (name scroll-section)) 0))\n\n     [:.row.screen-only\n      (footer)]]))\n\n\n\n\n"]}