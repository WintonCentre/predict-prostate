{"version":3,"sources":["predict_prostate/layout/treatments_panel.cljs"],"mappings":"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","names":["cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.layout.treatments-panel/treatments-style","predict-prostate.layout.treatments-panel/treatment-input-style","rum.core/lazy-build","rum.core/build-defc","p__36433","map__36434","cljs.core/--destructure-map","cljs.core.get","daiquiri.core/create-element","daiquiri.util/join-classes","daiquiri.interpreter/interpret","predict-prostate.layout.treatments-panel/dummy-input","rum.core/reactive","rum.core/static","label","help-id","key","error","props","children","predict-prostate.components.button/small-help-button","clojure.string/replace","clojure.string/lower-case","cljs.core/name","p__36436","map__36437","daiquiri.interpreter/element-attributes","predict-prostate.layout.treatments-panel/treatment-input","predict-prostate.mixins/treatment-monitor","ttt","tk","cljs.core.merge","cljs.core._EQ_","rum.core/react","predict-prostate.state.run-time/input-cursor","G__36439","cljs.core.keyword","predict-prostate.layout.treatments-panel/add-suffix","n","predict-prostate.layout.treatments-panel/assumed-treatment","predict-prostate.state.run-time/input-label","predict-prostate.state.run-time/input-widget","predict-prostate.layout.treatments-panel/labelled-treatment","predict-prostate.state.load-config/render-widget","rum.core/build-defcs","p__36440","map__36441","predict-prostate.layout.treatments-panel/treatments-form","predict-prostate.mixins/sizing-mixin","state","width","font-scale","h-over-w","option","width-1","predict-prostate.layout.treatments-panel/treatments-options","predict-prostate.state.run-time/results-cursor"],"sourcesContent":["(ns predict-prostate.layout.treatments-panel\n  (:require                                                 ;[org.martinklepsch.derivatives :as derivs :refer [drv]]\n            [rum.core :as rum]\n            [clojure.string :as s :refer [replace lower-case]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [graphics.simple-icons :refer [icon]]\n            [predict-prostate.mixins :refer [sizing-mixin treatment-monitor]]\n            [predict-prostate.state.run-time :refer [model results-cursor input-widget input-cursor input-label]]\n            [predict-prostate.components.panels :refer [titled-panel]]\n            [predict-prostate.components.button :refer [small-help-button treatment-help-button]]\n            [predict-prostate.state.load-config :refer [live-keys-by-model render-widget]]\n            [predict-prostate.content-reader :refer [all-subsections]]\n            [pubsub.feeds :refer [publish]]\n            ))\n\n(defstyle treatments-style\n  [\"div\" {:font-size \"12px\"}]\n  [\".treatments-header\"\n   {:background-color \"rgba(255, 140, 0, 1) !important\"\n    :color            \"white !important\"\n    :font-size        \"10px !important\"}\n   [\"form\" {:border \"1px solid red\"}]])\n\n(defstyle treatment-input-style\n  [\".closer\" {:margin-bottom \"10px\"}])\n\n(rum/defc dummy-input < rum/reactive rum/static\n  [{:keys [label help-id key error] :as props} children]\n\n  #_[:div {:key   key :data-key key\n           :class (str \"form-group \" (:closer treatment-input-style) (if error \" has-error\" \"\"))}\n     [:.col-xs-6\n      [:label.control-label {:style {:width \"100%\" :text-align \"right\"} :for (name key)} label \" \"\n       (when help-id (small-help-button {:help-id (s/replace (lower-case help-id) \" \" \"-\")}))\n       ]]\n     [:.col-xs-6\n      children]]\n\n  [:div {:key   key :data-key key\n         :class (str \"form-group \")\n         :style {:vertical-align \"top\"\n                 :width          \"100%\"\n                 :display        \"inline-block\"}}\n\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :width          \"30px\"\n                  :vertical-align \"middle\"}}\n    (when help-id (small-help-button {:help-id (s/replace (lower-case help-id) \" \" \"-\")}))]\n\n   [:div {:style {:display        \"inline-block\"\n                  :vertical-align \"middle\"\n                  :width          \"100px\"}}\n    [:label.control-label {:style {:width      \"100%\"\n                                   :text-align \"left\"\n                                   :padding    \"1px 5px\"} :for (name key)} label\n     ]]\n\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :text-align     \"left\"\n                  :width          \"auto\"                    ;\"calc(100% - 150px)\"\n                  :vertical-align \"middle\"\n                  }}\n    [:div {:style {:padding-left   0\n                   :display        \"inline-block\"\n                   :vertical-align \"middle\"\n                   }} children]]]\n\n  )\n\n(rum/defc treatment-input < rum/reactive rum/static treatment-monitor\n  [{:keys [ttt label help-id key]} children]\n  (let [tk key]\n    [:div {:key   key :data-key key\n           :class (str \"form-group \")\n           :style {:vertical-align \"top\"\n                   :width          \"100%\"\n                   :display        \"inline-block\"}}\n\n     [:div {:style {:display        \"inline-block\"\n                    :margin-left    \"10px\"\n                    :width          \"30px\"\n                    :vertical-align \"middle\"}}\n      (when help-id (small-help-button {:help-id (s/replace (lower-case help-id) \" \" \"-\")}))]\n\n     [:div {:style {:display        \"inline-block\"\n                    :vertical-align \"middle\"\n                    :width          \"100px\"}}\n      [:label.control-label {:style (merge {:width     \"100px\"\n                                            :textAlign \"left\"\n                                            :padding   \"1px 5px\"}\n                                           (when (= :disabled (rum/react (input-cursor key)))\n                                             {:color \"#CCC\"}))\n                             :for   (name key)}\n       (ttt [(keyword (str \"treatment/\" (name key))) label]) #_label]]\n     [:div {:style {:display        \"inline-block\"\n                    :margin-left    \"10px\"\n                    :text-align     \"left\"\n                    :width          \"auto\"                  ;\"calc(100% - 150px)\"\n                    :vertical-align \"middle\"\n                    }}\n      [:div {:style {:padding-left   0\n                     :display        \"inline-block\"\n                     :vertical-align \"middle\"\n                     }} children]\n      ]\n\n     ])\n  )\n\n\n(defn add-suffix [key n] key)\n\n(comment\n  (add-suffix :chemo 0)\n  ; => :chemo\n  )\n\n\n(rum/defc assumed-treatment < rum/reactive\n                              \"Creates a labelled treatment input widget for the given treatment option and key\"\n  [label key]\n  (dummy-input {:label   (input-label key)                  ; (if-let [lab (input-label key-n)] lab label)\n                :help-id label\n                :key     key}\n               (input-widget key)))\n\n(rum/defc labelled-treatment < rum/reactive\n                               \"Creates a labelled treatment input widget for the given treatment option and key\"\n  [ttt label key]\n  (treatment-input {:ttt ttt\n                    :label   (input-label key)              ; (if-let [lab (input-label key-n)] lab label)\n                    :help-id label\n                    :key     key}\n                   (render-widget ttt key) #_(input-widget key)))\n\n\n(rum/defcs treatments-form < rum/reactive sizing-mixin\n  [state {:keys [ttt width font-scale h-over-w option]\n          :or   {width      \"100%\"\n                 h-over-w   1\n                 font-scale 1}}]\n  (let [width-1 (rum/react (:width state))]\n\n    [:form.form-horizontal {:style {:width     width\n                                    :font-size (* (/ width-1 25) font-scale)}}\n     [:div\n      (labelled-treatment ttt \"Regime\" :primary-rx)\n      ]]))\n\n\n\n(rum/defc treatments-options < rum/reactive\n  [ttt]\n  (when (rum/react results-cursor)\n    (treatments-form {:ttt ttt :h-over-w 1.5}))\n  )\n\n\n(comment\n\n  (live-keys-by-model model)\n  (:chemo (live-keys-by-model model))\n  )"]}