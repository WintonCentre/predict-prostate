{"version":3,"sources":["predict_prostate/layout/treatments_panel.cljs"],"mappings":"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","names":["cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.layout.treatments-panel/treatments-style","predict-prostate.layout.treatments-panel/treatment-input-style","rum.core/build-defc","p__129588","map__129589","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","predict-prostate.layout.treatments-panel/dummy-input","rum.core/reactive","rum.core/static","label","help-id","key","error","props","children","G__129594","predict-prostate.components.button/small-help-button","clojure.string/replace","clojure.string/lower-case","cljs.core/name","p__129596","map__129597","sablono.interpreter/attributes","predict-prostate.layout.treatments-panel/treatment-input","predict-prostate.mixins/treatment-monitor","tk","G__129599","cljs.core.merge","cljs.core._EQ_","rum.core/react","predict-prostate.state.run-time/input-cursor","predict-prostate.layout.treatments-panel/add-suffix","n","predict-prostate.layout.treatments-panel/assumed-treatment","G__129601","G__129602","predict-prostate.state.run-time/input-label","predict-prostate.state.run-time/input-widget","predict-prostate.layout.treatments-panel/labelled-treatment","G__129604","G__129605","rum.core/build-defcs","p__129607","map__129608","attrs129610","cljs.core/map?","predict-prostate.layout.treatments-panel/treatments-form","predict-prostate.mixins/sizing-mixin","state","width","font-scale","h-over-w","option","width-1","predict-prostate.layout.treatments-panel/treatments-options","predict-prostate.state.run-time/results-cursor","G__129611"],"sourcesContent":["(ns predict-prostate.layout.treatments-panel\n  (:require                                                 ;[org.martinklepsch.derivatives :as derivs :refer [drv]]\n            [rum.core :as rum]\n            [clojure.string :as s :refer [replace lower-case]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [graphics.simple-icons :refer [icon]]\n            [predict-prostate.mixins :refer [sizing-mixin treatment-monitor]]\n            [predict-prostate.state.run-time :refer [model results-cursor input-widget input-cursor input-label]]\n            [predict-prostate.components.panels :refer [titled-panel]]\n            [predict-prostate.components.button :refer [small-help-button treatment-help-button]]\n            [predict-prostate.state.load-config :refer [live-keys-by-model]]\n            [predict-prostate.content-reader :refer [all-subsections]]\n            [pubsub.feeds :refer [publish]]\n            ))\n\n(defstyle treatments-style\n  [\"div\" {:font-size \"12px\"}]\n  [\".treatments-header\"\n   {:background-color \"rgba(255, 140, 0, 1) !important\"\n    :color            \"white !important\"\n    :font-size        \"10px !important\"}\n   [\"form\" {:border \"1px solid red\"}]])\n\n(defstyle treatment-input-style\n  [\".closer\" {:margin-bottom \"10px\"}])\n\n(rum/defc dummy-input < rum/reactive rum/static\n  [{:keys [label help-id key error] :as props} children]\n\n  #_[:div {:key   key :data-key key\n           :class (str \"form-group \" (:closer treatment-input-style) (if error \" has-error\" \"\"))}\n     [:.col-xs-6\n      [:label.control-label {:style {:width \"100%\" :text-align \"right\"} :for (name key)} label \" \"\n       (when help-id (small-help-button {:help-id (s/replace (lower-case help-id) \" \" \"-\")}))\n       ]]\n     [:.col-xs-6\n      children]]\n\n  [:div {:key   key :data-key key\n         :class (str \"form-group \")\n         :style {:vertical-align \"top\"\n                 :width          \"100%\"\n                 :display        \"inline-block\"}}\n\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :width          \"30px\"\n                  :vertical-align \"middle\"}}\n    (when help-id (small-help-button {:help-id (s/replace (lower-case help-id) \" \" \"-\")}))]\n\n   [:div {:style {:display        \"inline-block\"\n                  :vertical-align \"middle\"\n                  :width          \"100px\"}}\n    [:label.control-label {:style {:width      \"100%\"\n                                   :text-align \"left\"\n                                   :padding    \"1px 5px\"} :for (name key)} label\n     ]]\n\n   [:div {:style {:display        \"inline-block\"\n                  :margin-left    \"10px\"\n                  :text-align     \"left\"\n                  :width          \"auto\"                    ;\"calc(100% - 150px)\"\n                  :vertical-align \"middle\"\n                  }}\n    [:div {:style {:padding-left   0\n                   :display        \"inline-block\"\n                   :vertical-align \"middle\"\n                   }} children]]]\n\n  )\n\n(rum/defc treatment-input < rum/reactive rum/static treatment-monitor\n  [{:keys [label help-id key]} children]\n  (let [tk key]\n    [:div {:key   key :data-key key\n           :class (str \"form-group \")\n           :style {:vertical-align \"top\"\n                   :width          \"100%\"\n                   :display        \"inline-block\"}}\n\n     [:div {:style {:display        \"inline-block\"\n                    :margin-left    \"10px\"\n                    :width          \"30px\"\n                    :vertical-align \"middle\"}}\n      (when help-id (small-help-button {:help-id (s/replace (lower-case help-id) \" \" \"-\")}))]\n\n     [:div {:style {:display        \"inline-block\"\n                    :vertical-align \"middle\"\n                    :width          \"100px\"}}\n      [:label.control-label {:style (merge {:width     \"100px\"\n                                            :textAlign \"left\"\n                                            :padding   \"1px 5px\"}\n                                           (when (= :disabled (rum/react (input-cursor key)))\n                                             {:color \"#CCC\"}))\n                             :for   (name key)}\n       label]]\n     [:div {:style {:display        \"inline-block\"\n                    :margin-left    \"10px\"\n                    :text-align     \"left\"\n                    :width          \"auto\"                  ;\"calc(100% - 150px)\"\n                    :vertical-align \"middle\"\n                    }}\n      [:div {:style {:padding-left   0\n                     :display        \"inline-block\"\n                     :vertical-align \"middle\"\n                     }} children]\n      ]\n\n     ])\n  )\n\n\n(defn add-suffix [key n] key)\n\n(comment\n  (add-suffix :chemo 0)\n  ; => :chemo\n  )\n\n\n(rum/defc assumed-treatment < rum/reactive\n                              \"Creates a labelled treatment input widget for the given treatment option and key\"\n  [label key]\n  (dummy-input {:label   (input-label key)                  ; (if-let [lab (input-label key-n)] lab label)\n                :help-id label\n                :key     key}\n               (input-widget key)))\n\n(rum/defc labelled-treatment < rum/reactive\n                               \"Creates a labelled treatment input widget for the given treatment option and key\"\n  [label key]\n  (treatment-input {:label   (input-label key)              ; (if-let [lab (input-label key-n)] lab label)\n                    :help-id label\n                    :key     key}\n                   (input-widget key)))\n\n\n(rum/defcs treatments-form < rum/reactive sizing-mixin\n  [state {:keys [width font-scale h-over-w option]\n          :or   {width      \"100%\"\n                 h-over-w   1\n                 font-scale 1}}]\n  (let [width-1 (rum/react (:width state))]\n\n    [:form.form-horizontal {:style {:width     width\n                                    :font-size (* (/ width-1 25) font-scale)}}\n     [:div\n      (labelled-treatment \"Regime\" :primary-rx)\n      ]]))\n\n\n\n(rum/defc treatments-options < rum/reactive\n  []\n  (when (rum/react results-cursor)\n    (treatments-form {:h-over-w 1.5}))\n  )\n\n\n(comment\n\n  (live-keys-by-model model)\n  (:chemo (live-keys-by-model model))\n  )"]}