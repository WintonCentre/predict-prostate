{"version":3,"sources":["predict_prostate/results/charts.cljs"],"mappings":";AAWA,yCAAA,zCAAMA,0FAAQC;AAAd,AAAoB,QAAA,yDAAkBA;;AACtC,wCAAA,xCAAMC,wFAAOD;AAAb,AAAmB,QAAA,yDAAkBA;;AACrC,8CAAA,mFAAA,MAAA,MAAA,7IAAKE;AACL,AAAKC,6CAAW,AAACF,sCAAM,CAAA,0GAAA,nGAAY,kDAAA,lDAACG,sDAASF;AAE7C,0CAAA,1CAAKG;AACL,yCAAA,zCAAKC;AAEL,AAAA,0DAAA,2CAAA,uDAAA,5JAAUI;;AAAV,AAAAH,4CAAA,AAAAC,8CAAAC,gBAAA,mCAAA,mFAAA,mFAAA,mBAAA,2CAAA,+EAAA,iBAAA,mFAAA,iBAAA,2CAAA,4EAAA,QAAA,uDAAA,QAAA,8DAAA,WAAA,gEAAA,MAAA,gEAAA,wBAAA,mFAAA,eAAA,2CAAA,8DAAA,WAAA,0DAAA,MAAA,oDAAA,MAAA,qDAAA,MAAA,uDAAA,MAAA,4EAAA,aAAA,uDAAA,gBAAA,mFAAA,UAAA,2CAAA,8DAAA,WAAA,uDAAA,OAAA,yDAAA,aAAA,mFAAA,WAAA,2CAAA,8DAAA,WAAA,oDAAA,IAAA,uDAAA,OAAA,qDAAA,OAAA,uDAAA,2BAAA,mFAAA,QAAA,2CAAA,8DAAA,WAAA,qDAAA,SAAA,uDAAA,MAAA,iEAAA,QAAA,oDAAA,uBAAA,mFAAA,SAAA,2CAAA,8DAAA,WAAA,uDAAA,SAAA,uDAAA,MAAA,iEAAA,OAAA,oDAAA,+BAAA,mFAAA,QAAA,2CAAA,uEAAA,yCAAA,mFAAA,OAAA,2CAAA,8DAAA,WAAA,4EAAA,QAAA,yDAAA,iBAAA,uEAAA,eAAA,mFAAA,aAAA,2CAAA,8DAAA,WAAA,uDAAA,QAAA,qDAAA,KAAA,uDAAA,OAAA,iEAAA,SAAA,gEAAA,wBAAA,mFAAA,YAAA,wCAAA,iHAAA,2GAAA,gEAAA,uDAAA,iGAAA,8DAAA,2EAAA,iFAAA,uDAAA,WAAA,WAAA,6CAAA,OAAA,WAAA,WAAA,4CAAA,4CAAA,MAAA,mFAAA,kBAAA,2CAAA,8DAAA,WAAA,uDAAA,OAAA,iEAAA,SAAA,0DAAA,SAAA,yDAAA,+CAAA,mFAAA,WAAA,2CAAA,8DAAA,WAAA,gEAAA,6BAAA,iGAAA,mBAAA,mFAAA,OAAA,2CAAA,uDAAA,MAAA,yDAAA,OAAA,8DAAA,WAAA,0DAAA,SAAA,2DAAA,wBAAA,iEAAA,QAAA,uDAAA,UAAA,sEAAA,gBAAA,mFAAA,SAAA,2CAAA,8DAAA,WAAA,qDAAA,QAAA,0DAAA,QAAA,uDAAA,UAAA,gEAAA,gCAAA,mFAAA,SAAA,2CAAA,8DAAA,WAAA,0DAAA,OAAA,uDAAA,IAAA,yDAAA,IAAA,iEAAA,wBAAA,uEAAA,yEAAA,kCAAA;AA0CA;;;4DAAA,AAAAE,oBAAA,WAAAC,3FAAUM;AAAV,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,oDAAA,9HAEWM;cAFX,AAAAJ,4CAAAF,eAAA,2DAAA,hIAEeO;WAFf,AAAAL,4CAAAF,eAAA,sDAAA,xHAEuBQ;WAFvB,AAAAN,4CAAAF,eAAA,oDAAA,tHAE4Bb;AAF5B,AAAA,AAAA,OAAAgB,oBAAA,MAAA,WAAA,uMAAA,YAAA,AAAAA,oBAAA,MAAA,0JAAA,aAAA,kBAAA,4IAAA,SAAA,AAAAA,oBAAA,MAAA,WAAA,eAAA,4IAAA,QAAA,AAAAA,oBAAA,OAAA,WAAA,cAAA,YAAA,AAAAC,2JAAA,AAAAA,qCAAA,AAAAD,oBAAA,MAAA,WAAA,yTAAA,v1CAK4B,gCAAA,IAAA,lBAAIG,kCAAkB,gCAAA,KAAA,nBAAIA,mCAAmB,sDAAA,TAAKC,sFACzD,AAACZ,8CAAMc,4CAAcpB,wGAGR,gCAAA,UAAA,xBAAIiB,wCACJ,gCAAA,KAAA,nBAAIA,6HAGP,gCAAA,UAAA,xBAAIA,wCACJ,gCAAA,KAAA,nBAAIA,oJAEM,4GAAA,/DAAK,AAACI,6CAAe,AAACC,OAAUJ,0DAAiBC,4DAEvD,2EAAA,zDAAIF,cAAIhB,iEACR,gCAAA,dAAIgB,mBAAQhB,qDACZ,gCAAA,KAAA,nBAAIgB,kCACJ,gCAAA,IAAA,lBAAIA;GArBvC,KAAA;AAyBA;;;uDAAA,AAAAR,oBAAA,3EAAUc,sFAEPC,MAAM1B;AAFT,AAAA,AAAA,OAAAiB,8BAGE,iBAAAU,WAAa,2DAAA,oDAAA,uDAAA,tKAACC,qDAAMF,qKAAsB1B;AAA1C,AAAA,0LAAA2B,gFAAAA,lQAACT,0FAAAA,oGAAAA;;GAHH,KAAA;AAMA;;;uDAAA,AAAAP,oBAAA,3EAAUkB,sFAEPH,MAAM1B;AAFT,AAAA,AAAA,OAAAiB,8BAGE,iBAAAa,WAAa,2DAAA,oDAAA,wDAAA,vKAACF,qDAAMF,sKAAuB1B;AAA3C,AAAA,0LAAA8B,gFAAAA,lQAACZ,0FAAAA,oGAAAA;;GAHH,KAAA;AAMA,8CAAA,AAAAP,oBAAA,lEAAUoB,6EAAaC;AAAvB,AAAA,AAAA,OAAAhB,oBAAA,MAAA,WAAA,cAAA,wCAAA,WAAA,AAAAA,oBAAA,MAAA,SAAA,kBAAA,UAAA,AAAAA,oBAAA,MAAA,SAAA,kBAAA,YAAA,AAAAA,oBAAA,MAAA,SAAA,kBAAA,SAAA,AAAAC,kCAAA,AAAAD,oBAAA,MAAA,SAAA,kBAAA,UAAA,AAAAC,5TACkDe,yPAG7BA,iGACCA;GALtB,KAAA;AAOA;;;;iDAAA,AAAArB,oBAAA,WAAAsB,hFAAUE;AAAV,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAApB,4BAAAoB;aAAA,AAAAnB,4CAAAmB,eAAA,pEAGWE;AAHX,AAAA,AAAA,OAAApB,oBAAA,MAAA,WAAA,WAAA,kBAAA,sBAAA,mBAAA,AAAAA,oBAAA,MAAA,YAAA,eAAA,SAAA,AAAAA,oBAAA,OAAA,OAAA,YAAA,cAAA,yBAAA,WAAA,AAAAC,8BAOK,qDAAA,RAAKmB;GAPV,KAAA;AAgBA;;;2CAAA,AAAAC,qBAAA,iBAAAC,jFAAWE,2EAERE;AAFH,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAzB,4BAAAyB;aAAA,AAAAxB,4CAAAwB,eAAA,yDAAA,7HAE4BH;cAF5B,AAAArB,4CAAAwB,eAAA,rEAE8FW;UAF9F,AAAAnC,4CAAAwB,eAAA,oDAAA,rHAEiBI;aAFjB,AAAA5B,4CAAAwB,eAAA,0DAAA,9HAEqBK;mBAFrB,AAAA7B,4CAAAwB,eAAA,0DAAA,pIAEoEQ;cAFpE,AAAAhC,4CAAAwB,eAAA,rEAE2ES;WAF3E,AAAAjC,4CAAAwB,eAAA,oDAAA,tHAEmCvC;iBAFnC,AAAAe,4CAAAwB,eAAA,xEAEmFU;qBAFnF,AAAAlC,4CAAAwB,eAAA,uEAAA,nJAEwCM;mBAFxC,AAAA9B,4CAAAwB,eAAA,qEAAA,/IAEuDO;AAFvD,AAAA,AAAA,OAAA9B,oBAAA,MAAA,eAAA,AAAAC,4tBAAA,AAAAA,mmBAAA,AAAAD,oBAAA,MAAA,SAAA,cAAA,t3CAMc2B,oCACX,sLAAA,AAAA,mFAAA,qEAAA,2CAAA,mEAAA,uDAAA,2CAAA,gEAAA,yFAAA,rrBAAM,EAAI,qDAAA,rDAACQ,6CAAEH,kBAAW,wDAAA,xDAACG,6CAAEF,6TACFJ,0KACST,iEACAQ,oEAClC,6DAAA,AAAA,mFAAA,qEAAA,2CAAA,mEAAA,uDAAA,2CAAA,gEAAA,yFAAA,5jBAAM,qDAAA,rDAACO,6CAAEH,qQACgBH,0KACST,iEACAQ,mGAGDR,kBACAQ,qBAEA,kBAAI,iBAAAQ,oBAAK,6CAAA,7CAACD,iDAAIH;AAAV,AAAA,GAAAI;AAAA,IAAAA,wBAAmBF;AAAnB,AAAA,oBAAAE;AAA2B,oDAAA,7CAACD,qGAASF;;AAArCG;;;AAAAA;;sJApBxC,aAAA,rCAoBoC,xHACE,CAAA,yDAAkB,8CAAA,9CAACC,oHAK/CjB,aAAO,AAACb,6CAAe,AAAC+B,WAAclB;AA1BhD,AAAA,OAAAnB,8BA2BM,4LAAA,1LAAM,EAAK,wDAAA,xDAACkC,6CAAEF,wEAAmB,CAAIb,cAAOmB,oDAC1C,iBAAAC,WAAA,2CAAA,oDAAA,IAAA,yDAAgCpB;AAAhC,AAAA,oKAAAoB,qEAAAA,jOAACrB,+EAAAA,yFAAAA;KADH;;GA3BN,4GAAA,zBAAsBM;AAiCtB,4CAAA,AAAA9B,oBAAA,WAAA8C,3EAAUG;AAAV,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAA5C,4BAAA4C;UAAA,AAAA3C,4CAAA2C,eAAA,jEAA6Bf;WAA7B,AAAA5B,4CAAA2C,eAAA,lEAAiCrC;iBAAjC,AAAAN,4CAAA2C,eAAA,xEAAsCG;AAAtC,AAAA,AAAA;AAAA,OAAA7C,oBAAA,MAAA,uBAAA,AAAA2C,mTAAA,cAAA,AAAA1C,/UAEuB0B,6CACA,8BAAA,2CAAA,oDAAA,iBAAA,2CAAA,0DAAA,jOAAIkB,8SAA0CxC;GAHrE,KAAA;AAMA;;;;sCAAA,AAAAV,oBAAA,WAAAmD,rEAAUI;AAAV,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAjD,4BAAAiD;aAAAA,TAKUY;UALV,AAAA5D,4CAAAgD,eAAA,jEAGuEW;cAHvE,AAAA3D,4CAAAgD,eAAA,rEAG+DU;cAH/D,AAAA1D,4CAAAgD,eAAA,2DAAA,hIAGuDS;WAHvD,AAAAzD,4CAAAgD,eAAA,lEAGeI;iBAHf,AAAApD,4CAAAgD,eAAA,kEAAA,1IAGgCO;kBAHhC,AAAAvD,4CAAAgD,eAAA,oEAAA,7IAG2CQ;cAH3C,AAAAxD,4CAAAgD,eAAA,rEAG2Eb;UAH3E,AAAAnC,4CAAAgD,eAAA,oDAAA,rHAGWpB;YAHX,AAAA5B,4CAAAgD,eAAA,nEAG0BM;iBAH1B,AAAAtD,4CAAAgD,eAAA,xEAGmFd;YAHnF,AAAAlC,4CAAAgD,eAAA,nEAGoBK;AAHpB,AAAA,AAAA,IAOQQ,IAAE,AAACC,gBAAML;IACTM,OAAK,6CAAA,7CAACC,8EAAQ,AAACC,mDAAWC,iBAAE,eAAA,fAACC,mBAAO,4CAAA,5CAACC,kGAAWX;IAChDY,eAAa,uGAAA,2CAAA,yDAAA,eAAA,2CAAA,0DAAA,6DAAA,5XAACC,0TACalB,4DAAYC,6DAAaC;AAV5D,AAAA,OAAArD,oBAAA,MAAA,uBAAA,AAAA2C,2DAAA,QAAA,AAAA3C,oBAAA,MAAA,WAAA,mBAAA,kBAAA,yGAAA,6BAAA,cAAA,oBAAA,oBAAA,kBAAA,YAAA,AAAAA,oBAAA,MAAA,gaAAA,YAAA,uBAAA,eAAA,iBAAAgD,l3BAaiBrB,6CAAWyC,0HAEQ,CAAA,yDAAA,LAAaV,4LASpB,AAACY,2CAAa,sVAAA,pUAAIpC,SACF,AAAA,qGAAgB,CAACD,2CAAAA,+FAAAA,tDAAWsC,2EAAAA,4JAOnE,iBAAAC,WAAA,2CAAA,oDAAA,IAAA,kEAAA,sDAAA,lEAAyBjB;AAAzB,AAAA,0JAAAiB,gEAAAA,lNAAC5B,0EAAAA,oFAAAA;;AAhCP,AAAA,OAAApD,8CAAAQ,oBAAA,MAAA,EAAA,AAAAiD,qBAAAD,aAAA,AAAAL,+BAAAK,YAAA,MAAA,EAAA,AAAAC,qBAAAD,aAAA,mFAAA,AAAA/C,oCAAA,AAAAA,NAkCM,oCAKA,oDAAA,WAAAwE,iBAAAC,hFAACC;AAAD,AAAc,OAACC,kBACC,iBAAAC,WAAA,2CAAA,qPAAA,2NAAA,tZAAuB,6KAAA,hIAAK,yEAAAJ,mCAAAA,3GAACX,qCAAAA,uDAAAA,0GACN,oJAAA,vGAAK,AAAA,oFAAAY,wGAEL,AAACJ,2CAAa,iBAAAS,WAAqB,CAAC9C,2CAAAA,+FAAAA,tDAAWsC,2EAAAA;IAAjCS,eAAC,AAAA,sGAAAN;AAAD,AAAA,QAAAM,6CAAAA,2CAAAD,YAAAC,uBAAAD;MAHrC,0EAAA,4DAAAN,iBAAA,mEAAA,hKAIuB,UAAA,TAAMrB,uJAENlB,yEACAD;AAPvB,AAAA,wJAAA4C,+DAAAA,/MAACrD,yEAAAA,mFAAAA;KAQD,CAAAiD,mBAAA;aAhDtB,AAAAxE,VAiDmBuD,wCAGb,2BAAA,TAAMC,SAAQ,AAACmB,kBAAa,iBAAAO,WAAS,iBAAAE,WAAM,KAAA,JAAKzB;AAAX,AAAA,4IAAAyB,yDAAAA,7LAACE,mEAAAA,6EAAAA;;AAAV,AAAA,sFAAAJ,8BAAAA,5GAAC1B,wCAAAA,kDAAAA;yBApDnC,mFAAA,AAAAxD,8BAAA+C,YAAA,AAAA/C,oCAAA,AAAAA,NAkCM,oCAKA,oDAAA,WAAAwE,iBAAAC,hFAACC,9MAaD,LAAc;AAbd,AAAc,OAACC,kBACC,iBAAAE,WAAA,2CAAA,qPAAA,2NAAA,tZAAuB,6KAAA,hIAAK,yEAAAL,mCAAAA,3GAACX,qCAAAA,uDAAAA,0GACN,oJAAA,vGAAK,AAAA,oFAAAY,wGAEL,AAACJ,2CAAa,iBAAAW,WAAqB,CAAChD,2CAAAA,+FAAAA,tDAAWsC,2EAAAA;IAAjCW,eAAC,AAAA,sGAAAR;AAAD,AAAA,QAAAQ,6CAAAA,2CAAAD,YAAAC,uBAAAD;MAHrC,0EAAA,4DAAAR,iBAAA,mEAAA,hKAIuB,UAAA,TAAMrB,uJAENlB,yEACAD;AAPvB,AAAA,wJAAA6C,+DAAAA,/MAACtD,yEAAAA,mFAAAA;KAQD,CAAAiD,mBAAA;aAhDtB,AAAAxE,VAiDmBuD,wCAGb,2BAAA,TAAMC,SAAQ,AAACmB,kBAAa,iBAAAQ,WAAS,iBAAAE,WAAM,KAAA,JAAK1B;AAAX,AAAA,4IAAA0B,yDAAAA,7LAACC,mEAAAA,6EAAAA;;AAAV,AAAA,sFAAAH,8BAAAA,5GAAC3B,wCAAAA,kDAAAA;UAA7B,LAAc;;GApDpB,4GAAA,zBAAgBhC;AAyDhB;;;oDAAA,AAAA9B,oBAAA,WAAA6F,nFAAUsB;AAAV,AAAA,IAAArB,aAAAD;IAAAC,iBAAA,AAAA3F,4BAAA2F;qBAAA,AAAA1F,4CAAA0F,eAAA,5EAE2E4B;cAF3E,AAAAtH,4CAAA0F,eAAA,rEAE0FvD;iBAF1F,AAAAnC,4CAAA0F,eAAA,xEAEkGxD;oBAFlG,AAAAlC,4CAAA0F,eAAA,3EAEiDyB;4BAFjD,AAAAnH,4CAAA0F,eAAA,nFAEWuB;YAFX,AAAAjH,4CAAA0F,eAAA,nEAEqE2B;YAFrE,AAAArH,4CAAA0F,eAAA,nEAE+D0B;sBAF/D,AAAApH,4CAAA0F,eAAA,7EAEiCwB;UAFjC,AAAAlH,4CAAA0F,eAAA,jEAE6G6B;AAF7G,AAAA,AAAA,OAAAtH,oBAAA,MAAA,KAAA,AAAAA,oBAAA,MAAA,SAAA,cAAA,AAAA2C,oDAAA,gBAAA,AAAA1C,k0BAAA,AAAAA,v2BAMiCkH,mEAC7B,yBAAA,AAAA,mFAAA,mDAAA,mFAAA,iDAAA,2CAAA,oDAAA,KAAA,uDAAA,2CAAA,8DAAA,WAAA,oDAAA,SAAA,uDAAA,OAAA,iEAAA,+CAAA,3wBAAMC,qvBAGFA,2DAGJ,oDAAA,WAAAG,iBAAAC,hFAAC7C;AAAD,AAAc,OAACC,kBAAa,iBAAA6C,WAAa,6CAAAD,kBAAA;AAAb,AAAA,8JAAAC,kEAAAA,xNAAC1G,4EAAAA,sFAAAA;KAA0B,CAAA,mDAAAwG;mEAb3D,yBAAA,mFAAA,KAAA,jLAa4E,8CAAA,IAAA,MAAA,xDAACG,iFAEnEC;IACAC,iBAAS,6CAAA,7CAACzF,iDAAI,AAAC0F,eAAU,6CAAA,7CAACC;AAhBpC,AAAA,OAAApC,mDAAA,iBAAAC,qBAAA,sDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAkuEmD,AAAAkF,sBAAAvF;IAluEnDM,qBAAA,AAAArC,gBAAAoC;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,WAAA,AAAAI,eAAAL,gBAAAI,tCAiBY0B;AAjBZ,AAAA,IAkBkBC,cAAM,AAAC7F,6CAAE4F,KAAK,AAACnB,gBAAMe;IAErBM,OAAK,+CAAA,/CAACE;kBAADD;AAAA,AAAS,GAAI,qKAAA,rKAAC/F,6CAAE,AAAA,sGAAA+F;AAA6BN;;AAApC;;;CAAT,mFAAA,2CAAA,wEAAA,sEAAA,sIAAA,2CAAA,wEAAA,2DAAA,9PAC8C,AAACQ,4CAAIpB,sBAAsBe,kPAChC,AAACK,4CAAInB,gBAAgBc;IAInEtE,UAAQ,EAAIuE,aAAMvH,qDAAUI;AA1B9C,AAAA,AAAA,AAAA0F,uBAAAJ,SAAA,iBA8BckC,YAAUJ;AA9BxB,AAAA,OAAAhI,8BA+BU,AAAC2E,kBACC,iBAAA0D,WAAA,wCAAA,oEAAA,2DAAA,uDAAA,iEAAA,uDAAA,uDAAA,kDAAA,2DAAA,2DAAA,oEAAA,bAAmBP,mOAGA,CAAA,QAAO,AAACK,4CAAIlB,cAAca,9FAE1B,eAAA,KAAA,lBAAIC,5KAEJ,AAACQ,+CAAOvE,iBAAE,6CAAA,7CAACwE,mGAAYR,4GACvB,wDAAA,2CAAA,0OAAA,sDAAA,mFAAA,tdAACS,gDAAQjF,8GAAkB,AAAC+E,+CAAOvE,iBAAE,6CAAA,7CAACwE,mGAAYJ,0MAChB,iBAAAM,WAAA,mFAAA,2EAAA,7+BAElCzG,cACAD;AAHkC,AAAA,8EAAA0G,0BAAAA,hGAACrB,oCAAAA,8CAAAA;KADnC,SAAA,LAE4BS,SAAS,iBAAAc,WAAA,mFAAA,0EAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACvB,oCAAAA,8CAAAA;sBATtCW,KAGA,eAAA,MAAA,nBAAID;AAJvB,AAAA,8IAAAM,0DAAAA,hMAACpF,oEAAAA,8EAAAA;KAaD6E;;;AA7CZ,eAAA,CAAA1B,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,4CAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAhB,vBAiBYmC;AAjBZ,AAAA,IAkBkBC,cAAM,AAAC7F,6CAAE4F,KAAK,AAACnB,gBAAMe;IAErBM,OAAK,+CAAA,/CAACE;kBAADD;AAAA,AAAS,GAAI,qKAAA,rKAAC/F,6CAAE,AAAA,sGAAA+F;AAA6BN;;AAApC;;;CAAT,mFAAA,2CAAA,wEAAA,sEAAA,sIAAA,2CAAA,wEAAA,2DAAA,9PAC8C,AAACQ,4CAAIpB,sBAAsBe,kPAChC,AAACK,4CAAInB,gBAAgBc;IAInEtE,UAAQ,EAAIuE,aAAMvH,qDAAUI;AA1B9C,AAAA,OAAAqD,eAAA,iBA8BcmE,YAAUJ;AA9BxB,AAAA,OAAAhI,8BA+BU,AAAC2E,kBACC,iBAAA2D,WAAA,wCAAA,oEAAA,2DAAA,uDAAA,iEAAA,uDAAA,uDAAA,kDAAA,2DAAA,2DAAA,oEAAA,bAAmBR,mOAGA,CAAA,QAAO,AAACK,4CAAIlB,cAAca,9FAE1B,eAAA,KAAA,lBAAIC,5KAEJ,AAACQ,+CAAOvE,iBAAE,6CAAA,7CAACwE,mGAAYR,4GACvB,wDAAA,2CAAA,0OAAA,sDAAA,mFAAA,tdAACS,gDAAQjF,8GAAkB,AAAC+E,+CAAOvE,iBAAE,6CAAA,7CAACwE,mGAAYJ,0MAChB,iBAAAO,WAAA,mFAAA,2EAAA,7+BAElC1G,cACAD;AAHkC,AAAA,8EAAA2G,0BAAAA,hGAACtB,oCAAAA,8CAAAA;KADnC,SAAA,LAE4BS,SAAS,iBAAAe,WAAA,mFAAA,0EAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACxB,oCAAAA,8CAAAA;sBATtCW,KAGA,eAAA,MAAA,nBAAID;AAJvB,AAAA,8IAAAO,0DAAAA,hMAACrF,oEAAAA,8EAAAA;KAaD6E;KA7CZ,AAAArB,4CAAA,AAAAG,eAAAjB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAiBiBgC;;KAjBjB,AAAA3H,oBAAA,MAAA,SAAA,cAAA,cAAA,sBAAA,mBAAA,qBAAA,sBAAA,WAAA,AAAAC,8BAkDK,iBAAA8I,WAAA,mFAAA,qEAAsB1B;AAAtB,AAAA,8EAAA0B,0BAAAA,hGAACzB,oCAAAA,8CAAAA;;GAlDN,8HAAA,3CAA8B7F,iBAAWsF;AAqDzC;;;;+CAAA,/CAAMiC,sGAIH5B,MAAM6B,QAAQrB,eAAS3F;AAJ1B,AAKE,cAAA,WAAAiH,iBAAAC,tCAAMC;AAAN,AAAe,QAAA,QAAO,CAAA,MAAK,CAAAF,mBAAAC;;IACrBE,mBAAiB,AAAClF,4CAAIiF,QACA,uDAAA,mFAAA,2DAAA,rMAACE,+CAAOL,kOACR,uDAAA,mFAAA,2DAAA,rMAACK,+CAAOL;IAC9BjC,wBAAsB,AAAC7C,4CAAIiF,QACA,uDAAA,mFAAA,sEAAA,hNAACE,+CAAOL,6OACR,uDAAA,mFAAA,sEAAA,hNAACK,+CAAOL;AANzC,AAAA,+CAAA,0EAAA,2DAAA,uEAAA,iEAAA,uEAAA,uFAAA,sDAAA,2EAAA,8EAAA,uCAAA,2EAe0B,4CAAA,WAAAQ,vDAACtF,XACDlC,/EACA2F;AAFA,AAAM,QAAA,QAAA6B;uZARNrC,tBAGAJ,4BAEA,4CAAA,WAAAuC,iBAAAC,xEAACrF,1ZAGe,uDAAA,uPAAA,9SAACmF,+CAAOL,2FAAS,kCAAA,2DAAA,3EAAIrB;AAHrC,AAAM,QAAA2B,mBAAAC;2CADNH,xCACgBA,iBAAiBrC;;AAS7D,8CAAA,AAAA3F,qBAAA,iBAAAqI,pFAAWE,8EACRlI;AADH,AAAA,IAAAiI,aAAAD;IAAAC,iBAAA,AAAA7J,4BAAA6J;YAAAA,RAMUjJ;YANV,AAAAX,4CAAA4J,eAAA,uDAAA,1HAEWtG;eAFX,AAAAtD,4CAAA4J,eAAA,6DAAA,nIAEiBG;iBAFjB,AAAA/J,4CAAA4J,eAAA,iEAAA,zIAE0BI;kBAF1B,AAAAhK,4CAAA4J,eAAA,zEAEqCK;YAFrC,AAAAjK,4CAAA4J,eAAA,nEAEiDvC;gBAFjD,AAAArH,4CAAA4J,eAAA,vEAEuDM;UAFvD,AAAAlK,4CAAA4J,eAAA,jEAEiErC;AAFjE,AAAA,AAAA,IAQQ2B,UAAQ,AAACpB,eAAUqC;IACnBjI,aAAW,AAAC4F,eAAU,6CAAA,7CAACC;IACvBF,iBAAS,6CAAA,7CAACzF,iDAAI,AAAC0F,eAAU,6CAAA,7CAACC;IAC1BqC,UAAQ,AAACtC,eAAU,AAAA,qFAAQnG;IAC3B0I,eAAa,iBAAAC,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAc,kBAAA,VAAGF;;;AAZtC,AAAA,OAAAlK,8BAeI,iBAAA6F,qBAAuB,AAACkD,6CAAa5B,MAAM6B,QAAQrB,eAAS3F;AAA5D,AAAA,oBAAA6D;AAAA,AAAA,kBAAAA,dAAWwE;AAAX,AAAA,mFAAA,mDAAA;;AAEE,IAAMC,QAAM,kKAAA,lKAACnC,4CAAI,AAAA,yGAAkBkC;IAC7BE,SAAO,kKAAA,lKAACpC,4CAAI,AAAA,yGAAkBkC;IAC9BG,UAAQ,CAAA,kGAAA,wEAAA,/EAAoDF,uEAA0BC;AAF5F,AAAA,0FAAA,mDAAA,mFAAA,8CAAA,2CAAA,uDAAA,2CAAA,gEAAA,uBAKI,iBAAAE,WAAA,mFAAA,0EAAA;AAAA,AAAA,8EAAAA,0BAAAA,hGAACpD,oCAAAA,8CAAAA;aALL,mFAAA,mDAAA,2CAAA,kKAAA,uDAAA,2CAAA,gKAAA,gEAAA,MAAA,gGAAA,0DAAA,eAAA,gEAAA,sBAAA,mFAAA,wEAAA,2CAAA,uDAAA,2CAAA,8DAAA,WAAA,1hCAOsB,AAAA,qFAAQ0C,sKACK,2FAAA,9CAAK,sCAAA,pBAAII,cAAa/G,kKAEtB,CAAG,WAAA,VAAG8G,kBAAYJ,+lBAMV,CAAGI,UAAQL,0BACjD,AAAClF,kBAAa,iBAAA+F,WAAmB,0DAAA,1DAAC/J,8CAAM0J,+DAAiBhD;AAA3C,AAAA,0KAAAqD,wEAAAA,1OAAC7D,kFAAAA,4FAAAA;0BAjBpB,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,wEAAA,MAAA,kHAAA,wKAAA,0DAAA,1sBAiBK,ybAO6B,gCAAA,OAAA,rBAAIsD,oFACJ,mGAAA,tDAAK,CAAA,QAAO,sCAAA,pBAAIA,cAAa/G,oHAE3D,CAACuH,wEAAAA,uGAAAA,jCAAQ3I,mFAAAA,xEAAW2F,mFAAAA,pEAASN,mFAAAA;;AA7BnC;;;GAfJ,kJAAA,/DAAyBP,kBAAa8C;AA+CtC;;;oDAAA,AAAAlK,oBAAA,WAAAkL,nFAAUG;AAAV,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAhL,4BAAAgL;QAAAA,JAEoCG;YAFpC,AAAAlL,4CAAA+K,eAAA,nEAEW1D;gBAFX,AAAArH,4CAAA+K,eAAA,vEAEiBb;UAFjB,AAAAlK,4CAAA+K,eAAA,jEAE2BxD;AAF3B,AAAA,AAAA,IAAAyD,aAIG,iBAAAG,WAAA,2CAAA,uDAAA,KAAA,4DAAA,6DAAA,IAAA,iEAAA,IAAA,yEAAA,2HAAA,hVAC2B9D,2MAGF6C,6EACEvK,2GACR4H;AANnB,AAAA,8JAAA4D,kEAAAA,xNAACtB,4EAAAA,sFAAAA;;AAJJ,AAAA,OAAApK,8CAAAQ,oBAAA,MAAA,EAAA,AAAAiD,qBAAA8H,aAAA,AAAApI,+BAAAoI,YAAA,MAAA,EAAA,AAAA9H,qBAAA8H,aAAA,KAAA,mFAAA,AAAA9K,8BAAA8K;GAAA,KAAA","names":["predict-prostate.results.charts/border","fill","predict-prostate.results.charts/arrow","predict-prostate.results.charts/arrow-color","predict-prostate.results.charts/arrow-fill","clojure.string.join","predict-prostate.results.charts/z-front","predict-prostate.results.charts/z-back","cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.results.charts/stacked-bar-chart-style","rum.core/build-defc","p__47452","map__47453","cljs.core/--destructure-map","cljs.core.get","js/React.createElement","sablono.interpreter/interpret","predict-prostate.results.charts/<-n%-text->","->?","percent","text","predict-prostate.results.util/fill-data-url","predict-prostate.results.util/avoid-decimals","js/Number","predict-prostate.results.charts/n%-text->","props","G__47456","cljs.core.assoc","predict-prostate.results.charts/<-n%-text","G__47457","predict-prostate.results.charts/h-tick-line","h","p__47468","map__47469","predict-prostate.results.charts/bar-item-label","height","rum.core/build-defcs","p__47470","map__47471","predict-prostate.results.charts/bar-item","rum.core/static","state","key","bottom","background-url","callout-text","?above","item-id","plot-style","radical","cljs.core._EQ_","and__4210__auto__","predict-prostate.results.util/treatment-fills","js/parseFloat","predict-prostate.results.util/min-label-percent","G__47473","p__47474","map__47475","sablono.interpreter/attributes","predict-prostate.results.charts/bar-label","top?","p__47479","map__47480","attrs47482","cljs.core/map?","predict-prostate.results.charts/bar","left","right","width","label-over","label-under","dataset","callout","oth","params","n","cljs.core/count","sums","cljs.core.into","cljs.core.reductions","cljs.core/+","cljs.core/cons","cljs.core.map","inline-style","cljs.core.merge","predict-prostate.results.util/hex-data-url","predict-prostate.results.util/fills-by-style*","G__47483","p1__47476#","p2__47477#","cljs.core.map_indexed","rum.core/with-key","G__47484","G__47489","G__47486","fexpr__47485","G__47491","fexpr__47490","G__47487","G__47492","G__47488","G__47493","predict-prostate.results.util/fill","p__47497","map__47498","cljs.core.into_array","iter__4611__auto__","s__47501","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__47503","cljs.core/chunk-buffer","i__47502","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47500","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","predict-prostate.results.charts/inner-stacked-bar","rum.core/reactive","conservative-survival","radical-benefit","dotted-orange","style","title","subtitle-under","ttt","p1__47495#","p2__47494#","G__47499","cljs.core.range","years","radical?","rum.core/react","predict-prostate.state.run-time/input-cursor","year","left?","data","p1__47496#","cljs.core.filter","cljs.core.nth","plot-data","G__47505","G__47508","cljs.core.reduce","cljs.core.mapv","cljs.core.partial","G__47506","G__47510","G__47507","G__47511","G__47512","predict-prostate.results.charts/extract-data","results","p1__47513#","p2__47514#","one-sum","radical-survival","cljs.core.get_in","p1__47515#","p2__47516#","p1__47518#","p__47520","map__47521","predict-prostate.results.charts/stacked-bar","predict-prostate.mixins/sizing-mixin","h-over-w","font-scale","chart-style","printable","predict-prostate.state.run-time/results-cursor","width-1","side-by-side","or__4212__auto__","chart-props","bene5","bene10","benefit","G__47522","G__47523","predict-prostate.results.curves/legend2","p__47525","map__47526","attrs47524","predict-prostate.results.charts/results-in-charts","m","G__47527","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.charts\n  (:require [rum.core :as rum]\n            [predict-prostate.mixins :refer [sizing-mixin]]\n            [predict-prostate.results.util :refer [avoid-decimals min-label-percent\n                                                   fill fill-data-url hex-data-url fills-by-style*\n                                                   treatment-fills]]\n            [predict-prostate.state.run-time :refer [input-cursor results-cursor]]\n            [predict-prostate.results.curves :refer [legend2]]\n            [clojure.string :refer [join]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]))\n\n(defn border [fill] (str \"1px solid \" fill))\n(defn arrow [fill] (str \"2ex solid \" fill))\n(def arrow-color [204 238 248])\n(def arrow-fill (arrow (str \"rgb(\" (join \",\" arrow-color) \")\")))\n\n(def z-front 20)\n(def z-back 1)\n\n(defstyle stacked-bar-chart-style\n  [\".chart\" {:page-break-before \"always\"}\n   [\".chart-wrapper\" {:background-color \"white\" :color \"black\" :position \"relative\" :margin-top \"1ex\"\n                      :min-height       \"300px\"}]\n   [\".stacked-bar\" {:position \"absolute\" :bottom \"8ex\" :top \"2ex\" :left \"16%\"\n                    :right    \"16%\" :background-color \"whitesmoke\" :color \"black\"}\n\n    [\".h-tick\" {:position \"absolute\" :width \"100%\" :height \"0%\"}\n     [\".h-label\" {:position \"absolute\" :top 0 :color \"#888\" :left \"-3em\" :width \"calc(100% + 6em)\"}\n      [\".left\" {:position \"absolute\" :left \"-0.5em\" :width \"3em\" :text-align \"right\" :top \"-1ex\"}]\n      [\".right\" {:position \"absolute\" :right \"-0.5em\" :width \"3em\" :text-align \"left\" :top \"-1ex\"}]]\n     [\".line\" {:border-bottom \"2px solid #CCC\"}]]\n\n    [\".bar\" {:position \"absolute\" :background-color \"white\" :border \"1px solid #CCC\" :border-bottom \"none\"}\n     [\".bar-label\" {:position   \"absolute\" :color \"black\" :left \"0%\" :width \"100%\"\n                    :text-align \"center\" :font-size \"1.2em\"\n                    }]\n     [\".bar-item\" {:position           \"absolute\" :width \"100%\" :left 0\n                   :transition         \"height 300ms, bottom 300ms, opacity 3000ms\" :transition-timing-function \"ease-out\"\n                   :-webkit-transition \"height 300ms, bottom 300ms, opacity 300ms\" :-webkit-transition-timing-function \"ease-out\"\n                   :-moz-transition    \"height 300ms, bottom 300ms, opacity 300ms\" :-moz-transition-timing-function \"ease-out\"}\n      [\".bar-item-label\" {:position \"absolute\" :width \"100%\" :text-align \"center\"\n                          :bottom   \"1.37ex\" :border \"1px none red\"}]]]\n\n    [\".callout\" {:position   \"absolute\"\n                 :transition \"height 300ms, bottom 300ms\" :transition-timing-function \"ease-out\"}\n     [\".box\" {:width   \"7em\" :height \"10ex\" :position \"absolute\" :bottom \"-4.7ex\"\n              :padding \"0.5ex 1ex 0.3ex 0.5ex\" :text-align \"right\" :color \"#5A8FA9\" :border-radius \"0.5ex\"}\n      [\".total\" {:position \"absolute\" :left \"0.6ex\" :bottom \"1.3ex\" :color \"#5A8FA9\" :font-size \"1.2em\"}]]\n     [\".arrow\" {:position   \"absolute\" :bottom \"-1ex\" :width 0 :height 0\n                :border-top \"1ex solid transparent\" :border-bottom \"1ex solid transparent\"}]]\n\n    #_[\".callout\" {:position   \"absolute\"\n                 :transition \"height 300ms, bottom 300ms\" :transition-timing-function \"ease-out\"}\n     [\".box\" {:width   \"7em\" :height \"10ex\" :position \"absolute\" :bottom \"-4.7ex\"\n              :padding \"0.5ex 1ex 0.3ex 0.5ex\" :text-align \"right\" :color \"white\" :border-radius \"0.5ex\"}\n      [\".total\" {:position \"absolute\" :left \"0.6ex\" :bottom \"1.3ex\" :color \"white\" :font-size \"1.2em\"}]]\n     [\".arrow\" {:position   \"absolute\" :bottom \"-1ex\" :width 0 :height 0\n                :border-top \"1ex solid transparent\" :border-bottom \"1ex solid transparent\"}]]\n    ]\n   ])\n\n(rum/defc <-n%-text->\n  \"Left or Right callout\"\n  [{:keys [->? percent text fill]\n    :or   {->? true percent 50 text \"half\" fill \"red\"}}]\n\n  [:.callout {:style {:left (if ->? 0 nil) :right (if ->? nil 0) :bottom (str percent \"%\")}}\n   [:img.box {:src   (apply fill-data-url arrow-color)      ;(data-fill 4 3)\n              :style {:padding    0\n                      :text-align \"center\"\n                      :left       (if ->? \"-15.5ex\" nil)\n                      :right      (if ->? nil \"-15.5ex\")}\n              }]\n   [:.box {:style {:text-align \"center\"\n                   :left       (if ->? \"-15.5ex\" nil)\n                   :right      (if ->? nil \"-15.5ex\")\n                   }}\n    [:span {:style {:font-size \"1.2em\"}} (str (avoid-decimals (js/Number percent)) \"% \")] text\n    ]\n   [:.arrow {:style {:border-left  (if ->? arrow-fill nil)\n                     :border-right (if ->? nil arrow-fill)\n                     :left         (if ->? nil 0)\n                     :right        (if ->? 0 nil)\n                     }}]])\n\n\n(rum/defc n%-text->\n  \"Left callout pointing right\"\n  [props fill]\n  (<-n%-text-> (assoc props :->? true :fill fill)))\n\n\n(rum/defc <-n%-text\n  \"Right callout pointing left\"\n  [props fill]\n  (<-n%-text-> (assoc props :->? false :fill fill)))\n\n\n(rum/defc h-tick-line [h]\n  [:.h-tick {:style {:position \"absolute\" :bottom h}}\n   [:.line {:key 1}]\n   [:.h-label {:key 2}\n    [:.left {:key 1} h]\n    [:.right {:key 2} h]]])\n\n(rum/defc bar-item-label\n  \"A white label for a dark background which also prints in white.\n  SVG is about the only way to force printers to emit text in white.\"\n  [{:keys [height]}]\n  [:.bar-item-label {:style {:width \"100%\" :height \"50%\"}}\n   [:svg {:height 30 :width \"100%\"}\n    [:text {:x \"50%\" :y 13 :fill \"#ffffff\" :text-anchor \"middle\"}\n     (str height \"%\")]]\n   ])\n\n\n#_(rum/defc bar-item-label [{:keys [key height] :or {key 1 height 0}}]\n  [:.bar-item-label {:key key :style {:height \"50%\" :color \"#ffffff\"}}\n   (str height \"%\")\n   ])\n\n(rum/defcs bar-item < rum/static\n                      \"A stacked bar item\"\n  [state {:keys [key bottom height fill background-url callout-text ?above item-id plot-style radical]\n          :or   {key          1 bottom 0 height 0 fill \"red\" background-url \"\"\n                 callout-text \"Label here\" ?above true}}]\n\n  [:div {:key key}\n   (when (or (= item-id 0) (= plot-style :area1))\n     [:img.bar-item {:src   background-url\n                     :style {:height height\n                             :bottom bottom}}])\n   (when (= item-id 1)\n     [:img.bar-item {:src   background-url\n                     :style {:height height\n                             :bottom bottom}}])\n   [:.bar-item {:key   1\n                ;:tab-index 0\n                :style {:height     height\n                        :bottom     bottom\n                        ;:background-color (when (= key 1) \"red\")\n                        :border-top (if (and (= 1 item-id) radical (= :line2 plot-style))\n                                      (str \"3px solid \" (treatment-fills 0))\n                                      \"none\")\n                        }}\n\n    ;; internal value label\n    (let [height (avoid-decimals (js/parseFloat height))]\n      (when (and (= plot-style :area1) (>= height min-label-percent))\n        (bar-item-label {:key 1 :height height})))\n\n    ]])\n\n\n(rum/defc bar-label [{:keys [key text top?]}]\n  \"A label centred above or below the bar\"\n  [:.bar-label {:key   key\n                :style (if top? {:top \"-3.5ex\"} {:bottom \"-3.5ex\"})} text])\n\n\n(rum/defc bar < rum/static\n                \"Render a bar and its callouts.\n                Callouts are currently specific to a treatments view rather than a cause of death view.\"\n  [{:keys [key left right width label-over label-under dataset callout oth radical plot-style]\n    :or   {key 1 label-over nil label-under nil dataset []}\n    :as   params}]\n\n  (let [n (count dataset)\n        sums (into [] (reductions + (cons 0 (map :value dataset))))\n        inline-style (merge {:height \"100%\"}\n                            {:left left :right right :width width})]\n\n    ; render dashed-line rectangle\n    [:.bar {:key key :style inline-style}\n     [:div {:style {:position       \"absolute\"\n                    :top            (str \"calc(\" oth \"% - 2px)\")\n                    :bottom         0\n                    :left           \"-5px\"\n                    :right          \"-5px\"\n                    :z-index        0\n                    :margin         \"0 5px\"\n                    :pointer-events \"none\"\n                    :border-top     \"4px dashed #FA0\"\n                    }}\n      [:img.bar-item {:src   (hex-data-url (if radical\n                                             (:radical-above (plot-style fills-by-style*))\n                                             \"#ffffff\"))\n\n                      :style {:height \"100%\"}\n                      }]]\n     [:div\n\n      (bar-label {:key 2 :text label-under :top? false})\n\n      (comment\n        ;dataset looks like this:\n        [{:treatment-key :conservative, :value 83.84078058126754} {:treatment-key :radical, :value 7.104726369432939}]\n        )\n\n      (map-indexed #(rum/with-key\n                      (bar-item {:bottom     (str (sums %1) \"%\")\n                                 :height     (str (:value %2) \"%\")\n                                 :background-url\n                                             (hex-data-url ((:treatment-key %2) (plot-style fills-by-style*)))\n                                 :?above     (nil? right)\n                                 :item-id    %1\n                                 :radical    radical\n                                 :plot-style plot-style})\n                      (+ %1 1))\n                   dataset)\n\n\n      (when callout (rum/with-key (callout (fill (dec n))) 3))]\n\n     ]))\n\n\n(rum/defc inner-stacked-bar < rum/static rum/reactive\n                              \"This currently supports a left and a right stacked bar with callouts left and right and top\"\n  [{:keys [conservative-survival radical-benefit dotted-orange style title subtitle-under radical plot-style ttt]}]\n\n  [:div\n\n   [:.stacked-bar {:key 1 :style style}\n    (when title\n      [:div\n       [:h3 {:key \"t2\" :style {:position \"absolute\" :top \"-5.5ex\" :width \"100%\" :text-align \"center\"}}\n        title]])\n\n\n    (map-indexed #(rum/with-key (h-tick-line (str %2 \"%\")) (str \"tick\" %1)) (range 0 110 10))\n\n    (let [years [10 15]\n          radical? (= 1 (rum/react (input-cursor :primary-rx)))]\n      (for [year years\n            :let [left? (= year (first years))\n\n                  data (filter #(if (= (:treatment-key %) :radical) radical? true)\n                               [{:treatment-key :conservative :value (nth conservative-survival year)}\n                                {:treatment-key :radical :value (nth radical-benefit year)}])\n\n\n\n                  callout (if left? n%-text-> <-n%-text)]]\n\n\n        ; remove :br and :oth fields for bar plot\n        (let [plot-data data]\n          (rum/with-key\n            (bar {:label-under year\n                  :dataset     data\n                  ; pass :oth field separately\n                  :oth         (- 100 (nth dotted-orange year))\n                  :left        (if left? \"30%\" nil)\n                  :right       (if left? nil \"30%\")\n                  :width       \"18%\"\n                  :total       (reduce + (mapv :value data))\n                  :callout     (partial callout {:percent (reduce + (mapv :value plot-data))\n                                                 :text    [:span (ttt [:charts/callout-1 \"survive at least\"]) \" \"\n                                                           year \" \" (ttt [:charts/callout-2 \"years\"])]})\n                  :radical     radical\n                  :plot-style  plot-style})\n            year))\n\n        ))\n\n    [:div {:key 3 :style {:position \"absolute\" :bottom \"-5.5ex\" :width \"100%\" :text-align \"center\" :font-size \"16px\"}}\n     (ttt [:chart/subunder subtitle-under])]\n    ]])\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [title results radical? plot-style]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 title\n     :subtitle-over         \"for men with prostate cancer, 10 and 15 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n\n     ;:dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; dotted orange\n     :dotted-orange         (map #(* 100 %) (get-in results [(if radical? :radical :conservative) :NPC-survival])) ; dotted orange\n     :plot-style            plot-style\n     :radical               radical?\n     }\n    ))\n\n(rum/defcs stacked-bar < rum/reactive sizing-mixin\n  [state\n   {:keys [width h-over-w font-scale chart-style title printable ttt]\n    :or   {width      100\n           h-over-w   1\n           font-scale 1}\n    :as   props}]\n\n  (let [results (rum/react results-cursor)\n        plot-style (rum/react (input-cursor :plot-style))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        width-1 (rum/react (:width state))\n        side-by-side (or printable (> width-1 600))\n        ]\n\n    (when-let [chart-props (extract-data title results radical? plot-style)]\n      [:div \"Hello\"]\n      (let [bene5 (nth (:radical-benefit chart-props) 5)\n            bene10 (nth (:radical-benefit chart-props) 10)\n            benefit (str \" Additional benefit of radical treatment is \" bene5 \"% at 5 years and \" bene10 \"% at 10 years\")]\n        [:div\n         [:p {:style {:margin-top \"15px\"}}\n          (ttt [:chart/perc-text1 \"This graph shows the percentage of men surviving at 10 and 15 years. These results are based on the inputs and treatments you selected\"])]\n\n         [:div {:class-name (:chart chart-style)\n                :style      {:width      (str (if side-by-side width 100) \"%\")\n                             :max-width 400\n                             :font-size  (* (/ width-1 25) font-scale)\n                             :display    \"inline-block\"\n                             :margin-top \"3ex\"\n                             }}\n\n          [:.chart-wrapper {:style {:position    \"relative\"\n                                    :padding-top (* width-1 h-over-w)}}\n           (rum/with-key (inner-stacked-bar (assoc chart-props :ttt ttt)) 1)\n           ]\n\n          ]\n\n         ; legend\n         [:div {:style {:vertical-align \"top\"\n                        :padding-top    (if side-by-side \"40px\" \"20px\")\n                        :width          (str (- 100 (if side-by-side width 0)) \"%\")\n                        :display        \"inline-block\"}}\n          (legend2 plot-style radical? ttt)]]))))\n\n\n(rum/defc results-in-charts\n  \"Content of the Charts tab, showing treatment options\"\n  [{:keys [title printable ttt] :as m}]\n  [:div\n   (stacked-bar {:width       70\n                 :title       title\n                 :h-over-w    0.4\n                 :font-scale  1\n                 :printable printable\n                 :chart-style stacked-bar-chart-style\n                 :ttt ttt})])\n\n"]}