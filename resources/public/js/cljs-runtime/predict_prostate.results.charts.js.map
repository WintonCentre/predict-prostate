{"version":3,"sources":["predict_prostate/results/charts.cljs"],"mappings":"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","names":["predict-prostate.results.charts/border","fill","predict-prostate.results.charts/arrow","predict-prostate.results.charts/arrow-color","predict-prostate.results.charts/arrow-fill","clojure.string.join","predict-prostate.results.charts/z-front","predict-prostate.results.charts/z-back","cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.results.charts/stacked-bar-chart-style","rum.core/lazy-build","rum.core/build-defc","p__44028","map__44029","cljs.core/--destructure-map","cljs.core.get","daiquiri.core/create-element","daiquiri.interpreter/interpret","predict-prostate.results.charts/<-n%-text->","->?","percent","text","predict-prostate.results.util/fill-data-url","predict-prostate.results.util/avoid-decimals","js/Number","predict-prostate.results.charts/n%-text->","props","cljs.core.assoc","predict-prostate.results.charts/<-n%-text","predict-prostate.results.charts/h-tick-line","h","p__44052","map__44053","predict-prostate.results.charts/bar-item-label","height","rum.core/build-defcs","p__44069","map__44070","predict-prostate.results.charts/bar-item","rum.core/static","state","key","bottom","background-url","callout-text","?above","item-id","plot-style","radical","cljs.core._EQ_","and__4210__auto__","predict-prostate.results.util/treatment-fills","js/parseFloat","predict-prostate.results.util/min-label-percent","p__44087","map__44088","daiquiri.interpreter/element-attributes","predict-prostate.results.charts/bar-label","top?","p__44105","map__44107","predict-prostate.results.charts/bar","left","right","width","label-over","label-under","dataset","callout","oth","params","n","cljs.core/count","sums","cljs.core.into","cljs.core.reductions","cljs.core/+","cljs.core/cons","cljs.core.map","inline-style","cljs.core.merge","predict-prostate.results.util/hex-data-url","predict-prostate.results.util/fills-by-style*","p1__44094#","p2__44095#","cljs.core.map_indexed","rum.core/with-key","G__44138","fexpr__44137","G__44153","G__44154","predict-prostate.results.util/fill","p__44159","map__44160","cljs.core.into_array","iter__4611__auto__","s__44163","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__44165","cljs.core/chunk-buffer","i__44164","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44162","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","predict-prostate.results.charts/inner-stacked-bar","rum.core/reactive","conservative-survival","radical-benefit","dotted-orange","style","title","subtitle-under","ttt","p1__44157#","p2__44156#","cljs.core.range","years","radical?","rum.core/react","predict-prostate.state.run-time/input-cursor","year","left?","data","p1__44158#","cljs.core.filter","cljs.core.nth","plot-data","cljs.core.reduce","cljs.core.mapv","cljs.core.partial","G__44180","G__44192","G__44181","G__44194","G__44197","predict-prostate.results.charts/extract-data","results","p1__44200#","p2__44201#","one-sum","radical-survival","cljs.core.get_in","p1__44203#","p2__44204#","p1__44205#","p__44214","map__44215","predict-prostate.results.charts/stacked-bar","predict-prostate.mixins/sizing-mixin","h-over-w","font-scale","chart-style","printable","predict-prostate.state.run-time/results-cursor","width-1","side-by-side","or__4212__auto__","chart-props","bene5","bene10","benefit","G__44217","predict-prostate.results.curves/legend2","p__44218","map__44219","predict-prostate.results.charts/results-in-charts","m","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.charts\n  (:require [rum.core :as rum]\n            [predict-prostate.mixins :refer [sizing-mixin]]\n            [predict-prostate.results.util :refer [avoid-decimals min-label-percent\n                                                   fill fill-data-url hex-data-url fills-by-style*\n                                                   treatment-fills]]\n            [predict-prostate.state.run-time :refer [input-cursor results-cursor]]\n            [predict-prostate.results.curves :refer [legend2]]\n            [clojure.string :refer [join]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]))\n\n(defn border [fill] (str \"1px solid \" fill))\n(defn arrow [fill] (str \"2ex solid \" fill))\n(def arrow-color [204 238 248])\n(def arrow-fill (arrow (str \"rgb(\" (join \",\" arrow-color) \")\")))\n\n(def z-front 20)\n(def z-back 1)\n\n(defstyle stacked-bar-chart-style\n  [\".chart\" {:page-break-before \"always\"}\n   [\".chart-wrapper\" {:background-color \"white\" :color \"black\" :position \"relative\" :margin-top \"1ex\"\n                      :min-height       \"300px\"}]\n   [\".stacked-bar\" {:position \"absolute\" :bottom \"8ex\" :top \"2ex\" :left \"16%\"\n                    :right    \"16%\" :background-color \"whitesmoke\" :color \"black\"}\n\n    [\".h-tick\" {:position \"absolute\" :width \"100%\" :height \"0%\"}\n     [\".h-label\" {:position \"absolute\" :top 0 :color \"#888\" :left \"-3em\" :width \"calc(100% + 6em)\"}\n      [\".left\" {:position \"absolute\" :left \"-0.5em\" :width \"3em\" :text-align \"right\" :top \"-1ex\"}]\n      [\".right\" {:position \"absolute\" :right \"-0.5em\" :width \"3em\" :text-align \"left\" :top \"-1ex\"}]]\n     [\".line\" {:border-bottom \"2px solid #CCC\"}]]\n\n    [\".bar\" {:position \"absolute\" :background-color \"white\" :border \"1px solid #CCC\" :border-bottom \"none\"}\n     [\".bar-label\" {:position   \"absolute\" :color \"black\" :left \"0%\" :width \"100%\"\n                    :text-align \"center\" :font-size \"1.2em\"\n                    }]\n     [\".bar-item\" {:position           \"absolute\" :width \"100%\" :left 0\n                   :transition         \"height 300ms, bottom 300ms, opacity 3000ms\" :transition-timing-function \"ease-out\"\n                   :-webkit-transition \"height 300ms, bottom 300ms, opacity 300ms\" :-webkit-transition-timing-function \"ease-out\"\n                   :-moz-transition    \"height 300ms, bottom 300ms, opacity 300ms\" :-moz-transition-timing-function \"ease-out\"}\n      [\".bar-item-label\" {:position \"absolute\" :width \"100%\" :text-align \"center\"\n                          :bottom   \"1.37ex\" :border \"1px none red\"}]]]\n\n    [\".callout\" {:position   \"absolute\"\n                 :transition \"height 300ms, bottom 300ms\" :transition-timing-function \"ease-out\"}\n     [\".box\" {:width   \"7em\" :height \"10ex\" :position \"absolute\" :bottom \"-4.7ex\"\n              :padding \"0.5ex 1ex 0.3ex 0.5ex\" :text-align \"right\" :color \"#5A8FA9\" :border-radius \"0.5ex\"}\n      [\".total\" {:position \"absolute\" :left \"0.6ex\" :bottom \"1.3ex\" :color \"#5A8FA9\" :font-size \"1.2em\"}]]\n     [\".arrow\" {:position   \"absolute\" :bottom \"-1ex\" :width 0 :height 0\n                :border-top \"1ex solid transparent\" :border-bottom \"1ex solid transparent\"}]]\n\n    #_[\".callout\" {:position   \"absolute\"\n                 :transition \"height 300ms, bottom 300ms\" :transition-timing-function \"ease-out\"}\n     [\".box\" {:width   \"7em\" :height \"10ex\" :position \"absolute\" :bottom \"-4.7ex\"\n              :padding \"0.5ex 1ex 0.3ex 0.5ex\" :text-align \"right\" :color \"white\" :border-radius \"0.5ex\"}\n      [\".total\" {:position \"absolute\" :left \"0.6ex\" :bottom \"1.3ex\" :color \"white\" :font-size \"1.2em\"}]]\n     [\".arrow\" {:position   \"absolute\" :bottom \"-1ex\" :width 0 :height 0\n                :border-top \"1ex solid transparent\" :border-bottom \"1ex solid transparent\"}]]\n    ]\n   ])\n\n(rum/defc <-n%-text->\n  \"Left or Right callout\"\n  [{:keys [->? percent text fill]\n    :or   {->? true percent 50 text \"half\" fill \"red\"}}]\n\n  [:.callout {:style {:left (if ->? 0 nil) :right (if ->? nil 0) :bottom (str percent \"%\")}}\n   [:img.box {:src   (apply fill-data-url arrow-color)      ;(data-fill 4 3)\n              :style {:padding    0\n                      :text-align \"center\"\n                      :left       (if ->? \"-15.5ex\" nil)\n                      :right      (if ->? nil \"-15.5ex\")}\n              }]\n   [:.box {:style {:text-align \"center\"\n                   :left       (if ->? \"-15.5ex\" nil)\n                   :right      (if ->? nil \"-15.5ex\")\n                   }}\n    [:span {:style {:font-size \"1.2em\"}} (str (avoid-decimals (js/Number percent)) \"% \")] text\n    ]\n   [:.arrow {:style {:border-left  (if ->? arrow-fill nil)\n                     :border-right (if ->? nil arrow-fill)\n                     :left         (if ->? nil 0)\n                     :right        (if ->? 0 nil)\n                     }}]])\n\n\n(rum/defc n%-text->\n  \"Left callout pointing right\"\n  [props fill]\n  (<-n%-text-> (assoc props :->? true :fill fill)))\n\n\n(rum/defc <-n%-text\n  \"Right callout pointing left\"\n  [props fill]\n  (<-n%-text-> (assoc props :->? false :fill fill)))\n\n\n(rum/defc h-tick-line [h]\n  [:.h-tick {:style {:position \"absolute\" :bottom h}}\n   [:.line {:key 1}]\n   [:.h-label {:key 2}\n    [:.left {:key 1} h]\n    [:.right {:key 2} h]]])\n\n(rum/defc bar-item-label\n  \"A white label for a dark background which also prints in white.\n  SVG is about the only way to force printers to emit text in white.\"\n  [{:keys [height]}]\n  [:.bar-item-label {:style {:width \"100%\" :height \"50%\"}}\n   [:svg {:height 30 :width \"100%\"}\n    [:text {:x \"50%\" :y 13 :fill \"#ffffff\" :text-anchor \"middle\"}\n     (str height \"%\")]]\n   ])\n\n\n#_(rum/defc bar-item-label [{:keys [key height] :or {key 1 height 0}}]\n  [:.bar-item-label {:key key :style {:height \"50%\" :color \"#ffffff\"}}\n   (str height \"%\")\n   ])\n\n(rum/defcs bar-item < rum/static\n                      \"A stacked bar item\"\n  [state {:keys [key bottom height fill background-url callout-text ?above item-id plot-style radical]\n          :or   {key          1 bottom 0 height 0 fill \"red\" background-url \"\"\n                 callout-text \"Label here\" ?above true}}]\n\n  [:div {:key key}\n   (when (or (= item-id 0) (= plot-style :area1))\n     [:img.bar-item {:src   background-url\n                     :style {:height height\n                             :bottom bottom}}])\n   (when (= item-id 1)\n     [:img.bar-item {:src   background-url\n                     :style {:height height\n                             :bottom bottom}}])\n   [:.bar-item {:key   1\n                ;:tab-index 0\n                :style {:height     height\n                        :bottom     bottom\n                        ;:background-color (when (= key 1) \"red\")\n                        :border-top (if (and (= 1 item-id) radical (= :line2 plot-style))\n                                      (str \"3px solid \" (treatment-fills 0))\n                                      \"none\")\n                        }}\n\n    ;; internal value label\n    (let [height (avoid-decimals (js/parseFloat height))]\n      (when (and (= plot-style :area1) (>= height min-label-percent))\n        (bar-item-label {:key 1 :height height})))\n\n    ]])\n\n\n(rum/defc bar-label [{:keys [key text top?]}]\n  \"A label centred above or below the bar\"\n  [:.bar-label {:key   key\n                :style (if top? {:top \"-3.5ex\"} {:bottom \"-3.5ex\"})} text])\n\n\n(rum/defc bar < rum/static\n                \"Render a bar and its callouts.\n                Callouts are currently specific to a treatments view rather than a cause of death view.\"\n  [{:keys [key left right width label-over label-under dataset callout oth radical plot-style]\n    :or   {key 1 label-over nil label-under nil dataset []}\n    :as   params}]\n\n  (let [n (count dataset)\n        sums (into [] (reductions + (cons 0 (map :value dataset))))\n        inline-style (merge {:height \"100%\"}\n                            {:left left :right right :width width})]\n\n    ; render dashed-line rectangle\n    [:.bar {:key key :style inline-style}\n     [:div {:style {:position       \"absolute\"\n                    :top            (str \"calc(\" oth \"% - 2px)\")\n                    :bottom         0\n                    :left           \"-5px\"\n                    :right          \"-5px\"\n                    :z-index        0\n                    :margin         \"0 5px\"\n                    :pointer-events \"none\"\n                    :border-top     \"4px dashed #FA0\"\n                    }}\n      [:img.bar-item {:src   (hex-data-url (if radical\n                                             (:radical-above (plot-style fills-by-style*))\n                                             \"#ffffff\"))\n\n                      :style {:height \"100%\"}\n                      }]]\n     [:div\n\n      (bar-label {:key 2 :text label-under :top? false})\n\n      (comment\n        ;dataset looks like this:\n        [{:treatment-key :conservative, :value 83.84078058126754} {:treatment-key :radical, :value 7.104726369432939}]\n        )\n\n      (map-indexed #(rum/with-key\n                      (bar-item {:bottom     (str (sums %1) \"%\")\n                                 :height     (str (:value %2) \"%\")\n                                 :background-url\n                                             (hex-data-url ((:treatment-key %2) (plot-style fills-by-style*)))\n                                 :?above     (nil? right)\n                                 :item-id    %1\n                                 :radical    radical\n                                 :plot-style plot-style})\n                      (+ %1 1))\n                   dataset)\n\n\n      (when callout (rum/with-key (callout (fill (dec n))) 3))]\n\n     ]))\n\n\n(rum/defc inner-stacked-bar < rum/static rum/reactive\n                              \"This currently supports a left and a right stacked bar with callouts left and right and top\"\n  [{:keys [conservative-survival radical-benefit dotted-orange style title subtitle-under radical plot-style ttt]}]\n\n  [:div\n\n   [:.stacked-bar {:key 1 :style style}\n    (when title\n      [:div\n       [:h3 {:key \"t2\" :style {:position \"absolute\" :top \"-5.5ex\" :width \"100%\" :text-align \"center\"}}\n        title]])\n\n\n    (map-indexed #(rum/with-key (h-tick-line (str %2 \"%\")) (str \"tick\" %1)) (range 0 110 10))\n\n    (let [years [10 15]\n          radical? (= 1 (rum/react (input-cursor :primary-rx)))]\n      (for [year years\n            :let [left? (= year (first years))\n\n                  data (filter #(if (= (:treatment-key %) :radical) radical? true)\n                               [{:treatment-key :conservative :value (nth conservative-survival year)}\n                                {:treatment-key :radical :value (nth radical-benefit year)}])\n\n\n\n                  callout (if left? n%-text-> <-n%-text)]]\n\n\n        ; remove :br and :oth fields for bar plot\n        (let [plot-data data]\n          (rum/with-key\n            (bar {:label-under year\n                  :dataset     data\n                  ; pass :oth field separately\n                  :oth         (- 100 (nth dotted-orange year))\n                  :left        (if left? \"30%\" nil)\n                  :right       (if left? nil \"30%\")\n                  :width       \"18%\"\n                  :total       (reduce + (mapv :value data))\n                  :callout     (partial callout {:percent (reduce + (mapv :value plot-data))\n                                                 :text    [:span (ttt [:charts/callout-1 \"survive at least\"]) \" \"\n                                                           year \" \" (ttt [:charts/callout-2 \"years\"])]})\n                  :radical     radical\n                  :plot-style  plot-style})\n            year))\n\n        ))\n\n    [:div {:key 3 :style {:position \"absolute\" :bottom \"-5.5ex\" :width \"100%\" :text-align \"center\" :font-size \"16px\"}}\n     (ttt [:chart/subunder subtitle-under])]\n    ]])\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [title results radical? plot-style]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 title\n     :subtitle-over         \"for men with prostate cancer, 10 and 15 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n\n     ;:dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; dotted orange\n     :dotted-orange         (map #(* 100 %) (get-in results [(if radical? :radical :conservative) :NPC-survival])) ; dotted orange\n     :plot-style            plot-style\n     :radical               radical?\n     }\n    ))\n\n(rum/defcs stacked-bar < rum/reactive sizing-mixin\n  [state\n   {:keys [width h-over-w font-scale chart-style title printable ttt]\n    :or   {width      100\n           h-over-w   1\n           font-scale 1}\n    :as   props}]\n\n  (let [results (rum/react results-cursor)\n        plot-style (rum/react (input-cursor :plot-style))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        width-1 (rum/react (:width state))\n        side-by-side (or printable (> width-1 600))\n        ]\n\n    (when-let [chart-props (extract-data title results radical? plot-style)]\n      [:div \"Hello\"]\n      (let [bene5 (nth (:radical-benefit chart-props) 5)\n            bene10 (nth (:radical-benefit chart-props) 10)\n            benefit (str \" Additional benefit of radical treatment is \" bene5 \"% at 5 years and \" bene10 \"% at 10 years\")]\n        [:div\n         [:p {:style {:margin-top \"15px\"}}\n          (ttt [:chart/perc-text1 \"This graph shows the percentage of men surviving at 10 and 15 years. These results are based on the inputs and treatments you selected\"])]\n\n         [:div {:class-name (:chart chart-style)\n                :style      {:width      (str (if side-by-side width 100) \"%\")\n                             :max-width 400\n                             :font-size  (* (/ width-1 25) font-scale)\n                             :display    \"inline-block\"\n                             :margin-top \"3ex\"\n                             }}\n\n          [:.chart-wrapper {:style {:position    \"relative\"\n                                    :padding-top (* width-1 h-over-w)}}\n           (rum/with-key (inner-stacked-bar (assoc chart-props :ttt ttt)) 1)\n           ]\n\n          ]\n\n         ; legend\n         [:div {:style {:vertical-align \"top\"\n                        :padding-top    (if side-by-side \"40px\" \"20px\")\n                        :width          (str (- 100 (if side-by-side width 0)) \"%\")\n                        :display        \"inline-block\"}}\n          (legend2 plot-style radical? ttt)]]))))\n\n\n(rum/defc results-in-charts\n  \"Content of the Charts tab, showing treatment options\"\n  [{:keys [title printable ttt] :as m}]\n  [:div\n   (stacked-bar {:width       70\n                 :title       title\n                 :h-over-w    0.4\n                 :font-scale  1\n                 :printable printable\n                 :chart-style stacked-bar-chart-style\n                 :ttt ttt})])\n\n"]}