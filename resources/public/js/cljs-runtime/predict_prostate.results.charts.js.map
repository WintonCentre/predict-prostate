{"version":3,"sources":["predict_prostate/results/charts.cljs"],"mappings":"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","names":["predict-prostate.results.charts/border","fill","predict-prostate.results.charts/arrow","predict-prostate.results.charts/arrow-color","predict-prostate.results.charts/arrow-fill","clojure.string.join","predict-prostate.results.charts/z-front","predict-prostate.results.charts/z-back","cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","predict-prostate.results.charts/stacked-bar-chart-style","rum.core/build-defc","p__184643","map__184645","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.interpreter/interpret","predict-prostate.results.charts/<-n%-text->","->?","percent","text","predict-prostate.results.util/fill-data-url","predict-prostate.results.util/avoid-decimals","js/Number","predict-prostate.results.charts/n%-text->","props","G__184649","cljs.core.assoc","predict-prostate.results.charts/<-n%-text","G__184651","predict-prostate.results.charts/h-tick-line","h","p__184658","map__184659","predict-prostate.results.charts/bar-item-label","height","rum.core/build-defcs","p__184663","map__184665","predict-prostate.results.charts/bar-item","rum.core/static","state","key","bottom","background-url","callout-text","?above","item-id","plot-style","radical","cljs.core._EQ_","and__4115__auto__","predict-prostate.results.util/treatment-fills","js/parseFloat","predict-prostate.results.util/min-label-percent","G__184670","p__184674","map__184675","sablono.interpreter/attributes","predict-prostate.results.charts/bar-label","top?","p__184679","map__184680","attrs184682","cljs.core/map?","predict-prostate.results.charts/bar","left","right","width","label-over","label-under","dataset","callout","oth","params","n","cljs.core/count","sums","cljs.core.into","cljs.core.reductions","cljs.core/+","cljs.core/cons","cljs.core.map","inline-style","cljs.core.merge","predict-prostate.results.util/hex-data-url","predict-prostate.results.util/fills-by-style*","G__184683","p1__184677#","p2__184678#","cljs.core.map_indexed","rum.core/with-key","G__184686","G__184694","G__184691","fexpr__184690","G__184696","fexpr__184695","G__184692","G__184698","G__184693","G__184699","predict-prostate.results.util/fill","p__184707","map__184708","cljs.core.into_array","iter__4529__auto__","s__184722","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__184724","cljs.core/chunk-buffer","i__184723","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__184721","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","predict-prostate.results.charts/inner-stacked-bar","rum.core/reactive","conservative-survival","radical-benefit","dotted-orange","style","title","subtitle-under","p1__184702#","p2__184701#","G__184717","cljs.core.range","years","radical?","rum.core/react","predict-prostate.state.run-time/input-cursor","year","left?","data","p1__184703#","cljs.core.filter","cljs.core.nth","plot-data","G__184729","G__184734","cljs.core.reduce","cljs.core.mapv","cljs.core.partial","predict-prostate.results.charts/extract-data","results","p1__184736#","p2__184737#","one-sum","radical-survival","cljs.core.get_in","p1__184738#","p2__184739#","p1__184740#","p__184742","map__184743","predict-prostate.results.charts/stacked-bar","predict-prostate.mixins/sizing-mixin","h-over-w","font-scale","chart-style","printable","ttt","predict-prostate.state.run-time/results-cursor","width-1","side-by-side","or__4126__auto__","chart-props","bene5","bene10","benefit","G__184750","predict-prostate.results.curves/legend2","p__184753","map__184755","attrs184751","predict-prostate.results.charts/results-in-charts","m","G__184758","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.results.charts\n  (:require [rum.core :as rum]\n            [predict-prostate.mixins :refer [sizing-mixin]]\n            [predict-prostate.results.util :refer [to-percent avoid-decimals min-label-percent\n                                                   fill data-fill fill-data-url hex-data-url fills-by-style*\n                                                   dashed-stroke treatment-fills treatment-fills*]]\n            [predict-prostate.state.run-time :refer [model input-cursor input-widget input-label\n                                                     results-cursor on-screen-treatments-cursor\n                                                     ]]\n            [predict-prostate.components.primitives :refer [dead-icon]]\n            [predict-prostate.results.curves :refer [legend2]]\n            [pubsub.feeds :refer [publish]]\n            [clojure.string :refer [join]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [cljs.pprint :refer [pp]]\n            ))\n\n(defn border [fill] (str \"1px solid \" fill))\n(defn arrow [fill] (str \"2ex solid \" fill))\n(def arrow-color [204 238 248] #_[220 150 0])\n(def arrow-fill (arrow (str \"rgb(\" (join \",\" arrow-color) \")\")))\n\n(def z-front 20)\n(def z-back 1)\n\n(defstyle stacked-bar-chart-style\n  [\".chart\" {:page-break-before \"always\"}\n   [\".chart-wrapper\" {:background-color \"white\" :color \"black\" :position \"relative\" :margin-top \"1ex\"\n                      :min-height       \"300px\"}]\n   [\".stacked-bar\" {:position \"absolute\" :bottom \"8ex\" :top \"2ex\" :left \"16%\"\n                    :right    \"16%\" :background-color \"whitesmoke\" :color \"black\"}\n\n    [\".h-tick\" {:position \"absolute\" :width \"100%\" :height \"0%\"}\n     [\".h-label\" {:position \"absolute\" :top 0 :color \"#888\" :left \"-3em\" :width \"calc(100% + 6em)\"}\n      [\".left\" {:position \"absolute\" :left \"-0.5em\" :width \"3em\" :text-align \"right\" :top \"-1ex\"}]\n      [\".right\" {:position \"absolute\" :right \"-0.5em\" :width \"3em\" :text-align \"left\" :top \"-1ex\"}]]\n     [\".line\" {:border-bottom \"2px solid #CCC\"}]]\n\n    [\".bar\" {:position \"absolute\" :background-color \"white\" :border \"1px solid #CCC\" :border-bottom \"none\"}\n     [\".bar-label\" {:position   \"absolute\" :color \"black\" :left \"0%\" :width \"100%\"\n                    :text-align \"center\" :font-size \"1.2em\"\n                    }]\n     [\".bar-item\" {:position           \"absolute\" :width \"100%\" :left 0\n                   :transition         \"height 300ms, bottom 300ms, opacity 3000ms\" :transition-timing-function \"ease-out\"\n                   :-webkit-transition \"height 300ms, bottom 300ms, opacity 300ms\" :-webkit-transition-timing-function \"ease-out\"\n                   :-moz-transition    \"height 300ms, bottom 300ms, opacity 300ms\" :-moz-transition-timing-function \"ease-out\"}\n      [\".bar-item-label\" {:position \"absolute\" :width \"100%\" :text-align \"center\"\n                          :bottom   \"1.37ex\" :border \"1px none red\"}]]]\n\n    [\".callout\" {:position   \"absolute\"\n                 :transition \"height 300ms, bottom 300ms\" :transition-timing-function \"ease-out\"}\n     [\".box\" {:width   \"7em\" :height \"10ex\" :position \"absolute\" :bottom \"-4.7ex\"\n              :padding \"0.5ex 1ex 0.3ex 0.5ex\" :text-align \"right\" :color \"#5A8FA9\" :border-radius \"0.5ex\"}\n      [\".total\" {:position \"absolute\" :left \"0.6ex\" :bottom \"1.3ex\" :color \"#5A8FA9\" :font-size \"1.2em\"}]]\n     [\".arrow\" {:position   \"absolute\" :bottom \"-1ex\" :width 0 :height 0\n                :border-top \"1ex solid transparent\" :border-bottom \"1ex solid transparent\"}]]\n\n    #_[\".callout\" {:position   \"absolute\"\n                 :transition \"height 300ms, bottom 300ms\" :transition-timing-function \"ease-out\"}\n     [\".box\" {:width   \"7em\" :height \"10ex\" :position \"absolute\" :bottom \"-4.7ex\"\n              :padding \"0.5ex 1ex 0.3ex 0.5ex\" :text-align \"right\" :color \"white\" :border-radius \"0.5ex\"}\n      [\".total\" {:position \"absolute\" :left \"0.6ex\" :bottom \"1.3ex\" :color \"white\" :font-size \"1.2em\"}]]\n     [\".arrow\" {:position   \"absolute\" :bottom \"-1ex\" :width 0 :height 0\n                :border-top \"1ex solid transparent\" :border-bottom \"1ex solid transparent\"}]]\n    ]\n   ])\n\n(rum/defc <-n%-text->\n  \"Left or Right callout\"\n  [{:keys [->? percent text fill]\n    :or   {->? true percent 50 text \"half\" fill \"red\"}}]\n\n  [:.callout {:style {:left (if ->? 0 nil) :right (if ->? nil 0) :bottom (str percent \"%\")}}\n   [:img.box {:src   (apply fill-data-url arrow-color)      ;(data-fill 4 3)\n              :style {:padding    0\n                      :text-align \"center\"\n                      :left       (if ->? \"-15.5ex\" nil)\n                      :right      (if ->? nil \"-15.5ex\")}\n              }]\n   [:.box {:style {:text-align \"center\"\n                   :left       (if ->? \"-15.5ex\" nil)\n                   :right      (if ->? nil \"-15.5ex\")\n                   }}\n    [:span {:style {:font-size \"1.2em\"}} (str (avoid-decimals (js/Number percent)) \"% \")] text\n    ]\n   [:.arrow {:style {:border-left  (if ->? arrow-fill nil)\n                     :border-right (if ->? nil arrow-fill)\n                     :left         (if ->? nil 0)\n                     :right        (if ->? 0 nil)\n                     }}]])\n\n\n(rum/defc n%-text->\n  \"Left callout pointing right\"\n  [props fill]\n  (<-n%-text-> (assoc props :->? true :fill fill)))\n\n\n(rum/defc <-n%-text\n  \"Right callout pointing left\"\n  [props fill]\n  (<-n%-text-> (assoc props :->? false :fill fill)))\n\n\n(rum/defc h-tick-line [h]\n  [:.h-tick {:style {:position \"absolute\" :bottom h}}\n   [:.line {:key 1}]\n   [:.h-label {:key 2}\n    [:.left {:key 1} h]\n    [:.right {:key 2} h]]])\n\n(rum/defc bar-item-label\n  \"A white label for a dark background which also prints in white.\n  SVG is about the only way to force printers to emit text in white.\"\n  [{:keys [height]}]\n  [:.bar-item-label {:style {:width \"100%\" :height \"50%\"}}\n   [:svg {:height 30 :width \"100%\"}\n    [:text {:x \"50%\" :y 13 :fill \"#ffffff\" :text-anchor \"middle\"}\n     (str height \"%\")]]\n   ])\n\n\n#_(rum/defc bar-item-label [{:keys [key height] :or {key 1 height 0}}]\n  [:.bar-item-label {:key key :style {:height \"50%\" :color \"#ffffff\"}}\n   (str height \"%\")\n   ])\n\n(rum/defcs bar-item < rum/static\n                      \"A stacked bar item\"\n  [state {:keys [key bottom height fill background-url callout-text ?above item-id plot-style radical]\n          :or   {key          1 bottom 0 height 0 fill \"red\" background-url \"\"\n                 callout-text \"Label here\" ?above true}}]\n\n  [:div {:key key}\n   (when (or (= item-id 0) (= plot-style :area1))\n     [:img.bar-item {:src   background-url\n                     :style {:height height\n                             :bottom bottom}}])\n   (when (= item-id 1)\n     [:img.bar-item {:src   background-url\n                     :style {:height height\n                             :bottom bottom}}])\n   [:.bar-item {:key   1\n                ;:tab-index 0\n                :style {:height     height\n                        :bottom     bottom\n                        ;:background-color (when (= key 1) \"red\")\n                        :border-top (if (and (= 1 item-id) radical (= :line2 plot-style))\n                                      (str \"3px solid \" (treatment-fills 0))\n                                      \"none\")\n                        }}\n\n    ;; internal value label\n    (let [height (avoid-decimals (js/parseFloat height))]\n      (when (and (= plot-style :area1) (>= height min-label-percent))\n        (bar-item-label {:key 1 :height height})))\n\n    ]])\n\n\n(rum/defc bar-label [{:keys [key text top?]}]\n  \"A label centred above or below the bar\"\n  [:.bar-label {:key   key\n                :style (if top? {:top \"-3.5ex\"} {:bottom \"-3.5ex\"})} text])\n\n\n(rum/defc bar < rum/static\n                \"Render a bar and its callouts.\n                Callouts are currently specific to a treatments view rather than a cause of death view.\"\n  [{:keys [key left right width label-over label-under dataset callout oth radical plot-style]\n    :or   {key 1 label-over nil label-under nil dataset []}\n    :as   params}]\n\n  (let [n (count dataset)\n        sums (into [] (reductions + (cons 0 (map :value dataset))))\n        inline-style (merge {:height \"100%\"}\n                            {:left left :right right :width width})]\n\n    ; render dashed-line rectangle\n    [:.bar {:key key :style inline-style}\n     [:div {:style {:position       \"absolute\"\n                    :top            (str \"calc(\" oth \"% - 2px)\")\n                    :bottom         0\n                    :left           \"-5px\"\n                    :right          \"-5px\"\n                    :z-index        0\n                    :margin         \"0 5px\"\n                    :pointer-events \"none\"\n                    :border-top     \"4px dashed #FA0\"\n                    }}\n      [:img.bar-item {:src   (hex-data-url (if radical\n                                             (:radical-above (plot-style fills-by-style*))\n                                             \"#ffffff\"))\n\n                      :style {:height \"100%\"}\n                      }]]\n     [:div\n\n      (bar-label {:key 2 :text label-under :top? false})\n\n      (comment\n        ;dataset looks like this:\n        [{:treatment-key :conservative, :value 83.84078058126754} {:treatment-key :radical, :value 7.104726369432939}]\n        )\n\n      (map-indexed #(rum/with-key\n                      (bar-item {:bottom     (str (sums %1) \"%\")\n                                 :height     (str (:value %2) \"%\")\n                                 :background-url\n                                             (hex-data-url ((:treatment-key %2) (plot-style fills-by-style*)))\n                                 :?above     (nil? right)\n                                 :item-id    %1\n                                 :radical    radical\n                                 :plot-style plot-style})\n                      (+ %1 1))\n                   dataset)\n\n\n      (when callout (rum/with-key (callout (fill (dec n))) 3))]\n\n     ]))\n\n\n(rum/defc inner-stacked-bar < rum/static rum/reactive\n                              \"This currently supports a left and a right stacked bar with callouts left and right and top\"\n  [{:keys [conservative-survival radical-benefit dotted-orange style title subtitle-under radical plot-style]}]\n\n  [:div\n\n   [:.stacked-bar {:key 1 :style style}\n    (when title\n      [:div\n       [:h3 {:key \"t2\" :style {:position \"absolute\" :top \"-5.5ex\" :width \"100%\" :text-align \"center\"}}\n        title]])\n\n\n    (map-indexed #(rum/with-key (h-tick-line (str %2 \"%\")) (str \"tick\" %1)) (range 0 110 10))\n\n    (let [years [10 15]\n          radical? (= 1 (rum/react (input-cursor :primary-rx)))]\n      (for [year years\n            :let [left? (= year (first years))\n\n                  data (filter #(if (= (:treatment-key %) :radical) radical? true)\n                               [{:treatment-key :conservative :value (nth conservative-survival year)}\n                                {:treatment-key :radical :value (nth radical-benefit year)}])\n\n\n\n                  callout (if left? n%-text-> <-n%-text)]]\n\n\n        ; remove :br and :oth fields for bar plot\n        (let [plot-data data]\n          (rum/with-key\n            (bar {:label-under year\n                  :dataset     data\n                  ; pass :oth field separately\n                  :oth         (- 100 (nth dotted-orange year))\n                  :left        (if left? \"30%\" nil)\n                  :right       (if left? nil \"30%\")\n                  :width       \"18%\"\n                  :total       (reduce + (mapv :value data))\n                  :callout     (partial callout {:percent (reduce + (mapv :value plot-data))\n                                                 :text    (str \"survive at least \" year \" years\")})\n                  :radical     radical\n                  :plot-style  plot-style})\n            year))\n\n        ))\n\n    [:div {:key 3 :style {:position \"absolute\" :bottom \"-5.5ex\" :width \"100%\" :text-align \"center\" :font-size \"16px\"}}\n     subtitle-under]\n    ]])\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [title results radical? plot-style]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 title\n     :subtitle-over         \"for men with prostate cancer, 10 and 15 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n\n     ;:dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :pred-NPC-cum])) ; dotted orange\n     :dotted-orange         (map #(* 100 %) (get-in results [(if radical? :radical :conservative) :NPC-survival])) ; dotted orange\n     :plot-style            plot-style\n     :radical               radical?\n     }\n    ))\n\n(rum/defcs stacked-bar < rum/reactive sizing-mixin\n  [state\n   {:keys [width h-over-w font-scale chart-style title printable ttt]\n    :or   {width      100\n           h-over-w   1\n           font-scale 1}\n    :as   props}]\n\n  (let [results (rum/react results-cursor)\n        plot-style (rum/react (input-cursor :plot-style))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        width-1 (rum/react (:width state))\n        side-by-side (or printable (> width-1 600))\n        ]\n\n    (when-let [chart-props (extract-data title results radical? plot-style)]\n      [:div \"Hello\"]\n      (let [bene5 (nth (:radical-benefit chart-props) 5)\n            bene10 (nth (:radical-benefit chart-props) 10)\n            benefit (str \" Additional benefit of radical treatment is \" bene5 \"% at 5 years and \" bene10 \"% at 10 years\")]\n        [:div\n         [:p {:style {:margin-top \"15px\"}}\n          (ttt [:chart/perc-text1 \"This graph shows the percentage of men surviving at 10 and 15 years. These results are based on the inputs and treatments you selected\"])]\n\n         [:div {:class-name (:chart chart-style)\n                :style      {:width      (str (if side-by-side width 100) \"%\")\n                             :max-width 400\n                             :font-size  (* (/ width-1 25) font-scale)\n                             :display    \"inline-block\"\n                             :margin-top \"3ex\"\n                             }}\n\n          [:.chart-wrapper {:style {:position    \"relative\"\n                                    :padding-top (* width-1 h-over-w)}}\n           (rum/with-key (inner-stacked-bar chart-props) 1)\n           ]\n\n          ]\n\n         ; legend\n         [:div {:style {:vertical-align \"top\"\n                        :padding-top    (if side-by-side \"40px\" \"20px\")\n                        :width          (str (- 100 (if side-by-side width 0)) \"%\")\n                        :display        \"inline-block\"}}\n          (legend2 plot-style radical?)]]))))\n\n\n(rum/defc results-in-charts\n  \"Content of the Charts tab, showing treatment options\"\n  [{:keys [title printable ttt] :as m}]\n  [:div\n   (stacked-bar {:width       70\n                 :title       title\n                 :h-over-w    0.4\n                 :font-scale  1\n                 :printable printable\n                 :chart-style stacked-bar-chart-style\n                 :ttt ttt})])\n\n"]}