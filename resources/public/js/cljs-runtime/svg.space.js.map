{"version":3,"sources":["svg/space.cljs"],"mappings":";AAKA,AAAA,AAAMA,AAAOC,AAAMC,AAAOC,AAAQC,AAASC,AAAQC,AAASC;AAA5D,AACE,AAAA,AAAA,AAAA,AAAMC,AAAe,AAAA,AAAG,AAAA,AAAQP,AAAO,AAAA,AAAOC,AAAQ,AAAA,AAAQA,AACzC,AAAA,AAAG,AAAA,AAASD,AAAO,AAAA,AAAMC,AAAQ,AAAA,AAASA;AACzDO,AAAM,AAAA,AAAG,AAAA,AAAQD,AAAO,AAAA,AAAOL,AAAS,AAAA,AAAQA;AAChDO,AAAO,AAAA,AAAG,AAAA,AAASF,AAAO,AAAA,AAAML,AAAS,AAAA,AAASA;AAHxD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIYF,AACAO,AACAN,AACAC,AACAM,AACAC,AACA,AAAA,AAAA,AAACC,AAAYP,AAAYK,AAAOJ,AAChC,AAAA,AAAA,AAACM,AAAYL,AAAUI,AAAUH","names":["svg.space/space","outer","margin","padding","x-domain","x-ticks","y-domain","y-ticks","inner","width","height","svg.scales/nice-linear"],"sourcesContent":["(ns svg.space\n  (:require [rum.core :as rum]\n            [svg.scales :refer [nice-linear]]\n            ))\n\n(defn space [outer margin padding x-domain x-ticks y-domain y-ticks]\n  (let [inner {:width  (- (:width outer) (:left margin) (:right margin))\n               :height (- (:height outer) (:top margin) (:bottom margin))}\n        width (- (:width inner) (:left padding) (:right padding))\n        height (- (:height inner) (:top padding) (:bottom padding))]\n    {:outer   outer\n     :inner   inner\n     :margin  margin\n     :padding padding\n     :width   width\n     :height  height\n     :x       (nice-linear x-domain [0 width] x-ticks)\n     :y       (nice-linear y-domain [height 0] y-ticks)\n     }))\n"]}