{"version":3,"sources":["predict_prostate/results/printable.cljs"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","predict-prostate.results.printable/avoid-break","seq161295","self__4724__auto__","cljs.core/seq","content","cljs.core.reduce","cljs.core/conj","predict-prostate.results.printable/break-before","seq161298","predict-prostate.results.printable/option-range","n","cljs.core.into","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core/str","cljs.core.range","rum.core/build-defc","js/React.createElement","attrs161321","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","attrs161324","attrs161349","attrs161350","attrs161355","attrs161356","attrs161359","attrs161360","attrs161367","attrs161368","attrs161375","attrs161376","attrs161379","attrs161380","attrs161391","attrs161392","attrs161403","attrs161404","attrs161409","attrs161410","predict-prostate.results.printable/inputs-in-print","rum.core/reactive","ttt","G__161326","G__161334","predict-prostate.state.run-time/input-label","rum.core/react","predict-prostate.state.run-time/input-cursor","G__161362","fexpr__161361","G__161364","fexpr__161363","G__161366","fexpr__161365","G__161370","fexpr__161369","G__161374","fexpr__161373","G__161378","fexpr__161377","G__161382","fexpr__161381","G__161387","fexpr__161386","G__161390","fexpr__161389","G__161395","fexpr__161393","G__161398","fexpr__161397","G__161400","fexpr__161399","attrs161417","sablono.normalize.merge_with_class","predict-prostate.results.printable/treatment-note","title","predict_prostate.results.printable.avoid_break","predict-prostate.results.printable/treatments-in-print","horm","horm-label","chemo-label","tra-label","bis-label","chemo","tra","bis","cljs.core._EQ_","cljs.core/not","or__4126__auto__","G__161431","fexpr__161430","G__161434","G__161435","cljs.core/rest","predict_prostate.content_reader.section","G__161438","G__161439","G__161442","G__161443","G__161446","G__161447","attrs161454","predict-prostate.results.printable/results-in-print","predict-prostate.mixins/set-default","G__161455","predict_prostate.results.printable.break_before","G__161458","G__161468","G__161459","G__161469","predict-prostate.results.curves/results-in-curves","G__161460","G__161470","predict-prostate.state.run-time/year-selected","G__161461","G__161471","predict-prostate.results.table/results-in-table","G__161462","G__161472","G__161463","G__161473","predict-prostate.results.charts/results-in-charts","G__161464","G__161474","G__161465","G__161475","G__161466","G__161476","predict-prostate.results.icons/results-in-icons*","G__161467","G__161477","predict-prostate.results.text/results-in-text","predict-prostate.results.sidefx/results-in-sidefx","predict-prostate.layout.header/footer"],"sourcesContent":["(ns predict-prostate.results.printable\n  (:require [clojure.string :refer [split join capitalize]]\n            [rum.core :as rum]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.content-reader :refer [section]]\n            [predict-prostate.state.run-time :refer [input-cursor input-change input-widget input-label results-cursor year-selected unknown]]\n            [predict-prostate.components.button :refer [year-picker]]\n            [predict-prostate.mixins :refer [set-default]]\n            [predict-prostate.layout.header :refer [footer]]\n            [pubsub.feeds :refer [publish]]\n\n            [predict-prostate.results.table :refer [results-in-table]]\n            [predict-prostate.results.curves :refer [results-in-curves]]\n            [predict-prostate.results.charts :refer [results-in-charts]]\n            [predict-prostate.results.text :refer [results-in-text]]\n            [predict-prostate.results.icons :refer [results-in-icons*]]\n            [predict-prostate.results.sidefx :refer [results-in-sidefx]]\n    #_[cljs-css-modules.macro :refer-macros [defstyle]]\n            ))\n\n#_(defstyle styles\n            [\"p\" {:font-size \"12px\"}]\n            )\n\n\n\n(defn avoid-break [& content]\n  (reduce conj [:div {:style {:break-inside \"avoid\"}}] content))\n\n\n(defn break-before [& content]\n  (reduce conj [:div {:style {:break-before \"always\" :page-break-before \"always\"}}] content))\n\n(defn option-range\n  [n]\n  (into {} (map (juxt identity str) (range 1 n))))\n\n(rum/defc inputs-in-print < rum/reactive [ttt]\n  [:.row\n   [:.col-sm-8.col-sm-offset-2\n    [:table.table.table-bordered.table-responsive {:style {:font-size \"16px\"}}\n     [:thead\n      [:tr\n       [:th (ttt [:print/input \"Input\"])]\n       [:th (ttt [:print/value \"Value\"])]]]\n     [:tbody\n      [:tr\n       [:td (input-label :age)]\n       [:td (rum/react (input-cursor :age))]]\n      [:tr\n       [:td (input-label :psa)]\n       [:td (rum/react (input-cursor :psa))]]\n      [:tr\n       [:td (input-label :t-stage)\n        (when (#{4} (rum/react (input-cursor :t-stage)))\n          [:div {:style {:color      \"#686868\"\n                         :margin-top 0}}\n           [:i.fa.fa-exclamation-triangle {:aria-hidden \"true\" :style {:color \"orange\" :padding-right 5}}]\n           \"The tool is less well tested in higher stages\"])]\n       [:td ((option-range 5) (rum/react (input-cursor :t-stage)))]]\n      [:tr\n       [:td (input-label :h-admissions)]\n       [:td ({0 \"No\" 1 \"Yes\"} (rum/react (input-cursor :h-admissions)))]]\n      (when (pos? (rum/react (input-cursor :h-admissions)))\n        [:tr\n         [:td (input-label :charlson-comorbidity)]\n         [:td ({0 \"No\" 1 \"Yes\"} (rum/react (input-cursor :charlson-comorbidity)))]])\n      [:tr\n       [:td (input-label :brca)]\n       [:td ({0 \"No\" 1 \"Yes\"} (rum/react (input-cursor :brca)))]]\n      [:tr\n       [:td (input-label :grade-group)\n        (when (#{4 5} (rum/react (input-cursor :grade-group)))\n          [:div {:style {:color      \"#686868\"\n                         :margin-top 0}}\n           [:i.fa.fa-exclamation-triangle {:aria-hidden \"true\" :style {:color \"orange\" :padding-right 5}}]\n           \"The tool is less well tested for higher scores\"])]\n       [:td ((option-range 6) (rum/react (input-cursor :grade-group)))]]\n      [:tr\n       [:td (input-label :gleason)\n        (when (#{4 5} (rum/react (input-cursor :grade-group)))\n          [:div {:style {:color       \"#686868\"\n                         :margin-top  0}}\n           [:i.fa.fa-exclamation-triangle {:aria-hidden \"true\" :style {:color \"orange\" :padding-right 5}}]\n           \"The tool is less well tested for higher scores\"])]\n       [:td ((into {} [[1 \"3+3\"]\n                       [2 \"3+4\"]\n                       [3 \"4+3\"]\n                       [4 \"8\"]\n                       [5 \"9 or 10\"]]) (rum/react (input-cursor :gleason)))\n        ]]\n      [:tr\n       [:td (input-label :biopsy-cores-taken)]\n       [:td (rum/react (input-cursor :biopsy-cores-taken))]]\n      [:tr\n       [:td (input-label :biopsy-cores-involved)]\n       [:td (rum/react (input-cursor :biopsy-cores-involved))]]\n      ]]\n\n    ]])\n\n(rum/defc treatment-note [title content]\n\n  [:.col-xs-12\n   (avoid-break\n     [:h4 title]\n     content)]\n  )\n\n(rum/defc treatments-in-print < rum/reactive [ttt]\n  (let [horm (rum/react (input-cursor :horm))\n        horm-label (input-label :horm)\n        chemo-label (input-label :chemo)\n        tra-label (input-label :tra)\n        bis-label (input-label :bis)\n        chemo (rum/react (input-cursor :chemo))\n        tra (rum/react (input-cursor :tra))\n        bis (= :yes (rum/react (input-cursor :bis)))]\n    (if-not (or horm chemo tra bis)\n      [:h2 \"No Treatments Selected after Surgery\"]\n      [:.row\n       [:.col-sm-12\n        [:h2 \"Treatments after Surgery\"]\n        [:section.print-bigger\n         \"Selected treatments after surgery are:\"\n         (when horm [:li horm-label])\n         (when chemo [:li chemo-label \" (\" ({:3rd \"3rd generation\" :2nd \"2nd generation\" :none \"None\"} (rum/react (input-cursor :chemo))) \")\"])\n         (when tra [:li tra-label])\n         (when bis [:li bis-label])]\n        [:.row.print-smaller\n         (when horm (treatment-note horm-label (when horm [:div (rest (section ttt \"hormone-therapy\"))])))\n         (when chemo (treatment-note chemo-label (when chemo [:div (rest (section ttt \"chemotherapy\"))])))\n         (when tra (treatment-note tra-label (when tra [:div (rest (section ttt \"trastuzumab\"))])))\n         (when bis (treatment-note bis-label (when bis [:div (rest (section ttt \"bisphosphonates\"))])))\n         ]]])))\n\n\n\n(rum/defc results-in-print\n  < rum/reactive (set-default :result-year)\n  [ttt]\n\n  [:.row\n   [:.col-sm-12\n\n    (avoid-break\n      [:h4 (ttt [:print/inputs \"Inputs\"])]\n      (inputs-in-print ttt))\n\n    (break-before\n      (avoid-break\n        [:h4 (ttt [:print/surv-curve \"Survival curve\"])]\n        [:div {:style {:max-width \"100%\" :margin-left \"0%\"}}\n         (results-in-curves {:printable true})]))\n\n    (break-before\n      (avoid-break\n        ;[:p {:style {:margin-top \"15px\"}} \"Survival estimates are based on the treatment you have selected.\"]\n        [:h4 (ttt [:print/surv-table-1 \"Survival table\"]) \" - \" (rum/react (year-selected)) \" \" (ttt [:print/surv-table-2 \"years after diagnosis.\"])]\n        [:div {:style {:max-width \"60%\" :margin-left \"0%\"}}\n         (results-in-table ttt)\n         ]))\n\n    (break-before\n      (avoid-break\n        [:h4 (ttt [:print/surv-chart \"Survival chart\"])]\n        (results-in-charts {:printable true})))\n\n    (break-before\n      (avoid-break\n        [:h4 (ttt [:print/icarray-1 \"Icon array showing\"]) \" \" (rum/react (year-selected)) \" \" (ttt [:print/icarray-2 \"year outcomes for 100 men\"])]\n        (results-in-icons* {:ttt ttt :printable true})\n        ))\n\n    (break-before\n      [:h4 \"In Summary\"]\n      (results-in-text {:printable true}))\n\n    (break-before\n      [:h4 \"Potential Harms of treatments\"]\n      (results-in-sidefx)\n      )\n\n    (footer)]])\n\n"]}