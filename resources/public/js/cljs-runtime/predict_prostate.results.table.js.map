{"version":3,"sources":["predict_prostate/results/table.cljs"],"mappings":"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","names":["predict-prostate.results.table/set-default","key","state","predict-prostate.results.table/year-selected","predict-prostate.state.run-time/input-cursor","predict-prostate.results.table/extract-data","results","year","dps","conservative-survival","cljs.core.nth","cljs.core.get_in","radical-low-survival","radical-high-survival","radical-survival","data","predict_prostate.results.util.percent","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","attrs46253","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.interpreter/interpret","attrs46256","attrs46259","attrs46266","attrs46269","attrs46274","attrs46275","attrs46276","predict-prostate.results.table/tables","rum.core/reactive","uncertainty?","ttt","radical?","cljs.core._EQ_","rum.core/react","G__46260","G__46261","G__46262","G__46270","G__46277","G__46283","cljs.core.get","G__46285","G__46290","attrs46297","daiquiri.normalize.merge_with_class","attrs46298","attrs46299","predict-prostate.results.table/results-in-table","predict-prostate.state.run-time/results-cursor","text1","G__46295","text2","G__46296","predict-prostate.components.button/year-picker","predict-prostate.components.helpful-form-groups/form-entry"],"sourcesContent":["(ns predict-prostate.results.table\n  (:require [rum.core :as rum]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.state.run-time :refer [input-cursor input-change input-widget input-label results-cursor]]\n            [predict-prostate.components.button :refer [year-picker]]\n            [predict-prostate.results.util :refer [one-dp percent]]\n\n            [pubsub.feeds :refer [publish]]\n            ))\n\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Only use this \"\n  {:did-mount (fn [state]\n                #_(let [default (get-input-default input-groups key)]\n                    (publish (input-change key) default))\n                state)})\n\n(defn year-selected []\n  \"return a cursor containing the selected year\"\n  (input-cursor :result-year))\n\n\n\n(defn extract-data [results year dps]\n  (let [conservative-survival (- 1 (+ (nth (get-in results [:conservative :pred-PC-cum]) year)\n                                      (nth (get-in results [:conservative :pred-NPC-cum]) year)))\n        radical-low-survival (- 1 (+ (nth (get-in results [:radical-low :pred-PC-cum]) year)\n                                     (nth (get-in results [:radical-low :pred-NPC-cum]) year)))\n        radical-high-survival (- 1 (+ (nth (get-in results [:radical-high :pred-PC-cum]) year)\n                                      (nth (get-in results [:radical-high :pred-NPC-cum]) year)))\n        radical-survival (- 1 (+ (nth (get-in results [:radical :pred-PC-cum]) year)\n                                 (nth (get-in results [:radical :pred-NPC-cum]) year)))\n        data {:dotted-orange (percent (nth (get-in results [:conservative :NPC-survival]) year) dps) ;(percent (- 1 (nth (get-in results [(if radical? :radical :conservative) :pred-NPC-cum]) year)) 0)\n              :conservative  {:overall (percent conservative-survival dps)\n                              :benefit \"-\"}\n              :radical       {:overall      (percent radical-survival dps)\n                              :benefit-low  (percent (- radical-low-survival conservative-survival) dps)\n                              :benefit-high (percent (- radical-high-survival conservative-survival) dps)\n                              :benefit      (percent (- radical-survival conservative-survival) dps)}}]\n    data))\n\n(rum/defc tables < rum/reactive [data uncertainty? ttt]\n\n  (let [\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))]\n    [:.table-responsive {:style {:margin-top \"15px\"\n                                 :font-size  \"1.2em\"}}\n     [:table.table.table-hover {:style {:padding 0 :margin 0 :font-size \"16px\"}}\n      [:thead\n       [:tr\n        [:th (ttt [:table/col1 \"Treatment\"])]\n        [:th (ttt [:table/col2 \"Additional Benefit\"])]\n        [:th (ttt [:table/col3 \"Overall Survival %\"])]\n        ]]\n      [:tbody\n       [:tr\n        [:td (ttt [:table/c1r1 \"Initial conservative management\"])]\n        [:td \"-\"]\n        [:td (get-in data [:conservative :overall])]]\n       (when radical?                                       ;(pos? (:horm data))\n         [:tr\n          [:td (ttt [:table/c1r2 \"Radical treatment\"])]\n          [:td (get-in data [:radical :benefit])            ;(benefit% data :horm uncertainty?)\n           (if uncertainty?\n             (str \" (\" (get-in data [:radical :benefit-high]) \"\u2013\" (get-in data [:radical :benefit-low]) \")\"))]\n          [:td (get-in data [:radical :overall])]\n          ])\n       [:tr\n        [:td {:col-span 3}\n         (ttt [:table/idppe-1 \"If deaths from prostate cancer were excluded\"]) \" \"\n         (get data :dotted-orange)                          ; (Math.round (- 100 (:oth data)))\n         \" \" (ttt [:table/idppe-2 \"would survive\"]) \" \"\n         (rum/react (input-cursor :result-year))\n         \" \" (ttt [:table/idppe-3 \"years.\"])]\n        ]\n\n       ]]]))\n\n\n(rum/defc results-in-table < rum/reactive\n  [ttt]\n  (let [radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        year (rum/react (input-cursor :result-year))\n        uncertainty? (= :yes (rum/react (input-cursor :show-uncertainty)))\n        data (extract-data (rum/react results-cursor) year (if uncertainty? 1 0))\n        text1 (ttt [:table/text1 \"This table shows the percentage of men who survive at least\"])\n        text2 (ttt [:table/text2 \"years after diagnosis, based on the information you have provided.\"])]\n\n    [:.row {:style {:margin-top 15}}\n     [:.col-sm-12.screen-only {:style {:font-size 16}}\n      text1 \" \" [:span.screen-only (year-picker ttt)] \" \" text2]\n     [:.col-sm-12.print-only\n      text1 \" \" [:span.print-only year] \" \" text2]\n     [:.col-sm-12 {:style {:margin-bottom \"15px\"}}\n      (tables data uncertainty? ttt)\n      (when radical?\n        [:.screen-only\n         (form-entry {:ttt ttt :key :show-uncertainty :label \"show-ranges\"})])]]))\n\n\n;; (comment\n\n;;   (def results {:conservative {:pred-PC-cum (0 0.00209439167481409 0.0068631030425986275 0.013751329202967382 0.022479232057763355 0.032849141591410363 0.04470083770029029 0.057894651946130055 0.07230334252302753 0.08780755798557525 0.10429297055204881), :pred-NPC-cum (0 0.0002182447271967578 0.000544287475592099 0.0009307275902806942 0.0013662580043685233 0.0018484505910423502 0.002380109932274687 0.002968343202003146 0.0036245266082841282 0.004364779246955558 0.005210877168111608), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}, :radical-low {:pred-PC-cum (0 0.0007335583499764896 0.002407602686350095 0.004835063469570774 0.007926895894052616 0.011624081339670616 0.01588165160115533 0.02066252974225701 0.0259344864220196 0.031668383409725595 0.03783702781932995), :pred-NPC-cum (0 0.00021825115659365523 0.000544316212833242 0.000930799814108788 0.0013664002731486977 0.0018486971474197707 0.0023805071975003395 0.0029689574762498195 0.0036254571263068746 0.004366180648653087 0.005212998991071756), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}, :radical {:pred-PC-cum (0 0.0010121556874419695 0.0033208892722127277 0.006666009669913535 0.010922079710044877 0.01600471235091617 0.021848603059883027 0.028399086041023668 0.03560797615060335 0.04343117663580254 0.0518271193008505), :pred-NPC-cum (0 0.00021824868254736567 0.000544304911834677 0.0009307712038230736 0.0013663438408784236 0.0018485995864232431 0.002380350841826511 0.0029687176069217803 0.003625097434017231 0.004365645501480441 0.005212199988904085), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}, :radical-high {:pred-PC-cum (0 0.0014037401627852591 0.004603579602983735 0.00923466300292725 0.015118065289657147 0.02213108709725974 0.03017695312299632 0.03917322657966766 0.049046144092173935 0.05972738307190151 0.07115196920296826), :pred-NPC-cum (0 0.00021824664197662888 0.0005442958283880051 0.0009307484328346354 0.0013662990801877593 0.0018485221694604212 0.002380226355133872 0.002968525522271607 0.0036248070970956343 0.004365209233051064 0.005211540965589994), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}}\n\n;;     )\n\n;;   (extract-data results true 9)\n;;   )\n\n\n\n"]}