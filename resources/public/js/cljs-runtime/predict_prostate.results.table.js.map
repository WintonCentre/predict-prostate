{"version":3,"sources":["predict_prostate/results/table.cljs"],"mappings":"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","names":["predict-prostate.results.table/set-default","key","state","predict-prostate.results.table/year-selected","predict-prostate.state.run-time/input-cursor","predict-prostate.results.table/extract-data","results","year","dps","conservative-survival","cljs.core.nth","cljs.core.get_in","radical-low-survival","radical-high-survival","radical-survival","data","predict_prostate.results.util.percent","rum.core/build-defc","js/React.createElement","attrs54299","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","attrs54300","attrs54301","attrs54318","attrs54355","predict-prostate.results.table/tables","rum.core/reactive","uncertainty?","ttt","radical?","cljs.core._EQ_","rum.core/react","G__54306","G__54308","G__54313","G__54356","G__54361","G__54362","cljs.core.get","G__54363","G__54366","attrs54390","sablono.normalize.merge_with_class","attrs54384","attrs54385","attrs54386","predict-prostate.results.table/results-in-table","predict-prostate.state.run-time/results-cursor","text1","G__54381","text2","G__54382","predict-prostate.components.button/year-picker","G__54407","predict-prostate.components.helpful-form-groups/form-entry"],"sourcesContent":["(ns predict-prostate.results.table\n  (:require [rum.core :as rum]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.state.run-time :refer [input-cursor input-change input-widget input-label results-cursor]]\n            [predict-prostate.components.button :refer [year-picker]]\n            [predict-prostate.results.util :refer [one-dp percent]]\n\n            [pubsub.feeds :refer [publish]]\n            ))\n\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Only use this \"\n  {:did-mount (fn [state]\n                #_(let [default (get-input-default input-groups key)]\n                    (publish (input-change key) default))\n                state)})\n\n(defn year-selected []\n  \"return a cursor containing the selected year\"\n  (input-cursor :result-year))\n\n\n\n(defn extract-data [results year dps]\n  (let [conservative-survival (- 1 (+ (nth (get-in results [:conservative :pred-PC-cum]) year)\n                                      (nth (get-in results [:conservative :pred-NPC-cum]) year)))\n        radical-low-survival (- 1 (+ (nth (get-in results [:radical-low :pred-PC-cum]) year)\n                                     (nth (get-in results [:radical-low :pred-NPC-cum]) year)))\n        radical-high-survival (- 1 (+ (nth (get-in results [:radical-high :pred-PC-cum]) year)\n                                      (nth (get-in results [:radical-high :pred-NPC-cum]) year)))\n        radical-survival (- 1 (+ (nth (get-in results [:radical :pred-PC-cum]) year)\n                                 (nth (get-in results [:radical :pred-NPC-cum]) year)))\n        data {:dotted-orange (percent (nth (get-in results [:conservative :NPC-survival]) year) dps) ;(percent (- 1 (nth (get-in results [(if radical? :radical :conservative) :pred-NPC-cum]) year)) 0)\n              :conservative  {:overall (percent conservative-survival dps)\n                              :benefit \"-\"}\n              :radical       {:overall      (percent radical-survival dps)\n                              :benefit-low  (percent (- radical-low-survival conservative-survival) dps)\n                              :benefit-high (percent (- radical-high-survival conservative-survival) dps)\n                              :benefit      (percent (- radical-survival conservative-survival) dps)}}]\n    data))\n\n(rum/defc tables < rum/reactive [data uncertainty? ttt]\n\n  (let [\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))]\n    [:.table-responsive {:style {:margin-top \"15px\"\n                                 :font-size  \"1.2em\"}}\n     [:table.table.table-hover {:style {:padding 0 :margin 0 :font-size \"16px\"}}\n      [:thead\n       [:tr\n        [:th (ttt [:table/col1 \"Treatment\"])]\n        [:th (ttt [:table/col2 \"Additional Benefit\"])]\n        [:th (ttt [:table/col3 \"Overall Survival %\"])]\n        ]]\n      [:tbody\n       [:tr\n        [:td (ttt [:table/c1r1 \"Initial conservative management\"])]\n        [:td \"-\"]\n        [:td (get-in data [:conservative :overall])]]\n       (when radical?                                       ;(pos? (:horm data))\n         [:tr\n          [:td (ttt [:table/c1r2 \"Radical treatment\"])]\n          [:td (get-in data [:radical :benefit])            ;(benefit% data :horm uncertainty?)\n           (if uncertainty?\n             (str \" (\" (get-in data [:radical :benefit-high]) \"\u2013\" (get-in data [:radical :benefit-low]) \")\"))]\n          [:td (get-in data [:radical :overall])]\n          ])\n       [:tr\n        [:td {:col-span 3}\n         (ttt [:table/idppe-1 \"If deaths from prostate cancer were excluded\"]) \" \"\n         (get data :dotted-orange)                          ; (Math.round (- 100 (:oth data)))\n         \" \" (ttt [:table/idppe-2 \"would survive\"]) \" \"\n         (rum/react (input-cursor :result-year))\n         \" \" (ttt [:table/idppe-3 \"years.\"])]\n        ]\n\n       ]]]))\n\n\n(rum/defc results-in-table < rum/reactive\n  [ttt]\n  (let [radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        year (rum/react (input-cursor :result-year))\n        uncertainty? (= :yes (rum/react (input-cursor :show-uncertainty)))\n        data (extract-data (rum/react results-cursor) year (if uncertainty? 1 0))\n        text1 (ttt [:table/text1 \"This table shows the percentage of men who survive at least\"])\n        text2 (ttt [:table/text2 \"years after diagnosis, based on the information you have provided\"])]\n\n    [:.row {:style {:margin-top 15}}\n     [:.col-sm-12.screen-only {:style {:font-size 16}}\n      text1 \" \" [:span.screen-only (year-picker ttt)] \" \" text2 \".\"]\n     [:.col-sm-12.print-only\n      text1 \" \" [:span.print-only year] \" \" text2 \".\"]\n     [:.col-sm-12 {:style {:margin-bottom \"15px\"}}\n      (tables data uncertainty? ttt)\n      (when radical?\n        [:.screen-only\n         (form-entry {:key :show-uncertainty :label \"show-ranges\"})])]]))\n\n\n;; (comment\n\n;;   (def results {:conservative {:pred-PC-cum (0 0.00209439167481409 0.0068631030425986275 0.013751329202967382 0.022479232057763355 0.032849141591410363 0.04470083770029029 0.057894651946130055 0.07230334252302753 0.08780755798557525 0.10429297055204881), :pred-NPC-cum (0 0.0002182447271967578 0.000544287475592099 0.0009307275902806942 0.0013662580043685233 0.0018484505910423502 0.002380109932274687 0.002968343202003146 0.0036245266082841282 0.004364779246955558 0.005210877168111608), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}, :radical-low {:pred-PC-cum (0 0.0007335583499764896 0.002407602686350095 0.004835063469570774 0.007926895894052616 0.011624081339670616 0.01588165160115533 0.02066252974225701 0.0259344864220196 0.031668383409725595 0.03783702781932995), :pred-NPC-cum (0 0.00021825115659365523 0.000544316212833242 0.000930799814108788 0.0013664002731486977 0.0018486971474197707 0.0023805071975003395 0.0029689574762498195 0.0036254571263068746 0.004366180648653087 0.005212998991071756), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}, :radical {:pred-PC-cum (0 0.0010121556874419695 0.0033208892722127277 0.006666009669913535 0.010922079710044877 0.01600471235091617 0.021848603059883027 0.028399086041023668 0.03560797615060335 0.04343117663580254 0.0518271193008505), :pred-NPC-cum (0 0.00021824868254736567 0.000544304911834677 0.0009307712038230736 0.0013663438408784236 0.0018485995864232431 0.002380350841826511 0.0029687176069217803 0.003625097434017231 0.004365645501480441 0.005212199988904085), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}, :radical-high {:pred-PC-cum (0 0.0014037401627852591 0.004603579602983735 0.00923466300292725 0.015118065289657147 0.02213108709725974 0.03017695312299632 0.03917322657966766 0.049046144092173935 0.05972738307190151 0.07115196920296826), :pred-NPC-cum (0 0.00021824664197662888 0.0005442958283880051 0.0009307484328346354 0.0013662990801877593 0.0018485221694604212 0.002380226355133872 0.002968525522271607 0.0036248070970956343 0.004365209233051064 0.005211540965589994), :NPC-survival (1 0.9997817121199226 0.9994554593459529 0.9990685368375318 0.9986321524197489 0.9981486208199123 0.9976149894821492 0.9970239420761796 0.9963637933269195 0.9956179553493606 0.9947639276902916)}}\n\n;;     )\n\n;;   (extract-data results true 9)\n;;   )\n\n\n\n"]}