{"version":3,"sources":["predict_prostate/results/text.cljs"],"mappings":"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","names":["predict-prostate.results.text/round","js/Math.round","predict-prostate.results.text/set-default","key","state","default","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","predict-prostate.results.text/emph","n","rum.core/build-defc","js/React.createElement","attrs33961","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","attrs33963","predict-prostate.results.text/texts","rum.core/static","years","data","radical?","printable","cs","G__33958","cljs.core.nth","rs","G__33959","benefit","predict-prostate.components.button/year-picker","predict-prostate.results.text/extract-data","results","p1__33972#","p2__33973#","one-sum","radical-survival","cljs.core.map","cljs.core.get_in","conservative-survival","p1__33976#","p2__33977#","p1__33978#","p__33990","map__33991","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","attrs33985","predict-prostate.results.text/results-in-text","rum.core/reactive","year","rum.core/react","predict-prostate.state.run-time/input-cursor","cljs.core._EQ_","predict-prostate.state.run-time/results-cursor","text1","text2","G__34009","G__34019","G__34011","G__34022"],"sourcesContent":["(ns predict-prostate.results.text\n  (:require [rum.core :as rum]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.components.button :refer [year-picker]]\n            [predict-prostate.state.run-time :refer [input-change input-cursor results-cursor]]\n            [predict-prostate.results.util :refer [fill avoid-decimals]]\n            [graphics.simple-icons :refer [icon]]\n            [pubsub.feeds :refer [publish]]))\n\n\n(def round js/Math.round)\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Use this on tab switching if something has to go back to default.\"\n  {:did-mount (fn [state]\n                (let [default (get-input-default input-groups key)]\n                  (publish (input-change key) default))\n                state)})\n\n(defn emph [n]\n  (if false\n    [:span {:style {:font-size \"16px\" :font-weight \"bold\"}} n]\n    n))\n\n(rum/defc texts < rum/static [years data radical? printable]\n  (let [cs (round (nth (:conservative-survival data) years))\n        rs (round (nth (:radical-survival data) years))\n        benefit (- rs cs)]\n    [:.row\n     [:.print-only\n      [:.col-sm-12.print-only {:style {:margin-top 0 :margin-bottom \"0px\" :display \"inline-block\" :font-size 12}}\n       \"Based on the information you have entered, \"\n       [:p (emph cs) \" out of \" (emph 100) \" men are alive at years with \" (emph \"initial conservative manage,ent\") \".\"]\n\n       (when radical?\n         [:p (emph rs) \" out of \" (emph 100) \" men treated (an extra \" (emph benefit) \") are alive because of \" (emph \"radical treatment\") \".\"])]]\n\n     [:.screen-only\n      [:.col-sm-12 {:style {:margin-top 15 :margin-bottom \"0px\" :display \"inline-block\" :font-size 16}}\n       [:span \"Based on the information you have entered, \" (year-picker) \" years after diagnosis:\"]\n\n       [:p (emph cs) \" out of \" (emph 100) \" men are alive at \" years \" years with \" (emph \"initial conservative treatment\") \".\"]\n\n       (when radical?\n         [:p (emph rs) \" out of \" (emph 100) \" men treated (an extra \" (emph benefit) \") are alive because of \" (emph \"radical treatment\") \".\"])]]]))\n\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [results radical?]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 \"Overall Survival\"\n     :subtitle-over         \"for men with prostate cancer, 5 and 10 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n     :dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :NPC-survival #_:pred-NPC-cum]))\n     }\n    ))\n\n(rum/defc results-in-text < rum/reactive #_(set-default :result-year)\n  [{:keys [printable]}]\n  (let [year (rum/react (input-cursor :result-year))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        text1 \"Of the men who would not survive, \"\n        text2 \" would die due to causes not related to prostate cancer.\"\n        ]\n\n    [:div\n     (texts year data radical? printable)\n     [:p.print-only {:style {:font-size 12}} text1 (emph (round (nth (:dotted-orange data) year))) text2]\n     [:p.screen-only {:style {:font-size 16}} text1 (emph (round (nth (:dotted-orange data) year))) text2]]))"]}