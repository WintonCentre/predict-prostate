{"version":3,"sources":["predict_prostate/results/text.cljs"],"mappings":"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","names":["predict-prostate.results.text/round","js/Math.round","predict-prostate.results.text/set-default","key","state","default","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","predict-prostate.results.text/emph","n","rum.core/build-defc","js/React.createElement","sablono.interpreter/interpret","attrs69601","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","attrs69635","attrs69636","predict-prostate.results.text/texts","rum.core/static","years","data","radical?","printable","ttt","cs","G__69585","cljs.core.nth","rs","G__69590","benefit","G__69604","G__69612","G__69619","G__69613","G__69620","G__69614","G__69623","G__69625","G__69628","G__69629","G__69630","G__69638","predict-prostate.components.button/year-picker","G__69641","G__69642","G__69645","G__69651","G__69647","G__69652","G__69649","G__69653","G__69650","G__69654","G__69655","G__69656","G__69657","G__69658","predict-prostate.results.text/extract-data","results","p1__69663#","p2__69664#","one-sum","radical-survival","cljs.core.map","cljs.core.get_in","conservative-survival","p1__69666#","p2__69667#","p1__69668#","p__69709","map__69710","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","attrs69704","predict-prostate.results.text/results-in-text","rum.core/reactive","year","rum.core/react","predict-prostate.state.run-time/input-cursor","cljs.core._EQ_","predict-prostate.state.run-time/results-cursor","text1","G__69729","text2","G__69732","G__69741","G__69765","G__69752","G__69785"],"sourcesContent":["(ns predict-prostate.results.text\n  (:require [rum.core :as rum]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.components.button :refer [year-picker]]\n            [predict-prostate.state.run-time :refer [input-change input-cursor results-cursor]]\n            [predict-prostate.results.util :refer [fill avoid-decimals]]\n            [graphics.simple-icons :refer [icon]]\n            [pubsub.feeds :refer [publish]]))\n\n\n(def round js/Math.round)\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Use this on tab switching if something has to go back to default.\"\n  {:did-mount (fn [state]\n                (let [default (get-input-default input-groups key)]\n                  (publish (input-change key) default))\n                state)})\n\n(defn emph [n]\n  (if false\n    [:span {:style {:font-size \"16px\" :font-weight \"bold\"}} n]\n    n))\n\n(rum/defc texts < rum/static [years data radical? printable ttt]\n  (let [cs (round (nth (:conservative-survival data) years))\n        rs (round (nth (:radical-survival data) years))\n        benefit (- rs cs)]\n    [:.row\n     ;;MH - somehow the print-only is not what is shown on the print version.\n     [:.print-only\n      [:.col-sm-12.print-only {:style {:margin-top 0 :margin-bottom \"0px\" :display \"inline-block\" :font-size 12}}\n       (ttt [:text/text1 \"Based on the information you have entered,\"]) \" \"\n       [:p (emph cs) \" \" (ttt [:text/text2 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text3 \"men are alive at years with\"]) \" \" (ttt [:text/text4 (emph \"initial conservative manage,ent\")]) \".\"]\n\n       (when radical?\n         [:p (emph rs) \" \" (ttt [:text/text5 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text6 \"men treated (an extra\"]) \" \" (emph benefit) \") \" (ttt [:text/text7 \"are alive because of\"]) \" \" (ttt [:text/text8 (emph \"radical treatment\")]) \".\"])]]\n     \n     [:.screen-only\n      [:.col-sm-12 {:style {:margin-top 15 :margin-bottom \"0px\" :display \"inline-block\" :font-size 16}}\n       [:span (ttt [:text/text1 \"Based on the information you have entered,\"]) \" \" (year-picker ttt) \" \" (ttt [:text/text9 \"years after diagnosis:\"])]\n\n       [:p (emph cs) \" \" (ttt [:text/text10 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text11 \"men are alive at\"]) \" \" years \" \" (ttt [:text/text12 \"years with\"]) \" \" (ttt [:text/text13 (emph \"initial conservative treatment\")]) \".\"]\n\n       (when radical?\n         [:p (emph rs) \" \" (ttt [:text/text14 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text15 \"men treated (an extra\"]) \" \" (emph benefit) \") \" (ttt [:text/text16 \"are alive because of\"]) \" \" (ttt [:text/text17 (emph \"radical treatment\")]) \".\"])]]]))\n\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [results radical?]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 \"Overall Survival\"\n     :subtitle-over         \"for men with prostate cancer, 5 and 10 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n     :dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :NPC-survival #_:pred-NPC-cum]))}\n    ))\n\n(rum/defc results-in-text < rum/reactive #_(set-default :result-year)\n  [{:keys [printable ttt]}]\n  (let [year (rum/react (input-cursor :result-year))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        text1 (ttt [:text/text18 \"Of the men who would not survive,\"])\n        text2 (ttt [:text/text19 \"would die due to causes not related to prostate cancer\"])\n        ]\n\n    [:div\n     (texts year data radical? printable ttt)\n     [:p.print-only {:style {:font-size 12}} text1 \" \" (emph (round (nth (:dotted-orange data) year))) \" \" text2 \".\"]\n     [:p.screen-only {:style {:font-size 16}} text1 \" \" (emph (round (nth (:dotted-orange data) year))) \" \" text2 \".\"]]))"]}