{"version":3,"sources":["predict_prostate/results/text.cljs"],"mappings":"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","names":["predict-prostate.results.text/round","js/Math.round","predict-prostate.results.text/set-default","key","state","default","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","predict-prostate.results.text/emph","n","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","daiquiri.interpreter/interpret","attrs43821","cljs.core/map?","daiquiri.interpreter/element-attributes","attrs43822","attrs43860","attrs43861","attrs43862","predict-prostate.results.text/texts","rum.core/static","years","data","radical?","printable","ttt","cs","G__43811","cljs.core.nth","rs","G__43812","benefit","G__43825","G__43828","G__43834","G__43830","G__43837","G__43832","G__43840","G__43843","G__43851","G__43845","G__43853","G__43847","G__43855","G__43849","G__43857","G__43863","predict-prostate.components.button/year-picker","G__43865","G__43867","G__43869","G__43877","G__43871","G__43879","G__43873","G__43881","G__43875","G__43883","G__43886","G__43894","G__43888","G__43896","G__43890","G__43898","G__43892","G__43900","predict-prostate.results.text/extract-data","results","p1__43901#","p2__43902#","one-sum","radical-survival","cljs.core.map","cljs.core.get_in","conservative-survival","p1__43903#","p2__43904#","p1__43905#","p__43913","map__43914","cljs.core/--destructure-map","cljs.core.get","predict-prostate.results.text/results-in-text","rum.core/reactive","year","rum.core/react","predict-prostate.state.run-time/input-cursor","cljs.core._EQ_","predict-prostate.state.run-time/results-cursor","text1","G__43915","text2","G__43916","G__43918","G__43922"],"sourcesContent":["(ns predict-prostate.results.text\n  (:require [rum.core :as rum]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.components.button :refer [year-picker]]\n            [predict-prostate.state.run-time :refer [input-change input-cursor results-cursor]]\n            [predict-prostate.results.util :refer [fill avoid-decimals]]\n            [graphics.simple-icons :refer [icon]]\n            [pubsub.feeds :refer [publish]]))\n\n\n(def round js/Math.round)\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Use this on tab switching if something has to go back to default.\"\n  {:did-mount (fn [state]\n                (let [default (get-input-default input-groups key)]\n                  (publish (input-change key) default))\n                state)})\n\n(defn emph [n]\n  (if false\n    [:span {:style {:font-size \"16px\" :font-weight \"bold\"}} n]\n    n))\n\n(rum/defc texts < rum/static [years data radical? printable ttt]\n  (let [cs (round (nth (:conservative-survival data) years))\n        rs (round (nth (:radical-survival data) years))\n        benefit (- rs cs)]\n    [:.row\n     ;;MH - somehow the print-only is not what is shown on the print version.\n     [:.print-only\n      [:.col-sm-12.print-only {:style {:margin-top 0 :margin-bottom \"0px\" :display \"inline-block\" :font-size 12}}\n       (ttt [:text/text1 \"Based on the information you have entered,\"]) \" \"\n       [:p (emph cs) \" \" (ttt [:text/text2 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text3 \"men are alive at years with\"]) \" \" (ttt [:text/text4 (emph \"initial conservative management.\")])]\n\n       (when radical?\n         [:p (emph rs) \" \" (ttt [:text/text5 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text6 \"men treated (an extra\"]) \" \" (emph benefit) \") \" (ttt [:text/text7 \"are alive because of\"]) \" \" (ttt [:text/text8 (emph \"radical treatment.\")])])]]\n     \n     [:.screen-only\n      [:.col-sm-12 {:style {:margin-top 15 :margin-bottom \"0px\" :display \"inline-block\" :font-size 16}}\n       [:span (ttt [:text/text1 \"Based on the information you have entered,\"]) \" \" (year-picker ttt) \" \" (ttt [:text/text9 \"years after diagnosis:\"])]\n\n       [:p (emph cs) \" \" (ttt [:text/text10 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text11 \"men are alive at\"]) \" \" years \" \" (ttt [:text/text12 \"years with\"]) \" \" (ttt [:text/text13 (emph \"initial conservative treatment.\")])]\n\n       (when radical?\n         [:p (emph rs) \" \" (ttt [:text/text14 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text15 \"men treated (an extra\"]) \" \" (emph benefit) \") \" (ttt [:text/text16 \"are alive because of\"]) \" \" (ttt [:text/text17 (emph \"radical treatment.\")])])]]]))\n\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [results radical?]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 \"Overall Survival\"\n     :subtitle-over         \"for men with prostate cancer, 5 and 10 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n     :dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :NPC-survival #_:pred-NPC-cum]))}\n    ))\n\n(rum/defc results-in-text < rum/reactive #_(set-default :result-year)\n  [{:keys [printable ttt]}]\n  (let [year (rum/react (input-cursor :result-year))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        text1 (ttt [:text/text18 \"Of the men who would not survive,\"])\n        text2 (ttt [:text/text19 \"would die due to causes not related to prostate cancer.\"])\n        ]\n\n    [:div\n     (texts year data radical? printable ttt)\n     [:p.print-only {:style {:font-size 12}} text1 \" \" (emph (round (nth (:dotted-orange data) year))) \" \" text2]\n     [:p.screen-only {:style {:font-size 16}} text1 \" \" (emph (round (nth (:dotted-orange data) year))) \" \" text2]]))"]}