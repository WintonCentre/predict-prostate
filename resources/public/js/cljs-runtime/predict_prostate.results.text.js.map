{"version":3,"sources":["predict_prostate/results/text.cljs"],"mappings":"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","names":["predict-prostate.results.text/round","js/Math.round","predict-prostate.results.text/set-default","key","state","default","predict-prostate.state.config/get-input-default","predict-prostate.state.config/input-groups","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","predict-prostate.results.text/emph","n","rum.core/build-defc","js/React.createElement","sablono.interpreter/interpret","attrs47230","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","attrs47244","attrs47245","predict-prostate.results.text/texts","rum.core/static","years","data","radical?","printable","ttt","cs","G__47228","cljs.core.nth","rs","G__47229","benefit","G__47231","G__47232","G__47235","G__47233","G__47236","G__47234","G__47237","G__47238","G__47239","G__47240","G__47241","G__47246","predict-prostate.components.button/year-picker","G__47250","G__47251","G__47257","G__47261","G__47258","G__47262","G__47259","G__47263","G__47260","G__47264","G__47265","G__47266","G__47268","G__47269","predict-prostate.results.text/extract-data","results","p1__47270#","p2__47271#","one-sum","radical-survival","cljs.core.map","cljs.core.get_in","conservative-survival","p1__47272#","p2__47273#","p1__47274#","p__47282","map__47283","cljs.core/--destructure-map","cljs.core.get","attrs47281","predict-prostate.results.text/results-in-text","rum.core/reactive","year","rum.core/react","predict-prostate.state.run-time/input-cursor","cljs.core._EQ_","predict-prostate.state.run-time/results-cursor","text1","G__47285","text2","G__47286","G__47288","G__47292","G__47289","G__47294"],"sourcesContent":["(ns predict-prostate.results.text\n  (:require [rum.core :as rum]\n            [predict-prostate.components.helpful-form-groups :refer [form-entry]]\n            [predict-prostate.state.config :refer [input-groups get-input-default]]\n            [predict-prostate.components.button :refer [year-picker]]\n            [predict-prostate.state.run-time :refer [input-change input-cursor results-cursor]]\n            [predict-prostate.results.util :refer [fill avoid-decimals]]\n            [graphics.simple-icons :refer [icon]]\n            [pubsub.feeds :refer [publish]]))\n\n\n(def round js/Math.round)\n\n(defn set-default [key]\n  \"Set the default state of an input after it is mounted. Use this on tab switching if something has to go back to default.\"\n  {:did-mount (fn [state]\n                (let [default (get-input-default input-groups key)]\n                  (publish (input-change key) default))\n                state)})\n\n(defn emph [n]\n  (if false\n    [:span {:style {:font-size \"16px\" :font-weight \"bold\"}} n]\n    n))\n\n(rum/defc texts < rum/static [years data radical? printable ttt]\n  (let [cs (round (nth (:conservative-survival data) years))\n        rs (round (nth (:radical-survival data) years))\n        benefit (- rs cs)]\n    [:.row\n     ;;MH - somehow the print-only is not what is shown on the print version.\n     [:.print-only\n      [:.col-sm-12.print-only {:style {:margin-top 0 :margin-bottom \"0px\" :display \"inline-block\" :font-size 12}}\n       (ttt [:text/text1 \"Based on the information you have entered,\"]) \" \"\n       [:p (emph cs) \" \" (ttt [:text/text2 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text3 \"men are alive at years with\"]) \" \" (ttt [:text/text4 (emph \"initial conservative management.\")])]\n\n       (when radical?\n         [:p (emph rs) \" \" (ttt [:text/text5 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text6 \"men treated (an extra\"]) \" \" (emph benefit) \") \" (ttt [:text/text7 \"are alive because of\"]) \" \" (ttt [:text/text8 (emph \"radical treatment.\")])])]]\n     \n     [:.screen-only\n      [:.col-sm-12 {:style {:margin-top 15 :margin-bottom \"0px\" :display \"inline-block\" :font-size 16}}\n       [:span (ttt [:text/text1 \"Based on the information you have entered,\"]) \" \" (year-picker ttt) \" \" (ttt [:text/text9 \"years after diagnosis:\"])]\n\n       [:p (emph cs) \" \" (ttt [:text/text10 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text11 \"men are alive at\"]) \" \" years \" \" (ttt [:text/text12 \"years with\"]) \" \" (ttt [:text/text13 (emph \"initial conservative treatment.\")])]\n\n       (when radical?\n         [:p (emph rs) \" \" (ttt [:text/text14 \"out of\"]) \" \" (emph 100) \" \" (ttt [:text/text15 \"men treated (an extra\"]) \" \" (emph benefit) \") \" (ttt [:text/text16 \"are alive because of\"]) \" \" (ttt [:text/text17 (emph \"radical treatment.\")])])]]]))\n\n\n(defn extract-data\n  \"Different models use different treatment widgets, so we need to use these to react to the correct\n  treatments and lookup the appropriate result-data.\"\n\n  [results radical?]\n  (let [one-sum #(* 100 (- 1 (+ %1 %2)))\n        radical-survival (map one-sum\n                              (get-in results [:radical :pred-PC-cum])\n                              (get-in results [:radical :pred-NPC-cum]))\n        conservative-survival (map one-sum\n                                   (get-in results [:conservative :pred-PC-cum])\n                                   (get-in results [:conservative :pred-NPC-cum]))]\n    {:title                 \"Overall Survival\"\n     :subtitle-over         \"for men with prostate cancer, 5 and 10 years after diagnosis\"\n     :subtitle-under        \"years after diagnosis\"\n     :conservative-survival conservative-survival\n     :radical-survival      radical-survival\n     :radical-benefit       (map #(- %1 %2) radical-survival conservative-survival)\n     :dotted-orange         (map #(* 100 (- 1 %)) (get-in results [(if radical? :radical :conservative) :NPC-survival #_:pred-NPC-cum]))}\n    ))\n\n(rum/defc results-in-text < rum/reactive #_(set-default :result-year)\n  [{:keys [printable ttt]}]\n  (let [year (rum/react (input-cursor :result-year))\n        radical? (= 1 (rum/react (input-cursor :primary-rx)))\n        data (extract-data (rum/react results-cursor) radical?)\n        text1 (ttt [:text/text18 \"Of the men who would not survive,\"])\n        text2 (ttt [:text/text19 \"would die due to causes not related to prostate cancer.\"])\n        ]\n\n    [:div\n     (texts year data radical? printable ttt)\n     [:p.print-only {:style {:font-size 12}} text1 \" \" (emph (round (nth (:dotted-orange data) year))) \" \" text2]\n     [:p.screen-only {:style {:font-size 16}} text1 \" \" (emph (round (nth (:dotted-orange data) year))) \" \" text2]]))"]}