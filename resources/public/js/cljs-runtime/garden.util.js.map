{"version":3,"sources":["garden/util.cljc"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","garden.util/format","seq44171","G__44172","cljs.core/first","cljs.core/next","self__4723__auto__","fmt","args","cljs.core.apply","goog.string/format","garden$util$ToString$to_str$dyn","x__4428__auto__","m__4429__auto__","garden.util/to-str","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","garden.util/ToString","this","cljs.core/PROTOCOL_SENTINEL","goog.object/set","cljs.core/Keyword","cljs.core/name","garden.util/as-str","seq44195","self__4724__auto__","cljs.core/seq","cljs.core/str","cljs.core.map","garden.util/string->int","p__44199","vec__44200","cljs.core.nth","seq44197","G__44198","s","radix","or__4126__auto__","js/parseInt","garden.util/int->string","p__44211","vec__44212","seq44203","G__44204","i","garden.util/space-join","xs","clojure.string.join","garden.util/comma-join","ys","iter__4529__auto__","s__44217","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__44219","cljs.core/chunk-buffer","i__44218","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44216","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","cljs.core/sequential?","garden.util/wrap-quotes","garden.util/hash-map?","cljs.core/map?","cljs.core/record?","garden.util/rule?","cljs.core/vector?","garden.util/declaration?","garden.util/at-rule?","garden.types/CSSAtRule","garden.util/at-media?","cljs.core._EQ_","garden.util/at-keyframes?","garden.util/at-import?","garden.util/prefix","p","cljs.core/last","garden.util/vendor-prefix","garden.util/natural?","n","cljs.core/integer?","garden.util/between?","a","b","bottom","x__4217__auto__","y__4218__auto__","top","x__4214__auto__","y__4215__auto__","garden.util/clip","vec__44291","garden.util/average","seq44295","G__44296","G__44297","m","more","cljs.core/+","garden.util/cartesian-product","seq44298","seqs","v-original-seqs","cljs.core/vec","step","v-seqs","increment","temp__5733__auto__","rst","cljs.core.assoc","cljs.core/every?","cljs.core/chunk-first"],"sourcesContent":["(ns garden.util\n  \"Utility functions used by Garden.\"\n  (:require\n   [clojure.string :as str]\n   [garden.types :as t]\n   #?@(:cljs\n       [[goog.string]\n        [goog.string.format]]))\n  #?(:clj\n     (:refer-clojure :exclude [format]))\n  #?(:clj\n     (:import garden.types.CSSAtRule)))\n\n;; ---------------------------------------------------------------------\n;; String utilities\n\n#?(:cljs\n   (defn format\n     \"Formats a string using goog.string.format.\"\n     [fmt & args]\n     (apply goog.string/format fmt args)))\n\n;; To avoid the pain of #?cljs :refer.\n#?(:clj\n   (def format #'clojure.core/format))\n\n(defprotocol ToString\n  (^String to-str [this] \"Convert a value into a string.\"))\n\n(extend-protocol ToString\n  #?(:clj clojure.lang.Keyword)\n  #?(:cljs Keyword)\n  (to-str [this] (name this))\n\n  #?(:clj Object)\n  #?(:cljs default)\n  (to-str [this] (str this))\n\n  nil (to-str [this] \"\"))\n\n(defn ^String as-str\n  \"Convert a variable number of values into strings.\"\n  [& args]\n  (apply str (map to-str args)))\n\n(defn string->int\n  \"Convert a string to an integer with optional base.\"\n  [s & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/parseInt ^String s ^Long radix))\n    #?(:cljs\n       (js/parseInt s radix))))\n\n(defn int->string\n  \"Convert an integer to a string with optional base.\"\n  [i & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/toString ^Long i ^Long radix))\n    #?(:cljs\n       (.toString i radix))))\n\n(defn space-join\n  \"Return a space separated list of values.\"\n  [xs]\n  (str/join \" \" (map to-str xs)))\n\n(defn comma-join\n  \"Return a comma separated list of values. Subsequences are joined with\n   spaces.\"\n  [xs]\n  (let [ys (for [x xs]\n             (if (sequential? x)\n               (space-join x)\n               (to-str x)))]\n    (str/join \", \" ys)))\n\n(defn wrap-quotes\n  \"Wrap a string with double quotes.\"\n  [s]\n  (str \\\" s \\\"))\n\n;; ---------------------------------------------------------------------\n;; Predicates\n\n(defn hash-map?\n  \"True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\"\n  [x]\n  (and (map? x) (not (record? x))))\n\n(def\n  ^{:doc \"Alias to `vector?`.\"}\n  rule? vector?)\n\n(def\n  ^{:doc \"Alias to `hash-map?`.\"}\n  declaration? hash-map?)\n\n(defn at-rule?\n  [x]\n  (instance? #?(:clj CSSAtRule) #?(:cljs t/CSSAtRule) x))\n\n(defn at-media?\n  \"True if `x` is a CSS `@media` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :media)))\n\n(defn at-keyframes?\n  \"True if `x` is a CSS `@keyframes` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :keyframes)))\n\n(defn at-import?\n  \"True if `x` is a CSS `@import` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :import)))\n\n(defn prefix\n  \"Attach a CSS style prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (last p))\n      (str p s)\n      (str p \\- s))))\n\n(defn vendor-prefix\n  \"Attach a CSS vendor prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (first p))\n      (prefix p s) \n      (prefix (str \\- p) s))))\n\n;; ---------------------------------------------------------------------\n;; Math utilities\n\n(defn natural?\n  \"True if n is a natural number.\"\n  [n]\n  (and (integer? n) (pos? n)))\n\n(defn between?\n  \"True if n is a number between a and b.\"\n  [n a b]\n  (let [bottom (min a b)\n        top (max a b)]\n    (and (>= n bottom) (<= n top))))\n\n(defn clip\n  \"Return a number such that n is no less than a and no more than b.\"\n  [a b n]\n  (let [[a b] (if (<= a b) [a b] [b a])] \n    (max a (min b n))))\n\n(defn average\n  \"Return the average of two or more numbers.\"\n  [n m & more]\n  (/ (apply + n m more) (+ 2.0 (count more))))\n\n;; Taken from clojure.math.combinatorics.\n(defn cartesian-product\n  \"All the ways to take one item from each sequence.\"\n  [& seqs]\n  (let [v-original-seqs (vec seqs)\n\tstep\n\t(fn step [v-seqs]\n\t  (let [increment\n\t\t(fn [v-seqs]\n\t\t  (loop [i (dec (count v-seqs)), v-seqs v-seqs]\n\t\t    (if (= i -1) nil\n\t\t\t(if-let [rst (next (v-seqs i))]\n\t\t\t  (assoc v-seqs i rst)\n\t\t\t  (recur (dec i) (assoc v-seqs i (v-original-seqs i)))))))]\n\t    (when v-seqs\n              (cons (map first v-seqs)\n                    (lazy-seq (step (increment v-seqs)))))))]\n    (when (every? seq seqs)\n      (lazy-seq (step v-original-seqs)))))\n"]}