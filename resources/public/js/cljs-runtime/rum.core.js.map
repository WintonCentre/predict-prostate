{"version":3,"sources":["rum/core.cljs"],"mappings":"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","names":["rum.core/state","comp","goog.object/get","rum.core/extend!","obj","props","seq__42395","cljs.core/seq","chunk__42397","count__42398","i__42399","vec__42413","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__42419","cljs.core/first","cljs.core/next","k","v","goog.object/set","cljs.core/name","cljs.core/clj->js","rum.core/build-class","render","mixins","display-name","js/goog.DEBUG","cljs.core.mapcat","cljs.core/keys","cljs.core/set","js/Error","clojure.set/subset?","rum.specs/mixins","clojure.set.difference","cljs.core/select-keys","rum.specs/deprecated-mixins","cljs.core/vals","p1__42422#","cljs.core/run!","js/console","init","rum.util/collect","before-render","rum.util/collect*","wrap-render","wrapped-render","p1__42424#","p2__42423#","cljs.core.reduce","did-mount","will-remount","should-update","before-update","did-update","did-catch","will-unmount","child-context","class-props","cljs.core/merge","static-props","ctor","this","cljs.core.assoc","rum.util.call_all","cljs.core/volatile!","js/React.Component","_","goog/inherits","prototype","cljs.core/empty?","cljs.core/-vreset!","cljs.core/-deref","rum.util/call-all","next-props","cljs.core/deref","old-state","state","cljs.core.merge","next-state","p1__42426#","p2__42425#","new-state","or__4212__auto__","p1__42427#","cljs.core/some","vec__42443","dom","G__42446","cljs.core/vreset!","error","info","cljs.core.transduce","p1__42429#","cljs.core.map","rum.core/set-meta!","c","f","ctr","x42452","cljs.core/PROTOCOL_SENTINEL","cljs.core/meta","rum.core/lazy-build","bf","goog.functions/cacheReturnValue","rum.core/build-ctor","class","key-fn","args","cljs.core.apply","js/React.createElement","cljs.core/with-meta","rum.core/memo-compare-props","prev-props","cljs.core._EQ_","rum.core/react-memo","temp__5755__auto__","memo","js/React","rum.core/build-defc","render-body","rum.core/static","memo-class","rum.core/build-defcs","rum.core/build-defcc","rum.core/schedule","p1__42462#","and__4210__auto__","js/window","js/window.requestAnimationFrame","js/window.webkitRequestAnimationFrame","js/window.mozRequestAnimationFrame","js/window.msRequestAnimationFrame","js/setTimeout","rum.core/batch","js/ReactNative","js/ReactNative.unstable_batchedUpdates","js/ReactDOM","js/ReactDOM.unstable_batchedUpdates","a","rum.core/empty-queue","rum.core/render-queue","rum.core/render-one","cljs.core/not","rum.core/render-all","queue","rum.core/render","rum.core/sync-update?","rum.core/request-render","component","cljs.core.conj","rum.core/mark-sync-update","cljs.core/fn?","e","ret","rum.core/mount","element","node","js/ReactDOM.render","rum.core/unmount","js/ReactDOM.unmountComponentAtNode","rum.core/hydrate","js/ReactDOM.hydrate","rum.core/portal","js/ReactDOM.createPortal","rum.core/create-context","default-value","rum.core/with-key","key","js/React.cloneElement","rum.core/with-ref","ref","rum.core/dom-node","js/ReactDOM.findDOMNode","rum.core/ref","rum.core/ref-node","cljs.core.not_EQ_","var_args","G__42515","rum.core/local","initial","rum.core.local","local-state","cljs.core.atom","cljs.core/add-watch","p","n","rum.core/reactive","cljs.core/random-uuid","render-fn","*reactions*-orig-val__42517","*reactions*-temp-val__42518","rum.core/*reactions*","vec__42519","old-reactions","new-reactions","seq__42522","chunk__42523","count__42524","i__42525","cljs.core/contains?","cljs.core/remove-watch","seq__42530","chunk__42531","count__42532","i__42533","seq__42547","chunk__42548","count__42549","i__42550","cljs.core.dissoc","rum.core/react","rum.core/derived-atom","rum.derived-atom/derived-atom","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","rum.core/cursor-in","p__42561","map__42562","cljs.core/--destructure-map","seq42555","G__42556","G__42557","self__4805__auto__","path","options","rum.cursor/Cursor","cljs.core.into","rum.core/cursor","seq42570","G__42571","G__42572","rum.core/use-state","value-or-fn","rum.core/use-reducer","reducer-fn","initial-value","p1__42577#","p2__42578#","cljs.core/identity","G__42582","rum.core/use-effect!","setup-fn","js/undefined","deps","cljs.core/array?","cljs.core.into_array","G__42585","rum.core/use-layout-effect!","G__42589","rum.core/use-callback","callback","G__42592","rum.core/use-memo","rum.core/use-ref","rum.core/create-ref","rum.core/deref","rum.core/set-ref!","value","G__42615","rum.core/render-html","rum.core.render_html","opts","cljs.core/*target*","js/ReactDOMServer","react-dom-server","js/require","rum.core/render-static-markup","src","rum.core/adapt-class-helper","type","attrs","children"],"sourcesContent":["(ns rum.core\n  (:refer-clojure :exclude [ref deref])\n  (:require-macros rum.core)\n  (:require\n   [cljsjs.react]\n   [cljsjs.react.dom]\n   [goog.object :as gobj]\n   [goog.functions :as fns]\n   [clojure.set :as set]\n   [rum.specs]\n   [daiquiri.core]\n   [rum.cursor :as cursor]\n   [rum.util :as util :refer [collect collect* call-all]]\n   [rum.derived-atom :as derived-atom]))\n\n(defn state\n  \"Given React component, returns Rum state associated with it.\"\n  [^js/React.Component comp]\n  (gobj/get (.-state comp) \":rum/state\"))\n\n(defn- extend! [obj props]\n  (doseq [[k v] props\n          :when (some? v)]\n    (gobj/set obj (name k) (clj->js v))))\n\n(defn- build-class [render mixins display-name]\n  (when ^boolean goog.DEBUG\n    (let [mixins (->> mixins (mapcat keys) set)]\n      (assert (set/subset? mixins rum.specs/mixins)\n              (str display-name \" declares invalid mixin keys \"\n                   (set/difference mixins rum.specs/mixins) \", \"\n                   \"did you mean one of \" rum.specs/mixins))\n      (->> (select-keys rum.specs/deprecated-mixins mixins)\n           vals\n           (run! #(.warn js/console %)))))\n  (let [init           (collect   :init mixins)             ;; state props -> state\n        before-render  (collect* [:will-mount\n                                  :unsafe/will-mount\n                                  :before-render] mixins)   ;; state -> state\n        render         render                               ;; state -> [dom state]\n        wrap-render    (collect   :wrap-render mixins)      ;; render-fn -> render-fn\n        wrapped-render (reduce #(%2 %1) render wrap-render)\n        did-mount      (collect* [:did-mount                ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        will-remount    (collect* [:did-remount             ;; state -> state\n                                   :will-remount] mixins)   ;; old-state state -> state\n        should-update  (collect   :should-update mixins)    ;; old-state state -> boolean\n        before-update  (collect* [:unsafe/will-update\n                                  :unsafe/will-update\n                                  :before-render] mixins)   ;; state -> state\n        did-update     (collect* [:did-update               ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-catch      (collect   :did-catch mixins)        ;; state error info -> state\n        will-unmount   (collect   :will-unmount mixins)     ;; state -> state\n        child-context  (collect   :child-context mixins)    ;; state -> child-context\n        class-props    (reduce merge (collect :class-properties mixins))  ;; custom prototype properties and methods\n        static-props   (reduce merge (collect :static-properties mixins)) ;; custom static properties and methods\n\n        ctor           (fn [props]\n                         (this-as this\n                                  (gobj/set this \"state\"\n                                            #js {\":rum/state\"\n                                                 (-> (gobj/get props \":rum/initial-state\")\n                                                     (assoc :rum/react-component this)\n                                                     (call-all init props)\n                                                     volatile!)})\n                                  (.call js/React.Component this props)))\n        _              (goog/inherits ctor js/React.Component)\n        prototype      (gobj/get ctor \"prototype\")]\n\n    (when-not (empty? before-render)\n      (gobj/set prototype \"UNSAFE_componentWillMount\"\n                (fn []\n                  (this-as this\n                    (vswap! (state this) call-all before-render)))))\n\n    (when-not (empty? did-mount)\n      (gobj/set prototype \"componentDidMount\"\n                (fn []\n                  (this-as this\n                           (vswap! (state this) call-all did-mount)))))\n\n    (gobj/set prototype \"UNSAFE_componentWillReceiveProps\"\n              (fn [next-props]\n                (this-as this\n                         (let [old-state  @(state this)\n                               state      (merge old-state\n                                                 (gobj/get next-props \":rum/initial-state\"))\n                               next-state (reduce #(%2 old-state %1) state will-remount)]\n            ;; allocate new volatile so that we can access both old and new states in shouldComponentUpdate\n                           (.setState ^js/React.Component this #js {\":rum/state\" (volatile! next-state)})))))\n\n    (when-not (empty? should-update)\n      (gobj/set prototype \"shouldComponentUpdate\"\n                (fn [next-props next-state]\n                  (this-as this\n                           (let [old-state @(state this)\n                                 new-state @(gobj/get next-state \":rum/state\")]\n                             (or (some #(% old-state new-state) should-update) false))))))\n\n    (when-not (empty? before-update)\n      (gobj/set prototype \"UNSAFE_componentWillUpdate\"\n                (fn [_ next-state]\n                  (this-as this\n                    (let [new-state (gobj/get next-state \":rum/state\")]\n                      (vswap! new-state call-all before-update))))))\n\n    (gobj/set prototype \"render\"\n              (fn []\n                (this-as this\n                         (let [state (state this)\n                               [dom next-state] (wrapped-render @state)]\n                           (vreset! state next-state)\n                           dom))))\n\n    (when-not (empty? did-update)\n      (gobj/set prototype \"componentDidUpdate\"\n                (fn [_ _]\n                  (this-as this\n                           (vswap! (state this) call-all did-update)))))\n\n    (when-not (empty? did-catch)\n      (gobj/set prototype \"componentDidCatch\"\n                (fn [error info]\n                  (this-as this\n                           (vswap! (state this) call-all did-catch error {:rum/component-stack (gobj/get info \"componentStack\")})\n                           (.forceUpdate ^js/React.Component this)))))\n\n    (gobj/set prototype \"componentWillUnmount\"\n              (fn []\n                (this-as this\n                         (when-not (empty? will-unmount)\n                           (vswap! (state this) call-all will-unmount))\n                         (gobj/set this \":rum/unmounted?\" true))))\n\n    (when-not (empty? child-context)\n      (gobj/set prototype \"getChildContext\"\n                (fn []\n                  (this-as this\n                           (let [state @(state this)]\n                             (clj->js (transduce (map #(% state)) merge {} child-context)))))))\n\n    (extend! prototype class-props)\n    (gobj/set ctor \"displayName\" display-name)\n    (extend! ctor static-props)\n    ctor))\n\n(defn- set-meta! [c]\n  (let [f #(let [^js ctr (c)]\n             (.apply ctr ctr (js-arguments)))]\n    (specify! f IMeta (-meta [_] (meta (c))))\n    f))\n\n(defn lazy-build\n  \"Wraps component construction in a way so that Google Closure Compiler\n   can properly recognize and elide unused components. The extra `set-meta`\n   fn is needed so that the compiler can properly detect that all functions\n   are side effect free.\"\n  [ctor render mixins display-name]\n  (let [bf #(ctor render mixins display-name) ;; Avoid IIFE\n        c  (fns/cacheReturnValue bf)]\n    (set-meta! c)))\n\n(defn- build-ctor [render mixins display-name]\n  (let [class  (build-class render mixins display-name)\n        key-fn (first (collect :key-fn mixins))\n        ctor   (if (some? key-fn)\n                 (fn [& args]\n                   (let [props #js {\":rum/initial-state\" {:rum/args args}\n                                    \"key\" (apply key-fn args)}]\n                     (js/React.createElement class props)))\n                 (fn [& args]\n                   (let [props #js {\":rum/initial-state\" {:rum/args args}}]\n                     (js/React.createElement class props))))]\n    (with-meta ctor {:rum/class class})))\n\n(declare static)\n\n(defn- memo-compare-props [prev-props next-props]\n  (= (aget prev-props \":rum/args\")\n     (aget next-props \":rum/args\")))\n\n(defn react-memo [f]\n  (if-some [memo (.-memo js/React)]\n    (memo f memo-compare-props)\n    f))\n\n(defn ^:no-doc build-defc [render-body mixins display-name]\n  (cond\n    (= mixins [static])\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum/args\")))\n          _     (aset class \"displayName\" display-name)\n          memo-class (react-memo class)\n          ctor  (fn [& args]\n                  (.createElement js/React memo-class #js {\":rum/args\" args}))]\n      (with-meta ctor {:rum/class memo-class}))\n\n    (empty? mixins)\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum/args\")))\n          _     (aset class \"displayName\" display-name)\n          ctor  (fn [& args]\n                  (.createElement js/React class #js {\":rum/args\" args}))]\n      (with-meta ctor {:rum/class class}))\n\n    :else\n    (let [render (fn [state] [(apply render-body (:rum/args state)) state])]\n      (build-ctor render mixins display-name))))\n\n(defn ^:no-doc build-defcs [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body state (:rum/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n(defn ^:no-doc build-defcc [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body (:rum/react-component state) (:rum/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n;; render queue\n\n\n(def ^:private schedule\n  (or (and (exists? js/window)\n           (or js/window.requestAnimationFrame\n               js/window.webkitRequestAnimationFrame\n               js/window.mozRequestAnimationFrame\n               js/window.msRequestAnimationFrame))\n      #(js/setTimeout % 16)))\n\n(def ^:private batch\n  (or (when (exists? js/ReactNative) js/ReactNative.unstable_batchedUpdates)\n      (when (exists? js/ReactDOM) js/ReactDOM.unstable_batchedUpdates)\n      (fn [f a] (f a))))\n\n(def ^:private empty-queue [])\n(def ^:private render-queue (volatile! empty-queue))\n\n(defn- render-one [comp]\n  (when (and (some? comp) (not (gobj/get comp \":rum/unmounted?\")))\n    (.forceUpdate comp)))\n\n(defn- render-all [queue]\n  (run! render-one queue))\n\n(defn- render []\n  (let [queue @render-queue]\n    (vreset! render-queue empty-queue)\n    (batch render-all queue)))\n\n(def ^:private sync-update? (volatile! false))\n\n(defn request-render\n  \"Schedules react component to be rendered on next animation frame,\n  unless the requested update happens to be in a sync-update phase.\"\n  [component]\n  (if @sync-update?\n    (render-one component)\n    (do\n      (when (empty? @render-queue)\n        (schedule render))\n      (vswap! render-queue conj component))))\n\n;; exporting to work around circular deps\n(defn ^:export mark-sync-update [f]\n  (if (fn? f)\n    (fn wrapped-handler [e]\n      (let [_ (vreset! sync-update? true)\n            ret (f e)\n            _ (vreset! sync-update? false)]\n        ret))\n    f))\n\n(defn mount\n  \"Add element to the DOM tree. Idempotent. Subsequent mounts will just update element.\"\n  [element node]\n  (js/ReactDOM.render element node)\n  nil)\n\n(defn unmount\n  \"Removes component from the DOM tree.\"\n  [node]\n  (js/ReactDOM.unmountComponentAtNode node))\n\n(defn hydrate\n  \"Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]].\"\n  [element node]\n  (js/ReactDOM.hydrate element node))\n\n(defn portal\n  \"Render `element` in a DOM `node` that is ouside of current DOM hierarchy.\"\n  [element node]\n  (js/ReactDOM.createPortal element node))\n\n(defn create-context [default-value]\n  (.createContext js/React default-value))\n\n\n;; initialization\n\n\n(defn with-key\n  \"Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element key]\n  (js/React.cloneElement element #js {\"key\" key} nil))\n\n(defn with-ref\n  \"Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element ref]\n  (js/React.cloneElement element #js {\"ref\" ref} nil))\n\n(defn dom-node\n  \"Usage of this function is discouraged. Use :ref callback instead.\n  Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can\u2019t be called during render.\"\n  [state]\n  (js/ReactDOM.findDOMNode (:rum/react-component state)))\n\n(defn ref\n  \"DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns React component.\"\n  [state key]\n  (-> state :rum/react-component (aget \"refs\") (aget (name key))))\n\n(defn ref-node\n  \"DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns DOM node associated with ref.\"\n  [state key]\n  (js/ReactDOM.findDOMNode (ref state (name key))))\n\n\n;; static mixin\n\n\n(def static\n  \"Mixin. Will avoid re-render if none of component\u2019s arguments have changed. Does equality check (`=`) on all arguments.\n  \n   ```\n   (rum/defc label < rum/static\n     [text]\n     [:div text])\n     \n   (rum/mount (label \\\"abc\\\") js/document.body)\n\n   ;; def != abc, will re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n\n   ;; def == def, won\u2019t re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n   ```\"\n  {:should-update\n   (fn [old-state new-state]\n     (not= (:rum/args old-state) (:rum/args new-state)))})\n\n\n;; local mixin\n\n\n(defn local\n  \"Mixin constructor. Adds an atom to component\u2019s state that can be used to keep stuff during component\u2019s lifecycle. Component will be re-rendered if atom\u2019s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \\\"Click count: \\\"))\n   ```\"\n  ([initial] (local initial :rum/local))\n  ([initial key]\n   {:will-mount\n    (fn [state]\n      (let [local-state (atom initial)\n            ^js/React.Component component (:rum/react-component state)]\n        (add-watch local-state key\n                   (fn [_ _ p n]\n                     (when (not= p n)\n                       (request-render component))))\n        (assoc state key local-state)))}))\n\n\n;; reactive mixin\n\n\n(def ^:private ^:dynamic *reactions*)\n\n(def reactive\n  \"Mixin. Works in conjunction with [[react]].\n  \n   ```\n   (rum/defc comp < rum/reactive\n     [*counter]\n     [:div (rum/react counter)])\n\n   (def *counter (atom 0))\n   (rum/mount (comp *counter) js/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```\"\n  {:init\n   (fn [state props]\n     (assoc state :rum.reactive/key (random-uuid)))\n   :wrap-render\n   (fn [render-fn]\n     (fn [state]\n       (binding [*reactions* (volatile! #{})]\n         (let [comp             (:rum/react-component state)\n               old-reactions    (:rum.reactive/refs state #{})\n               [dom next-state] (render-fn state)\n               new-reactions    @*reactions*\n               key              (:rum.reactive/key state)]\n           (doseq [ref old-reactions]\n             (when-not (contains? new-reactions ref)\n               (remove-watch ref key)))\n           (doseq [ref new-reactions]\n             (when-not (contains? old-reactions ref)\n               (add-watch ref key\n                          (fn [_ _ p n]\n                            (when (not= p n)\n                              (request-render comp))))))\n           [dom (assoc next-state :rum.reactive/refs new-reactions)]))))\n   :will-unmount\n   (fn [state]\n     (let [key (:rum.reactive/key state)]\n       (doseq [ref (:rum.reactive/refs state)]\n         (remove-watch ref key)))\n     (dissoc state :rum.reactive/refs :rum.reactive/key))})\n\n(defn react\n  \"Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom.\"\n  [ref]\n  (assert *reactions* \"rum.core/react is only supported in conjunction with rum.core/reactive\")\n  (vswap! *reactions* conj ref)\n  @ref)\n\n\n;; derived-atom\n\n\n(def ^{:style/indent 2\n       :arglists '([refs key f] [refs key f opts])\n       :doc \"Use this to create \u201cchains\u201d and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N \u201csource\u201d refs.\n             - Set up a watch on each of them.\n             - Create \u201csink\u201d atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \\\":\\\" b))))\n             \n             (type *x)  ;; => clojure.lang.Atom\n             (deref *x) ;; => \\\"0:1\\\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \\\"1:1\\\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \\\"1:7\\\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won\u2019t be called. Set to `false` if checking for equality can be expensive.\"}\n  derived-atom derived-atom/derived-atom)\n\n\n;; cursors\n\n\n(defn cursor-in\n  \"Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \\\"Ivan\\\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \\\"Ivan\\\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \\\"Ivan\\\" { :age 31 }}}\n   \n   (swap! db update-in [:users \\\"Ivan\\\" :age] inc)\n   ;; => { :users { \\\"Ivan\\\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`\"\n  [ref path & {:as options}]\n  (if (instance? cursor/Cursor ref)\n    (cursor/Cursor. (.-ref ref) (into (.-path ref) path) (:meta options))\n    (cursor/Cursor. ref path (:meta options))))\n\n(defn cursor\n  \"Same as [[cursor-in]] but accepts single key instead of path vector.\"\n  [ref key & options]\n  (apply cursor-in ref [key] options))\n\n;; hooks\n\n(defn ^array use-state\n  \"Takes initial value or value returning fn and returns a tuple of [value set-value!],\n  where `value` is current state value and `set-value!` is a function that schedules re-render.\n\n  (let [[value set-state!] (rum/use-state 0)]\n    [:button {:on-click #(set-state! (inc value))}\n      value])\"\n  [value-or-fn]\n  (.useState js/React value-or-fn))\n\n(defn ^array use-reducer\n  \"Takes reducing function and initial state value.\n  Returns a tuple of [value dispatch!], where `value` is current state value and `dispatch` is a function that schedules re-render.\n\n  (defmulti value-reducer (fn [value event] event))\n\n  (defmethod value-reducer :inc [value _]\n    (inc value))\n\n  (let [[value dispatch!] (rum/use-reducer value-reducer 0)]\n    [:button {:on-click #(dispatch! :inc)}\n      value])\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usereducer\"\n  ([reducer-fn initial-value]\n   (.useReducer js/React #(reducer-fn %1 %2) initial-value identity)))\n\n(defn use-effect!\n  \"Takes setup-fn that executes either on the first render or after every update.\n  The function may return cleanup-fn to cleanup the effect, either before unmount or before every next update.\n  Calling behavior is controlled by deps argument.\n\n  (rum/use-effect!\n    (fn []\n      (.addEventListener js/window \\\"load\\\" handler)\n      #(.removeEventListener js/window \\\"load\\\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html\"\n  ([setup-fn]\n   (.useEffect js/React #(or (setup-fn) js/undefined)))\n  ([setup-fn deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useEffect js/React #(or (setup-fn) js/undefined)))))\n\n(defn use-layout-effect!\n  \"(rum/use-layout-effect!\n    (fn []\n      (.addEventListener js/window \\\"load\\\" handler)\n      #(.removeEventListener js/window \\\"load\\\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html\"\n  ([setup-fn]\n   (.useLayoutEffect js/React #(or (setup-fn) js/undefined)))\n  ([setup-fn deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useLayoutEffect js/React #(or (setup-fn) js/undefined)))))\n\n(defn use-callback\n  \"Takes callback function and returns memoized variant, memoization is done based on provided deps collection.\n\n  (rum/defc button < rum/static\n    [{:keys [on-click]} text]\n    [:button {:on-click on-click}\n      text])\n\n  (rum/defc app [v]\n    (let [on-click (rum/use-callback #(do-stuff v) [v])]\n      ;; because on-click callback is memoized here based on v argument\n      ;; the callback won't be re-created on every render, unless v changes\n      ;; which means that underlying `button` component won't re-render wastefully\n      [button {:on-click on-click}\n        \\\"press me\\\"]))\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usecallback\"\n  ([callback]\n   (.useCallback js/React callback))\n  ([callback deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useCallback js/React callback))))\n\n(defn use-memo\n  \"Takes a function, memoizes it based on provided deps collection and executes immediately returning a result.\n  Read more at https://reactjs.org/docs/hooks-reference.html#usememo\"\n  ([f]\n   (.useMemo js/React f))\n  ([f deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useMemo js/React f))))\n\n(defn use-ref\n  \"Takes a value and puts it into a mutable container which is persisted for the full lifetime of the component.\n  https://reactjs.org/docs/hooks-reference.html#useref\"\n  ([initial-value]\n   (.useRef js/React initial-value)))\n\n;; Refs\n\n(defn create-ref []\n  (.createRef js/React))\n\n(defn deref\n  \"Takes a ref returned from use-ref and returns its current value.\"\n  [^js ref]\n  (.-current ref))\n\n(defn set-ref! [^js ref value]\n  (set! (.-current ref) value))\n\n;;; Server-side rendering\n\n;; Roman. For Node.js runtime we require \"react-dom/server\" for you\n;; In the browser you have to add cljsjs/react-dom-server yourself\n\n(defn render-html\n  \"Main server-side rendering method. Given component, returns HTML string with static markup of that component.\n  Serve that string to the browser and [[hydrate]] same Rum component over it. React will be able to reuse already existing DOM and will initialize much faster.\n  No opts are supported at the moment.\"\n  ([element]\n   (render-html element nil))\n  ([element opts]\n   (if-not (identical? *target* \"nodejs\")\n     (.renderToString js/ReactDOMServer element)\n     (let [^js/ReactDOMServer react-dom-server (js/require \"react-dom/server\")]\n       (.renderToString react-dom-server element)))))\n\n(defn render-static-markup\n  \"Same as [[render-html]] but returned string has nothing React-specific.\n  This allows Rum to be used as traditional server-side templating engine.\"\n  [src]\n  (if-not (identical? *target* \"nodejs\")\n    (.renderToStaticMarkup js/ReactDOMServer src)\n    (let [^js/ReactDOMServer react-dom-server (js/require \"react-dom/server\")]\n      (.renderToStaticMarkup react-dom-server src))))\n\n;; JS components adapter\n(defn adapt-class-helper [type attrs children]\n  (let [args (.concat #js [type attrs] children)]\n    (.apply (.-createElement js/React) js/React args)))\n"]}