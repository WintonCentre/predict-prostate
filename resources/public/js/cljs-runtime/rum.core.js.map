{"version":3,"sources":["rum/core.cljs"],"mappings":"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","names":["rum.core/state","comp","goog.object/get","rum.core/extend!","obj","props","seq__43234","cljs.core/seq","chunk__43236","count__43237","i__43238","vec__43250","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__43253","cljs.core/first","cljs.core/next","k","v","goog.object/set","cljs.core/name","cljs.core/clj->js","rum.core/build-class","render","mixins","display-name","init","rum.util/collect","will-mount","rum.util/collect*","wrap-render","wrapped-render","p1__43257#","p2__43256#","cljs.core.reduce","did-mount","did-remount","should-update","will-update","did-update","did-catch","will-unmount","child-context","class-props","cljs.core/merge","static-props","ctor","this","cljs.core.assoc","rum.util.call_all","cljs.core/volatile!","js/React.Component","_","goog/inherits","prototype","cljs.core/empty?","cljs.core/-vreset!","cljs.core/-deref","rum.util/call-all","next-props","cljs.core/deref","old-state","state","cljs.core.merge","next-state","p1__43261#","p2__43260#","new-state","or__4126__auto__","p1__43262#","cljs.core/some","vec__43286","dom","G__43289","cljs.core/vreset!","error","info","cljs.core.transduce","p1__43265#","cljs.core.map","rum.core/build-ctor","class","key-fn","args","cljs.core.apply","js/React.createElement","cljs.core/with-meta","rum.core/build-defc","render-body","rum.core/build-defcs","rum.core/build-defcc","rum.core/schedule","p1__43298#","js/window","js/window.requestAnimationFrame","js/window.webkitRequestAnimationFrame","js/window.mozRequestAnimationFrame","js/window.msRequestAnimationFrame","js/setTimeout","rum.core/batch","js/ReactNative","js/ReactNative.unstable_batchedUpdates","js/ReactDOM","js/ReactDOM.unstable_batchedUpdates","f","a","rum.core/empty-queue","rum.core/render-queue","rum.core/render-all","queue","seq__43301","chunk__43303","count__43304","i__43305","cljs.core/not","rum.core/render","rum.core/request-render","component","cljs.core.conj","rum.core/mount","element","node","js/ReactDOM.render","rum.core/unmount","js/ReactDOM.unmountComponentAtNode","rum.core/hydrate","js/ReactDOM.hydrate","rum.core/portal","js/ReactDOM.createPortal","rum.core/with-key","key","js/React.cloneElement","rum.core/with-ref","ref","rum.core/dom-node","js/ReactDOM.findDOMNode","rum.core/ref","rum.core/ref-node","rum.core/static","cljs.core.not_EQ_","var_args","G__43308","rum.core/local","js/Error","initial","rum.core.local","local-state","cljs.core.atom","cljs.core/add-watch","rum.core/reactive","cljs.core/random-uuid","render-fn","*reactions*-orig-val__43309","*reactions*-temp-val__43310","rum.core/*reactions*","vec__43311","old-reactions","new-reactions","seq__43314","chunk__43315","count__43316","i__43317","cljs.core/contains?","cljs.core/remove-watch","seq__43318","chunk__43319","count__43320","i__43321","seq__43323","chunk__43324","count__43325","i__43326","cljs.core.dissoc","rum.core/react","rum.core/derived-atom","rum.derived-atom/derived-atom","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rum.core/cursor-in","p__43336","map__43337","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","seq43332","G__43333","G__43334","self__4723__auto__","path","options","rum.cursor/Cursor","cljs.core.into","rum.core/cursor","seq43339","G__43340","G__43341"],"sourcesContent":["(ns rum.core\n  (:refer-clojure :exclude [ref])\n  (:require-macros rum.core)\n  (:require\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.object :as gobj]\n    [sablono.core]\n    [rum.cursor :as cursor]\n    [rum.util :as util :refer [collect collect* call-all]]\n    [rum.derived-atom :as derived-atom]))\n\n\n(defn state\n  \"Given React component, returns Rum state associated with it.\"\n  [comp]\n  (gobj/get (.-state comp) \":rum/state\"))\n\n\n(defn- extend! [obj props]\n  (doseq [[k v] props\n          :when (some? v)]\n    (gobj/set obj (name k) (clj->js v))))\n\n\n(defn- build-class [render mixins display-name]\n  (let [init           (collect   :init mixins)             ;; state props -> state\n        will-mount     (collect* [:will-mount               ;; state -> state\n                                  :before-render] mixins)   ;; state -> state\n        render         render                               ;; state -> [dom state]\n        wrap-render    (collect   :wrap-render mixins)      ;; render-fn -> render-fn\n        wrapped-render (reduce #(%2 %1) render wrap-render)\n        did-mount      (collect* [:did-mount                ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-remount    (collect   :did-remount mixins)      ;; old-state state -> state\n        should-update  (collect   :should-update mixins)    ;; old-state state -> boolean\n        will-update    (collect* [:will-update              ;; state -> state\n                                  :before-render] mixins)   ;; state -> state\n        did-update     (collect* [:did-update               ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-catch      (collect   :did-catch mixins)        ;; state error info -> state\n        will-unmount   (collect   :will-unmount mixins)     ;; state -> state\n        child-context  (collect   :child-context mixins)    ;; state -> child-context\n        class-props    (reduce merge (collect :class-properties mixins))  ;; custom prototype properties and methods\n        static-props   (reduce merge (collect :static-properties mixins)) ;; custom static properties and methods\n\n        ctor           (fn [props]\n                         (this-as this\n                           (gobj/set this \"state\"\n                             #js {\":rum/state\"\n                                  (-> (gobj/get props \":rum/initial-state\")\n                                      (assoc :rum/react-component this)\n                                      (call-all init props)\n                                      volatile!)})\n                           (.call js/React.Component this props)))\n        _              (goog/inherits ctor js/React.Component)\n        prototype      (gobj/get ctor \"prototype\")]\n\n    (when-not (empty? will-mount)\n      (gobj/set prototype \"componentWillMount\"\n        (fn []\n          (this-as this\n            (vswap! (state this) call-all will-mount)))))\n\n    (when-not (empty? did-mount)\n      (gobj/set prototype \"componentDidMount\"\n        (fn []\n          (this-as this\n            (vswap! (state this) call-all did-mount)))))\n\n    (gobj/set prototype \"componentWillReceiveProps\"\n      (fn [next-props]\n        (this-as this\n          (let [old-state  @(state this)\n                state      (merge old-state\n                                  (gobj/get next-props \":rum/initial-state\"))\n                next-state (reduce #(%2 old-state %1) state did-remount)]\n            ;; allocate new volatile so that we can access both old and new states in shouldComponentUpdate\n            (.setState this #js {\":rum/state\" (volatile! next-state)})))))\n\n    (when-not (empty? should-update)\n      (gobj/set prototype \"shouldComponentUpdate\"\n        (fn [next-props next-state]\n            (this-as this\n              (let [old-state @(state this)\n                    new-state @(gobj/get next-state \":rum/state\")]\n                (or (some #(% old-state new-state) should-update) false))))))\n    \n    (when-not (empty? will-update)\n      (gobj/set prototype \"componentWillUpdate\"\n        (fn [_ next-state]\n          (this-as this\n            (let [new-state (gobj/get next-state \":rum/state\")]\n              (vswap! new-state call-all will-update))))))\n    \n    (gobj/set prototype \"render\"\n      (fn []\n        (this-as this\n          (let [state (state this)\n                [dom next-state] (wrapped-render @state)]\n            (vreset! state next-state)\n            dom))))\n\n    (when-not (empty? did-update)\n      (gobj/set prototype \"componentDidUpdate\"\n        (fn [_ _]\n          (this-as this\n            (vswap! (state this) call-all did-update)))))\n\n    (when-not (empty? did-catch)\n      (gobj/set prototype \"componentDidCatch\"\n        (fn [error info]\n          (this-as this\n            (vswap! (state this) call-all did-catch error {:rum/component-stack (gobj/get info \"componentStack\")})\n            (.forceUpdate this)))))\n\n    (gobj/set prototype \"componentWillUnmount\"\n      (fn []\n        (this-as this\n          (when-not (empty? will-unmount)\n            (vswap! (state this) call-all will-unmount))\n          (gobj/set this \":rum/unmounted?\" true))))\n\n    (when-not (empty? child-context)\n      (gobj/set prototype \"getChildContext\"\n        (fn []\n          (this-as this\n            (let [state @(state this)]\n              (clj->js (transduce (map #(% state)) merge {} child-context)))))))\n    \n    (extend! prototype class-props)\n    (gobj/set ctor \"displayName\" display-name)\n    (extend! ctor static-props)\n    ctor))\n\n\n(defn- build-ctor [render mixins display-name]\n  (let [class  (build-class render mixins display-name)\n        key-fn (first (collect :key-fn mixins))\n        ctor   (if (some? key-fn)\n                 (fn [& args]\n                   (let [props #js { \":rum/initial-state\" { :rum/args args }\n                                     \"key\" (apply key-fn args) }]\n                     (js/React.createElement class props)))\n                 (fn [& args]\n                   (let [props #js { \":rum/initial-state\" { :rum/args args }}] \n                     (js/React.createElement class props))))]\n    (with-meta ctor { :rum/class class })))\n\n\n(defn ^:no-doc build-defc [render-body mixins display-name]\n  (if (empty? mixins)\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum/args\")))\n          _     (aset class \"displayName\" display-name)\n          ctor  (fn [& args]\n                  (js/React.createElement class #js { \":rum/args\" args }))]\n      (with-meta ctor { :rum/class class }))\n    (let [render (fn [state] [(apply render-body (:rum/args state)) state])]\n      (build-ctor render mixins display-name))))\n\n\n(defn ^:no-doc build-defcs [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body state (:rum/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n\n(defn ^:no-doc build-defcc [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body (:rum/react-component state) (:rum/args state)) state])] \n    (build-ctor render mixins display-name)))\n\n\n;; render queue\n\n(def ^:private schedule\n  (or (and (exists? js/window)\n           (or js/window.requestAnimationFrame\n               js/window.webkitRequestAnimationFrame\n               js/window.mozRequestAnimationFrame\n               js/window.msRequestAnimationFrame))\n    #(js/setTimeout % 16)))\n\n\n(def ^:private batch\n  (or (when (exists? js/ReactNative) js/ReactNative.unstable_batchedUpdates)\n      (when (exists? js/ReactDOM) js/ReactDOM.unstable_batchedUpdates)\n      (fn [f a] (f a))))\n\n\n(def ^:private empty-queue [])\n(def ^:private render-queue (volatile! empty-queue))\n\n\n(defn- render-all [queue]\n  (doseq [comp queue\n          :when (not (gobj/get comp \":rum/unmounted?\"))]\n    (.forceUpdate comp)))\n\n\n(defn- render []\n  (let [queue @render-queue]\n    (vreset! render-queue empty-queue)\n    (batch render-all queue)))\n\n\n(defn request-render\n  \"Schedules react component to be rendered on next animation frame.\"\n  [component]\n  (when (empty? @render-queue)\n    (schedule render))\n  (vswap! render-queue conj component))\n\n\n(defn mount\n  \"Add element to the DOM tree. Idempotent. Subsequent mounts will just update element.\"\n  [element node]\n  (js/ReactDOM.render element node)\n  nil)\n\n\n(defn unmount\n  \"Removes component from the DOM tree.\"\n  [node]\n  (js/ReactDOM.unmountComponentAtNode node))\n\n\n(defn hydrate\n  \"Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]].\"\n  [element node]\n  (js/ReactDOM.hydrate element node))\n\n\n(defn portal\n  \"Render `element` in a DOM `node` that is ouside of current DOM hierarchy.\"\n  [element node]\n  (js/ReactDOM.createPortal element node))\n\n\n;; initialization\n\n(defn with-key\n  \"Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element key]\n  (js/React.cloneElement element #js { \"key\" key } nil))\n\n\n(defn with-ref\n  \"Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element ref]\n  (js/React.cloneElement element #js { \"ref\" ref } nil))\n\n\n(defn dom-node\n  \"Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can\u2019t be called during render.\"\n  [state]\n  (js/ReactDOM.findDOMNode (:rum/react-component state)))\n\n\n(defn ref\n  \"Given state and ref handle, returns React component.\"\n  [state key]\n  (-> state :rum/react-component (aget \"refs\") (aget (name key))))\n\n\n(defn ref-node\n  \"Given state and ref handle, returns DOM node associated with ref.\"\n  [state key]\n  (js/ReactDOM.findDOMNode (ref state (name key))))\n\n\n;; static mixin\n\n(def static\n  \"Mixin. Will avoid re-render if none of component\u2019s arguments have changed. Does equality check (`=`) on all arguments.\n  \n   ```\n   (rum/defc label < rum/static\n     [text]\n     [:div text])\n     \n   (rum/mount (label \\\"abc\\\") js/document.body)\n\n   ;; def != abc, will re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n\n   ;; def == def, won\u2019t re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n   ```\"\n  { :should-update\n    (fn [old-state new-state]\n      (not= (:rum/args old-state) (:rum/args new-state))) })\n\n\n;; local mixin\n\n(defn local\n  \"Mixin constructor. Adds an atom to component\u2019s state that can be used to keep stuff during component\u2019s lifecycle. Component will be re-rendered if atom\u2019s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \\\"Click count: \\\"))\n   ```\"\n  ([initial] (local initial :rum/local))\n  ([initial key]\n    { :will-mount\n      (fn [state]\n        (let [local-state (atom initial)\n              component   (:rum/react-component state)]\n          (add-watch local-state key\n            (fn [_ _ _ _]\n              (request-render component)))\n          (assoc state key local-state))) }))\n\n\n;; reactive mixin\n\n(def ^:private ^:dynamic *reactions*)\n\n\n(def reactive\n  \"Mixin. Works in conjunction with [[react]].\n  \n   ```\n   (rum/defc comp < rum/reactive\n     [*counter]\n     [:div (rum/react counter)])\n\n   (def *counter (atom 0))\n   (rum/mount (comp *counter) js/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```\"\n  { :init\n    (fn [state props]\n      (assoc state :rum.reactive/key (random-uuid)))\n    :wrap-render\n    (fn [render-fn]\n      (fn [state]\n        (binding [*reactions* (volatile! #{})]\n          (let [comp             (:rum/react-component state)\n                old-reactions    (:rum.reactive/refs state #{})\n                [dom next-state] (render-fn state)\n                new-reactions    @*reactions*\n                key              (:rum.reactive/key state)]\n            (doseq [ref old-reactions]\n              (when-not (contains? new-reactions ref)\n                (remove-watch ref key)))\n            (doseq [ref new-reactions]\n              (when-not (contains? old-reactions ref)\n                (add-watch ref key\n                  (fn [_ _ _ _]\n                    (request-render comp)))))\n            [dom (assoc next-state :rum.reactive/refs new-reactions)]))))\n    :will-unmount\n    (fn [state]\n      (let [key (:rum.reactive/key state)]\n        (doseq [ref (:rum.reactive/refs state)]\n          (remove-watch ref key)))\n      (dissoc state :rum.reactive/refs :rum.reactive/key)) })\n\n\n(defn react\n  \"Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom.\"\n  [ref]\n  (assert *reactions* \"rum.core/react is only supported in conjunction with rum.core/reactive\")\n  (vswap! *reactions* conj ref)\n  @ref)\n\n\n;; derived-atom\n\n(def ^{:style/indent 2\n       :arglists '([refs key f] [refs key f opts])\n       :doc \"Use this to create \u201cchains\u201d and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N \u201csource\u201d refs.\n             - Set up a watch on each of them.\n             - Create \u201csink\u201d atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \\\":\\\" b))))\n             \n             (type *x) ;; => clojure.lang.Atom\n             (deref *x) ;; => \\\"0:1\\\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \\\"1:1\\\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \\\"1:7\\\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won\u2019t be called. Set to `false` if checking for equality can be expensive.\"}\n  derived-atom derived-atom/derived-atom)\n\n\n;; cursors\n\n(defn cursor-in\n  \"Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \\\"Ivan\\\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \\\"Ivan\\\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \\\"Ivan\\\" { :age 31 }}}\n   \n   (swap! db update-in [:users \\\"Ivan\\\" :age] inc)\n   ;; => { :users { \\\"Ivan\\\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`\"\n  [ref path & {:as options}]\n  (if (instance? cursor/Cursor ref)\n    (cursor/Cursor. (.-ref ref) (into (.-path ref) path) (:meta options))\n    (cursor/Cursor. ref path (:meta options))))\n\n\n(defn cursor\n  \"Same as [[cursor-in]] but accepts single key instead of path vector.\"\n  [ref key & options]\n  (apply cursor-in ref [key] options))\n"]}