{"version":3,"sources":["oops/helpers.cljs"],"mappings":";AAKA,mCAAA,nCAAMA,8EAAeC;AAArB,AACE,QAAY,AAAa,AAAeA,4BAAIA;;AAE9C,+BAAA,/BAAMC,sEAAiBD;AAAvB,AACE,UAAA,FAAgBA;;AAOlB,gCAAA,hCAAME,wEAAYC;AAAlB,AACE,IAAAC,oBAAK,AAACC,cAAcF;AAApB,AAAA,oBAAAC;AAAA,IAAAA,wBACK,GAAK,AAACL,iCAAcI;AADzB,AAAA,GAAAC;AAEK,UAAA,FAAgBD;;AAFrBC;;;AAAAA;;;AAIF,oCAAA,pCAAME,gFAAgBC;AAAtB,AACE,IAAAH,oBAAK,AAACC,cAAcE;AAApB,AAAA,oBAAAH;AACK,OAACF,8BAAW,AAACD,6BAAgBM;;AADlCH;;;AAGF,+BAAA,/BAAMI,sEAAiBC;AAAvB,AACE,GAAI,AAACC,uBAAOD;AACVA;;AACA,IAAME,MAAI;AAAV,AACE,IAAOC,QAAM,AAACC,cAAIJ;;AAAlB,AACE,GAAI,GAAA,UAAA,TAAOG;AACT,IAAME,OAAK,AAACC,iBAAOH;AAAnB,AACE,AAAOD,SAAIG;;AACX,eAAO,AAACE,eAAKJ;;;;AACfD;;;;;;AAEV,+BAAA,/BAAMM,sEAAiBC,MAAMC,IAAIC;AAAjC,AACE;AACA;AACA,CAAM,AAAWF,gBAAOC;;AACxB,IAAAE,SAAUH;AAAV,AAAA,AAAA,CAAA,AAAAG,qCAAAC;;AAAA,CAAA,AAAAD,uDAEE,WAAaE,KAAKC,OAAOC;AAAzB,AAAA,eAAA,XAAaF;AAAb,AACE,AAACG,iBAAOF,OAAOL;;AACf,GAAM,GAAA,SAAA,RAAOC;AAAb,AACE,wBAAA,xBAACM,iBAAOF;;AACR,OAACG,oBAAUP,KAAKI,OAAOC;;AAFzB;;;;AAJJJ;;AAQF,uCAAA,vCAAMO,sFAAyBC,IAAIC;AAAnC,AACE,IAAO9B,IAAE6B;;AAAT,AACE,GAAM,GAAA,MAAA,LAAO7B;AAAb,AACE,IAAA+B,qBAAqB,AAA2BE,gCAAUjC,EAAE8B;AAA5D,AAAA,GAAA,CAAAC,sBAAA;AAEE,eAAO,AAAiBE,sBAAUjC;;;;AAFpC,iBAAA+B,bAAUC;AAAV,AACEA;;;AAFJ;;;;;AAKJ,sDAAA,tDAAME,oHAAwCC;AAA9C,AAWE,oBAAI,mCAAA,nCAAiBA;AACnB,GAAI,AAAQ,AAAYA;AAAxB;;AAAA;;;AAEA,GAAI,4BAAA,3BAAM,AAAOA;AAAjB;;AAAA;;;;AAGJ,uCAAA,vCAAMC,sFAAmBP;AAAzB,AACE,OAAWI,gBAAUJ;;AAEvB,uCAAA,vCAAMQ,sFAAmBR;AAAzB,AACE,OAAWI,gBAAUJ;;AAEvB,kDAAA,lDAAMS,4GAAoCC,YAAMC;AAAhD,AACE,IAAAC,mBAAI,+BAAA,bAAMF,aACJ,iBAAAG,qBAAqB,aAAA,ZAA6BE;AAAlD,AAAA,GAAA,CAAAF,sBAAA;AAAA;;AAAA,mBAAAA,fAAYC;AAAZ,AACE,IAAAD,yBAAoB,cAAA,bAA6BC;AAAjD,AAAA,GAAA,CAAAD,0BAAA;AAAA;;AAAA,cAAAA,VAAYG;AAAZ,AACE,IAAAH,yBAAqB,SAAA,RAA6BG;AAAlD,AAAA,GAAA,CAAAH,0BAAA;AAAA;;AAAA,eAAAA,XAAYI;AAAZ,AACE,GAAM,AAACC,oBAAcD;AAArB,AACE,6FAAA,qCAAA,1HAACA,yCAAAA,yDAAAA,lBAASN,qCAAAA;;AADZ;;;;;KAJR;AAAJ,AAAA,oBAAAC;AAAAA;;AAMID","names":["oops.helpers/is-prototype?","o","oops.helpers/get-constructor","oops.helpers/cljs-type?","f","and__4210__auto__","goog/isObject","oops.helpers/cljs-instance?","value","oops.helpers/to-native-array","coll","cljs.core/array?","arr","items","cljs.core/seq","item","cljs.core/-first","cljs.core/next","oops.helpers/repurpose-error","error","msg","info","x47604","cljs.core/PROTOCOL_SENTINEL","_obj","writer","opts","cljs.core/-write","cljs.core/pr-writer","oops.helpers/get-property-descriptor","obj","property","temp__5755__auto__","descriptor","js/Object","oops.helpers/determine-property-non-writable-reason","property-descriptor","oops.helpers/is-object-sealed?","oops.helpers/is-object-frozen?","oops.helpers/wrap-data-in-enveloper-if-possible","wrap?","data","or__4212__auto__","temp__5757__auto__","devtools","goog/global","toolbox","envelope","cljs.core/fn?"],"sourcesContent":["(ns oops.helpers\n  \"Various helpers to be available to our code at runtime.\"\n  (:require-macros [oops.helpers :refer [unchecked-aget]]\n                   [oops.debug :refer [debug-assert]]))\n\n(defn is-prototype? [o]\n  (identical? (.-prototype (.-constructor o)) o))\n\n(defn get-constructor [o]\n  (unchecked-aget o \"constructor\"))\n\n; IRC #clojurescript @ freenode.net on 2015-01-27:\n; [13:40:09] darwin_: Hi, what is the best way to test if I'm handled ClojureScript data value or plain javascript object?\n; [14:04:34] dnolen: there is a very low level thing you can check\n; [14:04:36] dnolen: https://github.com/clojure/clojurescript/blob/c2550c4fdc94178a7957497e2bfde54e5600c457/src/clj/cljs/core.clj#L901\n; [14:05:00] dnolen: this property is unlikely to change - still it's probably not something anything anyone should use w/o a really good reason\n(defn cljs-type? [f]\n  (and (goog/isObject f)                                                                                                      ; see http://stackoverflow.com/a/22482737/84283\n       (not (is-prototype? f))\n       (unchecked-aget f \"cljs$lang$type\")))\n\n(defn cljs-instance? [value]\n  (and (goog/isObject value)                                                                                                  ; see http://stackoverflow.com/a/22482737/84283\n       (cljs-type? (get-constructor value))))\n\n(defn to-native-array [coll]\n  (if (array? coll)\n    coll\n    (let [arr (array)]\n      (loop [items (seq coll)]                                                                                                ; note: items is either a seq or nil\n        (if (some? items)\n          (let [item (-first items)]\n            (.push arr item)\n            (recur (next items)))\n          arr)))))\n\n(defn repurpose-error [error msg info]\n  (debug-assert (instance? js/Error error))\n  (debug-assert (string? msg))\n  (set! (.-message error) msg)\n  (specify! error\n    IPrintWithWriter                                                                                                          ; nice to have for cljs-devtools and debug printing\n    (-pr-writer [_obj writer opts]\n      (-write writer msg)\n      (when (some? info)\n        (-write writer \" \")\n        (pr-writer info writer opts)))))\n\n(defn get-property-descriptor [obj property]\n  (loop [o obj]\n    (when (some? o)\n      (if-some [descriptor (.getOwnPropertyDescriptor js/Object o property)]\n        descriptor\n        (recur (.getPrototypeOf js/Object o))))))\n\n(defn determine-property-non-writable-reason [property-descriptor]\n  ; this gets a bit more tricky...\n  ;\n  ; there are two kinds of property descriptors\n  ; 1) data property descriptors\n  ; 2) accessor property descriptors\n  ; only data descriptors have writable flag present\n  ; see https://abdulapopoola.com/2016/11/21/deep-dive-into-javascript-property-descriptors\n  ;\n  ; we first check for \"writable\" property presence and test it only if it exists\n  ; otherwise we assume accessor property is writable if it has some setter method\n  (if (.hasOwnProperty property-descriptor \"writable\")\n    (if (false? (.-writable property-descriptor))\n      \"data property descriptor has writable=false\")\n    (if (nil? (.-set property-descriptor))\n      \"accessor property descriptor has neither writable flag nor a setter function\")))\n\n(defn is-object-sealed? [obj]\n  (.isSealed js/Object obj))\n\n(defn is-object-frozen? [obj]\n  (.isFrozen js/Object obj))\n\n(defn wrap-data-in-enveloper-if-possible [wrap? data]\n  (or (when wrap?\n        (when-some [devtools (oops.helpers/unchecked-aget goog/global \"devtools\")]\n          (when-some [toolbox (oops.helpers/unchecked-aget devtools \"toolbox\")]\n            (when-some [envelope (oops.helpers/unchecked-aget toolbox \"envelope\")]\n              (when (cljs.core/fn? envelope)\n                (envelope data \"details\"))))))\n      data))\n"]}