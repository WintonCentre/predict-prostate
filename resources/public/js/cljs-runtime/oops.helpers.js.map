{"version":3,"sources":["oops/helpers.cljs"],"mappings":";AAKA,AAAA,AAAMA,AAAeC;AAArB,AACE,AAAY,AAAa,AAAeA,AAAIA;;AAE9C,AAAA,AAAMC,AAAiBD;AAAvB,AACE,AAAA,AAAgBA;;AAOlB,AAAA,AAAME,AAAYC;AAAlB,AACE,AAAAC,AAAK,AAACC,AAAcF;AAApB,AAAA,AAAAC;AAAA,AACK,AAAK,AAACL,AAAcI;AACpB,AAAA,AAAgBA;;AAFrB;;;AAAAC;;;AAIF,AAAA,AAAME,AAAgBC;AAAtB,AACE,AAAAH,AAAK,AAACC,AAAcE;AAApB,AAAA,AAAAH;AACK,AAACF,AAAW,AAACD,AAAgBM;;AADlCH;;;AAGF,AAAA,AAAMI,AAAiBC;AAAvB,AACE,AAAI,AAACC,AAAOD;AACVA;;AACA,AAAME,AAAI;AAAV,AACE,AAAOC,AAAM,AAACC,AAAIJ;;AAAlB,AACE,AAAI,AAAA,AAAA,AAAOG;AACT,AAAME,AAAK,AAACC,AAAOH;AAAnB,AACE,AAAOD,AAAIG;;AACX,AAAO,AAACE,AAAKJ;;;;AACfD;;;;;;AAEV,AAAA,AAAMM,AAAiBC,AAAMC,AAAIC;AAAjC,AACE;AACA;AACA,AAAM,AAAWF,AAAOC;;AACxB,AAAAE,AAAUH;AAAV,AAAA,AAAA,AAAA,AAAAG,AAAAC;;AAAA,AAAA,AAAAD,AAEE,AAAaE,AAAKC,AAAOC;AAAzB,AAAA,AAAA,AAAaF;AAAb,AACE,AAACG,AAAOF,AAAOL;;AACf,AAAM,AAAA,AAAA,AAAOC;AAAb,AACE,AAAA,AAACM,AAAOF;;AACR,AAACG,AAAUP,AAAKI,AAAOC;;AAFzB;;;;AAJJJ;;AAQF,AAAA,AAAMO,AAAyBC,AAAIC;AAAnC,AACE,AAAO9B,AAAE6B;;AAAT,AACE,AAAM,AAAA,AAAA,AAAO7B;AAAb,AACE,AAAA+B,AAAqB,AAA2BE,AAAUjC,AAAE8B;AAA5D,AAAA,AAAA,AAAAC,AAAA;AAEE,AAAO,AAAiBE,AAAUjC;;;;AAFpC,AAAA+B,AAAUC;AAAV,AACEA;;;AAFJ;;;;;AAKJ,AAAA,AAAME,AAAwCC;AAA9C,AAWE,AAAI,AAAA,AAAiBA;AACnB,AAAI,AAAQ,AAAYA;AAAxB;;AAAA;;;AAEA,AAAI,AAAA,AAAM,AAAOA;AAAjB;;AAAA;;;;AAGJ,AAAA,AAAMC,AAAmBP;AAAzB,AACE,AAAWI,AAAUJ;;AAEvB,AAAA,AAAMQ,AAAmBR;AAAzB,AACE,AAAWI,AAAUJ;;AAEvB,AAAA,AAAMS,AAAoCC,AAAMC;AAAhD,AACE,AAAAC,AAAI,AAAA,AAAMF,AACJ,AAAAG,AAAqB,AAAA,AAA6BE;AAAlD,AAAA,AAAA,AAAAF,AAAA;AAAA;;AAAA,AAAAA,AAAYC;AAAZ,AACE,AAAAD,AAAoB,AAAA,AAA6BC;AAAjD,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAYG;AAAZ,AACE,AAAAH,AAAqB,AAAA,AAA6BG;AAAlD,AAAA,AAAA,AAAAH,AAAA;AAAA;;AAAA,AAAAA,AAAYI;AAAZ,AACE,AAAM,AAACC,AAAcD;AAArB,AACE,AAAA,AAAA,AAACA,AAAAA,AAAAA,AAASN,AAAAA;;AADZ;;;;;AAJR;AAAJ,AAAA,AAAAC;AAAAA;;AAMID","names":["oops.helpers/is-prototype?","o","oops.helpers/get-constructor","oops.helpers/cljs-type?","f","and__4115__auto__","goog/isObject","oops.helpers/cljs-instance?","value","oops.helpers/to-native-array","coll","cljs.core/array?","arr","items","cljs.core/seq","item","cljs.core/-first","cljs.core/next","oops.helpers/repurpose-error","error","msg","info","x44410","cljs.core/PROTOCOL_SENTINEL","_obj","writer","opts","cljs.core/-write","cljs.core/pr-writer","oops.helpers/get-property-descriptor","obj","property","temp__5737__auto__","descriptor","js/Object","oops.helpers/determine-property-non-writable-reason","property-descriptor","oops.helpers/is-object-sealed?","oops.helpers/is-object-frozen?","oops.helpers/wrap-data-in-enveloper-if-possible","wrap?","data","or__4126__auto__","temp__5739__auto__","devtools","goog/global","toolbox","envelope","cljs.core/fn?"],"sourcesContent":["(ns oops.helpers\n  \"Various helpers to be available to our code at runtime.\"\n  (:require-macros [oops.helpers :refer [unchecked-aget]]\n                   [oops.debug :refer [debug-assert]]))\n\n(defn is-prototype? [o]\n  (identical? (.-prototype (.-constructor o)) o))\n\n(defn get-constructor [o]\n  (unchecked-aget o \"constructor\"))\n\n; IRC #clojurescript @ freenode.net on 2015-01-27:\n; [13:40:09] darwin_: Hi, what is the best way to test if I'm handled ClojureScript data value or plain javascript object?\n; [14:04:34] dnolen: there is a very low level thing you can check\n; [14:04:36] dnolen: https://github.com/clojure/clojurescript/blob/c2550c4fdc94178a7957497e2bfde54e5600c457/src/clj/cljs/core.clj#L901\n; [14:05:00] dnolen: this property is unlikely to change - still it's probably not something anything anyone should use w/o a really good reason\n(defn cljs-type? [f]\n  (and (goog/isObject f)                                                                                                      ; see http://stackoverflow.com/a/22482737/84283\n       (not (is-prototype? f))\n       (unchecked-aget f \"cljs$lang$type\")))\n\n(defn cljs-instance? [value]\n  (and (goog/isObject value)                                                                                                  ; see http://stackoverflow.com/a/22482737/84283\n       (cljs-type? (get-constructor value))))\n\n(defn to-native-array [coll]\n  (if (array? coll)\n    coll\n    (let [arr (array)]\n      (loop [items (seq coll)]                                                                                                ; note: items is either a seq or nil\n        (if (some? items)\n          (let [item (-first items)]\n            (.push arr item)\n            (recur (next items)))\n          arr)))))\n\n(defn repurpose-error [error msg info]\n  (debug-assert (instance? js/Error error))\n  (debug-assert (string? msg))\n  (set! (.-message error) msg)\n  (specify! error\n    IPrintWithWriter                                                                                                          ; nice to have for cljs-devtools and debug printing\n    (-pr-writer [_obj writer opts]\n      (-write writer msg)\n      (when (some? info)\n        (-write writer \" \")\n        (pr-writer info writer opts)))))\n\n(defn get-property-descriptor [obj property]\n  (loop [o obj]\n    (when (some? o)\n      (if-some [descriptor (.getOwnPropertyDescriptor js/Object o property)]\n        descriptor\n        (recur (.getPrototypeOf js/Object o))))))\n\n(defn determine-property-non-writable-reason [property-descriptor]\n  ; this gets a bit more tricky...\n  ;\n  ; there are two kinds of property descriptors\n  ; 1) data property descriptors\n  ; 2) accessor property descriptors\n  ; only data descriptors have writable flag present\n  ; see https://abdulapopoola.com/2016/11/21/deep-dive-into-javascript-property-descriptors\n  ;\n  ; we first check for \"writable\" property presence and test it only if it exists\n  ; otherwise we assume accessor property is writable if it has some setter method\n  (if (.hasOwnProperty property-descriptor \"writable\")\n    (if (false? (.-writable property-descriptor))\n      \"data property descriptor has writable=false\")\n    (if (nil? (.-set property-descriptor))\n      \"accessor property descriptor has neither writable flag nor a setter function\")))\n\n(defn is-object-sealed? [obj]\n  (.isSealed js/Object obj))\n\n(defn is-object-frozen? [obj]\n  (.isFrozen js/Object obj))\n\n(defn wrap-data-in-enveloper-if-possible [wrap? data]\n  (or (when wrap?\n        (when-some [devtools (oops.helpers/unchecked-aget goog/global \"devtools\")]\n          (when-some [toolbox (oops.helpers/unchecked-aget devtools \"toolbox\")]\n            (when-some [envelope (oops.helpers/unchecked-aget toolbox \"envelope\")]\n              (when (cljs.core/fn? envelope)\n                (envelope data \"details\"))))))\n      data))\n"]}