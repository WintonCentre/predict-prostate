{"version":3,"sources":["oops/schema.cljs"],"mappings":"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","names":["oops.schema/escaped-dot-marker","oops.schema/re-all-escaped-dots","js/RegExp","oops.schema/re-all-escaped-dot-markers","oops.schema/unescape-modifiers","s","oops.schema/parse-selector-element!","element-str","arr","cljs.core/empty?","G__36435","cljs.core/first","oops.schema/unescape-dots","oops.schema/parse-selector-string!","selector-str","elements-arr","items","cljs.core/seq","cljs.core/next","oops.schema/coerce-key-dynamically!","key","cljs.core/name","oops.schema/collect-coerced-keys-into-array!","coll","item","cljs.core/-first","cljs.core/sequential?","oops.schema/standalone-modifier?","i","cljs.core._EQ_","oops.schema/merge-standalone-modifier!","oops.schema/merge-standalone-modifiers!","len","finger","oops.schema/prepare-path!","selector","oops.schema/prepare-simple-path!","oops.schema/has-invalid-path-access-mode?","path","is-valid?","G__36442","oops.schema/check-dynamic-path!","op","G__36445","js/Error","p1__36443#","cljs.core.not_EQ_","p1__36444#"],"sourcesContent":["(ns oops.schema\n  \"The code for runtime conversion of selectors to paths. Note: we prefer hand-written loops for performance reasons.\"\n  (:require-macros [oops.schema]\n                   [oops.helpers :refer [unchecked-aget]]\n                   [oops.debug :refer [debug-assert]]\n                   [oops.constants :refer [get-dot-access get-soft-access get-punch-access gen-op-get gen-op-set]]))\n\n; implementation here should mimic static versions in schema.clj\n; for performance reasons we don't reuse the same code on cljs side\n\n; --- path utils ------------------------------------------------------------------------------------------------------------\n\n(def escaped-dot-marker \"####ESCAPED-DOT####\")\n(def re-all-escaped-dots (js/RegExp. \"\\\\\\\\\\\\.\" \"g\"))\n(def re-all-escaped-dot-markers (js/RegExp. \"####ESCAPED-DOT####\" \"g\"))\n\n(defn unescape-modifiers [s]\n  (.replace s #\"^\\\\([?!])\" \"$1\"))\n\n(defn parse-selector-element! [element-str arr]\n  (when-not (empty? element-str)\n    (case (first element-str)\n      \"?\" (do\n            (.push arr (get-soft-access))\n            (.push arr (.substring element-str 1)))\n      \"!\" (do\n            (.push arr (get-punch-access))\n            (.push arr (.substring element-str 1)))\n      (do\n        (.push arr (get-dot-access))\n        (.push arr (unescape-modifiers element-str))))))\n\n(defn unescape-dots [s]\n  (.replace s re-all-escaped-dot-markers \".\"))\n\n(defn parse-selector-string! [selector-str arr]\n  (let [elements-arr (.split (.replace selector-str re-all-escaped-dots escaped-dot-marker) \".\")]\n    (loop [items (seq elements-arr)]\n      (when items\n        (parse-selector-element! (unescape-dots (first items)) arr)\n        (recur (next items))))))\n\n(defn coerce-key-dynamically! [key arr]\n  (let [selector-str (name key)]\n    (parse-selector-string! selector-str arr)))\n\n(defn collect-coerced-keys-into-array! [coll arr]\n  (loop [items (seq coll)]                                                                                                    ; note: items is either a seq or nil\n    (when (some? items)\n      (let [item (-first items)]\n        (if (sequential? item)\n          (collect-coerced-keys-into-array! item arr)\n          (coerce-key-dynamically! item arr))\n        (recur (next items))))))\n\n(defn standalone-modifier? [arr i]\n  (and (pos? (unchecked-aget arr i))\n       (= \"\" (unchecked-aget arr (inc i)))))\n\n(defn merge-standalone-modifier! [arr i]\n  (aset arr (+ i 2) (unchecked-aget arr i))                                                                                   ; transfer modifier\n  (.splice arr i 2))                                                                                                          ; remove standalone item\n\n(defn merge-standalone-modifiers! [arr]\n  (let [len (alength arr)]\n    (loop [i (- len 2)]                                                                                                       ; -2 because it makes no sense to potentially merge last item\n      (let [finger (- i 2)]\n        (if (neg? finger)\n          arr\n          (do\n            (when (standalone-modifier? arr finger)\n              (merge-standalone-modifier! arr finger))\n            (recur finger)))))))\n\n(defn prepare-path! [selector arr]\n  (collect-coerced-keys-into-array! selector arr)\n  (merge-standalone-modifiers! arr))\n\n(defn prepare-simple-path! [key arr]\n  (coerce-key-dynamically! key arr))\n\n(defn has-invalid-path-access-mode? [path is-valid?]\n  (loop [items (seq path)]\n    (when items\n      (if (is-valid? (first items))\n        (recur (next (next items)))\n        true))))\n\n; we should mimic check-static-path! here\n(defn check-dynamic-path! [path op]\n  (debug-assert (= (gen-op-get) 0))\n  (debug-assert (= (gen-op-set) 1))\n  (if (empty? path)\n    [:unexpected-empty-selector]\n    (case op\n      0 (when (has-invalid-path-access-mode? path #(not= % (get-punch-access)))\n          [:unexpected-punching-selector])\n      1 (when (has-invalid-path-access-mode? path #(not= % (get-soft-access)))\n          [:unexpected-soft-selector]))))\n"]}