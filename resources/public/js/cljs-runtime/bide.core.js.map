{"version":3,"sources":["bide/core.cljs"],"mappings":"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","names":["bide$core$IRouter$_navigate$dyn","x__4428__auto__","m__4429__auto__","bide.core/-navigate","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","bide$core$IRouter$_replace$dyn","bide.core/-replace","bide.core/IRouter","_","loc","params","query","bide$core$IPathRepr$_repr$dyn","bide.core/-repr","bide.core/IPathRepr","goog.object/set","cljs.core/PROTOCOL_SENTINEL","it","cljs.core/Keyword","cljs.core/name","cljs.core/PersistentVector","cljs.core.into_array","cljs.core.map","bide.core/props->js","cljs.core/reduce-kv","m","k","v","cljs.core.key__GT_js","bide.core/js->props","cljs.core/persistent!","cljs.core.reduce","acc","key","value","bide.impl.helpers/isArray","cljs.core.assoc_BANG_","cljs.core.keyword","cljs.core/vec","cljs.core/transient","bide.impl.helpers/keys","bide.core/router?","bide.impl.router/isRouter","bide.core/empty","bide.impl.router/empty","bide.core/insert","router","path","name","bide.impl.router/insert","bide.core/match","vec__43506","cljs.core.nth","bide.impl.router/match","js/Error","bide.core/router","routes","cljs.core/vector?","p__43509","vec__43510","var_args","G__43514","bide.core/resolve","bide.core.resolve","bide.impl.router/resolve","bide.core/token-transformer","js/bide.impl.TokenTransformer","p__43520","map__43521","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bide.core/start!","on-navigate","default","html5?","html5history","opts","event","vec__43532","-match","token","result","or__4126__auto__","history","clojure.string/blank?","cljs.core/fn?","js/goog.history.Html5History","G__43535","G__43536","initial-token","-initial-token","initial-loc","lkey","goog.events/listen","goog.history.EventType/NAVIGATE","-on-navigate","x43540","goog.events/unlistenByKey","id","temp__5735__auto__","G__43554","bide.core/navigate!","bide.core.navigate_BANG_","G__43559","bide.core/replace!","bide.core.replace_BANG_"],"sourcesContent":[";; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions are met:\n;;\n;; * Redistributions of source code must retain the above copyright notice, this\n;;   list of conditions and the following disclaimer.\n;;\n;; * Redistributions in binary form must reproduce the above copyright notice,\n;;   this list of conditions and the following disclaimer in the documentation\n;;   and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns bide.core\n  (:refer-clojure :exclude [empty resolve])\n  (:require [bide.impl.router :as rtr]\n            [bide.impl.helpers :as helpers]\n            [clojure.string :as str]\n            [goog.events :as e])\n  (:import bide.impl.TokenTransformer\n           goog.history.Html5History\n           goog.history.EventType))\n\n;; --- Protocols\n\n(defprotocol IRouter\n  (-navigate [_ loc params query])\n  (-replace [_ loc params query]))\n\n(defprotocol IPathRepr\n  \"Path parameters coercion protocol.\"\n  (-repr [_] \"Return a representation of object in path.\"))\n\n(extend-protocol IPathRepr\n  nil\n  (-repr [it] \"\")\n\n  object\n  (-repr [it] (str it))\n\n  number\n  (-repr [it] it)\n\n  string\n  (-repr [it] it)\n\n  cljs.core.Keyword\n  (-repr [it] (name it))\n\n  cljs.core.PersistentVector\n  (-repr [it]\n    (into-array (map -repr it))))\n\n;; --- Low Level Routes API\n\n(defn- props->js\n  [params]\n  (when params\n    (reduce-kv (fn [m k v]\n                 (aset m (key->js k) (-repr v))\n                 m)\n               (js-obj)\n               params)))\n\n(defn- js->props\n  [params]\n  (when params\n    (persistent!\n     (reduce (fn [acc key]\n               (let [value (aget params key)]\n                 (if (helpers/isArray value)\n                   (assoc! acc (keyword key) (vec value))\n                   (assoc! acc (keyword key) value))))\n             (transient {})\n             (helpers/keys params)))))\n\n(defn ^boolean router?\n  \"Check if the `v` is a Router instance.\"\n  [v]\n  (rtr/isRouter v))\n\n(defn empty\n  \"Construct an empty router.\"\n  []\n  (rtr/empty))\n\n(defn insert\n  \"Insert a new entry to the router.\"\n  [router path name]\n  (rtr/insert router path name))\n\n(defn match\n  \"Try to match a path to a specific route in the router, returns `nil`\n  if the no match is found.\"\n  [router path]\n  (let [[name params query] (vec (rtr/match router path))]\n    (when name\n      [name\n       (js->props params)\n       (js->props query)])))\n\n(defn router\n  \"A helper for compile a vector of routes in a router instance.\"\n  [routes]\n  {:pre [(vector? routes)]}\n  (reduce (fn [router [path name]]\n            (rtr/insert router path name))\n          (rtr/empty)\n          routes))\n\n(defn resolve\n  \"Perform a url resolve operation.\"\n  ([router name]\n   (resolve router name nil nil))\n  ([router name params]\n   (resolve router name params nil))\n  ([router name params query]\n   {:pre [(router? router)]}\n   (let [params (props->js params)\n         query (props->js query)]\n     (rtr/resolve router name params query))))\n\n(defn token-transformer\n  \"Construct an object that implements\n  `goog.history.Html5History.TokenTransformer` with query string support.\"\n  []\n  (TokenTransformer.))\n\n;; --- Browser History Binding API\n\n(defn start!\n  \"Starts the bide routing handling using the `goog.history.Html5History` API as\n  browser history event watching mechanism.\n\n  Accepts router and configuration map. Required configuration keys are\n  `:on-navigate` and `:default`. `:on-navigate` is a function that would be\n  called each time route is changed providing route id, params and query as\n  arguments. `:default` used as default route id when URL doesn't match any\n  route registered in router. Optional configuration keys are `:html5?` (`false`\n  by default) and `:html5history` (new `goog.history.Html5History` instance by\n  default). Passing anything that evaluates to logical false as value of\n  `:html5?` would configure history to use fragment to store token. Pass factory\n  function that returns instance of `goog.history.Html5History` to\n  `:html5history` when you need to do some customizations to history instance\n  used to manage history events.\"\n  [router {:keys [on-navigate default html5? html5history]\n           :or {html5? false}\n           :as opts}]\n  (let [default (if (vector? default) default [default nil])]\n    (letfn [(-on-navigate [event]\n              (let [[name params query] (-match (.-token event))]\n                (on-navigate name params query)))\n            (-match [token]\n              (let [result (match router token)]\n                (or result default)))\n            (-initial-token [history]\n              (let [token (.getToken history)]\n                (if (str/blank? token)\n                  (or (apply resolve router default) \"/\")\n                  token)))]\n      (let [html5history (if (fn? html5history)\n                           (html5history)\n                           (Html5History. nil (token-transformer)))\n            history (if html5?\n                      (doto html5history\n                        (.setPathPrefix \"\")\n                        (.setUseFragment false)\n                        (.setEnabled true))\n                      (doto html5history\n                        (.setUseFragment true)\n                        (.setEnabled true)))\n            initial-token (-initial-token history)\n            initial-loc (-match initial-token)\n            lkey (e/listen history EventType.NAVIGATE -on-navigate)]\n\n        (.replaceToken history initial-token)\n\n        (specify! router\n          Object\n          (close [_]\n            (e/unlistenByKey lkey)\n            (.setEnabled history false))\n\n          IRouter\n          (-navigate [_ id params query]\n            (when-let [path (resolve router id params query)]\n              (.setToken history path)))\n          (-replace [_ id params query]\n            (when-let [path (resolve router id params query)]\n              (.replaceToken history path))))))))\n\n(defn navigate!\n  \"Trigger a navigate event to a specific location.\"\n  ([router id] (navigate! router id nil nil))\n  ([router id params] (navigate! router id params nil))\n  ([router id params query]\n   {:pre [(router? router)]}\n   (-navigate router id params query)))\n\n(defn replace!\n  \"Trigger a replace event to a specific location.\"\n  ([router id] (replace! router id nil nil))\n  ([router id params] (replace! router id params nil))\n  ([router id params query]\n   {:pre [(router? router)]}\n   (-replace router id params query)))\n"]}