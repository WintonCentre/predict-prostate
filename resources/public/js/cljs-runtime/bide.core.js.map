{"version":3,"sources":["bide/core.cljs"],"mappings":"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","names":["bide$core$IRouter$_navigate$dyn","x__4509__auto__","m__4510__auto__","bide.core/-navigate","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","bide$core$IRouter$_replace$dyn","bide.core/-replace","bide.core/IRouter","_","loc","params","query","bide$core$IPathRepr$_repr$dyn","bide.core/-repr","bide.core/IPathRepr","goog.object/set","cljs.core/PROTOCOL_SENTINEL","it","cljs.core/Keyword","cljs.core/name","cljs.core/PersistentVector","cljs.core.into_array","cljs.core.map","bide.core/props->js","cljs.core/reduce-kv","m","k","v","cljs.core.key__GT_js","bide.core/js->props","cljs.core/persistent!","cljs.core.reduce","acc","key","value","bide.impl.helpers/isArray","cljs.core.assoc_BANG_","cljs.core.keyword","cljs.core/vec","cljs.core/transient","bide.impl.helpers/keys","bide.core/router?","bide.impl.router/isRouter","bide.core/empty","bide.impl.router/empty","bide.core/insert","router","path","name","bide.impl.router/insert","bide.core/match","vec__43336","cljs.core.nth","bide.impl.router/match","js/Error","bide.core/router","routes","cljs.core/vector?","p__43352","vec__43356","var_args","G__43389","bide.core/resolve","bide.core.resolve","bide.impl.router/resolve","bide.core/token-transformer","js/bide.impl.TokenTransformer","p__43428","map__43429","cljs.core/--destructure-map","cljs.core.get","bide.core/start!","on-navigate","default","html5?","html5history","opts","event","vec__43443","-match","token","result","or__4212__auto__","history","clojure.string/blank?","cljs.core.apply","cljs.core/fn?","js/goog.history.Html5History","G__43456","G__43458","initial-token","-initial-token","initial-loc","lkey","goog.events/listen","goog.history.EventType/NAVIGATE","-on-navigate","x43460","goog.events/unlistenByKey","id","temp__5753__auto__","G__43466","bide.core/navigate!","bide.core.navigate_BANG_","G__43476","bide.core/replace!","bide.core.replace_BANG_"],"sourcesContent":[";; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions are met:\n;;\n;; * Redistributions of source code must retain the above copyright notice, this\n;;   list of conditions and the following disclaimer.\n;;\n;; * Redistributions in binary form must reproduce the above copyright notice,\n;;   this list of conditions and the following disclaimer in the documentation\n;;   and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns bide.core\n  (:refer-clojure :exclude [empty resolve])\n  (:require [bide.impl.router :as rtr]\n            [bide.impl.helpers :as helpers]\n            [clojure.string :as str]\n            [goog.events :as e])\n  (:import bide.impl.TokenTransformer\n           goog.history.Html5History\n           goog.history.EventType))\n\n;; --- Protocols\n\n(defprotocol IRouter\n  (-navigate [_ loc params query])\n  (-replace [_ loc params query]))\n\n(defprotocol IPathRepr\n  \"Path parameters coercion protocol.\"\n  (-repr [_] \"Return a representation of object in path.\"))\n\n(extend-protocol IPathRepr\n  nil\n  (-repr [it] \"\")\n\n  object\n  (-repr [it] (str it))\n\n  number\n  (-repr [it] it)\n\n  string\n  (-repr [it] it)\n\n  cljs.core.Keyword\n  (-repr [it] (name it))\n\n  cljs.core.PersistentVector\n  (-repr [it]\n    (into-array (map -repr it))))\n\n;; --- Low Level Routes API\n\n(defn- props->js\n  [params]\n  (when params\n    (reduce-kv (fn [m k v]\n                 (aset m (key->js k) (-repr v))\n                 m)\n               (js-obj)\n               params)))\n\n(defn- js->props\n  [params]\n  (when params\n    (persistent!\n     (reduce (fn [acc key]\n               (let [value (aget params key)]\n                 (if (helpers/isArray value)\n                   (assoc! acc (keyword key) (vec value))\n                   (assoc! acc (keyword key) value))))\n             (transient {})\n             (helpers/keys params)))))\n\n(defn ^boolean router?\n  \"Check if the `v` is a Router instance.\"\n  [v]\n  (rtr/isRouter v))\n\n(defn empty\n  \"Construct an empty router.\"\n  []\n  (rtr/empty))\n\n(defn insert\n  \"Insert a new entry to the router.\"\n  [router path name]\n  (rtr/insert router path name))\n\n(defn match\n  \"Try to match a path to a specific route in the router, returns `nil`\n  if the no match is found.\"\n  [router path]\n  (let [[name params query] (vec (rtr/match router path))]\n    (when name\n      [name\n       (js->props params)\n       (js->props query)])))\n\n(defn router\n  \"A helper for compile a vector of routes in a router instance.\"\n  [routes]\n  {:pre [(vector? routes)]}\n  (reduce (fn [router [path name]]\n            (rtr/insert router path name))\n          (rtr/empty)\n          routes))\n\n(defn resolve\n  \"Perform a url resolve operation.\"\n  ([router name]\n   (resolve router name nil nil))\n  ([router name params]\n   (resolve router name params nil))\n  ([router name params query]\n   {:pre [(router? router)]}\n   (let [params (props->js params)\n         query (props->js query)]\n     (rtr/resolve router name params query))))\n\n(defn token-transformer\n  \"Construct an object that implements\n  `goog.history.Html5History.TokenTransformer` with query string support.\"\n  []\n  (TokenTransformer.))\n\n;; --- Browser History Binding API\n\n(defn start!\n  \"Starts the bide routing handling using the `goog.history.Html5History` API as\n  browser history event watching mechanism.\n\n  Accepts router and configuration map. Required configuration keys are\n  `:on-navigate` and `:default`. `:on-navigate` is a function that would be\n  called each time route is changed providing route id, params and query as\n  arguments. `:default` used as default route id when URL doesn't match any\n  route registered in router. Optional configuration keys are `:html5?` (`false`\n  by default) and `:html5history` (new `goog.history.Html5History` instance by\n  default). Passing anything that evaluates to logical false as value of\n  `:html5?` would configure history to use fragment to store token. Pass factory\n  function that returns instance of `goog.history.Html5History` to\n  `:html5history` when you need to do some customizations to history instance\n  used to manage history events.\"\n  [router {:keys [on-navigate default html5? html5history]\n           :or {html5? false}\n           :as opts}]\n  (let [default (if (vector? default) default [default nil])]\n    (letfn [(-on-navigate [event]\n              (let [[name params query] (-match (.-token event))]\n                (on-navigate name params query)))\n            (-match [token]\n              (let [result (match router token)]\n                (or result default)))\n            (-initial-token [history]\n              (let [token (.getToken history)]\n                (if (str/blank? token)\n                  (or (apply resolve router default) \"/\")\n                  token)))]\n      (let [html5history (if (fn? html5history)\n                           (html5history)\n                           (Html5History. nil (token-transformer)))\n            history (if html5?\n                      (doto html5history\n                        (.setPathPrefix \"\")\n                        (.setUseFragment false)\n                        (.setEnabled true))\n                      (doto html5history\n                        (.setUseFragment true)\n                        (.setEnabled true)))\n            initial-token (-initial-token history)\n            initial-loc (-match initial-token)\n            lkey (e/listen history EventType.NAVIGATE -on-navigate)]\n\n        (.replaceToken history initial-token)\n\n        (specify! router\n          Object\n          (close [_]\n            (e/unlistenByKey lkey)\n            (.setEnabled history false))\n\n          IRouter\n          (-navigate [_ id params query]\n            (when-let [path (resolve router id params query)]\n              (.setToken history path)))\n          (-replace [_ id params query]\n            (when-let [path (resolve router id params query)]\n              (.replaceToken history path))))))))\n\n(defn navigate!\n  \"Trigger a navigate event to a specific location.\"\n  ([router id] (navigate! router id nil nil))\n  ([router id params] (navigate! router id params nil))\n  ([router id params query]\n   {:pre [(router? router)]}\n   (-navigate router id params query)))\n\n(defn replace!\n  \"Trigger a replace event to a specific location.\"\n  ([router id] (replace! router id nil nil))\n  ([router id params] (replace! router id params nil))\n  ([router id params query]\n   {:pre [(router? router)]}\n   (-replace router id params query)))\n"]}