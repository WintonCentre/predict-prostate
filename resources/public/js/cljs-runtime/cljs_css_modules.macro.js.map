{"version":3,"sources":["cljs_css_modules/macro.cljc"],"mappings":"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","names":["cljs-css-modules.macro/cljs-env?","env","cljs.core/boolean","p1__46792#","p1__46793#","cljs-css-modules.macro/selectors-to-localise","cljs-css-modules.macro/should-be-localised","selector","cljs.core/some","selector-object","cljs.core/re-matches","p__46794","map__46795","cljs.core/--destructure-map","cljs.core.get","cljs-css-modules.macro/localise-selector","id","regexp","localise-fn","clojure.string/replace","p__46796","map__46797","cljs-css-modules.macro/get-selector-key","name-template","cljs.core.keyword","p__46798","map__46799","cljs-css-modules.macro/get-selector-value","value-template","cljs.core/name","p__46804","vec__46809","seq__46810","cljs.core/seq","first__46811","cljs.core/first","cljs.core/next","cljs-css-modules.macro/is-media?","first","rest","style","cljs.core/list?","cljs.core._EQ_","p__46814","vec__46815","seq__46816","first__46817","cljs-css-modules.macro/is-keyframe?","p__46818","vec__46819","seq__46820","first__46821","cljs-css-modules.macro/process-style","fst","vec__46822","seq__46823","first__46824","symbol","name","localised-name","vec__46825","seq__46826","first__46827","params","rules","cljs.core.into","s","should-be-localised","localised-selector","p__46831","map__46832","cljs-css-modules.macro/create-garden-style","map","acc","item","map__46833","at-media","cljs.core.symbol","at-keyframes","garden-style","nested-style","type","style-object-value","G__46834","cljs.core/Keyword","cljs.core.assoc","cljs.core.conj","cljs.core/cons","cljs.core/rest","cljs.core.concat","map__46835","m","cljs.core.reduce","cljs.core.partial","cljs.core.merge","cljs.core.sequence","cljs.core/List"],"sourcesContent":["(ns cljs-css-modules.macro\n  #?(:clj\n     (:require\n      [garden.core :refer [css]]\n      [garden.stylesheet :refer [at-media at-keyframes]]))\n  #?(:cljs\n     (:require\n      [garden.core :refer [css]]\n      [garden.stylesheet :refer [at-media at-keyframes]]\n      [cljs-css-modules.runtime])))\n\n(defn cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n; for now we localise only simple class and keyframes\n(def selectors-to-localise\n  [{:id :class\n    :regexp #\"\\.([^#.:\\[\\s]+)(.*)\"\n    :localise-fn #(str \".$1\" \"--\" % \"$2\")\n    :name-template \"$1\"\n    :value-template \"$1\"}\n\n   {:id :keyframe\n    :regexp #\"@keyframes (.+)\"\n    :localise-fn #(str \"$1--\" %)\n    :name-template \"$1\"\n    :value-template \"$1\"}])\n\n(defn should-be-localised\n  [selector]\n  (some (fn [selector-object]\n          (if (re-matches (:regexp selector-object) selector)\n              selector-object\n              false)) selectors-to-localise))\n\n(defn localise-selector\n  [id selector {:keys [regexp localise-fn]}]\n  (clojure.string/replace selector regexp (localise-fn id)))\n\n(defn get-selector-key\n  \"Return the key to use to retrieve the actual selector value\"\n  [selector {:keys [regexp name-template]}]\n  (keyword (clojure.string/replace selector\n                                   regexp\n                                   name-template)))\n\n(defn get-selector-value\n  \"Return the actual selector value\"\n  [selector {:keys [regexp value-template]}]\n  (name (clojure.string/replace selector\n                                regexp\n                                value-template)))\n\n(defn is-media?\n  [[first & rest :as style]]\n  (and (list? style)\n       (= first 'at-media)))\n\n(defn is-keyframe?\n  [[first & rest :as style]]\n  (and (list? style)\n       (= first 'at-keyframes)))\n\n(defn process-style\n  [id [fst & rest :as style]]\n  (cond\n    ; keyframe\n    (is-keyframe? style)\n    (let [[symbol name & style] style\n          localised-name (str name \"--\" id)]\n      {:type :at-keyframe\n       :garden-style style\n       :selector {:original name\n                  :localised localised-name\n                  :key (keyword name)\n                  :value localised-name}})\n\n    ;; media-query\n    (is-media? style)\n    (let [[symbol params & style] style]\n      {:type :media\n       :params params\n       :nested-style style})\n\n    ;; other selectors\n    :else\n    (let [rules (into [] rest)\n          s (name fst)\n          should-be-localised (should-be-localised s)]\n      (if should-be-localised\n        (let [selector-object should-be-localised\n              localised-selector (localise-selector id s selector-object)]\n          {:type (:id selector-object)\n           :selector {:original s\n                      :localised localised-selector\n                      :key (get-selector-key s selector-object)\n                      :value (get-selector-value localised-selector selector-object)}\n           :garden-style style})\n        {:type :not-localised\n         :garden-style style}))))\n\n(defn create-garden-style\n  [id\n   {:keys [map style] :as acc}\n   item]\n  (let [at-media (symbol \"garden.stylesheet\" \"at-media\")\n        at-keyframes (symbol \"garden.stylesheet\" \"at-keyframes\")\n        {:keys [selector\n                garden-style\n                nested-style\n                type\n                params\n                style-object-value] :as item} (process-style id item)]\n    (case type\n      :class\n      {:map (assoc map\n                   (:key selector)\n                   (:value selector))\n       :style\n       (conj style\n             (into [] (cons (:localised selector)\n                            (rest garden-style))))}\n\n      ;unify at-keyframe and keyframe\n      :at-keyframe\n      (do\n        {:map (assoc map (:key selector) (:value selector))\n         :style\n         (conj style\n               `~(concat [at-keyframes (:localised selector)] garden-style))})\n\n      :keyframe\n      (do\n        {:map (assoc map (:key selector) (:value selector))\n         :style\n         (conj style\n              `~(concat [at-keyframes (:localised selector)] (rest garden-style)))})\n\n      :media\n      (let [{s :style m :map} (reduce (partial create-garden-style id)\n                                      {:map {}\n                                       :style []}\n                                      nested-style)]\n        {:map (merge map m)\n         :style (conj style `(~at-media ~params ~s))})\n\n      :not-localised\n      {:map map\n       :style (conj style garden-style)}\n\n      acc)))\n\n(defmacro defstyle\n  [style-id & [fst :as style]]\n  (let [compiler-opts? (or (symbol? fst) (map? fst))\n        compiler-opts (if compiler-opts? fst {})\n        test-flag (= true (last style))\n        style (cond\n                (and compiler-opts? test-flag) (rest (drop-last style))\n                test-flag (drop-last style)\n                compiler-opts? (rest style)\n                :else style)\n        css (symbol \"garden.core\" \"css\")\n        inject-style-fn (symbol \"cljs-css-modules.runtime\" \"inject-style!\")\n        id (if test-flag \"test\" (gensym))\n        {:keys [style map]} (reduce (partial create-garden-style id)\n                                    {:map {}\n                                     :style []}\n                                    style)]\n    (if (cljs-env? &env)\n      `(do\n         (def ~style-id ~map)\n         (~inject-style-fn (apply ~css ~compiler-opts ~style)\n           ~(str *ns*)\n           ~(name style-id)))\n\n      `(def ~style-id\n            {:map ~map\n             :css (apply ~css ~compiler-opts ~style)}))))\n"]}