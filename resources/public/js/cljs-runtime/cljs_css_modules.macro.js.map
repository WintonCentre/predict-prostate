{"version":3,"sources":["cljs_css_modules/macro.cljc"],"mappings":"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","names":["cljs-css-modules.macro/cljs-env?","env","cljs.core/boolean","p1__46991#","p1__46992#","cljs-css-modules.macro/selectors-to-localise","cljs-css-modules.macro/should-be-localised","selector","cljs.core/some","selector-object","cljs.core/re-matches","p__46993","map__46994","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs-css-modules.macro/localise-selector","id","regexp","localise-fn","clojure.string/replace","p__46996","map__46997","cljs-css-modules.macro/get-selector-key","name-template","cljs.core.keyword","p__46999","map__47000","cljs-css-modules.macro/get-selector-value","value-template","cljs.core/name","p__47002","vec__47003","seq__47004","cljs.core/seq","first__47005","cljs.core/first","cljs.core/next","cljs-css-modules.macro/is-media?","first","rest","style","cljs.core/list?","cljs.core._EQ_","p__47006","vec__47007","seq__47008","first__47009","cljs-css-modules.macro/is-keyframe?","p__47013","vec__47014","seq__47015","first__47016","cljs-css-modules.macro/process-style","fst","vec__47017","seq__47018","first__47019","symbol","name","localised-name","vec__47024","seq__47025","first__47026","params","rules","cljs.core.into","s","should-be-localised","localised-selector","p__47037","map__47038","cljs-css-modules.macro/create-garden-style","map","acc","item","map__47043","at-media","cljs.core.symbol","at-keyframes","garden-style","nested-style","type","style-object-value","G__47060","cljs.core/Keyword","cljs.core.assoc","cljs.core.conj","cljs.core/cons","cljs.core/rest","cljs.core.concat","map__47089","m","cljs.core.reduce","cljs.core.partial","cljs.core.merge","cljs.core.sequence","cljs.core/List"],"sourcesContent":["(ns cljs-css-modules.macro\n  #?(:clj\n     (:require\n      [garden.core :refer [css]]\n      [garden.stylesheet :refer [at-media at-keyframes]]))\n  #?(:cljs\n     (:require\n      [garden.core :refer [css]]\n      [garden.stylesheet :refer [at-media at-keyframes]]\n      [cljs-css-modules.runtime])))\n\n(defn cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n; for now we localise only simple class and keyframes\n(def selectors-to-localise\n  [{:id :class\n    :regexp #\"\\.([^#.:\\[\\s]+)(.*)\"\n    :localise-fn #(str \".$1\" \"--\" % \"$2\")\n    :name-template \"$1\"\n    :value-template \"$1\"}\n\n   {:id :keyframe\n    :regexp #\"@keyframes (.+)\"\n    :localise-fn #(str \"$1--\" %)\n    :name-template \"$1\"\n    :value-template \"$1\"}])\n\n(defn should-be-localised\n  [selector]\n  (some (fn [selector-object]\n          (if (re-matches (:regexp selector-object) selector)\n              selector-object\n              false)) selectors-to-localise))\n\n(defn localise-selector\n  [id selector {:keys [regexp localise-fn]}]\n  (clojure.string/replace selector regexp (localise-fn id)))\n\n(defn get-selector-key\n  \"Return the key to use to retrieve the actual selector value\"\n  [selector {:keys [regexp name-template]}]\n  (keyword (clojure.string/replace selector\n                                   regexp\n                                   name-template)))\n\n(defn get-selector-value\n  \"Return the actual selector value\"\n  [selector {:keys [regexp value-template]}]\n  (name (clojure.string/replace selector\n                                regexp\n                                value-template)))\n\n(defn is-media?\n  [[first & rest :as style]]\n  (and (list? style)\n       (= first 'at-media)))\n\n(defn is-keyframe?\n  [[first & rest :as style]]\n  (and (list? style)\n       (= first 'at-keyframes)))\n\n(defn process-style\n  [id [fst & rest :as style]]\n  (cond\n    ; keyframe\n    (is-keyframe? style)\n    (let [[symbol name & style] style\n          localised-name (str name \"--\" id)]\n      {:type :at-keyframe\n       :garden-style style\n       :selector {:original name\n                  :localised localised-name\n                  :key (keyword name)\n                  :value localised-name}})\n\n    ;; media-query\n    (is-media? style)\n    (let [[symbol params & style] style]\n      {:type :media\n       :params params\n       :nested-style style})\n\n    ;; other selectors\n    :else\n    (let [rules (into [] rest)\n          s (name fst)\n          should-be-localised (should-be-localised s)]\n      (if should-be-localised\n        (let [selector-object should-be-localised\n              localised-selector (localise-selector id s selector-object)]\n          {:type (:id selector-object)\n           :selector {:original s\n                      :localised localised-selector\n                      :key (get-selector-key s selector-object)\n                      :value (get-selector-value localised-selector selector-object)}\n           :garden-style style})\n        {:type :not-localised\n         :garden-style style}))))\n\n(defn create-garden-style\n  [id\n   {:keys [map style] :as acc}\n   item]\n  (let [at-media (symbol \"garden.stylesheet\" \"at-media\")\n        at-keyframes (symbol \"garden.stylesheet\" \"at-keyframes\")\n        {:keys [selector\n                garden-style\n                nested-style\n                type\n                params\n                style-object-value] :as item} (process-style id item)]\n    (case type\n      :class\n      {:map (assoc map\n                   (:key selector)\n                   (:value selector))\n       :style\n       (conj style\n             (into [] (cons (:localised selector)\n                            (rest garden-style))))}\n\n      ;unify at-keyframe and keyframe\n      :at-keyframe\n      (do\n        {:map (assoc map (:key selector) (:value selector))\n         :style\n         (conj style\n               `~(concat [at-keyframes (:localised selector)] garden-style))})\n\n      :keyframe\n      (do\n        {:map (assoc map (:key selector) (:value selector))\n         :style\n         (conj style\n              `~(concat [at-keyframes (:localised selector)] (rest garden-style)))})\n\n      :media\n      (let [{s :style m :map} (reduce (partial create-garden-style id)\n                                      {:map {}\n                                       :style []}\n                                      nested-style)]\n        {:map (merge map m)\n         :style (conj style `(~at-media ~params ~s))})\n\n      :not-localised\n      {:map map\n       :style (conj style garden-style)}\n\n      acc)))\n\n(defmacro defstyle\n  [style-id & [fst :as style]]\n  (let [compiler-opts? (or (symbol? fst) (map? fst))\n        compiler-opts (if compiler-opts? fst {})\n        test-flag (= true (last style))\n        style (cond\n                (and compiler-opts? test-flag) (rest (drop-last style))\n                test-flag (drop-last style)\n                compiler-opts? (rest style)\n                :else style)\n        css (symbol \"garden.core\" \"css\")\n        inject-style-fn (symbol \"cljs-css-modules.runtime\" \"inject-style!\")\n        id (if test-flag \"test\" (gensym))\n        {:keys [style map]} (reduce (partial create-garden-style id)\n                                    {:map {}\n                                     :style []}\n                                    style)]\n    (if (cljs-env? &env)\n      `(do\n         (def ~style-id ~map)\n         (~inject-style-fn (apply ~css ~compiler-opts ~style)\n           ~(str *ns*)\n           ~(name style-id)))\n\n      `(def ~style-id\n            {:map ~map\n             :css (apply ~css ~compiler-opts ~style)}))))\n"]}