{"version":3,"sources":["tongue/inst.cljc"],"mappings":"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","names":["tongue.inst/pad2","i","tongue.inst/pad3","tongue.inst/hour24","c","tongue.inst/hour12","cljs.core/mod","tongue.inst/minutes","tongue.inst/seconds","tongue.inst/milliseconds","tongue.inst/day-of-week","tongue.inst/day-of-month","tongue.inst/month","tongue.inst/year","tongue.inst/era","tongue.inst/format-token","strings","token","G__42740","cljs.core/Keyword","cljs.core.nth","cljs.core/name","tongue.inst/inst->date","inst","js/Date","cljs.core/inst-ms","tongue.inst/formatter","template","tokens","cljs.core/re-seq","cljs.core.map","p__42753","vec__42754","string","code","cljs.core.keyword","t","date","cljs.core.reduce","s","tz-offset-min","system-offset-min","corrected-t","tongue$inst$formatter_$_format"],"sourcesContent":["(ns tongue.inst\n  (:require\n    [clojure.string :as str]\n    [tongue.macro :as macro]\n    #?(:clj [clojure.future :refer :all])\n    #?(:clj [clojure.spec.alpha :as spec]))\n  #?(:clj\n      (:import\n        [java.util Calendar])))\n\n\n(defn- pad2 [i]\n  (if (< i 10)\n    (str \"0\" i)\n    (str i)))\n\n\n(defn- pad3 [i]\n  (cond\n    (< i 10)  (str \"00\" i)\n    (< i 100) (str \"0\" i)\n    :else     (str i)))\n\n\n(defn hour24 [c]\n  #?(:clj  (.get ^Calendar c Calendar/HOUR_OF_DAY)\n     :cljs (.getHours c)))\n\n\n(defn hour12 [c]\n  (-> (hour24 c) (+ 11) (mod 12) inc))\n\n\n(defn minutes [c]\n  #?(:clj  (.get ^Calendar c Calendar/MINUTE)\n     :cljs (.getMinutes c)))\n\n\n(defn seconds [c]\n  #?(:clj  (.get ^Calendar c Calendar/SECOND)\n     :cljs (.getSeconds c)))\n\n\n(defn milliseconds [c]\n  #?(:clj  (.get ^Calendar c Calendar/MILLISECOND)\n     :cljs (.getMilliseconds c)))\n\n\n(defn day-of-week [c] ;; Sunday => 0, ...\n  #?(:clj  (dec (.get ^Calendar c Calendar/DAY_OF_WEEK))\n     :cljs (.getDay c)))\n  \n  \n(defn day-of-month [c]\n  #?(:clj  (.get ^Calendar c Calendar/DAY_OF_MONTH)\n     :cljs (.getDate c)))\n\n\n(defn month [c] ;; January => 0, ...\n  #?(:clj  (.get ^Calendar c Calendar/MONTH)\n     :cljs (.getMonth c)))\n\n\n(defn year [c] ;; January => 0, ...\n  #?(:clj  (.get ^Calendar c Calendar/YEAR)\n     :cljs (+ 1900 (.getYear c))))\n\n\n(defn era [c] ;; BC => 0, AD => 1\n  (if (< (year c) 1)\n    0 1))\n\n\n(defn format-token ^String [strings token c]\n  (case token\n    :hour24-padded   (pad2 (hour24 c))\n    :hour24          (str (hour24 c))\n    :hour12-padded   (pad2 (hour12 c))\n    :hour12          (str (hour12 c))\n    :dayperiod       (nth (:dayperiods strings) (if (< (hour24 c) 12) 0 1))\n    :minutes-padded  (pad2 (minutes c))\n    :minutes         (str (minutes c))\n    :seconds-padded  (pad2 (seconds c))\n    :seconds         (str (seconds c))\n    :milliseconds    (pad3 (milliseconds c))\n    :weekday-long    (nth (:weekdays-long strings)   (day-of-week c))\n    :weekday-short   (nth (:weekdays-short strings)  (day-of-week c))\n    :weekday-narrow  (nth (:weekdays-narrow strings) (day-of-week c))\n    :weekday-numeric (str (inc (day-of-week c)))\n    :day-padded      (pad2 (day-of-month c))\n    :day             (str (day-of-month c))\n    :month-long      (nth (:months-long strings)   (month c))\n    :month-short     (nth (:months-short strings)  (month c))\n    :month-narrow    (nth (:months-narrow strings) (month c))\n    :month-numeric-padded (pad2 (inc (month c)))\n    :month-numeric   (str (inc (month c)))\n    :year            (str (year c))\n    :year-2digit     (pad2 (mod (year c) 100))\n    :era-long        (nth (:eras-long strings)  (era c))\n    :era-short       (nth (:eras-short strings) (era c))\n    (if (string? token)\n      token\n      (str \"{\" (name token) \"}\"))))\n\n\n#?(:clj (def ^:private UTC (java.util.TimeZone/getTimeZone \"UTC\")))\n\n\n(macro/with-spec\n  (spec/def ::weekdays-narrow (spec/coll-of string? :count 7))\n  (spec/def ::weekdays-short  (spec/coll-of string? :count 7))\n  (spec/def ::weekdays-long   (spec/coll-of string? :count 7))\n  (spec/def ::months-narrow   (spec/coll-of string? :count 12))\n  (spec/def ::months-short    (spec/coll-of string? :count 12))\n  (spec/def ::months-long     (spec/coll-of string? :count 12))\n  (spec/def ::dayperiods      (spec/coll-of string? :count 2))\n  (spec/def ::eras-short      (spec/coll-of string? :count 2))\n  (spec/def ::eras-long       (spec/coll-of string? :count 2))\n\n  (spec/def ::template string?)\n  (spec/def ::strings\n    (spec/keys :opt-un [::weekdays-narrow ::weekdays-short ::weekdays-long ::months-narrow ::months-short ::months-long ::dayperiods ::eras-short ::eras-long])))\n\n\n#?(:cljs\n    (defn inst->date [inst]\n      (if (instance? js/Date inst)\n        inst\n        (js/Date. (inst-ms inst)))))\n\n\n(defn formatter\n  [template strings]\n\n  (macro/with-spec\n    (spec/assert ::template template)\n    (spec/assert ::strings strings))\n  \n  (let [tokens (->> (re-seq #\"(?:\\{([^{} ]+)\\}|\\{|[^{]*)\" template)\n                    (map (fn [[string code]] (if code (keyword code) string))))]\n    #?(:clj\n        (fn format\n          ([t] \n            (macro/with-spec\n              (spec/assert inst? t))\n            (format t UTC))\n          ([t tz]\n            (macro/with-spec\n              (spec/assert inst? t)\n              (spec/assert #(instance? java.util.TimeZone %) tz))\n            (let [cal (doto (Calendar/getInstance)\n                        (.setTimeZone tz)\n                        (.setTimeInMillis (inst-ms t)))]\n              (str\n                (reduce\n                  (fn [^StringBuilder sb token]\n                    (.append sb (format-token strings token cal)))\n                  (StringBuilder.)\n                  tokens)))))\n       :cljs\n        (fn format\n          ([t]\n            (macro/with-spec\n              (spec/assert inst? t))\n            (let [date (inst->date t)]\n              (reduce\n                (fn [s token]\n                  (str s (format-token strings token date)))\n                \"\" tokens)))\n          ([t tz-offset-min]\n            (macro/with-spec\n              (spec/assert inst? t)\n              (spec/assert #(spec/int-in-range? -1440 1440 %)  tz-offset-min))\n            (let [date              (inst->date t)\n                  system-offset-min (- (.getTimezoneOffset date))\n                  corrected-t       (if (== system-offset-min tz-offset-min)\n                                      date\n                                      (js/Date. (+ (inst-ms date)\n                                                   (* 60000 (- tz-offset-min system-offset-min)))))]\n              (format corrected-t)))))))\n"]}