{"version":3,"sources":["translations/root.cljs"],"mappings":";AAKA,yBAAA,zBAAMA,0DACHC,IAAIC;AADP,AAEE,IAAMC,YAAU,CAACF,oCAAAA,yCAAAA,PAAIC,qBAAAA;IACfE,OAAK,EAAI,AAACC,wBAAQF,YACX,EAAI,8BAAA,7BAAG,AAACG,gBAAMH,mBACZ,AAACI,iBAAOJ,WACR,8GAAA,5GAAI,8BAAA,7BAAG,AAACG,gBAAMH,mBACZ,4CAAK,AAACK,gBAAML,yBAEhBA;IACPM,OAAK,AAAA,oFAAO,AAACC,eAAUC;AAR7B,AAAA,0FASGF,KAAKL;;AAGV,wBAAA,AAAAQ,oBAAAC,oBAAA,hEAAUQ,2EACPnB;AADH,AAAA,AAAA,IAAAY,aAEoB,AAACd,uBAAK,AAACU,eAAUa,4CAAYrB;WAFjD,AAAAa,4CAAAD,WAAA,IAAA,lEAESL;WAFT,AAAAM,4CAAAD,WAAA,IAAA,lEAEcV;AAFd,AAAA,IAAAY,aAGWZ;AAHX,AAAA,OAAAa,6BAAA,OAAA,EAAA,AAAAC,qBAAAF,aAAA,AAAAG,wCAAAH,YAAA,MAAA,EAAA,AAAAE,qBAAAF,aAAA,KAAA,CAAA,AAAAI,+BAAAJ;GAAA,6GAAA,1BAAgBM;AAOhB;;;;6BAAA,AAAAV,oBAAAC,oBAAA,rEAAUc,gFAGPzB;AAHH,AAAA,AAAA,IAAAsB,aAIoB,AAACxB,uBAAK,AAACU,eAAUa,4CAAYrB;WAJjD,AAAAa,4CAAAS,WAAA,IAAA,lEAISf;WAJT,AAAAM,4CAAAS,WAAA,IAAA,lEAIcpB;AAJd,AAAA,GAMQ,2PAAA,zPAAK,gDAAA,hDAACwB,+FAAS,AAAA,oFAAO,AAAClB,eAAUC,yDAC5B,AAACN,wBAAQH,UACT,AAAC0B,gDAAKxB,KAAK,+CAAA,AAAAyB,gEAAA,mFAAA,lMAACC,+DAAQnB,yMAA8BF,KAAK,AAACD,gBAAMN;AAR3E,OAAAe,6BAAA,OAAA,SAAA,mBAAA,gBAAA,gBAAA,6BAAA,WAAAQ;AAAA,AAYyB,AAEE,AAASM,wFAAY7B;;AACrB,OAAAuB;IAf3B,CAAA,AAAAL,+BAekDhB;;AAflD,OAAAa,6BAAA,OAAA,SAAA,mBAAA,mBAAA,kBAAA,sHAAA,WAAAS,jHAqB2C,yDAAA,gBAAA,vEAAI,kDAAA,lDAACM,6CAAE5B;AArBlD,AAuByB,AACE,AAAS2B,wFAAY7B;;AACrB,OAAAwB;IAzB3B,CAAA,AAAAN,+BAyBkDhB;;GAzBlD,6GAAA,1BAAqBkB","names":["translations.root/_ttt","ttt","arg","text-or-v","text","cljs.core/vector?","cljs.core/count","cljs.core/second","cljs.core/first","lang","rum.core/react","predict-prostate.state.run-time/t-state-cursor","rum.core/lazy-build","rum.core/build-defc","vec__48503","cljs.core.nth","attrs48501","daiquiri.core/create-element","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.interpreter/interpret","translations.root/ttt","rum.core/reactive","predict-prostate.state.run-time/ttt-cursor","vec__48511","p1__48506#","p1__48507#","translations.root/ttt-edit","cljs.core.not_EQ_","cljs.core/deref","cljs.core.get_in","predict-prostate.state.run-time/edit-change","cljs.core._EQ_"],"sourcesContent":["(ns translations.root\n  (:require [rum.core :as rum]\n            [predict-prostate.state.run-time :refer [t-state-cursor ttt-cursor edit-change]]\n            [pubsub.feeds :refer [publish]]))\n\n(defn _ttt\n  [ttt arg]\n  (let [text-or-v (ttt arg)\n        text (if (vector? text-or-v)\n               (if (> (count text-or-v) 1)\n                 (second text-or-v)\n                 (if (> (count text-or-v) 0)\n                   (str (first text-or-v))\n                   \"**argv**\"))\n               text-or-v)\n        lang (:lang (rum/react t-state-cursor))]\n    [lang text]))\n\n; prod mode ttt\n(rum/defc ttt < rum/reactive\n  [arg]\n  (let [[lang text] (_ttt (rum/react ttt-cursor) arg)]\n    [:span text]))\n\n; editor mode ttt\n; edit mode\n(rum/defc ttt-edit < rum/reactive\n  \"Further wrap the translation function in one that provides an editable and clickable span instead of just the string.\n                     Note that this naturally sits in the application rather than in the translations namespace.\"\n  [arg]\n  (let [[lang text] (_ttt (rum/react ttt-cursor) arg)]\n\n    (if (and (not= :en (:lang (rum/react t-state-cursor)))\n             (vector? arg)\n             (not= text (get-in @t-state-cursor [:translations lang (first arg)])))\n      [:span {:style    {:background-color \"#e488\"\n                         :color            \"#fff\"\n                         :border           \"1px dashed #e48\"}\n              :on-click #(do\n                           ;(println \"ttt-edit 1 text = \" text \"arg = \" arg)\n                           (publish edit-change arg)\n                           (.stopPropagation %))} text]\n\n      [:span {:style    {:background-color \"#e482\"\n                         ;:display          \"inline-block\" ;this disrupts the alignment of text in the home page\n                         :min-width        \"1ex\"\n                         :min-height       \"10px\"\n                         :border           (if (= text \"\") \"1px solid red\" \"1px solid #ccc\")\n                         }\n              :on-click #(do\n                           (publish edit-change arg)\n                           (.stopPropagation %))} text])))\n\n\n"]}