{"version":3,"sources":["predict_prostate/core.cljs"],"mappings":";AAYA,AAACA;AAGD,GAAA,QAAAC,6CAAAC,kDAAAC;AAAA;AAAA,AAAA,AAASC,wCACP,AAACC;;AAIH,AAAKC,gCAAQ,mDAAA,nDAACC;AACd,AAAKC,iCAAS,mDAAA,nDAACD;AACf,AAAKE,oCAAY,mDAAA,nDAACF;AAElB,6BAAA,7BAAeG;AAAf,AAME,IAAA,OACM,iCAAA,jCAAGE,PACH,oEAAO;AAAA,AAAO,mBAAA,ZAACC;;gBAFrB,GAAA,CAAAF,kBAISG;AAJT,UAAAH,NAImBI;AAJnB,AAIuB,qBAAA,dAACC,kDAAqDD;;AAJ7E,AAAA,MAAAJ;;;;;AAMF,6BAAA,7BAAMM;AAAN,AAEE,AAACP;;AACD,GAAIQ;AACF,AACE,AAACC,eAAU,CAACC,sEAAAA,wEAAAA,kDAAW,oBAAA,pBAACC;;AAExB,OAACC,+CAAsBb,kCAAYH,8BAAQE,+BAAS,kCAAA,jCAAKe,yDAAwBC;;AACnF,AACE,AAACL,eAAU,CAACM,iEAAAA,mEAAAA,6CAAM,oBAAA,pBAACJ;;AAEnB,OAASK,2FAAeC;;;AAG9B,kCAAA,lCAAMC;AAAN,AAGE,OAACT,eAAU,CAACC,sEAAAA,wEAAAA,kDAAW,oBAAA,pBAACC;;AAG1B,AAAKQ,kCAAU,YAAA,ZAACC;AAAD,AACG,oBAAM,iBAAAC,WAAwB,AAAcE;IAAtCD,eAAA,iFAAA,cAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAAN,AACE,AAACG,cAAiBL;;AAClB,OAACZ;;AAFH;;GADH;AAMf,qCAAA,rCAAMkB;AAAN,AAAA","names":["cljs.core/enable-console-print!","js/predict-prostate","js/predict-prostate.core","js/predict-prostate.core.once-only-guard","predict-prostate.core/once-only-guard","predict-prostate.state.mutations/mutator","predict-prostate.core/ok-chan","cljs.core.async.chan","predict-prostate.core/err-chan","predict-prostate.core/static-chan","predict-prostate.core/init","e35580","js/navigator.serviceWorker","js/console.log","js/Object","err","js/console.error","predict-prostate.core/main","translations.config/predict-edit","rum.core/mount","predict-prostate.pages.root/edit-root","goog.dom/getElement","translations.tongue-base/load-all-translations","translations.tranny-api/base-url","predict-prostate.state.run-time/t-state-cursor","predict-prostate.pages.root/root","predict-prostate.state.run-time/t-state-change","translations.config/live-dictionary-url","predict-prostate.core/edit-main","predict-prostate.core/loaded-id","js/setInterval","G__35582","fexpr__35581","js/document","js/clearInterval","predict-prostate.core/on-js-reload"],"sourcesContent":["(ns predict-prostate.core\n  (:require [rum.core :as rum]\n            [cljs.core.async :refer [chan]]\n            [goog.dom :as gdom]\n            [predict-prostate.state.mutations :refer [mutator]]\n            [predict-prostate.state.run-time :refer [t-state-change t-state-cursor]]\n            [translations.config :refer [live-dictionary-url predict-edit]]\n            [predict-prostate.pages.root :refer [root edit-root]]\n            [pubsub.feeds :refer [publish]]\n            [translations.tongue-base :refer [load-all-translations]]\n            [translations.tranny-api :refer [base-url]]))\n\n(enable-console-print!)\n\n;;;; Start the mutator!\n(defonce once-only-guard\n  (mutator)\n  )\n\n; Global channels for response handling on startup\n(def ok-chan (chan 0))\n(def err-chan (chan 0))\n(def static-chan (chan 0))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n\n  ;; service worker\n  (try\n    (-> (. js/navigator.serviceWorker (register \"/sw_cache_update.js\"))\n        (.then (fn [] (js/console.log \"service worker registered\"))))\n\n    (catch js/Object err (js/console.error \"Failed to register service worker\" err))))\n\n(defn main []\n  ;;main is the entry point for both production mode and edition mode\n  (init)\n  (if predict-edit\n    (do\n      (rum/mount (edit-root) (gdom/getElement \"app\"))\n      #_(println \"edit: loading translations from: \" (str base-url \"upserts/all\"))\n      (load-all-translations static-chan ok-chan err-chan (str base-url \"upserts/all\") t-state-cursor))\n    (do\n      (rum/mount (root) (gdom/getElement \"app\"))\n      #_(println \"prod: publish t-state-change \" live-dictionary-url)\n      (publish t-state-change live-dictionary-url)))\n  )\n\n(defn edit-main []\n  ;; conditionally start the app based on whether the #main-app-area\n  ;; node is on the page\n  (rum/mount (edit-root) (gdom/getElement \"app\")))\n\n;; This appears to be necessary.\n(def loaded-id (js/setInterval\n                 #(when (#{\"loaded\" \"complete\"} (.-readyState js/document))\n                    (js/clearInterval loaded-id)\n                    (main))\n                 10))\n\n(defn on-js-reload []\n  ;; optionally touch your app-state to force rerendering depending on\n  ;; your application\n  ;; (swap! app-state update-in [:__figwheel_counter] inc)\n)\n"]}