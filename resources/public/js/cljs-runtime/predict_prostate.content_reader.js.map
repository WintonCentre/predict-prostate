{"version":3,"sources":["predict_prostate/content_reader.cljs"],"mappings":"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","names":["predict-prostate.content-reader/re-tag","predict-prostate.content-reader/match-id","tag","id","vec__42142","cljs.core.nth","_","tag-id","cljs.core/re-find","cljs.core._EQ_","predict-prostate.content-reader/match-node","ttt","node","vec__42145","seq__42146","cljs.core/seq","first__42147","cljs.core/first","cljs.core/next","x","xs","cljs.core.keyword","cljs.core/vector?","temp__5751__auto__","rv","p__42148","vec__42149","seq__42150","first__42151","predict-prostate.content-reader/add-hiccup-key","key","args","vec__42152","seq__42153","first__42154","vec__42155","m","rest-args","mk","rest-args*","cljs.core/map?","cljs.core.assoc","cljs.core.into","cljs.core.concat","var_args","G__42159","predict-prostate.content-reader/section","js/Error","map__42160","cljs.core/--destructure-map","cljs.core.get","predict_prostate.content_reader.section","predict-prostate.content/content","predict-prostate.content-reader/all-subsections","iter__4611__auto__","s__42164","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__42166","cljs.core/chunk-buffer","i__42165","cljs.core/-nth","vec__42167","seq__42168","first__42169","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42163","cljs.core/chunk-rest","vec__42170","seq__42171","first__42172","cljs.core/cons","cljs.core/rest","k","cljs.core.range","title","content","predict-prostate.results.util/alison-blue-3","p1__42161#","p2__42162#","cljs.core.map_indexed","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.content-reader\n  (:require [predict-prostate.content :refer [content]]\n            [predict-prostate.results.util :refer [alison-blue-1 alison-blue-2 alison-blue-3]]\n            [rum.core :as rum]))\n\n(def ^{:doc     \"Regular expression that parses a CSS-style id and class from an element name.\"\n       :private true}\nre-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(defn match-id \n  \"return true if tag contains a hash tag-id matching id.\"\n  [tag id]\n  (let [[_ _ tag-id _] (re-find re-tag (str tag))]\n    (= id tag-id)))\n(comment\n  (match-id \":section#about-the-patient.input-box\" \"about-the-patient\") ;=> true\n  (match-id \"#about-the-patient.input-box\" \"about-the-patient\") ;=> false  (doesn't include element tag)\n  (match-id \":#about-the-patient.input-box\" \"about-the-patient\") ;=> true\n  (match-id \":div#about-the-patient.input-box\" \"about-the-patient\") ;=> true (not fussy about element tag)\n  )\n\n\n(defn match-node [ttt node id]\n  (let [[x & xs] node]\n    (cond\n      (nil? x) nil\n      (keyword x) (if (match-id x id) {:x x :xs xs} (match-node ttt xs id))\n      (vector? x) (if-let [rv (match-node ttt x id)] rv (match-node ttt xs id))\n      (seq xs) (match-node ttt xs id)\n      :else nil\n      )\n    ))\n\n\n(defn add-hiccup-key [key [tag & args]]\n  (let [[m & rest-args] args\n        [mk rest-args*] (if (map? m) [(assoc m :key key) rest-args] [{:key key} args])]\n    ; (prn \"check: \" tag mk m rest-args*)\n    (into [] (concat [tag mk] rest-args*)))\n  )\n\n(comment\n  (add-hiccup-key \"key3\" [:p])\n  (add-hiccup-key \"key3\" [:p.emphasise])\n  ;=> [:p {:key \"key3\"}]\n  (add-hiccup-key \"key3\" [:p \"Hello there\"])\n  ;=> [:p {:key \"key3\"} \"Hello there\"]\n  (add-hiccup-key \"key3\" [:p [:p \"Hello there\"] [:p \"Bye then!\"]])\n  ;=> [:p {:key \"key3\"} [:p \"Hello there\"] [:p \"Bye then!\"]]\n  (add-hiccup-key \"key3\" [:p {:foo 1}])\n  ;=> [:p {:foo 1, :key \"key3\"}]\n  (add-hiccup-key \"key3\" [:p {:foo 2} [:p \"Hello there\"]])\n  ;=> [:p {:foo 2, :key \"key3\"} [:p \"Hello there\"]]\n  (add-hiccup-key \"key3\" [:p {:foo 3} [:p \"Hello there\"] [:p \"Bye then!\"]])\n  ;=> [:p {:foo 3, :key \"key3\"} [:p \"Hello there\"] [:p \"Bye then!\"]]\n  )\n\n(defn section\n  ([ttt node id]\n   (let [{:keys [_ xs]} (match-node ttt node id)]\n     xs))\n\n  ([ttt id] \n   (section ttt (content ttt) id)))\n\n(defn all-subsections\n  \"loop through subsections adding keys.\"\n  [ttt id]\n  (let [node (section ttt id)]\n    (for [k (range (count (rest node)))\n          :let [[_ title & content] (nth (rest node) k)]]\n      [:section {:key k}\n       [:h2 {:style {:color alison-blue-3}} title]\n       (map-indexed #(add-hiccup-key (str \"k\" %1) %2)\n                    content)\n       ])))\n\n(comment\n\n  ;content\n\n  (re-find re-tag \":section#adjuvant-treatments.input-box\")\n\n  (defn ttt [[_ s]] s)\n\n  (defn mock-data [ttt] \n    [:div#top\n                  [:section#1.ignore\n                   [:section#this-one.found [:p (ttt [:mock/n1 \"this\"])]]\n                   [:section#next-one.found [:p (ttt [:mock/n2 \"next\"])\n                                             [:p#foo (ttt [:mock/n3 \"foo\"])]]]\n                   [:section#last-one.found [:p (ttt [:mock/n4 \"last\"])]]]])\n\n  (def mock-data* [:section#about-the-patient.input-box \"About the patient\"\n\n                   [:p \"This section collects information about the person with prostate cancer which may affect the treatment choices\n    available to them or the outcomes of those treatments.\"]\n\n                   [:p \"The options available are those recorded in the English health service records, as the tool is based on a\n    database of patients from England.\"]])\n\n  mock-data\n  mock-data*\n\n  (match-id :div#top \"top\")\n\n  (match-node ttt mock-data \"top\")\n  (match-node ttt mock-data \"1\")\n  (match-node ttt mock-data \"next-one\")\n  (match-node ttt mock-data \"foo\")\n\n  (match-node ttt mock-data* \"about-the-patient\")\n\n  (content ttt)\n  (match-node ttt (content ttt) \"about-the-patient\")\n  (match-node ttt content \"welcome\")\n  (match-node ttt content \"why\")\n  (section ttt \"welcome\")\n\n  (def clin-info (section ttt content \"clinician-information\"))\n  (section ttt clin-info \"oncotype\")\n\n  #_(match-id \":section#adjuvant-treatments.input-box\" \"adjuvant-treatments\")\n  #_(match-id \":section#treatments.input-box\" \"adjuvant-treatments\")\n\n  )"]}