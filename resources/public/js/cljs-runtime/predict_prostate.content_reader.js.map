{"version":3,"sources":["predict_prostate/content_reader.cljs"],"mappings":"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","names":["predict-prostate.content-reader/re-tag","predict-prostate.content-reader/match-id","tag","id","vec__119630","cljs.core.nth","_","tag-id","cljs.core/re-find","cljs.core._EQ_","predict-prostate.content-reader/match-node","ttt","node","vec__119638","seq__119639","cljs.core/seq","first__119640","cljs.core/first","cljs.core/next","x","xs","cljs.core.keyword","cljs.core/vector?","temp__5733__auto__","rv","p__119641","vec__119643","seq__119644","first__119645","predict-prostate.content-reader/add-hiccup-key","key","args","vec__119649","seq__119650","first__119651","vec__119652","m","rest-args","mk","rest-args*","cljs.core/map?","cljs.core.assoc","cljs.core.into","cljs.core.concat","var_args","G__119663","predict-prostate.content-reader/section","js/Error","map__119665","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","predict_prostate.content_reader.section","predict-prostate.content/content","predict-prostate.content-reader/all-subsections","iter__4529__auto__","s__119678","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__119680","cljs.core/chunk-buffer","i__119679","cljs.core/-nth","vec__119684","seq__119685","first__119686","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__119677","cljs.core/chunk-rest","vec__119687","seq__119688","first__119689","cljs.core/cons","cljs.core/rest","k","cljs.core.range","title","content","predict-prostate.results.util/alison-blue-3","p1__119671#","p2__119672#","cljs.core.map_indexed","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.content-reader\n  (:require [predict-prostate.content :refer [content]]\n            [predict-prostate.results.util :refer [alison-blue-1 alison-blue-2 alison-blue-3]]\n            [rum.core :as rum]))\n\n(def ^{:doc     \"Regular expression that parses a CSS-style id and class from an element name.\"\n       :private true}\nre-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(defn match-id \n  \"return true if tag contains a hash tag-id matching id.\"\n  [tag id]\n  (let [[_ _ tag-id _] (re-find re-tag (str tag))]\n    (= id tag-id)))\n(comment\n  (match-id \":section#about-the-patient.input-box\" \"about-the-patient\") ;=> true\n  (match-id \"#about-the-patient.input-box\" \"about-the-patient\") ;=> false  (doesn't include element tag)\n  (match-id \":#about-the-patient.input-box\" \"about-the-patient\") ;=> true\n  (match-id \":div#about-the-patient.input-box\" \"about-the-patient\") ;=> true (not fussy about element tag)\n  )\n\n\n(defn match-node [ttt node id]\n  (let [[x & xs] node]\n    (cond\n      (nil? x) nil\n      (keyword x) (if (match-id x id) {:x x :xs xs} (match-node ttt xs id))\n      (vector? x) (if-let [rv (match-node ttt x id)] rv (match-node ttt xs id))\n      (seq xs) (match-node ttt xs id)\n      :else nil\n      )\n    ))\n\n\n(defn add-hiccup-key [key [tag & args]]\n  (let [[m & rest-args] args\n        [mk rest-args*] (if (map? m) [(assoc m :key key) rest-args] [{:key key} args])]\n    ; (prn \"check: \" tag mk m rest-args*)\n    (into [] (concat [tag mk] rest-args*)))\n  )\n\n(comment\n  (add-hiccup-key \"key3\" [:p])\n  (add-hiccup-key \"key3\" [:p.emphasise])\n  ;=> [:p {:key \"key3\"}]\n  (add-hiccup-key \"key3\" [:p \"Hello there\"])\n  ;=> [:p {:key \"key3\"} \"Hello there\"]\n  (add-hiccup-key \"key3\" [:p [:p \"Hello there\"] [:p \"Bye then!\"]])\n  ;=> [:p {:key \"key3\"} [:p \"Hello there\"] [:p \"Bye then!\"]]\n  (add-hiccup-key \"key3\" [:p {:foo 1}])\n  ;=> [:p {:foo 1, :key \"key3\"}]\n  (add-hiccup-key \"key3\" [:p {:foo 2} [:p \"Hello there\"]])\n  ;=> [:p {:foo 2, :key \"key3\"} [:p \"Hello there\"]]\n  (add-hiccup-key \"key3\" [:p {:foo 3} [:p \"Hello there\"] [:p \"Bye then!\"]])\n  ;=> [:p {:foo 3, :key \"key3\"} [:p \"Hello there\"] [:p \"Bye then!\"]]\n  )\n\n(defn section\n  ([ttt node id]\n   (let [{:keys [_ xs]} (match-node ttt node id)]\n     xs))\n\n  ([ttt id] \n   (section ttt (content ttt) id)))\n\n(defn all-subsections\n  \"loop through subsections adding keys.\"\n  [ttt id]\n  (let [node (section ttt id)]\n    (for [k (range (count (rest node)))\n          :let [[_ title & content] (nth (rest node) k)]]\n      [:section {:key k}\n       [:h2 {:style {:color alison-blue-3}} title]\n       (map-indexed #(add-hiccup-key (str \"k\" %1) %2)\n                    content)\n       ])))\n\n(comment\n\n  ;content\n\n  (re-find re-tag \":section#adjuvant-treatments.input-box\")\n\n  (defn ttt [[_ s]] s)\n\n  (defn mock-data [ttt] \n    [:div#top\n                  [:section#1.ignore\n                   [:section#this-one.found [:p (ttt [:mock/n1 \"this\"])]]\n                   [:section#next-one.found [:p (ttt [:mock/n2 \"next\"])\n                                             [:p#foo (ttt [:mock/n3 \"foo\"])]]]\n                   [:section#last-one.found [:p (ttt [:mock/n4 \"last\"])]]]])\n\n  (def mock-data* [:section#about-the-patient.input-box \"About the patient\"\n\n                   [:p \"This section collects information about the person with prostate cancer which may affect the treatment choices\n    available to them or the outcomes of those treatments.\"]\n\n                   [:p \"The options available are those recorded in the English health service records, as the tool is based on a\n    database of patients from England.\"]])\n\n  mock-data\n  mock-data*\n\n  (match-id :div#top \"top\")\n\n  (match-node ttt mock-data \"top\")\n  (match-node ttt mock-data \"1\")\n  (match-node ttt mock-data \"next-one\")\n  (match-node ttt mock-data \"foo\")\n\n  (match-node ttt mock-data* \"about-the-patient\")\n\n  (content ttt)\n  (match-node ttt (content ttt) \"about-the-patient\")\n  (match-node ttt content \"welcome\")\n  (match-node ttt content \"why\")\n  (section ttt \"welcome\")\n\n  (def clin-info (section ttt content \"clinician-information\"))\n  (section ttt clin-info \"oncotype\")\n\n  #_(match-id \":section#adjuvant-treatments.input-box\" \"adjuvant-treatments\")\n  #_(match-id \":section#treatments.input-box\" \"adjuvant-treatments\")\n\n  )"]}