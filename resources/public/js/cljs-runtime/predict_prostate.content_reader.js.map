{"version":3,"sources":["predict_prostate/content_reader.cljs"],"mappings":"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","names":["predict-prostate.content-reader/re-tag","predict-prostate.content-reader/match-id","tag","id","vec__33885","cljs.core.nth","_","tag-id","cljs.core/re-find","cljs.core._EQ_","predict-prostate.content-reader/match-node","node","vec__33894","seq__33895","cljs.core/seq","first__33896","cljs.core/first","cljs.core/next","x","xs","cljs.core.keyword","cljs.core/vector?","temp__5733__auto__","rv","p__33903","vec__33904","seq__33905","first__33906","predict-prostate.content-reader/add-hiccup-key","key","args","hiccup","vec__33907","seq__33908","first__33909","vec__33910","m","rest-args","mk","rest-args*","cljs.core/map?","cljs.core.assoc","cljs.core.into","cljs.core.concat","var_args","G__33917","predict-prostate.content-reader/section","js/Error","map__33922","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","predict_prostate.content_reader.section","predict-prostate.content/content","predict-prostate.content-reader/all-subsections","iter__4529__auto__","s__33945","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__33947","cljs.core/chunk-buffer","i__33946","cljs.core/-nth","vec__33949","seq__33950","first__33951","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33944","cljs.core/chunk-rest","vec__33952","seq__33953","first__33954","cljs.core/cons","cljs.core/rest","k","cljs.core.range","sec","title","content","predict-prostate.results.util/alison-blue-3","p1__33924#","p2__33925#","cljs.core.map_indexed","cljs.core/chunk-first"],"sourcesContent":["(ns predict-prostate.content-reader\n  (:require [predict-prostate.content :refer [content]]\n            [predict-prostate.results.util :refer [alison-blue-1 alison-blue-2 alison-blue-3]]\n            [rum.core :as rum]))\n\n(def ^{:doc     \"Regular expression that parses a CSS-style id and class from an element name.\"\n       :private true}\nre-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(defn match-id [tag id]\n  \"return true if tag contains a hash tag-id matching id.\"\n  (let [[_ _ tag-id _] (re-find re-tag (str tag))]\n    (= id tag-id)))\n(comment\n  (match-id \":section#about-the-patient.input-box\" \"about-the-patient\") ;=> true\n  (match-id \"#about-the-patient.input-box\" \"about-the-patient\") ;=> false  (doesn't include element tag)\n  (match-id \":#about-the-patient.input-box\" \"about-the-patient\") ;=> true\n  (match-id \":div#about-the-patient.input-box\" \"about-the-patient\") ;=> true (not fussy about element tag)\n  )\n\n\n(defn match-node [node id]\n  (let [[x & xs] node]\n    (cond\n      (nil? x) nil\n      (keyword x) (if (match-id x id) {:x x :xs xs} (match-node xs id))\n      (vector? x) (if-let [rv (match-node x id)] rv (match-node xs id))\n      (seq xs) (match-node xs id)\n      :else nil #_(throw (js/Error. (str \"match-node \" {:x x :xs xs})))\n      )\n    ))\n\n\n(defn add-hiccup-key [key [tag & args :as hiccup]]\n  (let [[m & rest-args] args\n        [mk rest-args*] (if (map? m) [(assoc m :key key) rest-args] [{:key key} args])]\n    ; (prn \"check: \" tag mk m rest-args*)\n    (into [] (concat [tag mk] rest-args*)))\n  )\n\n(comment\n  (add-hiccup-key \"key3\" [:p])\n  (add-hiccup-key \"key3\" [:p.emphasise])\n  ;=> [:p {:key \"key3\"}]\n  (add-hiccup-key \"key3\" [:p \"Hello there\"])\n  ;=> [:p {:key \"key3\"} \"Hello there\"]\n  (add-hiccup-key \"key3\" [:p [:p \"Hello there\"] [:p \"Bye then!\"]])\n  ;=> [:p {:key \"key3\"} [:p \"Hello there\"] [:p \"Bye then!\"]]\n  (add-hiccup-key \"key3\" [:p {:foo 1}])\n  ;=> [:p {:foo 1, :key \"key3\"}]\n  (add-hiccup-key \"key3\" [:p {:foo 2} [:p \"Hello there\"]])\n  ;=> [:p {:foo 2, :key \"key3\"} [:p \"Hello there\"]]\n  (add-hiccup-key \"key3\" [:p {:foo 3} [:p \"Hello there\"] [:p \"Bye then!\"]])\n  ;=> [:p {:foo 3, :key \"key3\"} [:p \"Hello there\"] [:p \"Bye then!\"]]\n  )\n\n(defn section\n  ([node id]\n   (let [{:keys [x xs]} (match-node node id)]\n     xs\n     #_(map-indexed #(add-hiccup-key (str \"k\" %1) %2) xs)))\n\n  ([id] (section (content) id))\n  )\n\n(defn all-subsections\n  \"loop through subsections adding keys.\"\n  [id]\n  (let [node (section id)]\n    (for [k (range (count (rest node)))\n          :let [[sec title & content] (nth (rest node) k)]]\n      [:section {:key k}\n       [:h2 {:style {:color alison-blue-3}} title]\n       (map-indexed #(add-hiccup-key (str \"k\" %1) %2)\n                    content)\n       ])))\n\n(comment\n\n  ;content\n\n  (re-find re-tag \":section#adjuvant-treatments.input-box\")\n\n\n  (def mock-data [:div#top\n                  [:section#1.ignore\n                   [:section#this-one.found [:p \"this\"]]\n                   [:section#next-one.found [:p \"next\"\n                                             [:p#foo \"foo\"]]]\n                   [:section#last-one.found [:p \"last\"]]\n                   ]])\n\n  (def mock-data* [:section#about-the-patient.input-box \"About the patient\"\n\n                   [:p \"This section collects information about the person with prostate cancer which may affect the treatment choices\n    available to them or the outcomes of those treatments.\"]\n\n                   [:p \"The options available are those recorded in the English health service records, as the tool is based on a\n    database of patients from England.\"]])\n\n  mock-data\n  mock-data*\n\n  (match-id :div#top \"top\")\n\n  (match-node mock-data \"top\")\n  (match-node mock-data \"1\")\n  (match-node mock-data \"next-one\")\n  (match-node mock-data \"foo\")\n\n  (match-node mock-data* \"about-the-patient\")\n\n  (content)\n  (match-node (content) \"about-the-patient\")\n  (match-node content \"welcome\")\n  (match-node content \"why\")\n  (section \"welcome\")\n\n  (def clin-info (section content \"clinician-information\"))\n  (section clin-info \"oncotype\")\n\n  #_(match-id \":section#adjuvant-treatments.input-box\" \"adjuvant-treatments\")\n  #_(match-id \":section#treatments.input-box\" \"adjuvant-treatments\")\n\n  )"]}