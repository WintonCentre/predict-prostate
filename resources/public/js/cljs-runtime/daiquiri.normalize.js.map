{"version":3,"sources":["daiquiri/normalize.cljc"],"mappings":"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","names":["daiquiri.normalize/class-name","x","cljs.core/Keyword","cljs.core/name","daiquiri.normalize/map-lookup?","cljs.core/list?","cljs.core/first","daiquiri.normalize/normalize-class","class","cljs.core/Symbol","cljs.core.map","cljs.core/set?","cljs.core/sequential?","p1__40802#","cljs.core/every?","cljs.core.mapv","daiquiri.normalize/attributes","attrs","G__40805","cljs.core.update","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","daiquiri.normalize/merge-with-class","seq40807","self__4806__auto__","cljs.core/seq","maps","classes","cljs.core.mapcat","G__40810","cljs.core.reduce","cljs.core/into","cljs.core/empty?","cljs.core.assoc","cljs.core/vec","daiquiri.normalize/strip-css","s","clojure.string/replace","daiquiri.normalize/match-tag","vec__40814","cljs.core.nth","matches","cljs.core/re-seq","tag-name","names","cljs.core.ex_info","cljs.core/contains?","cljs.core/ffirst","cljs.core/rest","p1__40812#","cljs.core/some","cljs.core._EQ_","cljs.core.into","p1__40813#","cljs.core.keep","daiquiri.normalize/children","cljs.core/List","daiquiri.util/element?","cljs.core/count","G__40822","cljs.core.remove","cljs.core/nil?","daiquiri.normalize/attrs?","cljs.core/map?","p__40825","vec__40826","seq__40827","first__40828","cljs.core/next","daiquiri.normalize/element","tag","content","vec__40829","id","tag-attrs","G__40832","map-attrs","daiquiri.normalize.merge_with_class"],"sourcesContent":["(ns daiquiri.normalize\n  (:require [clojure.string :as str]\n            [daiquiri.util :as util]))\n\n(defn class-name\n  [x]\n  (cond\n    (string? x) x\n    (keyword? x) (name x)\n    :else x))\n\n(defn map-lookup?\n  \"Returns true if `x` is a map lookup form, otherwise false.\"\n  [x]\n  (and (list? x) (keyword? (first x))))\n\n(defn normalize-class\n  \"Normalize `class` into a vector of classes.\"\n  [class]\n  (cond\n    (nil? class)\n    nil\n\n    (map-lookup? class)\n    [class]\n\n    (list? class)\n    (if (symbol? (first class))\n      [class]\n      (map class-name class))\n\n    (symbol? class)\n    [class]\n\n    (string? class)\n    [class]\n\n    (keyword? class)\n    [(class-name class)]\n\n    (and (or (set? class)\n             (sequential? class))\n         (every? #(or (keyword? %)\n                      (string? %))\n                 class))\n    (mapv class-name class)\n\n    (and (or (set? class)\n             (sequential? class)))\n    (mapv class-name class)\n\n    :else class))\n\n(defn attributes\n  \"Normalize the `attrs` of an element.\"\n  [attrs]\n  (cond-> attrs\n    (:class attrs)\n    (update :class normalize-class)))\n\n(defn merge-with-class\n  \"Like clojure.core/merge but concatenate :class entries.\"\n  [& maps]\n  (let [maps (map attributes maps)\n        classes (mapcat :class maps)]\n    (when (seq maps)\n      (cond-> (reduce into {} maps)\n        (not (empty? classes))\n        (assoc :class (vec classes))))))\n\n(defn strip-css\n  \"Strip the # and . characters from the beginning of `s`.\"\n  [s]\n  (when s\n    (str/replace s #\"^[.#]\" \"\")))\n\n(defn match-tag\n  \"Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes.\"\n  [s]\n  (let [matches (re-seq #\"[#.]?[^#.]+\" (name s))\n        [tag-name names]\n        (cond (empty? matches)\n              (throw (ex-info (str \"Can't match CSS tag: \" s) {:tag s}))\n\n              (contains? #{\\# \\.} (ffirst matches))                   ;; shorthand for div\n              [\"div\" matches]\n\n              :default\n              [(first matches) (rest matches)])]\n    [tag-name\n     (strip-css (some #(when (= \\# (first %1)) %1) names))\n     (into []\n           (keep #(when (= \\. (first %)) (strip-css %)))\n           names)]))\n\n(defn children\n  \"Normalize the children of a HTML element.\"\n  [x]\n  (->> (cond\n         (nil? x)\n         '()\n         (string? x)\n         (list x)\n\n         (util/element? x)\n         (list x)\n         (and (list? x) (symbol? (first x)))\n         (list x)\n\n         (list? x)\n         x\n\n         (and (sequential? x)\n              (= (count x) 1)\n              (sequential? (first x))\n              (not (string? (first x)))\n              (not (util/element? (first x))))\n         (children (first x))\n\n         (sequential? x)\n         x\n\n         :else (list x))\n       (remove nil?)))\n\n(defn- attrs?\n  \"Returns true if `x` are the attributes of an HTML element,\n  otherwise false.\"\n  [x]\n  (map? x))\n\n(defn element\n  \"Ensure an element vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when-not (or (keyword? tag)\n                (symbol? tag)\n                (string? tag))\n    (throw (ex-info (str tag \" is not a valid element name.\") {:tag tag :content content})))\n  (let [[tag id class] (match-tag tag)\n        tag-attrs (cond-> {}\n                    (not (empty? id)) (assoc :id id)\n                    (not (empty? class)) (assoc :class class))\n        map-attrs (first content)]\n    (if (attrs? map-attrs)\n      [tag\n       (merge-with-class tag-attrs map-attrs)\n       (children (next content))]\n      [tag\n       (attributes tag-attrs)\n       (children content)])))\n"]}