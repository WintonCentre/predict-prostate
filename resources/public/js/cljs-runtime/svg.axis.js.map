{"version":3,"sources":["svg/axis.cljs"],"mappings":"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","names":["svg.axis/default-axis-color","cljs-css-modules.runtime/inject-style!","cljs.core.apply","garden.core/css","svg.axis/default-axis-style","rum.core/build-defc","p__48636","map__48637","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","vec__48651","cljs.core.nth","js/React.createElement","cljs.core.into_array","iter__4529__auto__","s__48662","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__48664","cljs.core/chunk-buffer","i__48663","cljs.core/-nth","cljs.core/chunk-append","sablono.interpreter/interpret","cljs.core/chunk-cons","cljs.core/chunk","iter__48661","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","svg.axis/axisBottom","scale","ticks","format-specifier","styles","svg.scales/->Identity","cljs.core.range","x1","x2","svg.scales/in","x","svg.scales/i->o","specifier","svg.scales/tick-format-specifier","tick","cljs.core.gensym","cljs.pprint.cl_format","p__48669","map__48670","vec__48673","s__48677","b__48679","i__48678","iter__48676","svg.axis/axisTop","p__48684","map__48685","vec__48689","s__48695","b__48697","i__48696","iter__48694","svg.axis/axisLeft","y1","y2","y","p__48704","map__48705","vec__48708","s__48715","b__48717","i__48716","iter__48714","svg.axis/axisRight","cljs.core/chunk-first"],"sourcesContent":["(ns svg.axis\n  (:require [rum.core :as rum]\n            [clojure.string :as s]\n            [cljs.pprint :refer [cl-format]]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [svg.scales :refer [->Identity ->Linear in out i->o o->i tick-format-specifier]]))\n\n(def default-axis-color \"#888\")\n\n(defstyle default-axis-style\n          [\".axis\" {:stroke-width \"0.15ex\"\n                    ;:shape-rendering \"crispEdges\"        ; may help sometimes\n                    :font-size    \"12pt\"}\n           [\"line\" {:stroke default-axis-color}]\n           [\".tick\"\n            [\"line\" {:stroke default-axis-color}]\n            [\"text\" {;:stroke \"none\"\n                     :fill default-axis-color}]]])\n\n(rum/defc axisBottom [{:keys [scale ticks format-specifier styles]\n                       :or   {scale  (->Identity [0 1] 10)\n                              ticks  (range 0 1 0.1)\n                              styles default-axis-style}}]\n  (let [[x1 x2] (in scale)\n        x (i->o scale)\n        specifier (if (nil? format-specifier) (tick-format-specifier scale) format-specifier)]\n    [:g {:key        \"axis-b\"\n         :class-name (:axis styles)}\n     [:line {:key \"X\"\n             :x1  (x x1)\n             :y1  0\n             :x2  (x x2)\n             :y2  0\n             }]\n\n     (for [tick ticks]\n       [:g {:key   (gensym \"K\")\n            :class \"tick\"}\n        [:line {:key 1\n                :x1  (x tick) :y1  0\n                :x2  (x tick) :y2  \"0.5ex\"}]\n        [:text {:key         2\n                :x           (x tick)\n                :dx          0\n                :dy          \"2.2ex\"\n                :text-anchor \"middle\"} (cl-format nil specifier tick)]])]))\n\n(rum/defc axisTop [{:keys [scale ticks format-specifier styles]\n                       :or   {scale  (->Identity [0 1] 10)\n                              ticks  (range 0 1 0.1)\n                              styles default-axis-style}}]\n  (let [[x1 x2] (in scale)\n        x (i->o scale)\n        specifier (if (nil? format-specifier) (tick-format-specifier scale) format-specifier)]\n    [:g {:key        \"axis-b\"\n         :class-name (:axis styles)}\n     [:line {:key \"X\"\n             :x1  (x x1)\n             :y1  0\n             :x2  (x x2)\n             :y2  0\n             }]\n\n     (for [tick ticks]\n       [:g {:key   (gensym \"K\")\n            :class \"tick\"}\n        [:line {:key 1\n                :x1  (x tick)\n                :y1  0\n                :x2  (x tick)\n                :y2  \"-0.5ex\"\n                }]\n        [:text {:key         2\n                :x           (x tick)\n                :dx          0\n                :dy          \"-1ex\"\n                :text-anchor \"middle\"} (cl-format nil specifier tick)]])]))\n\n(rum/defc axisLeft [{:keys [scale ticks format-specifier styles]\n                     :or   {scale  (->Identity [0 1] 10)\n                            ticks  (range 0 1 0.1)\n                            styles default-axis-style}}]\n  (let [[y1 y2] (in scale)\n        y (i->o scale)\n        specifier (if (nil? format-specifier) (tick-format-specifier scale) format-specifier)]\n    [:g {:key        \"axis-l\"\n         :class-name (:axis styles)}\n     [:line {:key \"Y\"\n             :x1  0\n             :y1  (y y1)\n             :x2  0\n             :y2  (y y2)}]\n\n     (for [tick ticks]\n       [:g {:key   (gensym \"K\")\n            :class \"tick\"}\n        [:text {:key         2\n                :x           0\n                :y           (y tick)\n                :dx          \"-0.7ex\"\n                :dy          \"0.5ex\"\n                :text-anchor \"end\"\n                } (cl-format nil specifier tick)]\n        [:line {:key 1\n                :x1  0\n                :y1  (y tick)\n                :x2  \"-0.5ex\"\n                :y2  (y tick)}]])]))\n\n(rum/defc axisRight [{:keys [scale ticks format-specifier styles]\n                      :or   {scale  (->Identity [0 1] 10)\n                             ticks  (range 0 1 0.1)\n                             styles default-axis-style}}]\n  (let [[y1 y2] (in scale)\n        y (i->o scale)\n        specifier (if (nil? format-specifier) (tick-format-specifier scale) format-specifier)]\n    [:g {:key        \"axis-l\"\n         :class-name (:axis styles)}\n     [:line {:key \"Y\"\n             :x1  0\n             :y1  (y y1)\n             :x2  0\n             :y2  (y y2)}]\n\n     (for [tick ticks]\n       [:g {:key   (gensym \"K\")\n            :class \"tick\"}\n        [:text {:key         2\n                :x           0\n                :y           (y tick)\n                :dx          \"0.7ex\"\n                :dy          \"0.5ex\"\n                :text-anchor \"start\"} (cl-format nil specifier tick)]\n        [:line {:key 1\n                :x1  0\n                :y1  (y tick)\n                :x2  \"0.5ex\"\n                :y2  (y tick)}]])]))\n"]}