{"version":3,"sources":["predict_prostate/components/primitives.cljs"],"mappings":"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","names":["predict-prostate.components.primitives/psz","predict-prostate.components.primitives/x-centre-off","predict-prostate.components.primitives/cx","predict-prostate.components.primitives/cy","predict-prostate.components.primitives/gap","predict-prostate.components.primitives/r","predict-prostate.components.primitives/xoff","predict-prostate.components.primitives/yoff","predict-prostate.components.primitives/left","x","predict-prostate.components.primitives/bottom","y","rum.core/build-defc","p__34844","map__34845","cljs.core/--destructure-map","cljs.core.get","js/React.createElement","predict-prostate.components.primitives/pic","fill","p__34849","map__34850","predict-prostate.components.primitives/pic-dead","predict-prostate.components.primitives/dead-icon","predict-prostate.components.primitives/open-icon","predict-prostate.components.primitives/circ*","opacity","stroke","r","cx","sablono.interpreter/interpret","predict-prostate.components.primitives/circ","predict-prostate.components.primitives/tally*","w","predict-prostate.components.primitives/tally","predict-prostate.components.primitives/twidth","predict-prostate.components.primitives/tspace","p__34857","map__34858","predict-prostate.components.primitives/blob","key","tally?","G__34865","G__34866","G__34867","G__34868","cljs.core._EQ_","p__34870","map__34871","predict-prostate.components.primitives/blob-10","p1__34869#","cljs.core.map","rum.core/with-key","G__34875","G__34876","G__34877","G__34878","G__34879","G__34880","G__34881","cljs.core.range","p__34894","map__34895","predict-prostate.components.primitives/mixed-10","p1__34883#","G__34899","G__34900","G__34901","G__34902","G__34903","G__34904","G__34905","G__34906","p1__34886#","G__34910","G__34911","G__34912","G__34913","G__34914","G__34915","G__34916","G__34917","p1__34889#","G__34920","G__34921","G__34922","G__34923","G__34924","G__34925","G__34926"],"sourcesContent":["(ns predict-prostate.components.primitives\n  (:require [rum.core :as rum]\n            [graphics.simple-icons :refer [icon]]\n            ))\n\n; These parameters size and position the round blob icons\n(def psz 24)                                                ; 20 originally\n(def x-centre-off (dec (int (/ psz 2))))                    ; 9 originally\n(def cx (/ psz 2))                                          ; 10\n(def cy (inc cx))                                           ; 11\n(def gap 2)                                                 ; 2\n(def r (- cx gap))                                          ; 8\n(def xoff 15)                                               ; 15 originally\n(def yoff (dec (* 10 (+ 3 psz))))                           ; 219 originally\n\n(defn left [x] (str (+ (* psz (- x-centre-off x 2)) xoff) \"px\"))\n(defn bottom [y] (str (+ (* psz y) (- yoff)) \"px\"))\n\n\n(rum/defc pic [{:keys [fill x y]}]\n  [:div {:style {:fontSize psz\n                 :display  \"inline-block\"\n                 :position \"absolute\"\n                 :left     (left x)\n                 :bottom   (bottom y)\n                 }}\n   ;(println \"pic fill\" fill \"x\" x \"y\" y)\n   [:svg {:width psz :height psz}\n    [:circle {:cx cx :cy cy :r r :fill fill :stroke fill :stroke-width 2.5}]]])\n\n(rum/defc pic-dead [{:keys [fill x y]}]\n  ;(println \"pic-dead fill\" fill \"x\" x \"y\" y)\n  [:div {:style {:fontSize psz\n                 :display  \"inline-block\"\n                 :position \"absolute\"\n                 :left     (left x)\n                 :bottom   (bottom y)}}\n\n   [:svg {:width psz :height psz}\n    [:circle {:cx cx :cy cy :r r :fill \"none\" :stroke fill :stroke-width 2.5}]]])\n\n(rum/defc dead-icon [fill]\n  [:svg {:width psz :height psz :style {:margin-bottom -5}}\n   [:circle {:cx cx :cy cy :r r :fill fill :stroke \"none\"}]])\n\n(rum/defc open-icon [fill]\n  [:svg {:width psz :height psz :style {:margin-bottom -5}}\n   [:circle {:cx cx :cy cy :r r :stroke-width 2.5 :stroke fill :fill \"none\"}]])\n\n(rum/defc circ*\n  [fill opacity stroke r cx]\n  [:circle {:cx (+ cx r) :cy r :r r :fill fill :opacity opacity :stroke stroke :stroke-width 1}])\n\n(rum/defc circ\n  [fill stroke r cx]\n  (circ* fill 1 stroke r cx))\n\n(rum/defc tally*\n  [fill opacity w x]\n  [:rect {:fill fill :opacity opacity :x x :y 0 :height 20 :width w}])\n\n(rum/defc tally\n  [fill w x]\n  (tally* fill 1 w x)\n  )\n\n(def twidth 3)\n(def tspace 4)\n\n(rum/defc blob [{:keys [key fill r tally?]}]\n  [:svg {:key key :width (* 2 r) :height (* 2 r)}\n   (if tally?\n     (tally fill 1 0)\n     (circ fill (if (= fill \"white\") \"#BBBBBB\" \"none\") r 0))])\n\n\n(rum/defc blob-10 [{:keys [fill r tally?]}]\n  [:svg {:width (* 11 (if tally? tspace (* 2 r))) :height (if tally? 15 (* 2 r))}\n   (map #(rum/with-key (if tally? (tally fill\n                                         twidth\n                                         (* tspace %))\n                                  (circ fill\n                                        (if (= fill \"white\") \"#BBBBBB\" \"none\")\n                                        r\n                                        (* 2 r %))) (str \"b10-\" %))\n        (range 10))])\n\n(rum/defc mixed-10\n  [{:keys [fill r x tally?]}]\n  [:svg {:key \"m10\" :width (* 11 (if tally? tspace (* 2 r))) :height (if tally? 15 (* 2 r))}\n   (map #(rum/with-key (if tally?\n                         (tally fill\n                                twidth\n                                (* tspace %))\n                         (circ* fill\n                                1\n                                \"none\"\n                                r\n                                (* 2 r %))) (str \"m10+\" %))\n        (range (dec x)))\n   (map #(rum/with-key (if tally?\n                         (tally fill\n                                twidth\n                                (* tspace %))\n                         (circ* fill\n                                1\n                                \"none\"\n                                r\n                                (* 2 r %))) (str \"m10+\" %))\n        [(dec x)])\n\n   (map #(rum/with-key (if tally?\n                         (tally \"#BBBBBB\"\n                                twidth\n                                (* tspace (+ x %)))\n                         (circ \"white\"\n                               \"#BBBBBB\"\n                               r\n                               (* 2 r (+ x %)))) (str \"m10-\" %))\n        (range (- 10 x)))\n   ])\n"]}