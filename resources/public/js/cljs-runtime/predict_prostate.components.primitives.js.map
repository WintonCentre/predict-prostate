{"version":3,"sources":["predict_prostate/components/primitives.cljs"],"mappings":"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","names":["predict-prostate.components.primitives/psz","predict-prostate.components.primitives/x-centre-off","predict-prostate.components.primitives/cx","predict-prostate.components.primitives/cy","predict-prostate.components.primitives/gap","predict-prostate.components.primitives/r","predict-prostate.components.primitives/xoff","predict-prostate.components.primitives/yoff","predict-prostate.components.primitives/left","x","predict-prostate.components.primitives/bottom","y","rum.core/build-defc","p__48321","map__48322","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","predict-prostate.components.primitives/pic","fill","p__48330","map__48331","predict-prostate.components.primitives/pic-dead","predict-prostate.components.primitives/dead-icon","predict-prostate.components.primitives/open-icon","predict-prostate.components.primitives/circ*","opacity","stroke","r","cx","sablono.interpreter/interpret","predict-prostate.components.primitives/circ","predict-prostate.components.primitives/tally*","w","predict-prostate.components.primitives/tally","predict-prostate.components.primitives/twidth","predict-prostate.components.primitives/tspace","p__48339","map__48340","predict-prostate.components.primitives/blob","key","tally?","G__48343","G__48344","G__48345","G__48346","cljs.core._EQ_","p__48353","map__48354","predict-prostate.components.primitives/blob-10","p1__48347#","cljs.core.map","rum.core/with-key","G__48356","G__48357","G__48358","G__48359","G__48360","G__48361","G__48362","cljs.core.range","p__48366","map__48367","predict-prostate.components.primitives/mixed-10","p1__48363#","G__48369","G__48370","G__48371","G__48372","G__48373","G__48374","G__48375","G__48376","p1__48364#","G__48377","G__48378","G__48379","G__48380","G__48381","G__48382","G__48383","G__48384","p1__48365#","G__48385","G__48386","G__48387","G__48388","G__48389","G__48390","G__48391"],"sourcesContent":["(ns predict-prostate.components.primitives\n  (:require [rum.core :as rum]\n            [graphics.simple-icons :refer [icon]]\n            ))\n\n; These parameters size and position the round blob icons\n(def psz 24)                                                ; 20 originally\n(def x-centre-off (dec (int (/ psz 2))))                    ; 9 originally\n(def cx (/ psz 2))                                          ; 10\n(def cy (inc cx))                                           ; 11\n(def gap 2)                                                 ; 2\n(def r (- cx gap))                                          ; 8\n(def xoff 15)                                               ; 15 originally\n(def yoff (dec (* 10 (+ 3 psz))))                           ; 219 originally\n\n(defn left [x] (str (+ (* psz (- x-centre-off x 2)) xoff) \"px\"))\n(defn bottom [y] (str (+ (* psz y) (- yoff)) \"px\"))\n\n\n(rum/defc pic [{:keys [fill x y]}]\n  [:div {:style {:fontSize psz\n                 :display  \"inline-block\"\n                 :position \"absolute\"\n                 :left     (left x)\n                 :bottom   (bottom y)\n                 }}\n   ;(println \"pic fill\" fill \"x\" x \"y\" y)\n   [:svg {:width psz :height psz}\n    [:circle {:cx cx :cy cy :r r :fill fill :stroke fill :stroke-width 2.5}]]])\n\n(rum/defc pic-dead [{:keys [fill x y]}]\n  ;(println \"pic-dead fill\" fill \"x\" x \"y\" y)\n  [:div {:style {:fontSize psz\n                 :display  \"inline-block\"\n                 :position \"absolute\"\n                 :left     (left x)\n                 :bottom   (bottom y)}}\n\n   [:svg {:width psz :height psz}\n    [:circle {:cx cx :cy cy :r r :fill \"none\" :stroke fill :stroke-width 2.5}]]])\n\n(rum/defc dead-icon [fill]\n  [:svg {:width psz :height psz :style {:margin-bottom -5}}\n   [:circle {:cx cx :cy cy :r r :fill fill :stroke \"none\"}]])\n\n(rum/defc open-icon [fill]\n  [:svg {:width psz :height psz :style {:margin-bottom -5}}\n   [:circle {:cx cx :cy cy :r r :stroke-width 2.5 :stroke fill :fill \"none\"}]])\n\n(rum/defc circ*\n  [fill opacity stroke r cx]\n  [:circle {:cx (+ cx r) :cy r :r r :fill fill :opacity opacity :stroke stroke :stroke-width 1}])\n\n(rum/defc circ\n  [fill stroke r cx]\n  (circ* fill 1 stroke r cx))\n\n(rum/defc tally*\n  [fill opacity w x]\n  [:rect {:fill fill :opacity opacity :x x :y 0 :height 20 :width w}])\n\n(rum/defc tally\n  [fill w x]\n  (tally* fill 1 w x)\n  )\n\n(def twidth 3)\n(def tspace 4)\n\n(rum/defc blob [{:keys [key fill r tally?]}]\n  [:svg {:key key :width (* 2 r) :height (* 2 r)}\n   (if tally?\n     (tally fill 1 0)\n     (circ fill (if (= fill \"white\") \"#BBBBBB\" \"none\") r 0))])\n\n\n(rum/defc blob-10 [{:keys [fill r tally?]}]\n  [:svg {:width (* 11 (if tally? tspace (* 2 r))) :height (if tally? 15 (* 2 r))}\n   (map #(rum/with-key (if tally? (tally fill\n                                         twidth\n                                         (* tspace %))\n                                  (circ fill\n                                        (if (= fill \"white\") \"#BBBBBB\" \"none\")\n                                        r\n                                        (* 2 r %))) (str \"b10-\" %))\n        (range 10))])\n\n(rum/defc mixed-10\n  [{:keys [fill r x tally?]}]\n  [:svg {:key \"m10\" :width (* 11 (if tally? tspace (* 2 r))) :height (if tally? 15 (* 2 r))}\n   (map #(rum/with-key (if tally?\n                         (tally fill\n                                twidth\n                                (* tspace %))\n                         (circ* fill\n                                1\n                                \"none\"\n                                r\n                                (* 2 r %))) (str \"m10+\" %))\n        (range (dec x)))\n   (map #(rum/with-key (if tally?\n                         (tally fill\n                                twidth\n                                (* tspace %))\n                         (circ* fill\n                                1\n                                \"none\"\n                                r\n                                (* 2 r %))) (str \"m10+\" %))\n        [(dec x)])\n\n   (map #(rum/with-key (if tally?\n                         (tally \"#BBBBBB\"\n                                twidth\n                                (* tspace (+ x %)))\n                         (circ \"white\"\n                               \"#BBBBBB\"\n                               r\n                               (* 2 r (+ x %)))) (str \"m10-\" %))\n        (range (- 10 x)))\n   ])\n"]}