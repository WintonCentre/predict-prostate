{"version":3,"sources":["translations/tranny_api.cljs"],"mappings":"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","names":["translations.tranny-api/server-url","translations.tranny-api/base-url","translations.tranny-api/get-handler","response","clj-rsp","cljs.core.js__GT_clj","hit-count","cljs.core/count","result","pred__44276","expr__44277","cljs.core/=","cljs.core.println","cljs.core.get","cljs.core/first","p1__44275#","cljs.core.map","translations.tranny-api/ta","cljs.core.atom","translations.tranny-api/post-handler","p__44280","map__44281","cljs.core/--destructure-map","translations.tranny-api/error-handler","status","status-text","js/console","var_args","G__44293","translations.tranny-api/lookup-key","js/Error","p__44297","map__44298","key","translations.tranny_api.lookup_key","url","handler","error-handler","ajax.core.GET","translations.tranny-api/lookup-key-lang","lang","cljs.core/name","translations.tranny-api/wordkey","ns-key","cljs.core/namespace","G__44302","translations.tranny-api/upload-translation","text","translations.tranny_api.upload_translation","ajax.core.POST","translations.tranny-api/end-point","rel-url","G__44304","translations.tranny-api/delete-translation","translations.tranny_api.delete_translation","translations.tranny-api/json-kvs->m","kvs","p__44308","vec__44310","cljs.core.nth","s","v","cljs.core.keyword","clojure.string/replace","cljs.core.into","translations.tranny-api/parse-downloaded-op","download","cljs.core/vector?","vec__44313","op","translations","d","cljs.core._EQ_","pred__44318","expr__44319","vec__44323","seq__44324","cljs.core/seq","first__44325","cljs.core/next","_","msgs","translations.tranny-api/parse-error","er-m","msg","cljs.core.get_in","cljs.core.dissoc","cljs.core.assoc","G__44336","translations.tranny-api/download-lang-translations","ok-chan","err-chan","p1__44330#","p1__44331#","cljs.core.async.put_BANG_","c__35744__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__35745__auto__","switch__35549__auto__","state_44365","state_val_44366","inst_44348","cljs.core/PersistentVector","inst_44349","inst_44350","cljs.core.async/ioc-alts!","inst_44352","inst_44353","inst_44354","inst_44355","statearr-44367","statearr-44368","statearr-44369","inst_44357","inst_44358","statearr-44370","inst_44360","inst_44361","statearr-44371","inst_44363","cljs.core.async.impl.ioc-helpers/return-chan","statearr-44372","state-machine__35550__auto__","ret-value__35551__auto__","result__35552__auto__","cljs.core/keyword-identical?","ex__35553__auto__","e44373","statearr-44374","statearr-44375","state__35746__auto__","statearr-44377","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","clojure.walk/keywordize-keys","translations.tranny_api.download_lang_translations","G__44392","translations.tranny-api/download-all-translations","p1__44378#","p1__44379#","state_44417","state_val_44418","inst_44396","inst_44397","inst_44398","inst_44400","inst_44401","inst_44402","inst_44403","statearr-44419","statearr-44420","statearr-44421","inst_44405","statearr-44422","statearr-44423","inst_44412","inst_44413","statearr-44424","inst_44415","inst_44407","statearr-44425","statearr-44426","inst_44410","statearr-44427","statearr-44428","e44429","statearr-44430","statearr-44431","statearr-44432","cljs.core.mapv","translations.tranny_api.download_all_translations"],"sourcesContent":["(ns translations.tranny-api\n  (:require [ajax.core :refer [GET POST]]\n            [cljs.core.async :refer [chan <! put! alts!]]\n            [clojure.string :as str]\n            [clojure.walk :refer [keywordize-keys]])\n  (:require-macros [cljs.core.async :refer [go]]))\n\n; For remote editing\n;(def server-url \"http://localhost:1337/\")\n(def server-url \"https://api-prostate.wintoncentre.uk/\")                     ;breast -> prostate? or same server?\n\n; For local testing\n(def base-url (str server-url \"api/\"))\n\n(defn get-handler [response]\n  ;(println response)\n  (let [clj-rsp (js->clj response :keywordize-keys true)\n        hit-count (count clj-rsp)\n        result (condp = hit-count\n                 0 (println \"No results\")\n                 1 (get (first clj-rsp) \"text\")\n                 (map #(get % \"text\") clj-rsp))]\n    ;(println result)\n    result))\n\n(def ta (atom nil))\n\n(defn post-handler [response]\n  (println \"successful response\" response)\n  ;(println (get (js->clj response :keywordize-keys true) \"body\"))\n  )\n\n\n(defn error-handler [{:keys [status status-text response]}]\n  (.log js/console (str \"something bad happened: \" status \" \" status-text))\n  (when response (.log js/console (get response \"message\"))))\n\n\n(defn lookup-key\n  \"lookup key in tranny server. 3-arity variant for testing.\"\n  ([key]\n   (lookup-key (str base-url \"key/\" key) {:handler get-handler :error-handler error-handler}))\n  ([url {:keys [handler error-handler]}]\n   (GET url {:handler handler :error-handler error-handler :mode \"no-cors\"})))\n\n(defn lookup-key-lang\n  \"lookup language and key in tranny server\"\n  [key lang]\n  (GET (str base-url \"key/\" (name key) \"/lang/\" (name lang))\n    {:handler       get-handler\n     :error-handler error-handler}))\n\n(defn wordkey\n  \"generates a string representation of a namespaced keyword.\n  :foo/bar -> \\\":foo/bar\\\"\n  :bar -> \\\"bar\\\"\n  The inverse function to 'keyword'.\"\n  [key]\n  (let [ns-key (namespace key)]\n    (str (if ns-key (str ns-key \"/\") nil) (name key))))\n\n\n\n(comment\n  (wordkey :foo/bar)\n  (js/console.log (lookup-key :results/display-title-percentage))\n  (lookup-key-lang (wordkey :results/display-title-percentage) \"sc\"))\n\n\n(defn upload-translation\n  \"Update a key for a language with new text\"\n  ([key lang text]\n   (let [url (str base-url \"translation\")]\n     (upload-translation url key lang text)))\n  ([url key lang text]\n   (POST url {:handler post-handler :error-handler error-handler :params {:key (wordkey key) :lang (str lang) :text (str text)} :format :json})))\n\n(defn end-point\n  \"Convert a relative endpoint url into an absolute address\"\n  [rel-url]\n  (str base-url rel-url))\n\n(defn delete-translation\n  \"Update a key for a language with new text\"\n  ([key lang]\n   (let [url (end-point \"delete\")]\n     (delete-translation url key lang)))\n  ([url key lang]\n   (POST url {:handler post-handler :error-handler error-handler :params {:key (wordkey key) :lang (str lang)} :format :json})))\n\n(defn json-kvs->m\n  \"Convert a seq of json key-value pairs to a clojure map, replacing # with / to regain namespace.\n  This assumes the json generator replaced / namespace separators with \\\\#.\n  It's necessary to substitute '/' in namespaced keywords as data.json lib throws away namespaces - which we are using\n  to help identify the page where the translation appears.\"\n  [kvs]\n  (->> kvs\n       (map (fn [[s v]] [(keyword (str/replace s #\"#\" \"/\")) v]))\n       (into {})))\n\n(defn parse-downloaded-op\n  \"Validate a download containing an upsert or switch operation.\n  If the op is a valid upsert, return the :upsert with decoded params\n  If the op is a valid switch, return the :switch with decoded params\"\n  [download]\n  (when (vector? download)\n    (let [[op lang translations :as d] download]\n      (when (= 2 (count lang))\n        (condp = op\n          \"upsert\" [:upsert (keyword lang) (json-kvs->m translations)]\n          \"switch\" [:switch (keyword lang)]\n          \"error\" (let [[_ & msgs] d] [:error msgs])\n          nil)))))\n\n(defn parse-error\n  \"Parse a server error into something tidier. Expects a map with :status, :status-text and [:response :message]\"\n  [er-m]\n  (let [msg (get-in er-m [:response :message])]\n    (-> er-m\n        (dissoc :response)\n        (dissoc :failure)\n        (assoc :message msg))))\n\n(defn download-lang-translations\n  \"Given bufferless ok-chan and err-chan, will POST a download request to endpoint api/upserts in 3 arity version or to\n  given url in 4 arity version. Downloads just the dictionary for the given language.\n  The go block waits for a response on either channel, and returns a channel containing the parsed response.\n\n  Intended for a single language. NOT IN USE YET.\"\n  ([ok-chan err-chan lang url]\n   (POST url {:handler #(put! ok-chan %) :error-handler #(put! err-chan %) :params {:lang lang} :format :json})\n   (go\n     (let [[response port] (alts! [ok-chan err-chan])]\n       (if (= port ok-chan)\n         (parse-downloaded-op (get response \"body\"))\n         (parse-error (keywordize-keys response))))))\n  ([ok-chan err-chan lang]\n   (download-lang-translations ok-chan err-chan lang (end-point \"upserts\"))))\n\n\n(defn download-all-translations\n  \"Given bufferless ok-chan and err-chan, will POST a download-all-translations request to endpoint upserts-all in\n  2-arity or given url in 3 arity version.\n  The go block waits for a response on either chan, and returns a chan containing the parsed response.\"\n  ([ok-chan err-chan url]\n   (POST url {:handler #(put! ok-chan %) :error-handler #(put! err-chan %) :format :json})\n   (go\n     (let [[response port] (alts! [ok-chan err-chan])]\n       (if (= port ok-chan)\n         (when (vector? response)\n           (mapv parse-downloaded-op response))\n         (parse-error (keywordize-keys response))))))\n  ([ok-chan err-chan]\n   (download-all-translations ok-chan err-chan (end-point \"upserts/all\"))))\n\n\n(comment\n\n  (def success-chan (chan 0))\n  (def error-chan (chan 0))\n\n  ; Start the tranny server before testing these.\n  (go\n    (println \"get single languages\" (<! (download-lang-translations success-chan error-chan \"en\"))))\n\n  (go\n    (println \"get all languages!\" (<! (download-all-translations success-chan error-chan))))\n\n  (upload-translation :home/what-is-predict \"de\" \"Was istttt Predict?\")\n  (upload-translation :foo \"de\" \"Foo\")\n  (delete-translation :foo \"de\")\n\n  (lookup-key \"foo\")\n  (lookup-key \"hello\")\n  (lookup-key-lang \"hello\" \"fr\")\n  ;(update-key-lang \"hello\" \"de\" \"Gooey\")\n  ;(update-key-lang \"hello\" \"de\" \"Hallo\")\n  ;(update-key-lang \"hello\" \"ar\" \"\u0645\u0631\u062d\u0628\u0627\")\n  ;(update-key-lang :home/the-answer \"en\" \"42\")\n  ;(update-key-lang :home/what-is-predict \"de\" \"Was istttt Predict?\")\n\n  (str (namespace :home/what-is-predict) \"/\" (name :home/what-is-predict))\n  ;=> \"home/what-is-predict\"\n\n  (keyword (str (namespace :home/what-is-predict) \"/\" (name :home/what-is-predict)))\n  ;=> :home/what-is-predict\n\n  (wordkey :foo)\n  ;=> \"foo\"\n\n  (wordkey :foo/bar)\n  ;=> \"foo/bar\n\n  (keyword \"foo\")\n  ;=> :foo\n\n  (keyword \"foo/bar\")\n  :foo/bar)\n\n\n; coast should execute:\n;(coast/q '[:select * :from translation :where [:key ?key] [:lang ?lang]] {:key \"hello\" :lang \"fr\"})\n\n\n"]}