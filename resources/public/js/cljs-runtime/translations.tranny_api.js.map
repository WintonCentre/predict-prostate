{"version":3,"sources":["translations/tranny_api.cljs"],"mappings":"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","names":["translations.tranny-api/server-url","translations.tranny-api/base-url","translations.tranny-api/get-handler","response","clj-rsp","cljs.core.js__GT_clj","hit-count","cljs.core/count","result","pred__164554","expr__164556","cljs.core/=","cljs.core.println","cljs.core.get","cljs.core/first","p1__164552#","cljs.core.map","translations.tranny-api/ta","cljs.core.atom","translations.tranny-api/post-handler","p__164559","map__164561","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","translations.tranny-api/error-handler","status","status-text","js/console","var_args","G__164568","translations.tranny-api/lookup-key","js/Error","p__164570","map__164571","key","translations.tranny_api.lookup_key","url","handler","error-handler","ajax.core.GET","translations.tranny-api/lookup-key-lang","lang","cljs.core/name","translations.tranny-api/wordkey","ns-key","cljs.core/namespace","G__164584","translations.tranny-api/upload-translation","text","translations.tranny_api.upload_translation","ajax.core.POST","translations.tranny-api/end-point","rel-url","G__164599","translations.tranny-api/delete-translation","translations.tranny_api.delete_translation","translations.tranny-api/json-kvs->m","kvs","p__164600","vec__164601","cljs.core.nth","s","v","cljs.core.keyword","clojure.string/replace","cljs.core.into","translations.tranny-api/parse-downloaded-op","download","cljs.core/vector?","vec__164604","op","translations","d","cljs.core._EQ_","pred__164607","expr__164608","vec__164610","seq__164611","cljs.core/seq","first__164612","cljs.core/next","_","msgs","translations.tranny-api/parse-error","er-m","msg","cljs.core.get_in","cljs.core.dissoc","cljs.core.assoc","G__164616","translations.tranny-api/download-lang-translations","ok-chan","err-chan","p1__164613#","p1__164614#","cljs.core.async.put_BANG_","c__29733__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__29734__auto__","switch__29648__auto__","state_164658","state_val_164660","inst_164623","cljs.core/PersistentVector","inst_164626","inst_164628","cljs.core.async/ioc-alts!","inst_164632","inst_164634","inst_164636","inst_164637","statearr-164661","statearr-164664","statearr-164665","inst_164641","inst_164642","statearr-164667","inst_164647","inst_164648","statearr-164670","inst_164653","cljs.core.async.impl.ioc-helpers/return-chan","statearr-164672","state-machine__29649__auto__","ret-value__29650__auto__","result__29651__auto__","cljs.core/keyword-identical?","ex__29652__auto__","e164673","statearr-164675","statearr-164677","state__29735__auto__","statearr-164680","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","clojure.walk/keywordize-keys","translations.tranny_api.download_lang_translations","G__164686","translations.tranny-api/download-all-translations","p1__164681#","p1__164682#","state_164738","state_val_164740","inst_164695","inst_164698","inst_164700","inst_164704","inst_164706","inst_164708","inst_164710","statearr-164742","statearr-164744","statearr-164746","inst_164714","statearr-164748","statearr-164750","inst_164732","inst_164733","statearr-164752","inst_164735","inst_164718","statearr-164753","statearr-164755","inst_164725","statearr-164757","statearr-164759","e164761","statearr-164763","statearr-164765","statearr-164773","cljs.core.mapv","translations.tranny_api.download_all_translations"],"sourcesContent":["(ns translations.tranny-api\n  (:require [ajax.core :refer [GET POST]]\n            [cljs.core.async :refer [chan <! put! alts!]]\n            [clojure.string :as str]\n            [clojure.walk :refer [keywordize-keys]])\n  (:require-macros [cljs.core.async :refer [go]]))\n\n; For remote editing\n;(def server-url \"http://localhost:1337/\")\n(def server-url \"https://api-prostate.wintoncentre.uk/\")                     ;breast -> prostate? or same server?\n\n; For local testing\n(def base-url (str server-url \"api/\"))\n\n(defn get-handler [response]\n  ;(println response)\n  (let [clj-rsp (js->clj response :keywordize-keys true)\n        hit-count (count clj-rsp)\n        result (condp = hit-count\n                 0 (println \"No results\")\n                 1 (get (first clj-rsp) \"text\")\n                 (map #(get % \"text\") clj-rsp))]\n    ;(println result)\n    result))\n\n(def ta (atom nil))\n\n(defn post-handler [response]\n  (println \"successful response\" response)\n  ;(println (get (js->clj response :keywordize-keys true) \"body\"))\n  )\n\n\n(defn error-handler [{:keys [status status-text response]}]\n  (.log js/console (str \"something bad happened: \" status \" \" status-text))\n  (when response (.log js/console (get response \"message\"))))\n\n\n(defn lookup-key\n  \"lookup key in tranny server. 3-arity variant for testing.\"\n  ([key]\n   (lookup-key (str base-url \"key/\" key) {:handler get-handler :error-handler error-handler}))\n  ([url {:keys [handler error-handler]}]\n   (GET url {:handler handler :error-handler error-handler :mode \"no-cors\"})))\n\n(defn lookup-key-lang\n  \"lookup language and key in tranny server\"\n  [key lang]\n  (GET (str base-url \"key/\" (name key) \"/lang/\" (name lang))\n    {:handler       get-handler\n     :error-handler error-handler}))\n\n(defn wordkey\n  \"generates a string representation of a namespaced keyword.\n  :foo/bar -> \\\":foo/bar\\\"\n  :bar -> \\\"bar\\\"\n  The inverse function to 'keyword'.\"\n  [key]\n  (let [ns-key (namespace key)]\n    (str (if ns-key (str ns-key \"/\") nil) (name key))))\n\n\n\n(comment\n  (wordkey :foo/bar)\n  (js/console.log (lookup-key :results/display-title-percentage))\n  (lookup-key-lang (wordkey :results/display-title-percentage) \"sc\"))\n\n\n(defn upload-translation\n  \"Update a key for a language with new text\"\n  ([key lang text]\n   (let [url (str base-url \"translation\")]\n     (upload-translation url key lang text)))\n  ([url key lang text]\n   (POST url {:handler post-handler :error-handler error-handler :params {:key (wordkey key) :lang (str lang) :text (str text)} :format :json})))\n\n(defn end-point\n  \"Convert a relative endpoint url into an absolute address\"\n  [rel-url]\n  (str base-url rel-url))\n\n(defn delete-translation\n  \"Update a key for a language with new text\"\n  ([key lang]\n   (let [url (end-point \"delete\")]\n     (delete-translation url key lang)))\n  ([url key lang]\n   (POST url {:handler post-handler :error-handler error-handler :params {:key (wordkey key) :lang (str lang)} :format :json})))\n\n(defn json-kvs->m\n  \"Convert a seq of json key-value pairs to a clojure map, replacing # with / to regain namespace.\n  This assumes the json generator replaced / namespace separators with \\\\#.\n  It's necessary to substitute '/' in namespaced keywords as data.json lib throws away namespaces - which we are using\n  to help identify the page where the translation appears.\"\n  [kvs]\n  (->> kvs\n       (map (fn [[s v]] [(keyword (str/replace s #\"#\" \"/\")) v]))\n       (into {})))\n\n(defn parse-downloaded-op\n  \"Validate a download containing an upsert or switch operation.\n  If the op is a valid upsert, return the :upsert with decoded params\n  If the op is a valid switch, return the :switch with decoded params\"\n  [download]\n  (when (vector? download)\n    (let [[op lang translations :as d] download]\n      (when (= 2 (count lang))\n        (condp = op\n          \"upsert\" [:upsert (keyword lang) (json-kvs->m translations)]\n          \"switch\" [:switch (keyword lang)]\n          \"error\" (let [[_ & msgs] d] [:error msgs])\n          nil)))))\n\n(defn parse-error\n  \"Parse a server error into something tidier. Expects a map with :status, :status-text and [:response :message]\"\n  [er-m]\n  (let [msg (get-in er-m [:response :message])]\n    (-> er-m\n        (dissoc :response)\n        (dissoc :failure)\n        (assoc :message msg))))\n\n(defn download-lang-translations\n  \"Given bufferless ok-chan and err-chan, will POST a download request to endpoint api/upserts in 3 arity version or to\n  given url in 4 arity version. Downloads just the dictionary for the given language.\n  The go block waits for a response on either channel, and returns a channel containing the parsed response.\n\n  Intended for a single language. NOT IN USE YET.\"\n  ([ok-chan err-chan lang url]\n   (POST url {:handler #(put! ok-chan %) :error-handler #(put! err-chan %) :params {:lang lang} :format :json})\n   (go\n     (let [[response port] (alts! [ok-chan err-chan])]\n       (if (= port ok-chan)\n         (parse-downloaded-op (get response \"body\"))\n         (parse-error (keywordize-keys response))))))\n  ([ok-chan err-chan lang]\n   (download-lang-translations ok-chan err-chan lang (end-point \"upserts\"))))\n\n\n(defn download-all-translations\n  \"Given bufferless ok-chan and err-chan, will POST a download-all-translations request to endpoint upserts-all in\n  2-arity or given url in 3 arity version.\n  The go block waits for a response on either chan, and returns a chan containing the parsed response.\"\n  ([ok-chan err-chan url]\n   (POST url {:handler #(put! ok-chan %) :error-handler #(put! err-chan %) :format :json})\n   (go\n     (let [[response port] (alts! [ok-chan err-chan])]\n       (if (= port ok-chan)\n         (when (vector? response)\n           (mapv parse-downloaded-op response))\n         (parse-error (keywordize-keys response))))))\n  ([ok-chan err-chan]\n   (download-all-translations ok-chan err-chan (end-point \"upserts/all\"))))\n\n\n(comment\n\n  (def success-chan (chan 0))\n  (def error-chan (chan 0))\n\n  ; Start the tranny server before testing these.\n  (go\n    (println \"get single languages\" (<! (download-lang-translations success-chan error-chan \"en\"))))\n\n  (go\n    (println \"get all languages!\" (<! (download-all-translations success-chan error-chan))))\n\n  (upload-translation :home/what-is-predict \"de\" \"Was istttt Predict?\")\n  (upload-translation :foo \"de\" \"Foo\")\n  (delete-translation :foo \"de\")\n\n  (lookup-key \"foo\")\n  (lookup-key \"hello\")\n  (lookup-key-lang \"hello\" \"fr\")\n  ;(update-key-lang \"hello\" \"de\" \"Gooey\")\n  ;(update-key-lang \"hello\" \"de\" \"Hallo\")\n  ;(update-key-lang \"hello\" \"ar\" \"\u0645\u0631\u062d\u0628\u0627\")\n  ;(update-key-lang :home/the-answer \"en\" \"42\")\n  ;(update-key-lang :home/what-is-predict \"de\" \"Was istttt Predict?\")\n\n  (str (namespace :home/what-is-predict) \"/\" (name :home/what-is-predict))\n  ;=> \"home/what-is-predict\"\n\n  (keyword (str (namespace :home/what-is-predict) \"/\" (name :home/what-is-predict)))\n  ;=> :home/what-is-predict\n\n  (wordkey :foo)\n  ;=> \"foo\"\n\n  (wordkey :foo/bar)\n  ;=> \"foo/bar\n\n  (keyword \"foo\")\n  ;=> :foo\n\n  (keyword \"foo/bar\")\n  :foo/bar)\n\n\n; coast should execute:\n;(coast/q '[:select * :from translation :where [:key ?key] [:lang ?lang]] {:key \"hello\" :lang \"fr\"})\n\n\n"]}