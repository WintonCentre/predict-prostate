{"version":3,"sources":["predict_prostate/layout/result_panel.cljs"],"mappings":"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","names":["predict-prostate.layout.result-panel/tab-label-key","label-key","label","cljs.core/name","cljs.core.keyword","clojure.string/capitalize","var_args","G__184345","predict-prostate.layout.result-panel/safe-check","js/Error","kn1","kn2","predict_prostate.layout.result_panel.safe_check","f","cljs.core._EQ_","rum.core/build-defc","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","predict-prostate.layout.result-panel/result-tab-button","rum.core/reactive","ttt","rum.core/react","predict-prostate.state.run-time/active-results-pane","predict-prostate.state.run-time/active-results-change","G__184347","predict-prostate.layout.result-panel/result-tab-pane","content","js/window","js/window.ga","predict-prostate.layout.result-panel/result-tabs","rum.core/static","p1__184349#","cljs.core.map","rum.core/with-key","attrs184352","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","predict-prostate.layout.result-panel/result-panes","G__184355","G__184356","G__184358","predict-prostate.results.charts/results-in-charts","G__184360","G__184361","G__184362","G__184383","G__184384","G__184365","G__184387","predict-prostate.results.icons/results-in-icons*","G__184367","G__184368","G__184389","G__184390","G__184371","G__184393","predict-prostate.results.curves/results-in-curves","G__184373","G__184374","G__184395","G__184397","predict-prostate.results.table/results-in-table","G__184377","G__184378","G__184399","G__184400","G__184381","G__184403","predict-prostate.results.text/results-in-text","predict-prostate.layout.result-panel/result-panel","predict-prostate.layout.treatments-panel/treatments-options","predict-prostate.layout.result-panel/side-panel","predict-prostate.results.util/alison-blue-1","predict-prostate.content-reader/all-subsections","G__184412","cljs.core/deref","fexpr__184410","predict-prostate.state.run-time/input-cursor","cljs.core.not_EQ_","p__184413","map__184416","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","attrs184420","attrs184422","predict-prostate.layout.result-panel/results","container?","props"],"sourcesContent":["(ns predict-prostate.layout.result-panel\n  (:require [clojure.string :refer [capitalize]]\n            [rum.core :as rum]\n            [predict-prostate.state.run-time :refer [active-results-pane active-results-change input-cursor]]\n            [predict-prostate.layout.treatments-panel :refer [treatments-options]]\n            [predict-prostate.components.panels :refer [titled-panel]]\n            [predict-prostate.results.util :refer [alison-blue-1]]\n            [pubsub.feeds :refer [publish]]\n            [interop.jsx :refer [jsx]]\n            [predict-prostate.results.table :refer [results-in-table]]\n            [predict-prostate.results.curves :refer [results-in-curves]]\n            [predict-prostate.results.charts :refer [results-in-charts]]\n            [predict-prostate.results.icons :refer [results-in-icons*]]\n            [predict-prostate.results.text :refer [results-in-text]]\n            [predict-prostate.results.sidefx :refer [results-in-sidefx]]\n            [predict-prostate.content-reader :refer [all-subsections]]\n            ))\n\n(defn tab-label-key\n  \"Lookup/edit key for a tab given a label or a key for that label\n  ; (tab-label-key :curve)\n  ; => [:tab-label/curve \\\"Curve\\\"]\n  \"\n  [label-key]\n  (let [label (name label-key)]\n    [(keyword (str \"tab-label/\" label)) (capitalize label)]))\n\n(defn safe-check\n  \"Check whether kn1 and kn2 share same names (2-arity) or some other property f (3-arity).\"\n  ([kn1 kn2]\n   (safe-check kn1 kn2 name))\n  ([kn1 kn2 f]\n   (= (f kn1) (f kn2))))\n\n(rum/defc result-tab-button < rum/reactive [ttt label-key]\n  [:li {:role     \"presentation\"\n        :class    (if (safe-check (rum/react active-results-pane) label-key) \"active\" nil)\n        :on-click #(publish active-results-change (name label-key))\n        :style    {:cursor           \"pointer\"\n                   :border-radius    \"3px\"\n                   :background-color \"#def\"}\n        :key      (name label-key)\n        }\n   [:a {:aria-controls (name label-key) :role \"tab\"\n        ;:data-on \"click\" :data-event-category \"Results Tab\" :data-event-action label       ; Old html-tag trigger.\n        } (ttt (tab-label-key label-key))]\n   ])\n\n(rum/defc result-tab-pane < rum/reactive [label content]\n  [:div {:id    label :role \"tabpanel\"\n         :class (str \"tab-pane\" (if (= (rum/react active-results-pane) label) \"active\" nil))\n         }\n   (when (= (rum/react active-results-pane) label)\n     (if content\n       (do (if (exists? js/window.ga)\n             (.ga js/window \"send\" \"event\" \"Results Tab\" label)\n             ) (content))\n       [:p \"No content yet\"])\n     ;(.log js/console \"content called: \" label)\n     )\n   ]\n  )\n\n(rum/defc result-tabs < rum/static [ttt]\n  [:ul.nav.nav-pills {:role  \"tablist\"\n                      :style {:font-size \"16px\"}}\n   (map #(rum/with-key (result-tab-button ttt %) (name %)) [:charts\n                                                            :icons\n                                                            :curves\n                                                            :table \n                                                            :texts])\n   #_[:a {\n        :ga-on \"click\" :ga-event-category \"Results Tab\" :ga-event-action \"test\"\n        :style {:background-color \"green\"}\n        } \"Some test clickable item\"]\n   ])\n\n(rum/defc result-panes < rum/static [ttt]\n  [:.tab-content\n   (result-tab-pane \"charts\" #(results-in-charts {:title (ttt [:chart/title \"Overall Survival\"]) :ttt ttt}))\n   (result-tab-pane \"icons\" #(results-in-icons* {:ttt ttt}))\n   (result-tab-pane \"curves\" #(results-in-curves {:ttt ttt}))\n   (result-tab-pane \"table\" #(results-in-table ttt))\n   (result-tab-pane \"texts\" #(results-in-text {:ttt ttt}))\n   ])\n\n(rum/defc result-panel < rum/reactive [ttt]\n  [:div#results\n   [:h3 {:style {:margin-top 20}} \"Results\"]\n   (result-tabs ttt)\n   (treatments-options)\n   (result-panes ttt)]\n  )\n\n(rum/defc side-panel [ttt]\n  [:.well {:style {:margin-top 20  :background-color alison-blue-1}}\n   (all-subsections ttt \"tool-postamble\")\n   (when (#{4 5} @(input-cursor :grade-group))\n     (all-subsections ttt \"high-grade-group-warning\"))\n   (when (not= :no @(input-cursor :metastasis))\n     (all-subsections ttt \"metastasis-warning\"))\n   (all-subsections ttt \"scroll-down-for\")\n   ])\n\n(rum/defc results < rum/reactive [{:keys [ttt container?] :as props}]\n  [:div #_(when container? {:class-name \"container\"})\n   [:.row\n    [:.col-md-6.col-md-offset-1\n     (result-panel ttt)]\n    [:.col-md-4\n     (side-panel ttt)]\n    ]])"]}