{"version":3,"sources":["predict_prostate/layout/result_panel.cljs"],"mappings":"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","names":["rum.core/build-defc","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","predict-prostate.layout.result-panel/result-tab-button","rum.core/reactive","label","cljs.core._EQ_","rum.core/react","predict-prostate.state.run-time/active-results-pane","predict-prostate.state.run-time/active-results-change","clojure.string/capitalize","predict-prostate.layout.result-panel/result-tab-pane","content","js/window","js/window.ga","predict-prostate.layout.result-panel/result-tabs","rum.core/static","p1__172644#","cljs.core.map","rum.core/with-key","attrs172649","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","predict-prostate.layout.result-panel/result-panes","ttt","G__172651","G__172652","G__172653","predict-prostate.results.charts/results-in-charts","G__172654","G__172658","G__172659","G__172681","G__172682","G__172663","G__172686","predict-prostate.results.icons/results-in-icons*","G__172664","G__172665","G__172688","G__172689","G__172668","G__172693","predict-prostate.results.curves/results-in-curves","G__172672","G__172673","G__172694","G__172695","predict-prostate.results.table/results-in-table","G__172674","G__172675","G__172701","G__172702","G__172678","G__172704","predict-prostate.results.text/results-in-text","predict-prostate.layout.result-panel/result-panel","predict-prostate.layout.treatments-panel/treatments-options","predict-prostate.layout.result-panel/side-panel","predict-prostate.results.util/alison-blue-1","predict-prostate.content-reader/all-subsections","G__172796","cljs.core/deref","fexpr__172795","predict-prostate.state.run-time/input-cursor","cljs.core.not_EQ_","p__172803","map__172804","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","attrs172809","attrs172810","predict-prostate.layout.result-panel/results","container?","props"],"sourcesContent":["(ns predict-prostate.layout.result-panel\n  (:require [clojure.string :refer [capitalize]]\n            [rum.core :as rum]\n            [predict-prostate.state.run-time :refer [active-results-pane active-results-change input-cursor]]\n            [predict-prostate.layout.treatments-panel :refer [treatments-options]]\n            [predict-prostate.components.panels :refer [titled-panel]]\n            [predict-prostate.results.util :refer [alison-blue-1]]\n            [pubsub.feeds :refer [publish]]\n            [interop.jsx :refer [jsx]]\n            [predict-prostate.results.table :refer [results-in-table]]\n            [predict-prostate.results.curves :refer [results-in-curves]]\n            [predict-prostate.results.charts :refer [results-in-charts]]\n            [predict-prostate.results.icons :refer [results-in-icons*]]\n            [predict-prostate.results.text :refer [results-in-text]]\n            [predict-prostate.results.sidefx :refer [results-in-sidefx]]\n            [predict-prostate.content-reader :refer [all-subsections]]\n            ))\n\n\n(rum/defc result-tab-button < rum/reactive [label]\n  [:li {:role     \"presentation\"\n        :class    (if (= (rum/react active-results-pane) label) \"active\" nil)\n        :on-click #(publish active-results-change label)\n        :style    {:cursor           \"pointer\"\n                   :border-radius    \"3px\"\n                   :background-color \"#def\"}\n        :key      label\n        }\n   [:a {:aria-controls label :role \"tab\"\n        ;:data-on \"click\" :data-event-category \"Results Tab\" :data-event-action label       ; Old html-tag trigger.\n        } (capitalize label)]\n   ])\n\n(rum/defc result-tab-pane < rum/reactive [label content]\n  [:div {:id    label :role \"tabpanel\"\n         :class (str \"tab-pane\" (if (= (rum/react active-results-pane) label) \"active\" nil))\n         }\n   (when (= (rum/react active-results-pane) label)\n     (if content\n       (do (if (exists? js/window.ga)\n             (.ga js/window \"send\" \"event\" \"Results Tab\" label)\n             ) (content))\n       [:p \"No content yet\"])\n     ;(.log js/console \"content called: \" label)\n     )\n   ]\n  )\n\n(rum/defc result-tabs < rum/static []\n  [:ul.nav.nav-pills {:role  \"tablist\"\n                      :style {:font-size \"16px\"}}\n   (map #(rum/with-key (result-tab-button %) %) [\"charts\"\n                                                 \"icons\"\n                                                 \"curves\"\n                                                 \"table\"\n                                                 \"texts\"\n                                                 ])\n   #_[:a {\n        :ga-on \"click\" :ga-event-category \"Results Tab\" :ga-event-action \"test\"\n        :style {:background-color \"green\"}\n        } \"Some test clickable item\"]\n   ])\n\n(rum/defc result-panes < rum/static [ttt]\n  [:.tab-content\n   (result-tab-pane \"charts\" #(results-in-charts {:title (ttt [:chart/title \"Overall Survival\"]) :ttt ttt}))\n   (result-tab-pane \"icons\" #(results-in-icons* {:ttt ttt}))\n   (result-tab-pane \"curves\" #(results-in-curves {:ttt ttt}))\n   (result-tab-pane \"table\" #(results-in-table ttt))\n   (result-tab-pane \"texts\" #(results-in-text {:ttt ttt}))\n   ])\n\n(rum/defc result-panel < rum/reactive [ttt]\n  [:div#results\n   [:h3 {:style {:margin-top 20}} \"Results\"]\n   (result-tabs)\n   (treatments-options)\n   (result-panes ttt)]\n  )\n\n(rum/defc side-panel [ttt]\n  [:.well {:style {:margin-top 20  :background-color alison-blue-1}}\n   (all-subsections ttt \"tool-postamble\")\n   (when (#{4 5} @(input-cursor :grade-group))\n     (all-subsections ttt \"high-grade-group-warning\"))\n   (when (not= :no @(input-cursor :metastasis))\n     (all-subsections ttt \"metastasis-warning\"))\n   (all-subsections ttt \"scroll-down-for\")\n   ])\n\n(rum/defc results < rum/reactive [{:keys [ttt container?] :as props}]\n  [:div #_(when container? {:class-name \"container\"})\n   [:.row\n    [:.col-md-6.col-md-offset-1\n     (result-panel ttt)]\n    [:.col-md-4\n     (side-panel ttt)]\n    ]])"]}