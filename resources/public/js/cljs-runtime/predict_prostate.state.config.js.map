{"version":3,"sources":["predict_prostate/state/config.cljs"],"mappings":"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","names":["rum.core/build-defc","js/React.createElement","predict-prostate.state.config/any-of-these-diseases","predict-prostate.state.run-time/help-key-change","predict-prostate.state.config/biopsy-core-examples","predict-prostate.state.config/rtl-languages","this__4380__auto__","k__4381__auto__","this__4382__auto__","k36884","else__4383__auto__","G__36900","cljs.core/Keyword","key","label","widget-type","widget-params","read-only","write-only","unknowable","panel","models","default","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__36901","vec__36906","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__36883","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this36887","other36888","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__36942","cljs.core/keyword-identical?","expr__36943","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","predict-prostate.state.config/Input-group","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__36896","extmap__4419__auto__","G__37039","cljs.core/record?","predict-prostate.state.config/->Input-group","predict-prostate.state.config/map->Input-group","predict-prostate.state.config/input-groups","predict-prostate.state.run-time/input-cursor","predict-prostate.state.config/get-input-default","input-groups","cljs.core/first","cljs.core.get_in","cljs.core/group-by"],"sourcesContent":["(ns predict-prostate.state.config\n  (:require [rum.core :as rum]\n            [predict-prostate.state.run-time :refer [help-key-change input-cursor]]\n            [pubsub.feeds :refer [->Topic publish create-feed]]\n            ;[tongue.core :as tongue]\n            ;[translations.tongue-base :refer [wrap-translator]]\n            ;[translations.config :refer [initial-supported-langs]]\n            ))\n\n\n(rum/defc any-of-these-diseases []\n  [:span \"Any of \" [:a {:style    {:color  \"#A94342\" :text-decoration \"underline\"\n                                   :cursor \"pointer\"}\n                        :on-click #(publish help-key-change \"comorb\")} \"these diseases?\"]])\n\n\n(rum/defc biopsy-core-examples []\n  [:span \"Any of \" [:a {:style    {:color  \"#CCCCCC\" :text-decoration \"underline\"\n                                   :cursor \"pointer\"}\n                        :on-click #(publish help-key-change \"biopsy-examples\")} \"See examples\"]])\n\n\n;;;\n;; Initial language configuration - this data is used until the full translations files are read in.\n;; It does not have to be very complete as calls to the translator function should include the English default\n;;;\n(def rtl-languages #{:ar :az :dv :he :ku :fa :ur})          ; switch into right to left for these languages\n\n\n\n;;;\n;; Input configuration\n;; key - identifies the input widget\n;; label - labells it when on screen\n;; widget-type - is a key to the multi-method 'make-widget'\n;; widget-params - are used by widget code\n;; read-only - if true, a publication Topic is not created for ths widget\n;; write-only - if true, a cursor is not created for this widget\n;; unknowable - if true, an unknown value is valid\n;; panel - a key indicating the panel where the widget will appear\n;; models - the set of models which use this widget\n;; default - the default value of the widget\n;;;\n(defrecord Input-group [key label widget-type widget-params read-only write-only unknowable panel models default])\n\n\n(def input-groups\n  \"Define all input groups associated with one treatment option. The list of all treatment inputs are\n  added into the list of input-groups at startup.\n\n  If a treatment widget has value 'nil' we do not flag it as an error. Instead we assume the treatment is not\n  to be graphed or displayed. \"\n  [;; treatments first\n   (->Input-group :primary-rx\n                  \"Treatment Regime\"\n                  :radio-group\n                  [[0 \"Conservative\"]\n                   [1 \"Radical\"]\n                   ]\n                  false false nil\n                  :primary-rx\n                  #{\"prostate\" \"prostate-release\"}\n                  0\n                  )\n\n   (->Input-group :plot-style\n                  \"Plot style for treatment benefit\"\n                  :radio-group\n                  [[:area1 \"Area\"]\n                   [:line2 \"Line\"]]\n                  false false nil\n                  :plot-style\n                  #{\"prostate\" \"prostate-release\"}\n                  nil)\n\n\n   ;; INPUTS\n   (->Input-group :age\n                  \"Age at diagnosis\"\n                  :numeric-input\n                  {:min 35 :max 95 :step 1 :precision 0}\n                  false false true\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  \"\")\n   (->Input-group :ethnicity\n                  \"Ethnic Origin\"\n                  :information\n                  ;\"Please click on the info button\"\n                  [:eth-info \"Please click on the info button\"]\n                  false false true\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  \"See FAQs\")\n   (->Input-group :psa\n                  \"PSA (ng/ml)\"\n                  :numeric-input\n                  {:min 0 :max 100 :step 1 :precision 3}\n                  false false true\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  \"\")\n   (->Input-group :t-stage\n                  \"Clinical T stage\"\n                  :radio-group\n                  [[1 \"1\"]\n                   [2 \"2\"]\n                   [3 \"3\"]\n                   [4 \"4\"]]\n                  false false false\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  nil)\n\n   (->Input-group :grade-group\n                  \"Histological grade group\"\n                  :radio-group\n                  [[1 \"1\"]\n                   [2 \"2\"]\n                   [3 \"3\"]\n                   [4 \"4\"]\n                   [5 \"5\"]]\n                  false false false\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  nil)\n   (->Input-group :gleason\n                  \"Gleason score\"\n                  :radio-group\n                  [[1 \"3+3\"]\n                   [2 \"3+4\"]\n                   [3 \"4+3\"]\n                   [4 \"8\"]\n                   [5 \"9 or 10\"]]\n                  false false false\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  nil)\n\n   (->Input-group :brca\n                  \"BRCA\"\n                  :radio-group\n                  [[0 \"Negative or Untested\"]\n                   [1 \"Positive\"]\n                   #_[2 \"Untested\"]]\n                  false false false\n                  :prp\n                  #{\"prostate-release\"}\n                  nil)\n\n   (->Input-group :metastasis\n                  \"Has the cancer spread (metastasis)?\"\n                  :radio-group\n                  [[:no \"No\"]\n                   [:yes \"Yes\"]]\n                  false false true\n                  :prp\n                  #{\"prostate-release\"}\n                  nil)\n\n\n   (->Input-group :intra-ductal\n                  \"Is there an intra-ductal carcinoma or invasive cribriform component reported  in the biopsies?\"\n                  :radio-group\n                  [[:no \"No\"]\n                   [:yes \"Yes\"]]\n                  false false true\n                  :prp\n                  #{\"prostate-release\"}\n                  nil)\n\n   (->Input-group :biopsy50\n                  \"Number of biopsy cores with prostate cancer\"\n                  :radio-group\n                  [[1 \"fewer than half\"]\n                   [2 \"half or more\"]]\n                  false false true\n                  :prp\n                  #{\"prostate\"}\n                  nil)\n\n   (->Input-group :biopsy-done\n                  \"Biopsy data available?\"\n                  :radio-group\n                  [[0 \"No\"]\n                   [1 \"Yes\"]]\n                  false false false\n                  :prp\n                  #{\"prostate-release\"}\n                  \"\")\n\n   (->Input-group :biopsy-cores-taken\n                  \"Biopsy cores taken\"\n                  :numeric-input\n                  {:min 1 :max 100 :step 1 :precision 0}\n                  false false false\n                  :prp\n                  #{\"prostate-release\"}\n                  nil)\n\n   (->Input-group :biopsy-cores-involved\n                  \"Biopsy cores with any prostate cancer in\"\n                  :numeric-input\n                  #_{:min 1 :max :biopsy-cores-taken :step 1 :precision 0}\n                  {:min 1 :max (fn [] (input-cursor :biopsy-cores-taken)) :step 1 :precision 0}\n                  false false false\n                  :prp\n                  #{\"prostate-release\"}\n                  nil)\n\n   (->Input-group :h-admissions\n                  \"Hospital admission in last 2 years?\"\n                  :radio-group\n                  [[0 \"No\"]\n                   [1 \"Yes\"]]\n                  false false false\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  nil)\n\n   (->Input-group :charlson-comorbidity\n                  (any-of-these-diseases)\n                  :radio-group\n                  [[0 \"No\"]\n                   [1 \"Yes\"]]\n                  false false false\n                  :prp\n                  #{\"prostate\" \"prostate-release\"}\n                  nil)\n\n   ; Switches\n   (->Input-group :result-year\n                  \"Years after diagnosis\"\n                  :radio-group\n                  [[10 \"10 years\"]\n                   [15 \"15 years\"]]\n                  false false false\n                  :tables\n                  #{\"v2.1\"}\n                  10)\n\n   (->Input-group :show-uncertainty\n                  \"More detail?\"\n                  :radio-group\n                  [[:yes \"Yes\"]\n                   [:no \"No\"]]\n                  false false false\n                  :tables\n                  #{\"v2.1\"}\n                  :no)\n\n\n\n   ]\n  )\n\n\n(defn get-input-default [input-groups key]\n  (:default (first (get-in (group-by :key input-groups) [key]))))\n\n\n(comment\n  (group-by :panel input-groups)\n\n  (get-input-default input-groups :nodes)\n  ;=> \"\"\n  )"]}