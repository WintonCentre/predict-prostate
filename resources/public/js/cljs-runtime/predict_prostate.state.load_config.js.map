{"version":3,"sources":["predict_prostate/state/load_config.cljs"],"mappings":"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","names":["predict-prostate.state.load-config/widget-options","cljs.core.into","cljs.core.map","g","predict-prostate.state.config/input-groups","rum.core/build-defc","p__44735","map__44736","cljs.core/--destructure-map","cljs.core.get","attrs44734","cljs.core.apply","js/React.createElement","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","predict-prostate.state.load-config/default","rum.core/static","key","label","type","params","extra","cljs.core.pr_str","js/predict-prostate","js/predict-prostate.state","js/predict-prostate.state.load-config","js/predict-prostate.state.load-config.make-widget","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","fexpr__44737","cljs.core/MultiFn","cljs.core.symbol","predict-prostate.state.load-config/make-widget","p__44738","map__44739","predict-prostate.state.load-config/rbg-label","p__44740","map__44741","unknowable","ttt","G__44742","G__44743","predict-prostate.components.button/information","cljs.core/second","cljs.core/first","predict-prostate.state.run-time/input-cursor","p__44744","map__44745","G__44746","G__44747","predict-prostate.components.button/radio-button-group","p__44748","map__44749","G__44750","G__44751","predict-prostate.components.button/radio-button-group-vertical","cljs.core/name","p__44753","map__44754","G__44755","wc-rum-lib.numeric-input/numeric-input","p1__44752#","cljs.core.assoc","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","p__44758","map__44759","G__44760","p1__44757#","G__44761","predict-prostate.components.select/picker","predict-prostate.state.load-config/build-input-widgets-in","old-wiring","groups","cljs.core.reduce","m","map__44762","widget-type","widget-params","cljs.core/assoc-in","predict-prostate.state.load-config/render-widget","map__44763","options","predict-prostate.state.load-config/add-input-group","ref","map__44764","read-only","write-only","rum.core/cursor-in","pubsub.feeds/->Topic","predict-prostate.state.run-time/event-bus","js/predict-prostate.state.load-config.once-only-guard","predict-prostate.state.load-config/once-only-guard","cljs.core.swap_BANG_","predict-prostate.state.run-time/rtdb","cljs.core/assoc","p1__44765#","cljs.core/update","predict-prostate.state.load-config/live-keys-by-model","model","p1__44766#","cljs.core.filter","fexpr__44767"],"sourcesContent":["(ns predict-prostate.state.load-config\n  (:require\n    [rum.core :as rum]\n    [pubsub.feeds :refer [->Topic publish subscribe unsubscribe]]\n    [predict-prostate.state.config :refer [input-groups]]\n    [predict-prostate.state.run-time :refer [rtdb\n                                             input-cursor\n                                             input-cursors\n                                             input-change\n                                             estimates\n                                             event-bus\n                                             ]]\n\n    [predict-prostate.components.button :refer [radio-button-group radio-button-group-vertical information]]\n    [predict-prostate.components.select :refer [picker]]\n    [wc-rum-lib.numeric-input :refer [numeric-input]]\n    ;[predict-prostate.components.numeric-input :refer [numeric-input]]\n    ))\n\n; Make a map of all the widget group options\n(def widget-options (into {} (map (fn [g] [(:key g) g]) input-groups)))\n\n(rum/defc default < rum/static [{:keys [key label type params]} & extra]\n  [:div (pr-str \"Unknown widget \" key label type params extra)])\n\n(defmulti make-widget :type)\n\n(defmethod make-widget :default [params]\n  (default params))\n\n(defmethod make-widget :string [{:keys [params]}]\n  [:div {:style {:padding-top \"10px\" :font-size \"16px\"}} params])\n\n(defn rbg-label [label] (str label \" radio button group\"))\n\n;; (comment\n;;   (->Input-group :ethnicity\n;;                  \"Ethnic Origin\"\n;;                  :information\n;;                  nil\n;;                  false false true\n;;                  :prp\n;;                  #{\"prostate\" \"prostate-release\"}\n;;                  \"See FAQs\"))\n\n(defmethod make-widget :information [{:keys [key label params unknowable ttt]}]\n  (information\n    {:key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     ;:values            params\n     :values            (second params)\n     :ttt               ttt\n     :ttt-key           (first params)\n     :unknowable        unknowable}\n    (input-cursor key))\n  )\n\n(defmethod make-widget :radio-group [{:keys [ttt key label params unknowable]}]\n  (radio-button-group\n    {:ttt               ttt\n     :key               key\n     :aria-label        (rbg-label label)\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :radio-group-vertical [{:keys [ttt key label params unknowable]}]\n  (radio-button-group-vertical\n    {:ttt               ttt\n     :key               (name key)\n     :aria-label        (rbg-label label)\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :key (name key)\n                   :input-ref (input-cursor key)\n                   :onChange #(publish (input-change key) %))))\n\n#_(defmethod make-widget :bci-numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :input-ref (input-cursor key)\n                   :max :biopsy-cores-taken\n                   :onChange #(publish (input-change key) %))))\n\n(defmethod make-widget :select [{:keys [key params]}]\n  (picker {:key key :on-change #(publish (input-change key) %)} (:menu params)))\n\n(defn build-input-widgets-in [old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key label widget-type widget-params unknowable]} g]\n              (-> m\n                  (assoc-in [:widget key] (make-widget {:key        key\n                                                        :label      label\n                                                        :type       widget-type\n                                                        :params     widget-params\n                                                        :unknowable unknowable}))\n                  (assoc-in [:label key] label)\n                  )))\n          old-wiring groups))\n\n(defn render-widget\n  \"We're now rendering widgets at use rather than at initialisation.\"\n  [ttt key]\n  (let [options (widget-options key)\n        {:keys [widget-type widget-params]} options]\n    (make-widget (assoc options\n                        :type widget-type\n                        :params widget-params\n                        :ttt ttt))))\n\n(defn add-input-group\n  \"Adds the db refs on key :cursor, and mutation refs on key :change to the set of known inputs.\"\n  [ref old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key read-only write-only]} g]\n              (-> m\n                  (assoc-in [:cursor key] (when-not write-only (rum/cursor-in ref [:widgets key])))\n                  (assoc-in [:change key] (when-not read-only (->Topic key event-bus)))\n                  )))\n          old-wiring groups))\n\n;;\n;; Create input widgets and load into state just once (per browser load)\n;;\n;; todo: This process a bit naff as the app-state contains react components that cannot be shown or printed or reloaded.\n;; Main benefit is that we can configure inputs using data (currently using state.config).\n;;\n(defonce once-only-guard (swap! rtdb assoc :input-config (add-input-group rtdb {} input-groups)))\n\n; add widgets\n(swap! rtdb update :input-config #(build-input-widgets-in % input-groups))\n\n(defn live-keys-by-model\n  \"The (maximal) set of input-group keys present in a model. This is derived directly from the model\n  field in the input configuration.\"\n  [model]\n  (into #{} (map :key (filter #(and ((:models %) model)) input-groups))))\n(comment\n  (live-keys-by-model \"prostate\")\n  ;=>\n  #_#{:gleason :age :h-admissions :biopsy50 :psa :plot-style :biopsy-done\n      :charlson-comorbidity :primary-rx :t-stage :grade-group :brca})\n\n\n\n\n"]}