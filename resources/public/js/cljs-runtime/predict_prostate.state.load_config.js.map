{"version":3,"sources":["predict_prostate/state/load_config.cljs"],"mappings":"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","names":["predict-prostate.state.load-config/widget-options","cljs.core.into","cljs.core.map","g","predict-prostate.state.config/input-groups","rum.core/build-defc","p__114865","map__114866","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","attrs114864","js/React.createElement","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","predict-prostate.state.load-config/default","rum.core/static","key","label","type","params","extra","cljs.core.pr_str","js/predict-prostate","js/predict-prostate.state","js/predict-prostate.state.load-config","js/predict-prostate.state.load-config.make-widget","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__114870","cljs.core/MultiFn","cljs.core.symbol","predict-prostate.state.load-config/make-widget","p__114871","map__114872","predict-prostate.state.load-config/rbg-label","p__114874","map__114875","unknowable","ttt","G__114877","G__114878","predict-prostate.components.button/information","cljs.core/second","cljs.core/first","predict-prostate.state.run-time/input-cursor","p__114881","map__114882","G__114884","G__114885","predict-prostate.components.button/radio-button-group","p__114888","map__114890","G__114893","G__114894","predict-prostate.components.button/radio-button-group-vertical","p__114898","map__114899","G__114904","wc-rum-lib.numeric-input/numeric-input","p1__114897#","cljs.core.assoc","cljs.core/name","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","p__114908","map__114909","G__114913","p1__114907#","G__114914","predict-prostate.components.select/picker","predict-prostate.state.load-config/build-input-widgets-in","old-wiring","groups","cljs.core.reduce","m","map__114915","widget-type","widget-params","cljs.core/assoc-in","predict-prostate.state.load-config/render-widget","map__114919","options","predict-prostate.state.load-config/add-input-group","ref","map__114922","read-only","write-only","rum.core/cursor-in","pubsub.feeds/->Topic","predict-prostate.state.run-time/event-bus","js/predict-prostate.state.load-config.once-only-guard","predict-prostate.state.load-config/once-only-guard","cljs.core.swap_BANG_","predict-prostate.state.run-time/rtdb","cljs.core/assoc","p1__114926#","cljs.core/update","predict-prostate.state.load-config/live-keys-by-model","model","p1__114927#","cljs.core.filter","fexpr__114928"],"sourcesContent":["(ns predict-prostate.state.load-config\n  (:require\n    [rum.core :as rum]\n    [pubsub.feeds :refer [->Topic publish subscribe unsubscribe]]\n    [predict-prostate.state.config :refer [input-groups]]\n    [predict-prostate.state.run-time :refer [rtdb\n                                             input-cursor\n                                             input-cursors\n                                             input-change\n                                             estimates\n                                             event-bus\n                                             ]]\n\n    [predict-prostate.components.button :refer [radio-button-group radio-button-group-vertical information]]\n    [predict-prostate.components.select :refer [picker]]\n    [wc-rum-lib.numeric-input :refer [numeric-input]]\n    ;[predict-prostate.components.numeric-input :refer [numeric-input]]\n    ))\n\n; Make a map of all the widget group options\n(def widget-options (into {} (map (fn [g] [(:key g) g]) input-groups)))\n\n(rum/defc default < rum/static [{:keys [key label type params]} & extra]\n  [:div (pr-str \"Unknown widget \" key label type params extra)])\n\n(defmulti make-widget :type)\n\n(defmethod make-widget :default [params]\n  (default params))\n\n(defmethod make-widget :string [{:keys [params]}]\n  [:div {:style {:padding-top \"10px\" :font-size \"16px\"}} params])\n\n(defn rbg-label [label] (str label \" radio button group\"))\n\n;; (comment\n;;   (->Input-group :ethnicity\n;;                  \"Ethnic Origin\"\n;;                  :information\n;;                  nil\n;;                  false false true\n;;                  :prp\n;;                  #{\"prostate\" \"prostate-release\"}\n;;                  \"See FAQs\"))\n\n(defmethod make-widget :information [{:keys [key label params unknowable ttt]}]\n  (information\n    {:key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     ;:values            params\n     :values            (second params)\n     :ttt               ttt\n     :ttt-key           (first params)\n     :unknowable        unknowable}\n    (input-cursor key))\n  )\n\n(defmethod make-widget :radio-group [{:keys [ttt key label params unknowable]}]\n  (radio-button-group\n    {:ttt               ttt\n     :key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :radio-group-vertical [{:keys [ttt key label params unknowable]}]\n  (radio-button-group-vertical\n    {:ttt               ttt\n     :key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :key (name key)\n                   :input-ref (input-cursor key)\n                   :onChange #(publish (input-change key) %))))\n\n#_(defmethod make-widget :bci-numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :input-ref (input-cursor key)\n                   :max :biopsy-cores-taken\n                   :onChange #(publish (input-change key) %))))\n\n(defmethod make-widget :select [{:keys [key params]}]\n  (picker {:key key :on-change #(publish (input-change key) %)} (:menu params)))\n\n(defn build-input-widgets-in [old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key label widget-type widget-params unknowable]} g]\n              (-> m\n                  (assoc-in [:widget key] (make-widget {:key        key\n                                                        :label      label\n                                                        :type       widget-type\n                                                        :params     widget-params\n                                                        :unknowable unknowable}))\n                  (assoc-in [:label key] label)\n                  )))\n          old-wiring groups))\n\n(defn render-widget\n  \"We're now rendering widgets at use rather than at initialisation.\"\n  [ttt key]\n  (let [options (widget-options key)\n        {:keys [widget-type widget-params]} options]\n    (make-widget (assoc options\n                        :type widget-type\n                        :params widget-params\n                        :ttt ttt))))\n\n(defn add-input-group\n  \"Adds the db refs on key :cursor, and mutation refs on key :change to the set of known inputs.\"\n  [ref old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key read-only write-only]} g]\n              (-> m\n                  (assoc-in [:cursor key] (when-not write-only (rum/cursor-in ref [:widgets key])))\n                  (assoc-in [:change key] (when-not read-only (->Topic key event-bus)))\n                  )))\n          old-wiring groups))\n\n;;\n;; Create input widgets and load into state just once (per browser load)\n;;\n;; todo: This process a bit naff as the app-state contains react components that cannot be shown or printed or reloaded.\n;; Main benefit is that we can configure inputs using data (currently using state.config).\n;;\n(defonce once-only-guard (swap! rtdb assoc :input-config (add-input-group rtdb {} input-groups)))\n\n; add widgets\n(swap! rtdb update :input-config #(build-input-widgets-in % input-groups))\n\n(defn live-keys-by-model\n  \"The (maximal) set of input-group keys present in a model. This is derived directly from the model\n  field in the input configuration.\"\n  [model]\n  (into #{} (map :key (filter #(and ((:models %) model)) input-groups))))\n(comment\n  (live-keys-by-model \"prostate\")\n  ;=>\n  #_#{:gleason :age :h-admissions :biopsy50 :psa :plot-style :biopsy-done\n      :charlson-comorbidity :primary-rx :t-stage :grade-group :brca})\n\n\n\n\n"]}