{"version":3,"sources":["predict_prostate/state/load_config.cljs"],"mappings":";AAoBA,AAAA,AAAAA,AAAA,AAAUY;AAAVX,AAAkEiB;AAAlE,AAAA,AAAAhB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAwCY;AAAxC,AAAAR,AAAAJ,AAAA,AAA4Ca;AAA5C,AAAAT,AAAAJ,AAAA,AAAkDc;AAAlD,AAAAV,AAAAJ,AAAA,AAAuDe;AAAvD,AAAA,AAAA,AAAAV,AACQ,AAAA,AAACY,AAAyBL,AAAIC,AAAMC,AAAKC,AAAOC;AADxD,AAAA,AAAAd,AAAAI,AAAA,AAAA,AAAA,AAAAC,AAAAF,AAAA,AAAAG,AAAAH,AAAA,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAA,AAAAI,AAAAJ;;AAAAN;AAAkEiB;;;;AAAAA;;AAAlEjB,AAAkEiB;;;AAAlEjB;AAAkEiB;AAAlEjB,AAAkEiB;;;;;AAAlE,AAAA,AAAoBL;AAGpB,AAAA,AAAAO,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUQ;AAAVP,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAvB,AAAA,AAAA,AAAA,AAAAwB,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAL,AAAAE,AAAAC,AAAAC;;;AAEA,AAAAK,AAAA,AAAA,AAAiChB;AAAjC,AACE,AAACL,AAAAA,AAAAA,AAAQK,AAAAA;;AAEX,AAAAgB,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhC,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA/B,AAAAC,AAAA8B,AAAAA;AAAA,AAAA7B,AAAA6B,AAAA,AAAwClB;AAAxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyDA;;AAEzD,AAUA,AAAAgB,AAAA,AAAA,AAAAG;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlC,AAAA,AAAAkC,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAAC,AAAAgC,AAAAA;AAAA,AAAA/B,AAAA+B,AAAA,AAA6CvB;AAA7C,AAAAR,AAAA+B,AAAA,AAAiDtB;AAAjD,AAAAT,AAAA+B,AAAA,AAAuDpB;AAAvD,AAAAX,AAAA+B,AAAA,AAA8DC;AAA9D,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACsBzB,AACAC,AAEAE,AACAqB;AALtBE,AAME,AAACE,AAAa5B;AANhB,AAAA,AAAAyB,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AASH,AAAAR,AAAA,AAAA,AAAAU;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzC,AAAA,AAAAyC,AAAA,AAAA,AAAA,AAAA,AAAAxC,AAAAC,AAAAuC,AAAAA;AAAA,AAAAtC,AAAAsC,AAAA,AAA6C9B;AAA7C,AAAAR,AAAAsC,AAAA,AAAiD7B;AAAjD,AAAAT,AAAAsC,AAAA,AAAuD3B;AAAvD,AAAAX,AAAAsC,AAAA,AAA8DN;AAA9D,AACE,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACsB/B,AACAC,AAEAE,AACAqB;AALtBQ,AAME,AAACJ,AAAa5B;AANhB,AAAA,AAAA+B,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAQH,AAAAd,AAAA,AAAA,AAAAe;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA8C,AAAA,AAAA,AAAA,AAAA,AAAA7C,AAAAC,AAAA4C,AAAAA;AAAA,AAAA3C,AAAA2C,AAAA,AAAsDnC;AAAtD,AAAAR,AAAA2C,AAAA,AAA0DlC;AAA1D,AAAAT,AAAA2C,AAAA,AAAgEhC;AAAhE,AAAAX,AAAA2C,AAAA,AAAuEX;AAAvE,AACE,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACsBpC,AACAC,AAEAE,AACAqB;AALtBa,AAME,AAACT,AAAa5B;AANhB,AAAA,AAAAoC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAQH,AAAAnB,AAAA,AAAA,AAAAoB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnD,AAAA,AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAAlD,AAAAC,AAAAiD,AAAAA;AAAA,AAAAhD,AAAAgD,AAAA,AAA+CxC;AAA/C,AAAAR,AAAAgD,AAAA,AAAmDrC;AAAnD,AACE,AAAAsC,AAAe,AAAA,AAAA,AAAA,AAAA,AAAAE,AAACC,AAAMzC,AACA,AAAC0C,AAAK7C,AACA,AAAC4B,AAAa5B;AAF3B,AAGa,AAAA2C,AAACG,AAAQ,AAACC,AAAa/C;;AAHnD,AAAA,AAAAyC,AAAAA,AAACC,AAAAA,AAAAA;;AAWH,AAAAvB,AAAA,AAAA,AAAA6B;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5D,AAAA,AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAA3D,AAAAC,AAAA0D,AAAAA;AAAA,AAAAzD,AAAAyD,AAAA,AAAwCjD;AAAxC,AAAAR,AAAAyD,AAAA,AAA4C9C;AAA5C,AACE,AAAA+C,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAcnD;AAAd,AAA8B,AAAAmD,AAACL,AAAQ,AAACC,AAAa/C;;AAArDoD,AAA8D,AAAA,AAAOjD;AAArE,AAAA,AAAA+C,AAAAE,AAAAF,AAAAE,AAACC,AAAAA,AAAAA;;AAEH,AAAA,AAAMC,AAAwBC,AAAWC;AAAzC,AACE,AAACC,AAAO,AAAKC,AAAEC;AAAP,AACE,AAAAC,AAA+DD;AAA/DC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvE,AAAA,AAAAuE,AAAA,AAAA,AAAA,AAAA,AAAAtE,AAAAC,AAAAqE,AAAAA;AAAA,AAAApE,AAAAoE,AAAA,AAAc5D;AAAd,AAAAR,AAAAoE,AAAA,AAAkB3D;AAAlB,AAAAT,AAAAoE,AAAA,AAAwBC;AAAxB,AAAArE,AAAAoE,AAAA,AAAoCE;AAApC,AAAAtE,AAAAoE,AAAA,AAAkDpC;AAAlD,AACMkC,AACA,AAAA,AAAA,AAACK,AAAkB/D,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACmB,AAAyBnB,AACAC,AACA4D,AACAC,AACAtC,AAClD,AAAA,AAAA,AAACuC,AAAiB/D,AAAKC;AAE/BsD,AAAWC;;AAErB;;;AAAA,AAAMQ,AAEHC,AAAIV,AAAWC;AAFlB,AAGE,AAACC,AAAO,AAAKC,AAAEC;AAAP,AACE,AAAAO,AAAyCP;AAAzCO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7E,AAAA,AAAA6E,AAAA,AAAA,AAAA,AAAA,AAAA5E,AAAAC,AAAA2E,AAAAA;AAAA,AAAA1E,AAAA0E,AAAA,AAAclE;AAAd,AAAAR,AAAA0E,AAAA,AAAkBC;AAAlB,AAAA3E,AAAA0E,AAAA,AAA4BE;AAA5B,AACMV,AACA,AAAA,AAAA,AAACK,AAAkB/D,AAAK,AAAA,AAAA,AAAUoE,AAAW,AAAA,AAAA,AAACC,AAAcJ,AAAcjE,AAC1E,AAAA,AAAA,AAAC+D,AAAkB/D,AAAK,AAAA,AAAA,AAAUmE,AAAU,AAACG,AAAQtE,AAAIuE;AAEjEhB,AAAWC;;AAQrB,AAAA,AAAAlD,AAAAC,AAAAC,AAAAgE;AAAA;AAAA,AAAA,AAASC,AAAgB,AAAA,AAACC,AAAMC,AAAKC,AAAoB,AAAA,AAACZ,AAAgBW,AAAQE;;AAGlF,AAAA,AAAA,AAAAC,AAACJ,AAAMC,AAAKI;AAAZ,AAAkC,AAAAD,AAACxB,AAAyBuB;;AAE5D;;;;AAAA,AAAMG,AAGHC;AAHH,AAIE,AAAA,AAACC,AAAS,AAAA,AAACC,AAAS,AAAA,AAAAC,AAACC;AAAD,AAAc,AAAAC,AAAC,AAAA,AAAAF;AAAD,AAAA,AAAAE,AAAAA,AAAAA,AAAaL,AAAAA;AAAQJ;;AACzD","names":["rum.core/build-defc","p__34566","map__34568","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","attrs34565","js/React.createElement","cljs.core/map?","sablono.interpreter/attributes","sablono.interpreter/interpret","predict-prostate.state.load-config/default","rum.core/static","key","label","type","params","extra","cljs.core.pr_str","js/predict-prostate","js/predict-prostate.state","js/predict-prostate.state.load-config","js/predict-prostate.state.load-config.make-widget","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__34575","cljs.core/MultiFn","cljs.core.symbol","predict-prostate.state.load-config/make-widget","p__34576","map__34577","p__34579","map__34580","unknowable","G__34582","G__34583","predict-prostate.components.button/information","predict-prostate.state.run-time/input-cursor","p__34584","map__34585","G__34587","G__34588","predict-prostate.components.button/radio-button-group","p__34589","map__34590","G__34592","G__34593","predict-prostate.components.button/radio-button-group-vertical","p__34595","map__34596","G__34598","wc-rum-lib.numeric-input/numeric-input","p1__34594#","cljs.core.assoc","cljs.core/name","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","p__34601","map__34602","G__34604","p1__34600#","G__34605","predict-prostate.components.select/picker","predict-prostate.state.load-config/build-input-widgets-in","old-wiring","groups","cljs.core.reduce","m","g","map__34606","widget-type","widget-params","cljs.core/assoc-in","predict-prostate.state.load-config/add-input-group","ref","map__34608","read-only","write-only","rum.core/cursor-in","pubsub.feeds/->Topic","predict-prostate.state.run-time/event-bus","js/predict-prostate.state.load-config.once-only-guard","predict-prostate.state.load-config/once-only-guard","cljs.core.swap_BANG_","predict-prostate.state.run-time/rtdb","cljs.core/assoc","predict-prostate.state.config/input-groups","p1__34610#","cljs.core/update","predict-prostate.state.load-config/live-keys-by-model","model","cljs.core.into","cljs.core.map","p1__34611#","cljs.core.filter","fexpr__34612"],"sourcesContent":["(ns predict-prostate.state.load-config\n  (:require\n    [rum.core :as rum]\n    [pubsub.feeds :refer [->Topic publish subscribe unsubscribe]]\n    [predict-prostate.state.config :refer [input-groups]]\n    [predict-prostate.state.run-time :refer [rtdb\n                                             input-cursor\n                                             input-cursors\n                                             input-change\n                                             estimates\n                                             event-bus\n                                             ]]\n\n    [predict-prostate.components.button :refer [radio-button-group radio-button-group-vertical information]]\n    [predict-prostate.components.select :refer [picker]]\n    [wc-rum-lib.numeric-input :refer [numeric-input]]\n    ;[predict-prostate.components.numeric-input :refer [numeric-input]]\n    ))\n\n\n(rum/defc default < rum/static [{:keys [key label type params]} & extra]\n  [:div (pr-str \"Unknown widget \" key label type params extra)])\n\n(defmulti make-widget :type)\n\n(defmethod make-widget :default [params]\n  (default params))\n\n(defmethod make-widget :string [{:keys [params]}]\n  [:div {:style {:padding-top \"10px\" :font-size \"16px\"}} params])\n\n(comment\n  (->Input-group :ethnicity\n                 \"Ethnic Origin\"\n                 :information\n                 nil\n                 false false true\n                 :prp\n                 #{\"prostate\" \"prostate-release\"}\n                 \"See FAQs\"))\n\n(defmethod make-widget :information [{:keys [key label params unknowable]}]\n  (information\n    {:key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key))\n  )\n\n(defmethod make-widget :radio-group [{:keys [key label params unknowable]}]\n  (radio-button-group\n    {:key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :radio-group-vertical [{:keys [key label params unknowable]}]\n  (radio-button-group-vertical\n    {:key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :key (name key)\n                   :input-ref (input-cursor key)\n                   :onChange #(publish (input-change key) %))))\n\n#_(defmethod make-widget :bci-numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :input-ref (input-cursor key)\n                   :max :biopsy-cores-taken\n                   :onChange #(publish (input-change key) %))))\n\n(defmethod make-widget :select [{:keys [key params]}]\n  (picker {:key key :on-change #(publish (input-change key) %)} (:menu params)))\n\n(defn build-input-widgets-in [old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key label widget-type widget-params unknowable]} g]\n              (-> m\n                  (assoc-in [:widget key] (make-widget {:key        key\n                                                        :label      label\n                                                        :type       widget-type\n                                                        :params     widget-params\n                                                        :unknowable unknowable}))\n                  (assoc-in [:label key] label)\n                  )))\n          old-wiring groups))\n\n(defn add-input-group\n  \"Adds the db refs on key :cursor, and mutation refs on key :change to the set of known inputs.\"\n  [ref old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key read-only write-only]} g]\n              (-> m\n                  (assoc-in [:cursor key] (when-not write-only (rum/cursor-in ref [:widgets key])))\n                  (assoc-in [:change key] (when-not read-only (->Topic key event-bus)))\n                  )))\n          old-wiring groups))\n\n;;\n;; Create input widgets and load into state just once (per browser load)\n;;\n;; todo: This process a bit naff as the app-state contains react components that cannot be shown or printed or reloaded.\n;; Main benefit is that we can configure inputs using data (currently using state.config).\n;;\n(defonce once-only-guard (swap! rtdb assoc :input-config (add-input-group rtdb {} input-groups)))\n\n; add widgets\n(swap! rtdb update :input-config #(build-input-widgets-in % input-groups))\n\n(defn live-keys-by-model\n  \"The (maximal) set of input-group keys present in a model. This is derived directly from the model\n  field in the input configuration.\"\n  [model]\n  (into #{} (map :key (filter #(and ((:models %) model)) input-groups))))\n(comment\n  (live-keys-by-model \"prostate\")\n  ;=>\n  #_#{:gleason :age :h-admissions :biopsy50 :psa :plot-style :biopsy-done\n      :charlson-comorbidity :primary-rx :t-stage :grade-group :brca})\n\n\n\n\n"]}