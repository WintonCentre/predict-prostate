{"version":3,"sources":["predict_prostate/state/load_config.cljs"],"mappings":";AAoBA,AAAKA,oDAAe,6CAAA,7CAACC,gFAAQ,AAACC,4CAAI,WAAKC;AAAL,AAAA,0FAAS,AAAA,kFAAMA,GAAGA;GAAIC;AAExD,8CAAA,AAAAC,oBAAAC,oBAAA,tFAAUM;mCAAVL,SAAkEW;AAAlE,AAAA,IAAAV,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAwCM;YAAxC,AAAAJ,4CAAAF,eAAA,nEAA4CO;WAA5C,AAAAL,4CAAAF,eAAA,lEAAkDQ;aAAlD,AAAAN,4CAAAF,eAAA,pEAAuDS;AAAvD,AAAA,AAAA,OAAAN,6BAAA,MAAA,KAAA,CACQ,wGAAA,xGAACQ,0HAAyBL,IAAIC,MAAMC,KAAKC,OAAOC;;yBADxDX;IAAkEW;;;;EAAAA;;oCAAlEX,SAAkEW;;;IAAlEX;IAAkEW;0BAAlEX,SAAkEW;;;;;CAAlE,4GAAA,zBAAoBL;AAGpB,GAAA,QAAAO,6CAAAC,mDAAAC,+DAAAC;AAAA;AAAA,AAAA,iDAAA,iBAAAC,6BAAA,AAAAC,6CAAA,5IAAUQ;IAAVP,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAnB,4CAAA,mCAAA,gEAAA,iBAAAoB,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,qCAAA,eAAA,qDAAA,4DAAAH,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAK,2FAAA,4DAAA,WAAiChB;AAAjC,AACE,OAACL,4CAAQK;;AAEX,AAAAgB,2FAAA,0DAAA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA1B,4BAAA0B;aAAA,AAAAzB,4CAAAyB,eAAA,pEAAwClB;AAAxC,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,mEAAA,OAAA,gEAAA,uBACyDA;;AAEzD,+CAAA,/CAAMmB,sGAAWrB;AAAjB,AAAwB,2DAAA,PAAKA;;AAY7B,AAAAkB,2FAAA,iEAAA,WAAAI;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA7B,4BAAA6B;UAAA,AAAA5B,4CAAA4B,eAAA,jEAA6CxB;YAA7C,AAAAJ,4CAAA4B,eAAA,nEAAiDvB;aAAjD,AAAAL,4CAAA4B,eAAA,pEAAuDrB;iBAAvD,AAAAP,4CAAA4B,eAAA,xEAA8DC;UAA9D,AAAA7B,4CAAA4B,eAAA,jEAAyEE;AAAzE,AACE,sDAAA,2CAAA,wDAAA,sEAAA,8EAAA,OAAA,iFAAA,uDAAA,mFAAA,xgBAACC,8IACqB3B,oEACAC,mJAGA,AAAC2B,iBAAOzB,2DACRuB,+DACA,AAACG,gBAAM1B,yEACPsB,mBACpB,AAACK,6CAAa9B;;AAGlB,AAAAmB,2FAAA,mEAAA,WAAAY;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAArC,4BAAAqC;UAAA,AAAApC,4CAAAoC,eAAA,jEAA6CN;UAA7C,AAAA9B,4CAAAoC,eAAA,jEAAiDhC;YAAjD,AAAAJ,4CAAAoC,eAAA,nEAAqD/B;aAArD,AAAAL,4CAAAoC,eAAA,pEAA2D7B;iBAA3D,AAAAP,4CAAAoC,eAAA,xEAAkEP;AAAlE,AACE,6DAAA,2CAAA,uDAAA,wDAAA,oHAAA,8EAAA,OAAA,+DAAA,xdAACQ,oJACqBP,wDACA1B,oEACA,AAACsB,6CAAUrB,oJAEXE,wEACAsB,mBACpB,AAACK,6CAAa9B;;AAElB,AAAAmB,2FAAA,mFAAA,WAAAe;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAxC,4BAAAwC;UAAA,AAAAvC,4CAAAuC,eAAA,jEAAsDT;UAAtD,AAAA9B,4CAAAuC,eAAA,jEAA0DnC;YAA1D,AAAAJ,4CAAAuC,eAAA,nEAA8DlC;aAA9D,AAAAL,4CAAAuC,eAAA,pEAAoEhC;iBAApE,AAAAP,4CAAAuC,eAAA,xEAA2EV;AAA3E,AACE,sEAAA,2CAAA,uDAAA,wEAAA,oHAAA,8EAAA,OAAA,+DAAA,jfAACW,6JACqBV,wDACA,AAACW,eAAKrC,qEACN,AAACsB,6CAAUrB,oJAEXE,wEACAsB,mBACpB,AAACK,6CAAa9B;;AAElB,AAAAmB,2FAAA,uEAAA,WAAAmB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA5C,4BAAA4C;UAAA,AAAA3C,4CAAA2C,eAAA,jEAA+CvC;aAA/C,AAAAJ,4CAAA2C,eAAA,pEAAmDpC;AAAnD,AACE,OAACqC,uCAAc,4DAAA,0HAAA,gHAAA,6DAAA,WAAAC,9WAACC,qDAAMvC,2DACA,AAACkC,eAAKrC,qHACA,AAAC8B,6CAAa9B;AAF3B,AAGa,8EAAAyC,vEAACE,qBAAQ,AAACC,6CAAa5C;;;AAQrD,AAAAmB,2FAAA,yDAAA,WAAA0B;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAnD,4BAAAmD;UAAA,AAAAlD,4CAAAkD,eAAA,jEAAwC9C;aAAxC,AAAAJ,4CAAAkD,eAAA,pEAA4C3C;AAA5C,AACE,iDAAA,2CAAA,wDAAA,+DAAA,WAAA4C,vNAACC,yIAAahD;AAAd,AAA8B,8EAAA+C,vEAACJ,qBAAQ,AAACC,6CAAa5C;WAAS,AAAA,kFAAOG;;AAEvE,4DAAA,5DAAM8C,gIAAwBC,WAAWC;AAAzC,AACE,OAACC,+CAAO,WAAKC,EAAEhE;AAAP,AACE,IAAAiE,aAA+DjE;IAA/DiE,iBAAA,AAAA3D,4BAAA2D;UAAA,AAAA1D,4CAAA0D,eAAA,jEAActD;YAAd,AAAAJ,4CAAA0D,eAAA,nEAAkBrD;kBAAlB,AAAAL,4CAAA0D,eAAA,zEAAwBC;oBAAxB,AAAA3D,4CAAA0D,eAAA,3EAAoCE;iBAApC,AAAA5D,4CAAA0D,eAAA,xEAAkD7B;AAAlD,6CACM4B,nBACA,qBAAA,mFAAA,xGAACI,iKAAkBzD,YAAK,6EAAA,2CAAA,wDAAA,6DAAA,iEAAA,sEAAA,pXAACmB,4KAAyBnB,2DACAC,2DACAsD,oEACAC,+EACA/B,5nBAClD,ipBAAA,mFAAA,7tBAACgC,oxBAAiBzD,YAAKC;GAE/BiD,WAAWC;;AAErB;;;mDAAA,nDAAMO,8GAEHhC,IAAI1B;AAFP,AAGE,IAAM4D,UAAQ,CAAC1E,kFAAAA,uFAAAA,PAAec,mEAAAA;IAA9B2D,aAC0CC;IAD1CD,iBAAA,AAAAhE,4BAAAgE;kBAAA,AAAA/D,4CAAA+D,eAAA,zEACcJ;oBADd,AAAA3D,4CAAA+D,eAAA,3EAC0BH;AAD1B,AAEE,OAACrC,6EAAY,6DAAA,mHAAA,sEAAA,tPAACuB,qDAAMkB,6DACML,sHACEC,iEACH9B;;AAE7B;;;qDAAA,rDAAMmC,kHAEHC,IAAIZ,WAAWC;AAFlB,AAGE,OAACC,+CAAO,WAAKC,EAAEhE;AAAP,AACE,IAAA0E,aAAyC1E;IAAzC0E,iBAAA,AAAApE,4BAAAoE;UAAA,AAAAnE,4CAAAmE,eAAA,jEAAc/D;gBAAd,AAAAJ,4CAAAmE,eAAA,vEAAkBC;iBAAlB,AAAApE,4CAAAmE,eAAA,xEAA4BE;AAA5B,6CACMZ,nBACA,qBAAA,mFAAA,xGAACI,iKAAkBzD,YAAK,8BAAA,KAAA,jBAAUiE,iBAAW,uBAAA,mFAAA,1GAACC,mBAAcJ,kJAAc9D,/YAC1E,8ZAAA,mFAAA,1eAACyD,oiBAAkBzD,YAAK,6BAAA,KAAA,hBAAUgE,gBAAU,AAACG,wBAAQnE,IAAIoE;GAEjElB,WAAWC;;AAQrB,GAAA,QAAA7C,6CAAAC,mDAAAC,+DAAA6D;AAAA;AAAA,AAAA,AAASC,qDAAgB,wGAAA,xGAACC,mDAAMC,qCAAKC,sFAAoB,wFAAA,xFAACZ,mDAAgBW,wEAAQlF;;AAGlF,yGAAA,sEAAA,WAAAoF,1LAACH,mDAAMC,qCAAKG;AAAZ,AAAkC,iEAAAD,1DAACzB,2EAAyB3D;;AAE5D;;;;wDAAA,xDAAMsF,wHAGHC;AAHH,AAIE,oDAAA,7CAAC1F,+EAAS,4CAAA,5CAACC,gGAAS,+CAAA,WAAA0F,1DAACC;AAAD,AAAc,IAAAC,eAAC,AAAA,wFAAAF;AAAD,AAAA,QAAAE,6CAAAA,oDAAAA,TAAaH,gCAAAA;GAAQvF;;AACzD","names":["predict-prostate.state.load-config/widget-options","cljs.core.into","cljs.core.map","g","predict-prostate.state.config/input-groups","rum.core/lazy-build","rum.core/build-defc","p__55669","map__55670","cljs.core/--destructure-map","cljs.core.get","daiquiri.core/create-element","predict-prostate.state.load-config/default","rum.core/static","key","label","type","params","extra","cljs.core.pr_str","js/predict-prostate","js/predict-prostate.state","js/predict-prostate.state.load-config","js/predict-prostate.state.load-config.make-widget","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","fexpr__55675","cljs.core/MultiFn","cljs.core.symbol","predict-prostate.state.load-config/make-widget","p__55678","map__55679","predict-prostate.state.load-config/rbg-label","p__55682","map__55683","unknowable","ttt","predict-prostate.components.button/information","cljs.core/second","cljs.core/first","predict-prostate.state.run-time/input-cursor","p__55685","map__55686","predict-prostate.components.button/radio-button-group","p__55688","map__55689","predict-prostate.components.button/radio-button-group-vertical","cljs.core/name","p__55692","map__55693","wc-rum-lib.numeric-input/numeric-input","p1__55691#","cljs.core.assoc","pubsub.feeds/publish","predict-prostate.state.run-time/input-change","p__55701","map__55702","p1__55699#","predict-prostate.components.select/picker","predict-prostate.state.load-config/build-input-widgets-in","old-wiring","groups","cljs.core.reduce","m","map__55713","widget-type","widget-params","cljs.core/assoc-in","predict-prostate.state.load-config/render-widget","map__55728","options","predict-prostate.state.load-config/add-input-group","ref","map__55740","read-only","write-only","rum.core/cursor-in","pubsub.feeds/->Topic","predict-prostate.state.run-time/event-bus","js/predict-prostate.state.load-config.once-only-guard","predict-prostate.state.load-config/once-only-guard","cljs.core.swap_BANG_","predict-prostate.state.run-time/rtdb","cljs.core/assoc","p1__55754#","cljs.core/update","predict-prostate.state.load-config/live-keys-by-model","model","p1__55757#","cljs.core.filter","fexpr__55762"],"sourcesContent":["(ns predict-prostate.state.load-config\n  (:require\n    [rum.core :as rum]\n    [pubsub.feeds :refer [->Topic publish subscribe unsubscribe]]\n    [predict-prostate.state.config :refer [input-groups]]\n    [predict-prostate.state.run-time :refer [rtdb\n                                             input-cursor\n                                             input-cursors\n                                             input-change\n                                             estimates\n                                             event-bus\n                                             ]]\n\n    [predict-prostate.components.button :refer [radio-button-group radio-button-group-vertical information]]\n    [predict-prostate.components.select :refer [picker]]\n    [wc-rum-lib.numeric-input :refer [numeric-input]]\n    ;[predict-prostate.components.numeric-input :refer [numeric-input]]\n    ))\n\n; Make a map of all the widget group options\n(def widget-options (into {} (map (fn [g] [(:key g) g]) input-groups)))\n\n(rum/defc default < rum/static [{:keys [key label type params]} & extra]\n  [:div (pr-str \"Unknown widget \" key label type params extra)])\n\n(defmulti make-widget :type)\n\n(defmethod make-widget :default [params]\n  (default params))\n\n(defmethod make-widget :string [{:keys [params]}]\n  [:div {:style {:padding-top \"10px\" :font-size \"16px\"}} params])\n\n(defn rbg-label [label] (str label \" radio button group\"))\n\n;; (comment\n;;   (->Input-group :ethnicity\n;;                  \"Ethnic Origin\"\n;;                  :information\n;;                  nil\n;;                  false false true\n;;                  :prp\n;;                  #{\"prostate\" \"prostate-release\"}\n;;                  \"See FAQs\"))\n\n(defmethod make-widget :information [{:keys [key label params unknowable ttt]}]\n  (information\n    {:key               key\n     :aria-label        label\n     :aria-described-by \"todo\"\n     ;:values            params\n     :values            (second params)\n     :ttt               ttt\n     :ttt-key           (first params)\n     :unknowable        unknowable}\n    (input-cursor key))\n  )\n\n(defmethod make-widget :radio-group [{:keys [ttt key label params unknowable]}]\n  (radio-button-group\n    {:ttt               ttt\n     :key               key\n     :aria-label        (rbg-label label)\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :radio-group-vertical [{:keys [ttt key label params unknowable]}]\n  (radio-button-group-vertical\n    {:ttt               ttt\n     :key               (name key)\n     :aria-label        (rbg-label label)\n     :aria-described-by \"todo\"\n     :values            params\n     :unknowable        unknowable}\n    (input-cursor key)))\n\n(defmethod make-widget :numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :key (name key)\n                   :input-ref (input-cursor key)\n                   :onChange #(publish (input-change key) %))))\n\n#_(defmethod make-widget :bci-numeric-input [{:keys [key params]}]\n  (numeric-input (assoc params\n                   :input-ref (input-cursor key)\n                   :max :biopsy-cores-taken\n                   :onChange #(publish (input-change key) %))))\n\n(defmethod make-widget :select [{:keys [key params]}]\n  (picker {:key key :on-change #(publish (input-change key) %)} (:menu params)))\n\n(defn build-input-widgets-in [old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key label widget-type widget-params unknowable]} g]\n              (-> m\n                  (assoc-in [:widget key] (make-widget {:key        key\n                                                        :label      label\n                                                        :type       widget-type\n                                                        :params     widget-params\n                                                        :unknowable unknowable}))\n                  (assoc-in [:label key] label)\n                  )))\n          old-wiring groups))\n\n(defn render-widget\n  \"We're now rendering widgets at use rather than at initialisation.\"\n  [ttt key]\n  (let [options (widget-options key)\n        {:keys [widget-type widget-params]} options]\n    (make-widget (assoc options\n                        :type widget-type\n                        :params widget-params\n                        :ttt ttt))))\n\n(defn add-input-group\n  \"Adds the db refs on key :cursor, and mutation refs on key :change to the set of known inputs.\"\n  [ref old-wiring groups]\n  (reduce (fn [m g]\n            (let [{:keys [key read-only write-only]} g]\n              (-> m\n                  (assoc-in [:cursor key] (when-not write-only (rum/cursor-in ref [:widgets key])))\n                  (assoc-in [:change key] (when-not read-only (->Topic key event-bus)))\n                  )))\n          old-wiring groups))\n\n;;\n;; Create input widgets and load into state just once (per browser load)\n;;\n;; todo: This process a bit naff as the app-state contains react components that cannot be shown or printed or reloaded.\n;; Main benefit is that we can configure inputs using data (currently using state.config).\n;;\n(defonce once-only-guard (swap! rtdb assoc :input-config (add-input-group rtdb {} input-groups)))\n\n; add widgets\n(swap! rtdb update :input-config #(build-input-widgets-in % input-groups))\n\n(defn live-keys-by-model\n  \"The (maximal) set of input-group keys present in a model. This is derived directly from the model\n  field in the input configuration.\"\n  [model]\n  (into #{} (map :key (filter #(and ((:models %) model)) input-groups))))\n(comment\n  (live-keys-by-model \"prostate\")\n  ;=>\n  #_#{:gleason :age :h-admissions :biopsy50 :psa :plot-style :biopsy-done\n      :charlson-comorbidity :primary-rx :t-stage :grade-group :brca})\n\n\n\n\n"]}